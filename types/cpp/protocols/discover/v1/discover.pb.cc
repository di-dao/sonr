// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols/discover/v1/discover.proto

#include "protocols/discover/v1/discover.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocols {
namespace discover {
namespace v1 {
constexpr LobbyMessage::LobbyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_(nullptr)
  , metadata_(nullptr){}
struct LobbyMessageDefaultTypeInternal {
  constexpr LobbyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LobbyMessageDefaultTypeInternal() {}
  union {
    LobbyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LobbyMessageDefaultTypeInternal _LobbyMessage_default_instance_;
constexpr VisibilityRequest::VisibilityRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , visibility_(0)
{}
struct VisibilityRequestDefaultTypeInternal {
  constexpr VisibilityRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VisibilityRequestDefaultTypeInternal() {}
  union {
    VisibilityRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VisibilityRequestDefaultTypeInternal _VisibilityRequest_default_instance_;
constexpr VisibilityResponse::VisibilityResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false)
  , visibility_(0)
{}
struct VisibilityResponseDefaultTypeInternal {
  constexpr VisibilityResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VisibilityResponseDefaultTypeInternal() {}
  union {
    VisibilityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VisibilityResponseDefaultTypeInternal _VisibilityResponse_default_instance_;
}  // namespace v1
}  // namespace discover
}  // namespace protocols
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocols_2fdiscover_2fv1_2fdiscover_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protocols_2fdiscover_2fv1_2fdiscover_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocols_2fdiscover_2fv1_2fdiscover_2eproto = nullptr;

const uint32_t TableStruct_protocols_2fdiscover_2fv1_2fdiscover_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::LobbyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::LobbyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::LobbyMessage, peer_),
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::LobbyMessage, message_),
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::LobbyMessage, metadata_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::VisibilityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::VisibilityRequest, s_name_),
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::VisibilityRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::VisibilityRequest, visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::VisibilityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::VisibilityResponse, success_),
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::VisibilityResponse, error_),
  PROTOBUF_FIELD_OFFSET(::protocols::discover::v1::VisibilityResponse, visibility_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::protocols::discover::v1::LobbyMessage)},
  { 12, -1, -1, sizeof(::protocols::discover::v1::VisibilityRequest)},
  { 21, -1, -1, sizeof(::protocols::discover::v1::VisibilityResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocols::discover::v1::_LobbyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocols::discover::v1::_VisibilityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocols::discover::v1::_VisibilityResponse_default_instance_),
};

const char descriptor_table_protodef_protocols_2fdiscover_2fv1_2fdiscover_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$protocols/discover/v1/discover.proto\022\025"
  "protocols.discover.v1\032\024common/v1/core.pr"
  "oto\"\217\001\n\014LobbyMessage\022#\n\004peer\030\001 \001(\0132\017.com"
  "mon.v1.PeerR\004peer\022\035\n\007message\030\002 \001(\tH\000R\007me"
  "ssage\210\001\001\022/\n\010metadata\030\003 \001(\0132\023.common.v1.M"
  "etadataR\010metadataB\n\n\010_message\"\221\002\n\021Visibi"
  "lityRequest\022\025\n\006s_name\030\001 \001(\tR\005sName\022\035\n\npu"
  "blic_key\030\002 \001(\014R\tpublicKey\022S\n\nvisibility\030"
  "\003 \001(\01623.protocols.discover.v1.Visibility"
  "Request.VisibilityR\nvisibility\"q\n\nVisibi"
  "lity\022\032\n\026VISIBILITY_UNSPECIFIED\020\000\022\030\n\024VISI"
  "BILITY_AVAILABLE\020\001\022\025\n\021VISIBILITY_HIDDEN\020"
  "\002\022\026\n\022VISIBILITY_FRIENDS\020\003\"\215\002\n\022Visibility"
  "Response\022\030\n\007success\030\001 \001(\010R\007success\022\024\n\005er"
  "ror\030\002 \001(\tR\005error\022T\n\nvisibility\030\003 \001(\01624.p"
  "rotocols.discover.v1.VisibilityResponse."
  "VisibilityR\nvisibility\"q\n\nVisibility\022\032\n\026"
  "VISIBILITY_UNSPECIFIED\020\000\022\030\n\024VISIBILITY_A"
  "VAILABLE\020\001\022\025\n\021VISIBILITY_HIDDEN\020\002\022\026\n\022VIS"
  "IBILITY_FRIENDS\020\003B\"Z github.com/sonr-io/"
  "core/discoverb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_deps[1] = {
  &::descriptor_table_common_2fv1_2fcore_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto = {
  false, false, 821, descriptor_table_protodef_protocols_2fdiscover_2fv1_2fdiscover_2eproto, "protocols/discover/v1/discover.proto", 
  &descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_once, descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_protocols_2fdiscover_2fv1_2fdiscover_2eproto::offsets,
  file_level_metadata_protocols_2fdiscover_2fv1_2fdiscover_2eproto, file_level_enum_descriptors_protocols_2fdiscover_2fv1_2fdiscover_2eproto, file_level_service_descriptors_protocols_2fdiscover_2fv1_2fdiscover_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_getter() {
  return &descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protocols_2fdiscover_2fv1_2fdiscover_2eproto(&descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto);
namespace protocols {
namespace discover {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VisibilityRequest_Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto);
  return file_level_enum_descriptors_protocols_2fdiscover_2fv1_2fdiscover_2eproto[0];
}
bool VisibilityRequest_Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VisibilityRequest_Visibility VisibilityRequest::VISIBILITY_UNSPECIFIED;
constexpr VisibilityRequest_Visibility VisibilityRequest::VISIBILITY_AVAILABLE;
constexpr VisibilityRequest_Visibility VisibilityRequest::VISIBILITY_HIDDEN;
constexpr VisibilityRequest_Visibility VisibilityRequest::VISIBILITY_FRIENDS;
constexpr VisibilityRequest_Visibility VisibilityRequest::Visibility_MIN;
constexpr VisibilityRequest_Visibility VisibilityRequest::Visibility_MAX;
constexpr int VisibilityRequest::Visibility_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VisibilityResponse_Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto);
  return file_level_enum_descriptors_protocols_2fdiscover_2fv1_2fdiscover_2eproto[1];
}
bool VisibilityResponse_Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VisibilityResponse_Visibility VisibilityResponse::VISIBILITY_UNSPECIFIED;
constexpr VisibilityResponse_Visibility VisibilityResponse::VISIBILITY_AVAILABLE;
constexpr VisibilityResponse_Visibility VisibilityResponse::VISIBILITY_HIDDEN;
constexpr VisibilityResponse_Visibility VisibilityResponse::VISIBILITY_FRIENDS;
constexpr VisibilityResponse_Visibility VisibilityResponse::Visibility_MIN;
constexpr VisibilityResponse_Visibility VisibilityResponse::Visibility_MAX;
constexpr int VisibilityResponse::Visibility_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LobbyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<LobbyMessage>()._has_bits_);
  static const ::common::v1::Peer& peer(const LobbyMessage* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::v1::Metadata& metadata(const LobbyMessage* msg);
};

const ::common::v1::Peer&
LobbyMessage::_Internal::peer(const LobbyMessage* msg) {
  return *msg->peer_;
}
const ::common::v1::Metadata&
LobbyMessage::_Internal::metadata(const LobbyMessage* msg) {
  return *msg->metadata_;
}
void LobbyMessage::clear_peer() {
  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
void LobbyMessage::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
LobbyMessage::LobbyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocols.discover.v1.LobbyMessage)
}
LobbyMessage::LobbyMessage(const LobbyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_peer()) {
    peer_ = new ::common::v1::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::common::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocols.discover.v1.LobbyMessage)
}

inline void LobbyMessage::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&peer_)) + sizeof(metadata_));
}

LobbyMessage::~LobbyMessage() {
  // @@protoc_insertion_point(destructor:protocols.discover.v1.LobbyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LobbyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_;
  if (this != internal_default_instance()) delete metadata_;
}

void LobbyMessage::ArenaDtor(void* object) {
  LobbyMessage* _this = reinterpret_cast< LobbyMessage* >(object);
  (void)_this;
}
void LobbyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobbyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LobbyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.discover.v1.LobbyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Peer peer = 1 [json_name = "peer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocols.discover.v1.LobbyMessage.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Metadata metadata = 3 [json_name = "metadata"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.discover.v1.LobbyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Peer peer = 1 [json_name = "peer"];
  if (this->_internal_has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  // optional string message = 2 [json_name = "message"];
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocols.discover.v1.LobbyMessage.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .common.v1.Metadata metadata = 3 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.discover.v1.LobbyMessage)
  return target;
}

size_t LobbyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.discover.v1.LobbyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 2 [json_name = "message"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .common.v1.Peer peer = 1 [json_name = "peer"];
  if (this->_internal_has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .common.v1.Metadata metadata = 3 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LobbyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbyMessage::GetClassData() const { return &_class_data_; }

void LobbyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LobbyMessage *>(to)->MergeFrom(
      static_cast<const LobbyMessage &>(from));
}


void LobbyMessage::MergeFrom(const LobbyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocols.discover.v1.LobbyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_peer()) {
    _internal_mutable_peer()->::common::v1::Peer::MergeFrom(from._internal_peer());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::common::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbyMessage::CopyFrom(const LobbyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.discover.v1.LobbyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyMessage::IsInitialized() const {
  return true;
}

void LobbyMessage::InternalSwap(LobbyMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobbyMessage, metadata_)
      + sizeof(LobbyMessage::metadata_)
      - PROTOBUF_FIELD_OFFSET(LobbyMessage, peer_)>(
          reinterpret_cast<char*>(&peer_),
          reinterpret_cast<char*>(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_getter, &descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_once,
      file_level_metadata_protocols_2fdiscover_2fv1_2fdiscover_2eproto[0]);
}

// ===================================================================

class VisibilityRequest::_Internal {
 public:
};

VisibilityRequest::VisibilityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocols.discover.v1.VisibilityRequest)
}
VisibilityRequest::VisibilityRequest(const VisibilityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  visibility_ = from.visibility_;
  // @@protoc_insertion_point(copy_constructor:protocols.discover.v1.VisibilityRequest)
}

inline void VisibilityRequest::SharedCtor() {
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
visibility_ = 0;
}

VisibilityRequest::~VisibilityRequest() {
  // @@protoc_insertion_point(destructor:protocols.discover.v1.VisibilityRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VisibilityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VisibilityRequest::ArenaDtor(void* object) {
  VisibilityRequest* _this = reinterpret_cast< VisibilityRequest* >(object);
  (void)_this;
}
void VisibilityRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisibilityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VisibilityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.discover.v1.VisibilityRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_name_.ClearToEmpty();
  public_key_.ClearToEmpty();
  visibility_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisibilityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocols.discover.v1.VisibilityRequest.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 2 [json_name = "publicKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocols.discover.v1.VisibilityRequest.Visibility visibility = 3 [json_name = "visibility"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::protocols::discover::v1::VisibilityRequest_Visibility>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisibilityRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.discover.v1.VisibilityRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocols.discover.v1.VisibilityRequest.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // bytes public_key = 2 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  // .protocols.discover.v1.VisibilityRequest.Visibility visibility = 3 [json_name = "visibility"];
  if (this->_internal_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.discover.v1.VisibilityRequest)
  return target;
}

size_t VisibilityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.discover.v1.VisibilityRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // bytes public_key = 2 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // .protocols.discover.v1.VisibilityRequest.Visibility visibility = 3 [json_name = "visibility"];
  if (this->_internal_visibility() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisibilityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VisibilityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisibilityRequest::GetClassData() const { return &_class_data_; }

void VisibilityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VisibilityRequest *>(to)->MergeFrom(
      static_cast<const VisibilityRequest &>(from));
}


void VisibilityRequest::MergeFrom(const VisibilityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocols.discover.v1.VisibilityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_visibility() != 0) {
    _internal_set_visibility(from._internal_visibility());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisibilityRequest::CopyFrom(const VisibilityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.discover.v1.VisibilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibilityRequest::IsInitialized() const {
  return true;
}

void VisibilityRequest::InternalSwap(VisibilityRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
  swap(visibility_, other->visibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisibilityRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_getter, &descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_once,
      file_level_metadata_protocols_2fdiscover_2fv1_2fdiscover_2eproto[1]);
}

// ===================================================================

class VisibilityResponse::_Internal {
 public:
};

VisibilityResponse::VisibilityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocols.discover.v1.VisibilityResponse)
}
VisibilityResponse::VisibilityResponse(const VisibilityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&success_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:protocols.discover.v1.VisibilityResponse)
}

inline void VisibilityResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&success_)) + sizeof(visibility_));
}

VisibilityResponse::~VisibilityResponse() {
  // @@protoc_insertion_point(destructor:protocols.discover.v1.VisibilityResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VisibilityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VisibilityResponse::ArenaDtor(void* object) {
  VisibilityResponse* _this = reinterpret_cast< VisibilityResponse* >(object);
  (void)_this;
}
void VisibilityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisibilityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VisibilityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.discover.v1.VisibilityResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&success_)) + sizeof(visibility_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisibilityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocols.discover.v1.VisibilityResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocols.discover.v1.VisibilityResponse.Visibility visibility = 3 [json_name = "visibility"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::protocols::discover::v1::VisibilityResponse_Visibility>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisibilityResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.discover.v1.VisibilityResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocols.discover.v1.VisibilityResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // .protocols.discover.v1.VisibilityResponse.Visibility visibility = 3 [json_name = "visibility"];
  if (this->_internal_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.discover.v1.VisibilityResponse)
  return target;
}

size_t VisibilityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.discover.v1.VisibilityResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .protocols.discover.v1.VisibilityResponse.Visibility visibility = 3 [json_name = "visibility"];
  if (this->_internal_visibility() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisibilityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VisibilityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisibilityResponse::GetClassData() const { return &_class_data_; }

void VisibilityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VisibilityResponse *>(to)->MergeFrom(
      static_cast<const VisibilityResponse &>(from));
}


void VisibilityResponse::MergeFrom(const VisibilityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocols.discover.v1.VisibilityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_visibility() != 0) {
    _internal_set_visibility(from._internal_visibility());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisibilityResponse::CopyFrom(const VisibilityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.discover.v1.VisibilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibilityResponse::IsInitialized() const {
  return true;
}

void VisibilityResponse::InternalSwap(VisibilityResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisibilityResponse, visibility_)
      + sizeof(VisibilityResponse::visibility_)
      - PROTOBUF_FIELD_OFFSET(VisibilityResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisibilityResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_getter, &descriptor_table_protocols_2fdiscover_2fv1_2fdiscover_2eproto_once,
      file_level_metadata_protocols_2fdiscover_2fv1_2fdiscover_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace discover
}  // namespace protocols
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocols::discover::v1::LobbyMessage* Arena::CreateMaybeMessage< ::protocols::discover::v1::LobbyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::discover::v1::LobbyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::discover::v1::VisibilityRequest* Arena::CreateMaybeMessage< ::protocols::discover::v1::VisibilityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::discover::v1::VisibilityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::discover::v1::VisibilityResponse* Arena::CreateMaybeMessage< ::protocols::discover::v1::VisibilityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::discover::v1::VisibilityResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
