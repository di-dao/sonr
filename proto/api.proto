syntax = "proto3";

package data;

import "data.proto";
import "error.proto";
import "peer.proto";
import "user.proto";

// Require Go Package
option go_package = "/data";

// Method enum for Node to Perform
enum Action {
  PING = 0;         // Ping Node
  LOCATION = 1;     // Get Location
  URL_LINK = 2;     // Get URL Link
  PAUSE = 3;        // Pause Node
  RESUME = 4;       // Resume Node
  STOP = 5;         // Stop Node
  RESTART = 6;      // Restart Node
  LIST_LINKERS = 7; // List Linkers
}

// ActionRequest performs action on Node
message ActionRequest {
  Action action = 1; // required action
  string data = 2;   // optional data (String for URL)
}

// ActionResponse returns result of action
message ActionResponse {
  Action action = 1; // provided action
  bool success = 2;  // success or failure

  // Returned Data
  oneof data {
    Location location = 3;   // location of node
    URLLink urlLink = 4;     // URL Link of node
    Lifecycle lifecycle = 5; // current state of node
    Linkers linkers = 6;     // list of linkers
  }
}

// Message for Signing Request (Hmac Sha256)
message AuthRequest {
  // Value to be signed
  string sName = 1;    // SName combined with Device ID and Hashed
  string mnemonic = 2; // Mnemonic Hashed with private key for fingerprint
}

// Message for Signing Response (Hmac Sha256)
message AuthResponse {
  bool isSigned = 1; // If Values were Signed

  // Resulting Signed Values
  string signedPrefix = 2;      // Message for List of Bytes
  string signedFingerprint = 3; // Fingerprint Value
  string publicKey = 4;         // Base64 Encoded Public Key
  string givenSName = 5;        // Provided SName
  string givenMnemonic = 6;     // Provided Mnemonic
}

// First Message Sent with Device and API Keys
message InitializeRequest {
  Device device = 1;              // Users Device
  APIKeys apiKeys = 2;            // Client Keys
  optional LogLevel logLevel = 3; // Set Logging Config
  optional Options options = 4;   // Reset KeyPair for Migration
  Client client = 5;              // Client Type

  // Client Type
  enum Client {
    DART = 0; // Dart Client from Binded Framework
    RPC = 1;  // gRPC Client from Other Language
  }

  // Logging Details
  enum LogLevel {
    FATAL = 0;    // Only show FATAL Errors
    CRITICAL = 1; // Only show CRITICAL Errors
    WARNING = 2;  // Only show WARNING Errors
    DEBUG = 3;    // Show all Errors
    INFO = 4;     // Show all Errors
    NONE = 5;     // No Logging
  }

  // Keychain/Account Options
  message Options {
    optional bool isVerified = 1; // Is Account Verified on Frontend
    optional bool isPairing = 2;  // Is Device Pairing Enabled for Linkers
    optional bool resetKeys = 3;  // Reset KeyPair for Migration
    optional string mnemonic = 4; // Mnemonic for Fingerprint
  }
}

// Connection Message to Establish Sonr Host/API/Room
message ConnectionRequest {
  APIKeys apiKeys = 1;                        // Client Keys
  Location location = 2;                      // Current Runtime Location
  Contact contact = 3;                        // Users Contact Card
  InternetType type = 4;                      // Internet Connection Type
  optional HostOptions hostOptions = 5;       // Libp2p Host config
  optional ServiceOptions serviceOptions = 6; // Service Config
  bool isLinker = 7; // Is Linker Node and not a Full Peer

  // Internet Connection Type
  enum InternetType {
    OFFLINE = 0;  // No Internet Connection
    WIFI = 1;     // Wifi Connection
    MOBILE = 2;   // Mobile Connection
    ETHERNET = 3; // Ethernet Connection
  }

  // Libp2p Host Options
  message HostOptions {
    optional bool quicTransport = 1;    // Enable QUIC Transport
    optional bool httpTransport = 2;    // Enable HTTP Transport
    optional bool webrtcTransport = 3;  // Enable WebRTC Transport
    optional bool mdnsDiscovery = 4;    // Enable MDNS Discovery
    optional bool ipv4Only = 5;         // Enable IPv4 Only
    optional int32 listenPort = 6;      // Listen Port for Libp2p
    repeated IPAddress listenAddrs = 7; // List of Listen Addresses
  }

  // Service Configuration
  message ServiceOptions {
    optional bool textile = 1;    // Enable Textile Client and Threads
    optional bool mailbox = 2;    // Enable Mailbox
    optional bool buckets = 3;    // Enable Buckets
    optional bool push = 4;       // Enable Push Notifications
    optional bool autoUpdate = 5; // Enable Auto Update Events
    optional int32 olcRange = 6;  // OLC Range Value for Local Room (Default: 6)
  }

  // IP Address Interface
  message IPAddress {
    string name = 1;   // Name of Interface
    string value = 2;  // IP Address of Interface
    string mac = 3;    // Mac Address of Interface
    bool internal = 4; // Wether it is a Loopback Interface
    Family family = 5; // Address Family

    enum Family {
      IPV4 = 0; // IPv4 Address
      IPV6 = 1; // IPv6 Address
    }
  }
}

// Response from Connection Request
message ConnectionResponse {
  bool hostActive = 1;                    // True if Host is Active
  bool mdnsActive = 2;                    // True if MDNS is Active
  bool textileActive = 3;                 // True if Textile is Active
  Room localRoom = 4;                     // Local Room
  map<string, TextileThread> threads = 5; // ID, Thread

  // Textile Thread
  message TextileThread {
    string id = 1;        // ThreadID
    string multiaddr = 2; // Thread MultiAddr
    string key = 3;       // Thread Key
    string name = 4;      // Thread Name
  }
}

// Enum for Decision to Perform
enum Decision {
  ACCEPT = 0;  // Accept Invite
  DECLINE = 1; // Decline Invite
  IGNORE = 2;  // Ignore Invite
  CANCEL = 3;  // Cancel Invite
}

// Message for a Response to an Invite Request
message DecisionRequest {
  Decision decision = 1;    // Value to be Decided
  Payload payload = 2;      // Type of Transfer
  optional Member from = 3; // Users Peer Data
  Member to = 4;            // Receivers Peer Data
  Transfer transfer = 5;    // Attached Data
  Type type = 6;            // Type of Invite
  string protocol = 7;      // Protocol for Invite

  enum Type {
    NONE = 0;   // No Type
    LOCAL = 1;  // Local Transfer
    FLAT = 2;   // Flat Transfer
    REMOTE = 3; // Remote Transfer
  }
}

// Message for a Response to an DecisionRequest
message DecisionResponse {
  bool success = 1; // True if Decision was Successful
  string body = 2;  // Response Body
}

message DeviceRequest {
  Device device = 1; // Users Device
  Method method = 2; // Method to be Used
  string data = 3;   // Data to be Used (Optional) - URL or File

  enum Method {
    OPEN = 0;   // Open File or URL on Device
    GHOST = 1;  // Set Device as Ghost Mode
    ACTIVE = 2; // Set Device as Active Mode
    PUSH = 3;   // Push Data to Device
  }
}

// Message for DeviceRequest Response
message DeviceResponse {
  bool success = 1; // True if Device was Successful
  string body = 2;  // Response Body
}

//  Message for a LinkRequest
message LinkRequest {
  Type type = 1;       // Type of Link
  string shortID = 2;  // Short ID of Link
  Peer from = 3;       // Users Peer Data
  Peer to = 4;         // Receivers Peer Data
  Contact contact = 5; // Users Contact Card

  // Type of Link
  enum Type {
    NONE = 0;    // No Type
    RECEIVE = 1; // Receive Link
    SEND = 2;    // Send Link
    CANCEL = 3;  // Cancel Link
  }
}

// Message for Verification Response
message LinkResponse {
  bool success = 1;    // Result for Verification
  Type type = 2;       // Type of Link
  Device device = 3;   // Device used for Link
  Peer from = 4;       // Users Peer Data
  Peer to = 5;         // Receivers Peer Data
  Contact contact = 6; // Users Contact Card

  // Type of Link
  enum Type {
    NONE = 0;    // No Type
    RECEIVE = 1; // Receive Link
    SEND = 2;    // Send Link
    CANCEL = 3;  // Cancel Link
  }
}

// Invitation Message sent on RPC
message InviteRequest {
  Payload payload = 1;          // Type of Transfer
  optional Member from = 2;     // Users Member Data
  Member to = 3;                // Receivers Member Data
  Transfer transfer = 4;        // Attached Data
  Type type = 5;                // Type of Invite
  optional string protocol = 6; // Protocol for Invite

  enum Type {
    NONE = 0;   // No Type
    LOCAL = 1;  // Local Transfer
    DIRECT = 2; // Direct Transfer
    REMOTE = 3; // Remote Transfer
  }
}

// Reply Message sent on RPC
message InviteResponse {
  Decision decision = 1; // Peer Decision for Invite Request
  Payload payload = 2;   // Type of Transfer
  Member from = 3;       // Users Member Data
  Member to = 4;         // Receivers Member Data
  Transfer transfer = 5; // Attached Data
  Type type = 6;         // Type of Invite
  string protocol = 7;   // Protocol for Invite

  enum Type {
    NONE = 0;   // No Type
    LOCAL = 1;  // Local Transfer
    FLAT = 2;   // Flat Transfer
    REMOTE = 3; // Remote Transfer
  }
}

// Mailbox message handling
message MailboxRequest {
  string iD = 1;     // Unique ID for Message
  Action action = 2; // Action to be performed on Message

  // Mailbox Action
  enum Action {
    NONE = 0;   // No Action
    READ = 1;   // Read Message
    DELETE = 2; // Delete Message
  }
}

// Mailbox message handling
message MailboxResponse {
  string iD = 1;     // Unique ID for Message
  Action action = 2; // Action to be performed on Message
  bool success = 3;  // Successful Action

  // Mailbox Action
  enum Action {
    NONE = 0;   // No Action
    READ = 1;   // Read Message
    DELETE = 2; // Delete Message
  }
}

// Updated Peer Info Request
message UpdateRequest {
  oneof data {
    Peer.Properties properties = 1; // Updated Peer Properties
    Contact contact = 2;            // Users Updated Contact Card
    Position position = 3;          // Users updated Position
  }
}

// Message for Verification Request
message VerifyRequest {
  // Data is the original value
  oneof data {
    bytes bufferValue = 1; // Buffer Value
    string textValue = 2;  // Text Value
  }

  // Sig is the value to be verified against data
  oneof sig {
    bytes signedBuffer = 3; // Signed Buffer
    string signedText = 4;  // Signed Text
  }

  Type type = 5; // Either Signing New Mnemonic or Reading Existing

  // Request Type
  enum Type {
    VERIFY = 0; // Verify Signature
    READ = 1;   // Read Value
  }
}

// Message for Verification Response
message VerifyResponse {
  bool success = 1;     // Result for Verification
  string publicKey = 2; // Base64 Encoded Public Key
  string shortID = 3;   // Short ID generated from HMac and Device
}

// --------------------------- //
// -------- Events ----------- //
// --------------------------- //
// Message Sent after Completed Transfer
message CompleteEvent {
  Direction direction = 1; // Transfer Direction
  Transfer transfer = 2;   // Transfer Data

  // Traffic Direction of Session
  enum Direction {
    DEFAULT = 0;  // From Memory/Viewing
    INCOMING = 1; // Incoming Transfer
    OUTGOING = 2; // Outgoing Transfer
  }
}

// Message for Linking Response (Hmac Sha256)
message LinkEvent {
  bool success = 1;    // ID of Device to Link
  Device device = 2;   // Device of Peer to Link
  Contact contact = 3; // Contact Card of User
}

// Received Mail Event
message MailEvent {
  int32 createdAt = 1;      // Time of Creation
  string to = 2;            // Recipient
  InviteRequest invite = 3; // Invite Request
  string from = 4;          // Sender
  int32 readAt = 5;         // Time of Read
  bytes signature = 6;      // Signature for Verification
  string iD = 7;            // Unique ID for Message
}

// Transfer Progress Event
message ProgressEvent {
  int32 current = 1;   // Current Transfer Item
  int32 total = 2;     // Total Transfer Progress
  double progress = 3; // Current Transfer Progress
}

// Message Sent when peer messages Local Room
message RoomEvent {
  Room room = 1;       // Event Room Type
  string id = 2;       // Peer ID
  Member member = 3;   // User Information
  Subject subject = 4; // Local Event Subject

  // Local Type Event
  enum Subject {
    JOIN = 0;    // Peer has joined wants Info
    STANDBY = 1; // Peer is taking break from lobby
    RESUME = 2;  // Peer has rejoined Lobby
    UPDATE = 3;  // Peer has changed position
    LINKER = 4;  // Peer is a Linker
    EXIT = 5;    // Peer has Exited
  }
}

// Message for Status Update Event
message StatusEvent {
  Status value = 1; // Status Value
}

// Message for Sync Device Event - Sent from Primary Device
message SyncEvent {
  Room room = 1;         // Event Room Type
  Member member = 2;     // Member of Sync
  Contact contact = 3;   // Latest Contact Card of User
  int32 lastUpdated = 4; // Last Updated Time
  Subject subject = 5;   // Subject of Event

  // Local Type Event
  enum Subject {
    UPDATE = 0; // Peer has changed position
    EXIT = 1;   // Peer has Exited
  }
}

// Generic Request Message
message GenericRequest {
  Type type = 1;  // Type of Request
  bytes data = 2; // Data for Request

  enum Type {
    NONE = 0;   // Blank Request
    INVITE = 1; // Invite Request
  }
}

// Generic Response Message
message GenericResponse {
  Type type = 1;  // Type of Response
  bytes data = 2; // Data for Response

  enum Type {
    NONE = 0;       // Blank Response
    CONNECTION = 1; // Connection Response
    REPLY = 2;      // Invite Response
  }
}

// Generic Event Message
message GenericEvent {
  Type type = 1;  // Type of Event
  bytes data = 2; // Data for Event

  // Type of Event
  enum Type {
    BLANK = 0;    // Blank Event
    COMPLETE = 1; // Transfer Completed
    MAIL = 2;     // New Mailbox Invite
    PROGRESS = 3; // Transfer Progress
    ROOM = 4;     // Local Room Update
    LINK = 5;     // Linking Response
    SYNC = 6;     // Sync Response
  }
}

// -------------------------------- //
// -------- RPC Service ----------- //
// -------------------------------- //
// Blank Message for Nil Request
message NoRequest {}

// Blank Message for Nil Response
message NoResponse {}

// RPC Service with Equivalent Methods of a binded Node
service NodeService {
  // Initializes New Node
  rpc Initialize(InitializeRequest) returns (NoResponse) {}

  // Starts Method Host and Connects to Network
  rpc Connect(ConnectionRequest) returns (NoResponse) {}

  // Action method handles misceallaneous actions for node
  rpc Action(ActionRequest) returns (NoResponse) {}

  // Link Method Request for Data
  rpc Link(LinkRequest) returns (NoResponse) {}

  // Signing Method Request for Data
  rpc Sign(AuthRequest) returns (NoResponse) {}

  // Verification Method Request for Signed Data
  rpc Verify(VerifyRequest) returns (NoResponse) {}

  // Update Method proximity/direction and Notify Lobby
  rpc Update(UpdateRequest) returns (NoResponse) {}

  // Invite Method Processes Data and Sends Invite to Peer
  rpc Invite(InviteRequest) returns (NoResponse) {}

  // Respond Method to an Invite with Decision
  rpc Respond(DecisionRequest) returns (NoResponse) {}

  // Mail Method handles request for a message in Mailbox
  rpc Mail(MailboxRequest) returns (NoResponse) {}

  // Response Streams
  rpc CallAuthResponse(NoRequest) returns (stream AuthResponse) {}
  rpc CallActionResponse(NoRequest) returns (stream ActionResponse) {}
  rpc CallLinkResponse(NoRequest) returns (stream LinkResponse) {}
  rpc CallDecisionResponse(NoRequest) returns (stream DecisionResponse) {}
  rpc CallInviteResponse(NoRequest) returns (stream InviteResponse) {}
  rpc CallMailboxResponse(NoRequest) returns (stream MailboxResponse) {}
  rpc CallVerifyResponse(NoRequest) returns (stream VerifyResponse) {}

  // Events Streams
  rpc OnStatus(NoRequest) returns (stream StatusEvent) {}
  rpc OnLink(NoRequest) returns (stream LinkEvent) {}
  rpc OnRoom(NoRequest) returns (stream RoomEvent) {}
  rpc OnInvite(NoRequest) returns (stream InviteRequest) {}
  rpc OnReply(NoRequest) returns (stream InviteResponse) {}
  rpc OnMail(NoRequest) returns (stream MailEvent) {}
  rpc OnProgress(NoRequest) returns (stream ProgressEvent) {}
  rpc OnComplete(NoRequest) returns (stream CompleteEvent) {}
  rpc OnError(NoRequest) returns (stream ErrorEvent) {}
}
