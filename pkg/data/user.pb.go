// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: user.proto

package data

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyPair Signature Type
type Signature int32

const (
	Signature_RSA       Signature = 0 // RSA Encryption
	Signature_Ed25519   Signature = 1 // Ed25519 Encryption
	Signature_Secp256k1 Signature = 2 // Secp256k1 Encryption
	Signature_ECDSA     Signature = 3 // ECDSA Encryption
)

// Enum value maps for Signature.
var (
	Signature_name = map[int32]string{
		0: "RSA",
		1: "Ed25519",
		2: "Secp256k1",
		3: "ECDSA",
	}
	Signature_value = map[string]int32{
		"RSA":       0,
		"Ed25519":   1,
		"Secp256k1": 2,
		"ECDSA":     3,
	}
)

func (x Signature) Enum() *Signature {
	p := new(Signature)
	*p = x
	return p
}

func (x Signature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Signature) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[0].Descriptor()
}

func (Signature) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[0]
}

func (x Signature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Signature.Descriptor instead.
func (Signature) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

// Current Node Lifecycle State
type Lifecycle int32

const (
	Lifecycle_ACTIVE  Lifecycle = 0 // Resume or Start
	Lifecycle_PAUSED  Lifecycle = 1 // User Paused
	Lifecycle_STOPPED Lifecycle = 2 // User Quit
)

// Enum value maps for Lifecycle.
var (
	Lifecycle_name = map[int32]string{
		0: "ACTIVE",
		1: "PAUSED",
		2: "STOPPED",
	}
	Lifecycle_value = map[string]int32{
		"ACTIVE":  0,
		"PAUSED":  1,
		"STOPPED": 2,
	}
)

func (x Lifecycle) Enum() *Lifecycle {
	p := new(Lifecycle)
	*p = x
	return p
}

func (x Lifecycle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lifecycle) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[1].Descriptor()
}

func (Lifecycle) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[1]
}

func (x Lifecycle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Lifecycle.Descriptor instead.
func (Lifecycle) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

// Status is User Node Situation
type Status int32

const (
	Status_DEFAULT   Status = 0 // Default Status on Launch
	Status_IDLE      Status = 1 // Node has not been Authenticated
	Status_CONNECTED Status = 2 // Status after starting Host
	Status_AVAILABLE Status = 3 // Bootstrapped and Visible Locally
	Status_PENDING   Status = 4 // Awaiting Peer Authorization
	Status_INVITED   Status = 5 // Has received Invitation
	Status_TRANSFER  Status = 6 // In Progress of Transfer
	Status_STANDBY   Status = 7 // Away from Sonr Application
	Status_FAILED    Status = 8 // Failed to Connect Host
	Status_LINKER    Status = 9 // Linker Status
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "DEFAULT",
		1: "IDLE",
		2: "CONNECTED",
		3: "AVAILABLE",
		4: "PENDING",
		5: "INVITED",
		6: "TRANSFER",
		7: "STANDBY",
		8: "FAILED",
		9: "LINKER",
	}
	Status_value = map[string]int32{
		"DEFAULT":   0,
		"IDLE":      1,
		"CONNECTED": 2,
		"AVAILABLE": 3,
		"PENDING":   4,
		"INVITED":   5,
		"TRANSFER":  6,
		"STANDBY":   7,
		"FAILED":    8,
		"LINKER":    9,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[2].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[2]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

type FileSystem_Directory_Type int32

const (
	FileSystem_Directory_TEMPORARY FileSystem_Directory_Type = 0 // Temporary Cache Storage
	FileSystem_Directory_DOWNLOADS FileSystem_Directory_Type = 1 // Transferred Files - Desktop
	FileSystem_Directory_SUPPORT   FileSystem_Directory_Type = 2 // Persistent Non Exposed Files - Mobile
	FileSystem_Directory_LIBRARY   FileSystem_Directory_Type = 3 // Persistent Non Exposed Files - Desktop
	FileSystem_Directory_DOCUMENTS FileSystem_Directory_Type = 4 // Transferred Files - Mobile
	FileSystem_Directory_PRIVATE   FileSystem_Directory_Type = 5 // Private Key Files
)

// Enum value maps for FileSystem_Directory_Type.
var (
	FileSystem_Directory_Type_name = map[int32]string{
		0: "TEMPORARY",
		1: "DOWNLOADS",
		2: "SUPPORT",
		3: "LIBRARY",
		4: "DOCUMENTS",
		5: "PRIVATE",
	}
	FileSystem_Directory_Type_value = map[string]int32{
		"TEMPORARY": 0,
		"DOWNLOADS": 1,
		"SUPPORT":   2,
		"LIBRARY":   3,
		"DOCUMENTS": 4,
		"PRIVATE":   5,
	}
)

func (x FileSystem_Directory_Type) Enum() *FileSystem_Directory_Type {
	p := new(FileSystem_Directory_Type)
	*p = x
	return p
}

func (x FileSystem_Directory_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileSystem_Directory_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[3].Descriptor()
}

func (FileSystem_Directory_Type) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[3]
}

func (x FileSystem_Directory_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileSystem_Directory_Type.Descriptor instead.
func (FileSystem_Directory_Type) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3, 0, 0}
}

// Purposes of KeyPair
type KeyPair_Type int32

const (
	KeyPair_ACCOUNT   KeyPair_Type = 0 // Account KeyPair
	KeyPair_DEVICE    KeyPair_Type = 1 // Device KeyPair
	KeyPair_GROUP     KeyPair_Type = 2 // Group KeyPair
	KeyPair_TEMPORARY KeyPair_Type = 3 // Temporary KeyPair for Pre Device Link
)

// Enum value maps for KeyPair_Type.
var (
	KeyPair_Type_name = map[int32]string{
		0: "ACCOUNT",
		1: "DEVICE",
		2: "GROUP",
		3: "TEMPORARY",
	}
	KeyPair_Type_value = map[string]int32{
		"ACCOUNT":   0,
		"DEVICE":    1,
		"GROUP":     2,
		"TEMPORARY": 3,
	}
)

func (x KeyPair_Type) Enum() *KeyPair_Type {
	p := new(KeyPair_Type)
	*p = x
	return p
}

func (x KeyPair_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyPair_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[4].Descriptor()
}

func (KeyPair_Type) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[4]
}

func (x KeyPair_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyPair_Type.Descriptor instead.
func (KeyPair_Type) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5, 0}
}

// State of users account
type User_State int32

const (
	User_UNVERIFIED User_State = 0 // User is unverified - Setup Default node
	User_VERIFIED   User_State = 1 // User has verified their account
	User_BLOCKED    User_State = 2 // User is blocked from Sonr Network
)

// Enum value maps for User_State.
var (
	User_State_name = map[int32]string{
		0: "UNVERIFIED",
		1: "VERIFIED",
		2: "BLOCKED",
	}
	User_State_value = map[string]int32{
		"UNVERIFIED": 0,
		"VERIFIED":   1,
		"BLOCKED":    2,
	}
)

func (x User_State) Enum() *User_State {
	p := new(User_State)
	*p = x
	return p
}

func (x User_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_State) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[5].Descriptor()
}

func (User_State) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[5]
}

func (x User_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_State.Descriptor instead.
func (User_State) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{6, 0}
}

// Client Keys for Services
type APIKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpApiKey        string  `protobuf:"bytes,1,opt,name=ipApiKey,proto3" json:"ipApiKey,omitempty"`               // API Key for the IP Service
	RapidApiKey     string  `protobuf:"bytes,2,opt,name=rapidApiKey,proto3" json:"rapidApiKey,omitempty"`         // API Key for the Rapid API Service
	HandshakeKey    string  `protobuf:"bytes,3,opt,name=handshakeKey,proto3" json:"handshakeKey,omitempty"`       // API Key for the Handshake Service
	HandshakeSecret string  `protobuf:"bytes,4,opt,name=handshakeSecret,proto3" json:"handshakeSecret,omitempty"` // API Key for the Handshake Service
	PushKeyPath     *string `protobuf:"bytes,5,opt,name=pushKeyPath,proto3,oneof" json:"pushKeyPath,omitempty"`   // Path to the push key
	TextileKey      string  `protobuf:"bytes,6,opt,name=textileKey,proto3" json:"textileKey,omitempty"`           // Key for the Textile Service
	TextileSecret   string  `protobuf:"bytes,7,opt,name=textileSecret,proto3" json:"textileSecret,omitempty"`     // Secret for the Textile Service
}

func (x *APIKeys) Reset() {
	*x = APIKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIKeys) ProtoMessage() {}

func (x *APIKeys) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIKeys.ProtoReflect.Descriptor instead.
func (*APIKeys) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *APIKeys) GetIpApiKey() string {
	if x != nil {
		return x.IpApiKey
	}
	return ""
}

func (x *APIKeys) GetRapidApiKey() string {
	if x != nil {
		return x.RapidApiKey
	}
	return ""
}

func (x *APIKeys) GetHandshakeKey() string {
	if x != nil {
		return x.HandshakeKey
	}
	return ""
}

func (x *APIKeys) GetHandshakeSecret() string {
	if x != nil {
		return x.HandshakeSecret
	}
	return ""
}

func (x *APIKeys) GetPushKeyPath() string {
	if x != nil && x.PushKeyPath != nil {
		return *x.PushKeyPath
	}
	return ""
}

func (x *APIKeys) GetTextileKey() string {
	if x != nil {
		return x.TextileKey
	}
	return ""
}

func (x *APIKeys) GetTextileSecret() string {
	if x != nil {
		return x.TextileSecret
	}
	return ""
}

// User Account Info, Saved to Disk as account.snr
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName     string    `protobuf:"bytes,1,opt,name=sName,proto3" json:"sName,omitempty"`         // User's SName
	ApiKeys   *APIKeys  `protobuf:"bytes,2,opt,name=apiKeys,proto3" json:"apiKeys,omitempty"`     // App Env Variables for API Keys
	KeyChain  *KeyChain `protobuf:"bytes,3,opt,name=keyChain,proto3" json:"keyChain,omitempty"`   // Account Keychain
	PushToken string    `protobuf:"bytes,4,opt,name=pushToken,proto3" json:"pushToken,omitempty"` // Push Notification Token
	// User's Contact/Member
	Contact *Contact `protobuf:"bytes,5,opt,name=contact,proto3" json:"contact,omitempty"` // User's Contact
	Member  *Member  `protobuf:"bytes,6,opt,name=member,proto3" json:"member,omitempty"`   // User's Member Reference
	// Device Info
	Primary *Device   `protobuf:"bytes,7,opt,name=primary,proto3" json:"primary,omitempty"` // Primary Device
	Current *Device   `protobuf:"bytes,8,opt,name=current,proto3" json:"current,omitempty"` // Current Device
	Devices []*Device `protobuf:"bytes,9,rep,name=devices,proto3" json:"devices,omitempty"` // List of Devices
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *Account) GetApiKeys() *APIKeys {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

func (x *Account) GetKeyChain() *KeyChain {
	if x != nil {
		return x.KeyChain
	}
	return nil
}

func (x *Account) GetPushToken() string {
	if x != nil {
		return x.PushToken
	}
	return ""
}

func (x *Account) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Account) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Account) GetPrimary() *Device {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *Account) GetCurrent() *Device {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *Account) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

// Information about device for User
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Management
	FileSystem *FileSystem `protobuf:"bytes,1,opt,name=fileSystem,proto3" json:"fileSystem,omitempty"`                 // Directories for this Device
	Platform   Platform    `protobuf:"varint,2,opt,name=platform,proto3,enum=data.Platform" json:"platform,omitempty"` // Operating System
	KeyChain   *KeyChain   `protobuf:"bytes,3,opt,name=keyChain,proto3,oneof" json:"keyChain,omitempty"`               // User Keychain
	// Identification
	Id       string  `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`             // Device ID
	Label    *string `protobuf:"bytes,5,opt,name=label,proto3,oneof" json:"label,omitempty"` // User Defined Label for this Device
	HostName string  `protobuf:"bytes,6,opt,name=hostName,proto3" json:"hostName,omitempty"` // The hostname of the device.
	Model    *string `protobuf:"bytes,7,opt,name=model,proto3,oneof" json:"model,omitempty"` // Model of Device
	// Connection
	Status   *Status   `protobuf:"varint,8,opt,name=status,proto3,enum=data.Status,oneof" json:"status,omitempty"` // Status of the User Node
	Location *Location `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`                     // Location of the Device User
	Peer     *Peer     `protobuf:"bytes,10,opt,name=peer,proto3,oneof" json:"peer,omitempty"`                      // Peer of the Device
	Contact  *Contact  `protobuf:"bytes,11,opt,name=contact,proto3,oneof" json:"contact,omitempty"`                // Contact Card of the Device User
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

func (x *Device) GetFileSystem() *FileSystem {
	if x != nil {
		return x.FileSystem
	}
	return nil
}

func (x *Device) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_OTHER
}

func (x *Device) GetKeyChain() *KeyChain {
	if x != nil {
		return x.KeyChain
	}
	return nil
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *Device) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Device) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *Device) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Status_DEFAULT
}

func (x *Device) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Device) GetPeer() *Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *Device) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

// FileSystem is for Directores Where Data can be stored
type FileSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Downloads *FileSystem_Directory `protobuf:"bytes,1,opt,name=downloads,proto3" json:"downloads,omitempty"` // Downloaded Files
	Support   *FileSystem_Directory `protobuf:"bytes,2,opt,name=support,proto3" json:"support,omitempty"`     // Non Exposed Support Files
	Temporary *FileSystem_Directory `protobuf:"bytes,3,opt,name=temporary,proto3" json:"temporary,omitempty"` // Temporary Storage
	Private   *FileSystem_Directory `protobuf:"bytes,4,opt,name=private,proto3" json:"private,omitempty"`     // Locked Folder to Private Key Files
}

func (x *FileSystem) Reset() {
	*x = FileSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSystem) ProtoMessage() {}

func (x *FileSystem) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSystem.ProtoReflect.Descriptor instead.
func (*FileSystem) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3}
}

func (x *FileSystem) GetDownloads() *FileSystem_Directory {
	if x != nil {
		return x.Downloads
	}
	return nil
}

func (x *FileSystem) GetSupport() *FileSystem_Directory {
	if x != nil {
		return x.Support
	}
	return nil
}

func (x *FileSystem) GetTemporary() *FileSystem_Directory {
	if x != nil {
		return x.Temporary
	}
	return nil
}

func (x *FileSystem) GetPrivate() *FileSystem_Directory {
	if x != nil {
		return x.Private
	}
	return nil
}

// Account KeyPair Set for a User
type KeyChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account          *KeyPair        `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`                   // KeyPair for handshake - stored on all user devices
	Device           *KeyPair        `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`                     // KeyPair for linking - stored on Primary Device
	Group            *KeyPair        `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`                       // KeyPair for groups - stored on all user Devices
	DeviceLinkPubKey *KeyPair_Public `protobuf:"bytes,4,opt,name=deviceLinkPubKey,proto3" json:"deviceLinkPubKey,omitempty"` // Public Key if linked
}

func (x *KeyChain) Reset() {
	*x = KeyChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyChain) ProtoMessage() {}

func (x *KeyChain) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyChain.ProtoReflect.Descriptor instead.
func (*KeyChain) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4}
}

func (x *KeyChain) GetAccount() *KeyPair {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *KeyChain) GetDevice() *KeyPair {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *KeyChain) GetGroup() *KeyPair {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *KeyChain) GetDeviceLinkPubKey() *KeyPair_Public {
	if x != nil {
		return x.DeviceLinkPubKey
	}
	return nil
}

// Private Public Key Pair
type KeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Private   *KeyPair_Private `protobuf:"bytes,1,opt,name=private,proto3" json:"private,omitempty"`                          // Private Key Ref
	Public    *KeyPair_Public  `protobuf:"bytes,2,opt,name=public,proto3" json:"public,omitempty"`                            // Public Key Ref
	Signature Signature        `protobuf:"varint,3,opt,name=signature,proto3,enum=data.Signature" json:"signature,omitempty"` // Type of Key Signature
	Type      KeyPair_Type     `protobuf:"varint,4,opt,name=type,proto3,enum=data.KeyPair_Type" json:"type,omitempty"`        // Type of Key
}

func (x *KeyPair) Reset() {
	*x = KeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair) ProtoMessage() {}

func (x *KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair.ProtoReflect.Descriptor instead.
func (*KeyPair) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5}
}

func (x *KeyPair) GetPrivate() *KeyPair_Private {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *KeyPair) GetPublic() *KeyPair_Public {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *KeyPair) GetSignature() Signature {
	if x != nil {
		return x.Signature
	}
	return Signature_RSA
}

func (x *KeyPair) GetType() KeyPair_Type {
	if x != nil {
		return x.Type
	}
	return KeyPair_ACCOUNT
}

// User Info, Saved to Disk as account.snr
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State     User_State `protobuf:"varint,1,opt,name=state,proto3,enum=data.User_State" json:"state,omitempty"` // User's current state
	SName     string     `protobuf:"bytes,2,opt,name=sName,proto3" json:"sName,omitempty"`                       // User's SName
	ApiKeys   *APIKeys   `protobuf:"bytes,3,opt,name=apiKeys,proto3" json:"apiKeys,omitempty"`                   // App Env Variables for API Keys
	KeyChain  *KeyChain  `protobuf:"bytes,4,opt,name=keyChain,proto3" json:"keyChain,omitempty"`                 // Account Keychain
	PushToken string     `protobuf:"bytes,5,opt,name=pushToken,proto3" json:"pushToken,omitempty"`               // Push Notification Token
	// User's Contact/Member
	Contact *Contact `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"` // User's Contact
	Member  *Member  `protobuf:"bytes,7,opt,name=member,proto3" json:"member,omitempty"`   // User's Member Reference
	// Device Info
	Primary *Device   `protobuf:"bytes,8,opt,name=primary,proto3" json:"primary,omitempty"`  // Primary Device
	Current *Device   `protobuf:"bytes,9,opt,name=current,proto3" json:"current,omitempty"`  // Current Device
	Devices []*Device `protobuf:"bytes,10,rep,name=devices,proto3" json:"devices,omitempty"` // List of Devices
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{6}
}

func (x *User) GetState() User_State {
	if x != nil {
		return x.State
	}
	return User_UNVERIFIED
}

func (x *User) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *User) GetApiKeys() *APIKeys {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

func (x *User) GetKeyChain() *KeyChain {
	if x != nil {
		return x.KeyChain
	}
	return nil
}

func (x *User) GetPushToken() string {
	if x != nil {
		return x.PushToken
	}
	return ""
}

func (x *User) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *User) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *User) GetPrimary() *Device {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *User) GetCurrent() *Device {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *User) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

// Directory in FileSystem
type FileSystem_Directory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string                    `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                      // Path to Directory
	Type FileSystem_Directory_Type `protobuf:"varint,2,opt,name=type,proto3,enum=data.FileSystem_Directory_Type" json:"type,omitempty"` // Type of Directory
}

func (x *FileSystem_Directory) Reset() {
	*x = FileSystem_Directory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSystem_Directory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSystem_Directory) ProtoMessage() {}

func (x *FileSystem_Directory) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSystem_Directory.ProtoReflect.Descriptor instead.
func (*FileSystem_Directory) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3, 0}
}

func (x *FileSystem_Directory) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileSystem_Directory) GetType() FileSystem_Directory_Type {
	if x != nil {
		return x.Type
	}
	return FileSystem_Directory_TEMPORARY
}

// User Private Key Saved to Disk
type KeyPair_Private struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`     // Private Key Path
	Buffer []byte `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"` // Key Buffer
}

func (x *KeyPair_Private) Reset() {
	*x = KeyPair_Private{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair_Private) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair_Private) ProtoMessage() {}

func (x *KeyPair_Private) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair_Private.ProtoReflect.Descriptor instead.
func (*KeyPair_Private) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5, 0}
}

func (x *KeyPair_Private) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KeyPair_Private) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

// Public Key for Thread ID/ Libp2p ID
type KeyPair_Public struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base64 string `protobuf:"bytes,1,opt,name=base64,proto3" json:"base64,omitempty"` // Base64 Representation of Keys
	Buffer []byte `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"` // Public Key Buffer
}

func (x *KeyPair_Public) Reset() {
	*x = KeyPair_Public{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair_Public) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair_Public) ProtoMessage() {}

func (x *KeyPair_Public) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair_Public.ProtoReflect.Descriptor instead.
func (*KeyPair_Public) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5, 1}
}

func (x *KeyPair_Public) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

func (x *KeyPair_Public) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x07, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x70, 0x69, 0x64, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x70, 0x69, 0x64, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x78,
	0x74, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x78,
	0x74, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xd9, 0x02, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xe4, 0x03, 0x0a, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x48, 0x04, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x48, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x1a, 0xb0, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4c,
	0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x10, 0x05, 0x22, 0xc1, 0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0xeb, 0x02, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x35, 0x0a, 0x07, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x1a, 0x38, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4d, 0x50, 0x4f,
	0x52, 0x41, 0x52, 0x59, 0x10, 0x03, 0x22, 0xb2, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x07, 0x61,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53, 0x41, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x03, 0x2a, 0x30, 0x0a, 0x09, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x8a, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x4c,
	0x49, 0x4e, 0x4b, 0x45, 0x52, 0x10, 0x09, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData = file_user_proto_rawDesc
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_proto_rawDescData)
	})
	return file_user_proto_rawDescData
}

var file_user_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_user_proto_goTypes = []interface{}{
	(Signature)(0),                 // 0: data.Signature
	(Lifecycle)(0),                 // 1: data.Lifecycle
	(Status)(0),                    // 2: data.Status
	(FileSystem_Directory_Type)(0), // 3: data.FileSystem.Directory.Type
	(KeyPair_Type)(0),              // 4: data.KeyPair.Type
	(User_State)(0),                // 5: data.User.State
	(*APIKeys)(nil),                // 6: data.APIKeys
	(*Account)(nil),                // 7: data.Account
	(*Device)(nil),                 // 8: data.Device
	(*FileSystem)(nil),             // 9: data.FileSystem
	(*KeyChain)(nil),               // 10: data.KeyChain
	(*KeyPair)(nil),                // 11: data.KeyPair
	(*User)(nil),                   // 12: data.User
	(*FileSystem_Directory)(nil),   // 13: data.FileSystem.Directory
	(*KeyPair_Private)(nil),        // 14: data.KeyPair.Private
	(*KeyPair_Public)(nil),         // 15: data.KeyPair.Public
	(*Contact)(nil),                // 16: data.Contact
	(*Member)(nil),                 // 17: data.Member
	(Platform)(0),                  // 18: data.Platform
	(*Location)(nil),               // 19: data.Location
	(*Peer)(nil),                   // 20: data.Peer
}
var file_user_proto_depIdxs = []int32{
	6,  // 0: data.Account.apiKeys:type_name -> data.APIKeys
	10, // 1: data.Account.keyChain:type_name -> data.KeyChain
	16, // 2: data.Account.contact:type_name -> data.Contact
	17, // 3: data.Account.member:type_name -> data.Member
	8,  // 4: data.Account.primary:type_name -> data.Device
	8,  // 5: data.Account.current:type_name -> data.Device
	8,  // 6: data.Account.devices:type_name -> data.Device
	9,  // 7: data.Device.fileSystem:type_name -> data.FileSystem
	18, // 8: data.Device.platform:type_name -> data.Platform
	10, // 9: data.Device.keyChain:type_name -> data.KeyChain
	2,  // 10: data.Device.status:type_name -> data.Status
	19, // 11: data.Device.location:type_name -> data.Location
	20, // 12: data.Device.peer:type_name -> data.Peer
	16, // 13: data.Device.contact:type_name -> data.Contact
	13, // 14: data.FileSystem.downloads:type_name -> data.FileSystem.Directory
	13, // 15: data.FileSystem.support:type_name -> data.FileSystem.Directory
	13, // 16: data.FileSystem.temporary:type_name -> data.FileSystem.Directory
	13, // 17: data.FileSystem.private:type_name -> data.FileSystem.Directory
	11, // 18: data.KeyChain.account:type_name -> data.KeyPair
	11, // 19: data.KeyChain.device:type_name -> data.KeyPair
	11, // 20: data.KeyChain.group:type_name -> data.KeyPair
	15, // 21: data.KeyChain.deviceLinkPubKey:type_name -> data.KeyPair.Public
	14, // 22: data.KeyPair.private:type_name -> data.KeyPair.Private
	15, // 23: data.KeyPair.public:type_name -> data.KeyPair.Public
	0,  // 24: data.KeyPair.signature:type_name -> data.Signature
	4,  // 25: data.KeyPair.type:type_name -> data.KeyPair.Type
	5,  // 26: data.User.state:type_name -> data.User.State
	6,  // 27: data.User.apiKeys:type_name -> data.APIKeys
	10, // 28: data.User.keyChain:type_name -> data.KeyChain
	16, // 29: data.User.contact:type_name -> data.Contact
	17, // 30: data.User.member:type_name -> data.Member
	8,  // 31: data.User.primary:type_name -> data.Device
	8,  // 32: data.User.current:type_name -> data.Device
	8,  // 33: data.User.devices:type_name -> data.Device
	3,  // 34: data.FileSystem.Directory.type:type_name -> data.FileSystem.Directory.Type
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	file_peer_proto_init()
	file_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSystem_Directory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair_Private); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair_Public); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_user_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		EnumInfos:         file_user_proto_enumTypes,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_rawDesc = nil
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}
