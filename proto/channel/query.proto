syntax = "proto3";
package sonrio.sonr.channel;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "channel/params.proto";
import "registry/who_is.proto";
import "channel/how_is.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/sonr-io/blockchain/x/channel/types";

// Query defines the gRPC querier service.
service Query {
	// Params
	//
	// Parameters queries the parameters of the module.
	rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
		option (google.api.http).get = "/sonrio/sonr/channel/params";
	}

	// HowIs
	//
	// Queries a HowIs by did.
	rpc HowIs(QueryHowIsRequest) returns (QueryHowIsResponse) {
		option (google.api.http).get = "/sonr-io/sonr/channel/how_is/{did}";
	}

	// HowIsAll
	//
	// Queries a list of HowIs items.
	rpc HowIsAll(QueryAllHowIsRequest) returns (QueryAllHowIsResponse) {
		option (google.api.http).get = "/sonr-io/sonr/channel/how_is";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryHowIsRequest {
	string did = 1;
	sonrio.sonr.registry.Session session = 2;
}

message QueryHowIsResponse {
	HowIs how_is = 1 [(gogoproto.nullable) = false];
}

message QueryAllHowIsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
	sonrio.sonr.registry.Session session = 2;
}

message QueryAllHowIsResponse {
	repeated HowIs how_is = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
