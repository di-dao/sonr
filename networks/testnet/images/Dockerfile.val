ARG RUNNER_IMAGE="debian:bullseye-slim"


# ! ||--------------------------------------------------------------------------------||
# ! ||                                  Sonrd Builder                                 ||
# ! ||--------------------------------------------------------------------------------||
FROM golang:1.19-alpine AS sonr-builder

ARG arch=x86_64

RUN apk add --no-cache \
	ca-certificates \
	git \
	build-base \
	linux-headers

# Download go dependencies
WORKDIR /root
RUN git clone https://github.com/sonr-io/sonr.git sonr
WORKDIR /root/sonr
RUN --mount=type=cache,target=/root/.cache/go-build \
	--mount=type=cache,target=/root/go/pkg/mod \
	go mod download


# Cosmwasm - Download correct libwasmvm version
RUN set -eux; \
	export ARCH=$(uname -m); \
	WASM_VERSION=$(go list -m all | grep github.com/CosmWasm/wasmvm | awk '{print $2}'); \
	if [ ! -z "${WASM_VERSION}" ]; then \
	wget -O /lib/libwasmvm_muslc.a https://github.com/CosmWasm/wasmvm/releases/download/${WASM_VERSION}/libwasmvm_muslc.${ARCH}.a; \
	fi; \
	go mod download;

# Copy the remaining files
RUN --mount=type=cache,target=/root/.cache/go-build \
	--mount=type=cache,target=/root/go/pkg/mod \
	GOWORK=off go build \
	-mod=readonly \
	-tags "netgo,ledger,muslc" \
	-ldflags \
	"-X github.com/cosmos/cosmos-sdk/version.Name="sonr" \
	-X github.com/cosmos/cosmos-sdk/version.AppName="sonrd" \
	-X github.com/cosmos/cosmos-sdk/version.Version=${GIT_VERSION} \
	-X github.com/cosmos/cosmos-sdk/version.Commit=${GIT_COMMIT} \
	-X github.com/cosmos/cosmos-sdk/version.BuildTags=netgo,ledger,muslc \
	-w -s -linkmode=external -extldflags '-Wl,-z,muldefs -static'" \
	-trimpath \
	-o /root/sonr/build/sonrd ./cmd/sonrd/main.go


# ! ||-----------------------------------------------------------------------------||
# ! ||                               Sonr Base Image                               ||
# ! ||-----------------------------------------------------------------------------||
FROM ${RUNNER_IMAGE} AS sonr-base

LABEL org.opencontainers.image.source https://github.com/sonr-io/networks

# Copy sonrd binary and config
COPY --from=sonr-builder /root/sonr/build/sonrd /usr/local/bin/sonrd
COPY config.yml sonr.yml
COPY scripts scripts
ENV SONR_LAUNCH_CONFIG=/sonr.yml

# Expose ports
EXPOSE 26657
EXPOSE 1317
EXPOSE 26656
EXPOSE 8080


# ! ||---------------------------------------------------------------------------------||
# ! ||                               Sonr Validator Node                               ||
# ! ||---------------------------------------------------------------------------------||
FROM sonr-base

# Install Doppler CLI
RUN apt-get update && apt-get install -y apt-transport-https ca-certificates curl gnupg wget && \
	curl -sLf --retry 3 --tlsv1.2 --proto "=https" 'https://packages.doppler.com/public/cli/gpg.DE2A7741A397C129.key' | gpg --dearmor -o /usr/share/keyrings/doppler-archive-keyring.gpg && \
	echo "deb [signed-by=/usr/share/keyrings/doppler-archive-keyring.gpg] https://packages.doppler.com/public/cli/deb/debian any-version main" | tee /etc/apt/sources.list.d/doppler-cli.list && \
	apt-get update && \
	apt-get -y install doppler

RUN wget https://github.com/gnprice/toml-cli/releases/latest/download/toml-0.2.3-x86_64-linux.tar.gz && \
	tar -xvf toml-0.2.3-x86_64-linux.tar.gz && \
	mv toml-0.2.3-x86_64-linux/toml /usr/local/bin && \
	rm toml-0.2.3-x86_64-linux.tar.gz && \
	rm -rf toml-0.2.3-x86_64-linux

# Setup build args
ARG DOPPLER_TOKEN
WORKDIR /root
COPY scripts scripts

# Initialize the node
RUN doppler run --command='sh scripts/init-chain.sh'
RUN doppler run --command='sh scripts/join-testnet.sh'

# Expose ports
EXPOSE 26657
EXPOSE 1317
EXPOSE 26656
EXPOSE 8080
EXPOSE 9090

# Run the node
ENTRYPOINT ["sonrd"]
