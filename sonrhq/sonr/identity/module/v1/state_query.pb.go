// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sonrhq/sonr/identity/module/v1/state_query.proto

package sonrhq_sonr_identity_module_v1

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetAccountRequest is the StateQuery/GetAccountRequest request type.
type GetAccountRequest struct {
	// sequence specifies the value of the sequence field in the primary key.
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *GetAccountRequest) Reset()         { *m = GetAccountRequest{} }
func (m *GetAccountRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountRequest) ProtoMessage()    {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{0}
}
func (m *GetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountRequest.Merge(m, src)
}
func (m *GetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountRequest proto.InternalMessageInfo

func (m *GetAccountRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// GetAccountResponse is the StateQuery/GetAccountResponse response type.
type GetAccountResponse struct {
	// value is the response value.
	Value *Account `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetAccountResponse) Reset()         { *m = GetAccountResponse{} }
func (m *GetAccountResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccountResponse) ProtoMessage()    {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{1}
}
func (m *GetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountResponse.Merge(m, src)
}
func (m *GetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountResponse proto.InternalMessageInfo

func (m *GetAccountResponse) GetValue() *Account {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetAccountByAddressRequest is the StateQuery/GetAccountByAddressRequest request type.
type GetAccountByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetAccountByAddressRequest) Reset()         { *m = GetAccountByAddressRequest{} }
func (m *GetAccountByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountByAddressRequest) ProtoMessage()    {}
func (*GetAccountByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{2}
}
func (m *GetAccountByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountByAddressRequest.Merge(m, src)
}
func (m *GetAccountByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountByAddressRequest proto.InternalMessageInfo

func (m *GetAccountByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// GetAccountByAddressResponse is the StateQuery/GetAccountByAddressResponse response type.
type GetAccountByAddressResponse struct {
	Value *Account `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetAccountByAddressResponse) Reset()         { *m = GetAccountByAddressResponse{} }
func (m *GetAccountByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccountByAddressResponse) ProtoMessage()    {}
func (*GetAccountByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{3}
}
func (m *GetAccountByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountByAddressResponse.Merge(m, src)
}
func (m *GetAccountByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountByAddressResponse proto.InternalMessageInfo

func (m *GetAccountByAddressResponse) GetValue() *Account {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetAccountByPublicKeyRequest is the StateQuery/GetAccountByPublicKeyRequest request type.
type GetAccountByPublicKeyRequest struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *GetAccountByPublicKeyRequest) Reset()         { *m = GetAccountByPublicKeyRequest{} }
func (m *GetAccountByPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountByPublicKeyRequest) ProtoMessage()    {}
func (*GetAccountByPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{4}
}
func (m *GetAccountByPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountByPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountByPublicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountByPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountByPublicKeyRequest.Merge(m, src)
}
func (m *GetAccountByPublicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountByPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountByPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountByPublicKeyRequest proto.InternalMessageInfo

func (m *GetAccountByPublicKeyRequest) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

// GetAccountByPublicKeyResponse is the StateQuery/GetAccountByPublicKeyResponse response type.
type GetAccountByPublicKeyResponse struct {
	Value *Account `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetAccountByPublicKeyResponse) Reset()         { *m = GetAccountByPublicKeyResponse{} }
func (m *GetAccountByPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccountByPublicKeyResponse) ProtoMessage()    {}
func (*GetAccountByPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{5}
}
func (m *GetAccountByPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountByPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountByPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountByPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountByPublicKeyResponse.Merge(m, src)
}
func (m *GetAccountByPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountByPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountByPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountByPublicKeyResponse proto.InternalMessageInfo

func (m *GetAccountByPublicKeyResponse) GetValue() *Account {
	if m != nil {
		return m.Value
	}
	return nil
}

// ListAccountRequest is the StateQuery/ListAccountRequest request type.
type ListAccountRequest struct {
	// query specifies the type of query - either a prefix or range query.
	//
	// Types that are valid to be assigned to Query:
	//	*ListAccountRequest_PrefixQuery
	//	*ListAccountRequest_RangeQuery_
	Query isListAccountRequest_Query `protobuf_oneof:"query"`
	// pagination specifies optional pagination parameters.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListAccountRequest) Reset()         { *m = ListAccountRequest{} }
func (m *ListAccountRequest) String() string { return proto.CompactTextString(m) }
func (*ListAccountRequest) ProtoMessage()    {}
func (*ListAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{6}
}
func (m *ListAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountRequest.Merge(m, src)
}
func (m *ListAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountRequest proto.InternalMessageInfo

type isListAccountRequest_Query interface {
	isListAccountRequest_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAccountRequest_PrefixQuery struct {
	PrefixQuery *ListAccountRequest_IndexKey `protobuf:"bytes,1,opt,name=prefix_query,json=prefixQuery,proto3,oneof" json:"prefix_query,omitempty"`
}
type ListAccountRequest_RangeQuery_ struct {
	RangeQuery *ListAccountRequest_RangeQuery `protobuf:"bytes,2,opt,name=range_query,json=rangeQuery,proto3,oneof" json:"range_query,omitempty"`
}

func (*ListAccountRequest_PrefixQuery) isListAccountRequest_Query() {}
func (*ListAccountRequest_RangeQuery_) isListAccountRequest_Query() {}

func (m *ListAccountRequest) GetQuery() isListAccountRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListAccountRequest) GetPrefixQuery() *ListAccountRequest_IndexKey {
	if x, ok := m.GetQuery().(*ListAccountRequest_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (m *ListAccountRequest) GetRangeQuery() *ListAccountRequest_RangeQuery {
	if x, ok := m.GetQuery().(*ListAccountRequest_RangeQuery_); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *ListAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListAccountRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListAccountRequest_PrefixQuery)(nil),
		(*ListAccountRequest_RangeQuery_)(nil),
	}
}

// IndexKey specifies the value of an index key to use in prefix and range queries.
type ListAccountRequest_IndexKey struct {
	// key specifies the index key value.
	//
	// Types that are valid to be assigned to Key:
	//	*ListAccountRequest_IndexKey_Sequence_
	//	*ListAccountRequest_IndexKey_Address_
	//	*ListAccountRequest_IndexKey_PublicKey_
	Key isListAccountRequest_IndexKey_Key `protobuf_oneof:"key"`
}

func (m *ListAccountRequest_IndexKey) Reset()         { *m = ListAccountRequest_IndexKey{} }
func (m *ListAccountRequest_IndexKey) String() string { return proto.CompactTextString(m) }
func (*ListAccountRequest_IndexKey) ProtoMessage()    {}
func (*ListAccountRequest_IndexKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{6, 0}
}
func (m *ListAccountRequest_IndexKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountRequest_IndexKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountRequest_IndexKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountRequest_IndexKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountRequest_IndexKey.Merge(m, src)
}
func (m *ListAccountRequest_IndexKey) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountRequest_IndexKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountRequest_IndexKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountRequest_IndexKey proto.InternalMessageInfo

type isListAccountRequest_IndexKey_Key interface {
	isListAccountRequest_IndexKey_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAccountRequest_IndexKey_Sequence_ struct {
	Sequence *ListAccountRequest_IndexKey_Sequence `protobuf:"bytes,1,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
}
type ListAccountRequest_IndexKey_Address_ struct {
	Address *ListAccountRequest_IndexKey_Address `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
}
type ListAccountRequest_IndexKey_PublicKey_ struct {
	PublicKey *ListAccountRequest_IndexKey_PublicKey `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3,oneof" json:"public_key,omitempty"`
}

func (*ListAccountRequest_IndexKey_Sequence_) isListAccountRequest_IndexKey_Key()  {}
func (*ListAccountRequest_IndexKey_Address_) isListAccountRequest_IndexKey_Key()   {}
func (*ListAccountRequest_IndexKey_PublicKey_) isListAccountRequest_IndexKey_Key() {}

func (m *ListAccountRequest_IndexKey) GetKey() isListAccountRequest_IndexKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListAccountRequest_IndexKey) GetSequence() *ListAccountRequest_IndexKey_Sequence {
	if x, ok := m.GetKey().(*ListAccountRequest_IndexKey_Sequence_); ok {
		return x.Sequence
	}
	return nil
}

func (m *ListAccountRequest_IndexKey) GetAddress() *ListAccountRequest_IndexKey_Address {
	if x, ok := m.GetKey().(*ListAccountRequest_IndexKey_Address_); ok {
		return x.Address
	}
	return nil
}

func (m *ListAccountRequest_IndexKey) GetPublicKey() *ListAccountRequest_IndexKey_PublicKey {
	if x, ok := m.GetKey().(*ListAccountRequest_IndexKey_PublicKey_); ok {
		return x.PublicKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListAccountRequest_IndexKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListAccountRequest_IndexKey_Sequence_)(nil),
		(*ListAccountRequest_IndexKey_Address_)(nil),
		(*ListAccountRequest_IndexKey_PublicKey_)(nil),
	}
}

type ListAccountRequest_IndexKey_Sequence struct {
	// Types that are valid to be assigned to XSequence:
	//	*ListAccountRequest_IndexKey_Sequence_Sequence
	XSequence isListAccountRequest_IndexKey_Sequence_XSequence `protobuf_oneof:"_sequence"`
}

func (m *ListAccountRequest_IndexKey_Sequence) Reset()         { *m = ListAccountRequest_IndexKey_Sequence{} }
func (m *ListAccountRequest_IndexKey_Sequence) String() string { return proto.CompactTextString(m) }
func (*ListAccountRequest_IndexKey_Sequence) ProtoMessage()    {}
func (*ListAccountRequest_IndexKey_Sequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{6, 0, 0}
}
func (m *ListAccountRequest_IndexKey_Sequence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountRequest_IndexKey_Sequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountRequest_IndexKey_Sequence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountRequest_IndexKey_Sequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountRequest_IndexKey_Sequence.Merge(m, src)
}
func (m *ListAccountRequest_IndexKey_Sequence) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountRequest_IndexKey_Sequence) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountRequest_IndexKey_Sequence.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountRequest_IndexKey_Sequence proto.InternalMessageInfo

type isListAccountRequest_IndexKey_Sequence_XSequence interface {
	isListAccountRequest_IndexKey_Sequence_XSequence()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAccountRequest_IndexKey_Sequence_Sequence struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
}

func (*ListAccountRequest_IndexKey_Sequence_Sequence) isListAccountRequest_IndexKey_Sequence_XSequence() {
}

func (m *ListAccountRequest_IndexKey_Sequence) GetXSequence() isListAccountRequest_IndexKey_Sequence_XSequence {
	if m != nil {
		return m.XSequence
	}
	return nil
}

func (m *ListAccountRequest_IndexKey_Sequence) GetSequence() uint64 {
	if x, ok := m.GetXSequence().(*ListAccountRequest_IndexKey_Sequence_Sequence); ok {
		return x.Sequence
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListAccountRequest_IndexKey_Sequence) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListAccountRequest_IndexKey_Sequence_Sequence)(nil),
	}
}

type ListAccountRequest_IndexKey_Address struct {
	// Types that are valid to be assigned to XAddress:
	//	*ListAccountRequest_IndexKey_Address_Address
	XAddress isListAccountRequest_IndexKey_Address_XAddress `protobuf_oneof:"_address"`
}

func (m *ListAccountRequest_IndexKey_Address) Reset()         { *m = ListAccountRequest_IndexKey_Address{} }
func (m *ListAccountRequest_IndexKey_Address) String() string { return proto.CompactTextString(m) }
func (*ListAccountRequest_IndexKey_Address) ProtoMessage()    {}
func (*ListAccountRequest_IndexKey_Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{6, 0, 1}
}
func (m *ListAccountRequest_IndexKey_Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountRequest_IndexKey_Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountRequest_IndexKey_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountRequest_IndexKey_Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountRequest_IndexKey_Address.Merge(m, src)
}
func (m *ListAccountRequest_IndexKey_Address) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountRequest_IndexKey_Address) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountRequest_IndexKey_Address.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountRequest_IndexKey_Address proto.InternalMessageInfo

type isListAccountRequest_IndexKey_Address_XAddress interface {
	isListAccountRequest_IndexKey_Address_XAddress()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAccountRequest_IndexKey_Address_Address struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3,oneof" json:"address,omitempty"`
}

func (*ListAccountRequest_IndexKey_Address_Address) isListAccountRequest_IndexKey_Address_XAddress() {
}

func (m *ListAccountRequest_IndexKey_Address) GetXAddress() isListAccountRequest_IndexKey_Address_XAddress {
	if m != nil {
		return m.XAddress
	}
	return nil
}

func (m *ListAccountRequest_IndexKey_Address) GetAddress() string {
	if x, ok := m.GetXAddress().(*ListAccountRequest_IndexKey_Address_Address); ok {
		return x.Address
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListAccountRequest_IndexKey_Address) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListAccountRequest_IndexKey_Address_Address)(nil),
	}
}

type ListAccountRequest_IndexKey_PublicKey struct {
	// Types that are valid to be assigned to XPublicKey:
	//	*ListAccountRequest_IndexKey_PublicKey_PublicKey
	XPublicKey isListAccountRequest_IndexKey_PublicKey_XPublicKey `protobuf_oneof:"_public_key"`
}

func (m *ListAccountRequest_IndexKey_PublicKey) Reset()         { *m = ListAccountRequest_IndexKey_PublicKey{} }
func (m *ListAccountRequest_IndexKey_PublicKey) String() string { return proto.CompactTextString(m) }
func (*ListAccountRequest_IndexKey_PublicKey) ProtoMessage()    {}
func (*ListAccountRequest_IndexKey_PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{6, 0, 2}
}
func (m *ListAccountRequest_IndexKey_PublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountRequest_IndexKey_PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountRequest_IndexKey_PublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountRequest_IndexKey_PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountRequest_IndexKey_PublicKey.Merge(m, src)
}
func (m *ListAccountRequest_IndexKey_PublicKey) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountRequest_IndexKey_PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountRequest_IndexKey_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountRequest_IndexKey_PublicKey proto.InternalMessageInfo

type isListAccountRequest_IndexKey_PublicKey_XPublicKey interface {
	isListAccountRequest_IndexKey_PublicKey_XPublicKey()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAccountRequest_IndexKey_PublicKey_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof" json:"public_key,omitempty"`
}

func (*ListAccountRequest_IndexKey_PublicKey_PublicKey) isListAccountRequest_IndexKey_PublicKey_XPublicKey() {
}

func (m *ListAccountRequest_IndexKey_PublicKey) GetXPublicKey() isListAccountRequest_IndexKey_PublicKey_XPublicKey {
	if m != nil {
		return m.XPublicKey
	}
	return nil
}

func (m *ListAccountRequest_IndexKey_PublicKey) GetPublicKey() []byte {
	if x, ok := m.GetXPublicKey().(*ListAccountRequest_IndexKey_PublicKey_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListAccountRequest_IndexKey_PublicKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListAccountRequest_IndexKey_PublicKey_PublicKey)(nil),
	}
}

// RangeQuery specifies the from/to index keys for a range query.
type ListAccountRequest_RangeQuery struct {
	// from is the index key to use for the start of the range query.
	// To query from the start of an index, specify an index key for that index with empty values.
	From *ListAccountRequest_IndexKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the index key to use for the end of the range query.
	// The index key type MUST be the same as the index key type used for from.
	// To query from to the end of an index it can be omitted.
	To *ListAccountRequest_IndexKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ListAccountRequest_RangeQuery) Reset()         { *m = ListAccountRequest_RangeQuery{} }
func (m *ListAccountRequest_RangeQuery) String() string { return proto.CompactTextString(m) }
func (*ListAccountRequest_RangeQuery) ProtoMessage()    {}
func (*ListAccountRequest_RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{6, 1}
}
func (m *ListAccountRequest_RangeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountRequest_RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountRequest_RangeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountRequest_RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountRequest_RangeQuery.Merge(m, src)
}
func (m *ListAccountRequest_RangeQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountRequest_RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountRequest_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountRequest_RangeQuery proto.InternalMessageInfo

func (m *ListAccountRequest_RangeQuery) GetFrom() *ListAccountRequest_IndexKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListAccountRequest_RangeQuery) GetTo() *ListAccountRequest_IndexKey {
	if m != nil {
		return m.To
	}
	return nil
}

// ListAccountResponse is the StateQuery/ListAccountResponse response type.
type ListAccountResponse struct {
	// values are the results of the query.
	Values []*Account `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// pagination is the pagination response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListAccountResponse) Reset()         { *m = ListAccountResponse{} }
func (m *ListAccountResponse) String() string { return proto.CompactTextString(m) }
func (*ListAccountResponse) ProtoMessage()    {}
func (*ListAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{7}
}
func (m *ListAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountResponse.Merge(m, src)
}
func (m *ListAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountResponse proto.InternalMessageInfo

func (m *ListAccountResponse) GetValues() []*Account {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetBlockchainRequest is the StateQuery/GetBlockchainRequest request type.
type GetBlockchainRequest struct {
	// index specifies the value of the index field in the primary key.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *GetBlockchainRequest) Reset()         { *m = GetBlockchainRequest{} }
func (m *GetBlockchainRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockchainRequest) ProtoMessage()    {}
func (*GetBlockchainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{8}
}
func (m *GetBlockchainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockchainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockchainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockchainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockchainRequest.Merge(m, src)
}
func (m *GetBlockchainRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockchainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockchainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockchainRequest proto.InternalMessageInfo

func (m *GetBlockchainRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// GetBlockchainResponse is the StateQuery/GetBlockchainResponse response type.
type GetBlockchainResponse struct {
	// value is the response value.
	Value *Blockchain `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetBlockchainResponse) Reset()         { *m = GetBlockchainResponse{} }
func (m *GetBlockchainResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockchainResponse) ProtoMessage()    {}
func (*GetBlockchainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{9}
}
func (m *GetBlockchainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockchainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockchainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockchainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockchainResponse.Merge(m, src)
}
func (m *GetBlockchainResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockchainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockchainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockchainResponse proto.InternalMessageInfo

func (m *GetBlockchainResponse) GetValue() *Blockchain {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetBlockchainByChainIdRequest is the StateQuery/GetBlockchainByChainIdRequest request type.
type GetBlockchainByChainIdRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *GetBlockchainByChainIdRequest) Reset()         { *m = GetBlockchainByChainIdRequest{} }
func (m *GetBlockchainByChainIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockchainByChainIdRequest) ProtoMessage()    {}
func (*GetBlockchainByChainIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{10}
}
func (m *GetBlockchainByChainIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockchainByChainIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockchainByChainIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockchainByChainIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockchainByChainIdRequest.Merge(m, src)
}
func (m *GetBlockchainByChainIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockchainByChainIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockchainByChainIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockchainByChainIdRequest proto.InternalMessageInfo

func (m *GetBlockchainByChainIdRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// GetBlockchainByChainIdResponse is the StateQuery/GetBlockchainByChainIdResponse response type.
type GetBlockchainByChainIdResponse struct {
	Value *Blockchain `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetBlockchainByChainIdResponse) Reset()         { *m = GetBlockchainByChainIdResponse{} }
func (m *GetBlockchainByChainIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockchainByChainIdResponse) ProtoMessage()    {}
func (*GetBlockchainByChainIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{11}
}
func (m *GetBlockchainByChainIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockchainByChainIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockchainByChainIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockchainByChainIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockchainByChainIdResponse.Merge(m, src)
}
func (m *GetBlockchainByChainIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockchainByChainIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockchainByChainIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockchainByChainIdResponse proto.InternalMessageInfo

func (m *GetBlockchainByChainIdResponse) GetValue() *Blockchain {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetBlockchainByNameRequest is the StateQuery/GetBlockchainByNameRequest request type.
type GetBlockchainByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetBlockchainByNameRequest) Reset()         { *m = GetBlockchainByNameRequest{} }
func (m *GetBlockchainByNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockchainByNameRequest) ProtoMessage()    {}
func (*GetBlockchainByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{12}
}
func (m *GetBlockchainByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockchainByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockchainByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockchainByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockchainByNameRequest.Merge(m, src)
}
func (m *GetBlockchainByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockchainByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockchainByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockchainByNameRequest proto.InternalMessageInfo

func (m *GetBlockchainByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// GetBlockchainByNameResponse is the StateQuery/GetBlockchainByNameResponse response type.
type GetBlockchainByNameResponse struct {
	Value *Blockchain `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetBlockchainByNameResponse) Reset()         { *m = GetBlockchainByNameResponse{} }
func (m *GetBlockchainByNameResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockchainByNameResponse) ProtoMessage()    {}
func (*GetBlockchainByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{13}
}
func (m *GetBlockchainByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockchainByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockchainByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockchainByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockchainByNameResponse.Merge(m, src)
}
func (m *GetBlockchainByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockchainByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockchainByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockchainByNameResponse proto.InternalMessageInfo

func (m *GetBlockchainByNameResponse) GetValue() *Blockchain {
	if m != nil {
		return m.Value
	}
	return nil
}

// ListBlockchainRequest is the StateQuery/ListBlockchainRequest request type.
type ListBlockchainRequest struct {
	// query specifies the type of query - either a prefix or range query.
	//
	// Types that are valid to be assigned to Query:
	//
	//	*ListBlockchainRequest_PrefixQuery
	//	*ListBlockchainRequest_RangeQuery_
	Query isListBlockchainRequest_Query `protobuf_oneof:"query"`
	// pagination specifies optional pagination parameters.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListBlockchainRequest) Reset()         { *m = ListBlockchainRequest{} }
func (m *ListBlockchainRequest) String() string { return proto.CompactTextString(m) }
func (*ListBlockchainRequest) ProtoMessage()    {}
func (*ListBlockchainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{14}
}
func (m *ListBlockchainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlockchainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlockchainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlockchainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlockchainRequest.Merge(m, src)
}
func (m *ListBlockchainRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBlockchainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlockchainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlockchainRequest proto.InternalMessageInfo

type isListBlockchainRequest_Query interface {
	isListBlockchainRequest_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListBlockchainRequest_PrefixQuery struct {
	PrefixQuery *ListBlockchainRequest_IndexKey `protobuf:"bytes,1,opt,name=prefix_query,json=prefixQuery,proto3,oneof" json:"prefix_query,omitempty"`
}
type ListBlockchainRequest_RangeQuery_ struct {
	RangeQuery *ListBlockchainRequest_RangeQuery `protobuf:"bytes,2,opt,name=range_query,json=rangeQuery,proto3,oneof" json:"range_query,omitempty"`
}

func (*ListBlockchainRequest_PrefixQuery) isListBlockchainRequest_Query() {}
func (*ListBlockchainRequest_RangeQuery_) isListBlockchainRequest_Query() {}

func (m *ListBlockchainRequest) GetQuery() isListBlockchainRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListBlockchainRequest) GetPrefixQuery() *ListBlockchainRequest_IndexKey {
	if x, ok := m.GetQuery().(*ListBlockchainRequest_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (m *ListBlockchainRequest) GetRangeQuery() *ListBlockchainRequest_RangeQuery {
	if x, ok := m.GetQuery().(*ListBlockchainRequest_RangeQuery_); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *ListBlockchainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListBlockchainRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListBlockchainRequest_PrefixQuery)(nil),
		(*ListBlockchainRequest_RangeQuery_)(nil),
	}
}

// IndexKey specifies the value of an index key to use in prefix and range queries.
type ListBlockchainRequest_IndexKey struct {
	// key specifies the index key value.
	//
	// Types that are valid to be assigned to Key:
	//
	//	*ListBlockchainRequest_IndexKey_Index_
	//	*ListBlockchainRequest_IndexKey_ChainId_
	//	*ListBlockchainRequest_IndexKey_Name_
	Key isListBlockchainRequest_IndexKey_Key `protobuf_oneof:"key"`
}

func (m *ListBlockchainRequest_IndexKey) Reset()         { *m = ListBlockchainRequest_IndexKey{} }
func (m *ListBlockchainRequest_IndexKey) String() string { return proto.CompactTextString(m) }
func (*ListBlockchainRequest_IndexKey) ProtoMessage()    {}
func (*ListBlockchainRequest_IndexKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{14, 0}
}
func (m *ListBlockchainRequest_IndexKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlockchainRequest_IndexKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlockchainRequest_IndexKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlockchainRequest_IndexKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlockchainRequest_IndexKey.Merge(m, src)
}
func (m *ListBlockchainRequest_IndexKey) XXX_Size() int {
	return m.Size()
}
func (m *ListBlockchainRequest_IndexKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlockchainRequest_IndexKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlockchainRequest_IndexKey proto.InternalMessageInfo

type isListBlockchainRequest_IndexKey_Key interface {
	isListBlockchainRequest_IndexKey_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListBlockchainRequest_IndexKey_Index_ struct {
	Index *ListBlockchainRequest_IndexKey_Index `protobuf:"bytes,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
}
type ListBlockchainRequest_IndexKey_ChainId_ struct {
	ChainId *ListBlockchainRequest_IndexKey_ChainId `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3,oneof" json:"chain_id,omitempty"`
}
type ListBlockchainRequest_IndexKey_Name_ struct {
	Name *ListBlockchainRequest_IndexKey_Name `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (*ListBlockchainRequest_IndexKey_Index_) isListBlockchainRequest_IndexKey_Key()   {}
func (*ListBlockchainRequest_IndexKey_ChainId_) isListBlockchainRequest_IndexKey_Key() {}
func (*ListBlockchainRequest_IndexKey_Name_) isListBlockchainRequest_IndexKey_Key()    {}

func (m *ListBlockchainRequest_IndexKey) GetKey() isListBlockchainRequest_IndexKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListBlockchainRequest_IndexKey) GetIndex() *ListBlockchainRequest_IndexKey_Index {
	if x, ok := m.GetKey().(*ListBlockchainRequest_IndexKey_Index_); ok {
		return x.Index
	}
	return nil
}

func (m *ListBlockchainRequest_IndexKey) GetChainId() *ListBlockchainRequest_IndexKey_ChainId {
	if x, ok := m.GetKey().(*ListBlockchainRequest_IndexKey_ChainId_); ok {
		return x.ChainId
	}
	return nil
}

func (m *ListBlockchainRequest_IndexKey) GetName() *ListBlockchainRequest_IndexKey_Name {
	if x, ok := m.GetKey().(*ListBlockchainRequest_IndexKey_Name_); ok {
		return x.Name
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListBlockchainRequest_IndexKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListBlockchainRequest_IndexKey_Index_)(nil),
		(*ListBlockchainRequest_IndexKey_ChainId_)(nil),
		(*ListBlockchainRequest_IndexKey_Name_)(nil),
	}
}

type ListBlockchainRequest_IndexKey_Index struct {
	// Types that are valid to be assigned to XIndex:
	//
	//	*ListBlockchainRequest_IndexKey_Index_Index
	XIndex isListBlockchainRequest_IndexKey_Index_XIndex `protobuf_oneof:"_index"`
}

func (m *ListBlockchainRequest_IndexKey_Index) Reset()         { *m = ListBlockchainRequest_IndexKey_Index{} }
func (m *ListBlockchainRequest_IndexKey_Index) String() string { return proto.CompactTextString(m) }
func (*ListBlockchainRequest_IndexKey_Index) ProtoMessage()    {}
func (*ListBlockchainRequest_IndexKey_Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{14, 0, 0}
}
func (m *ListBlockchainRequest_IndexKey_Index) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlockchainRequest_IndexKey_Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlockchainRequest_IndexKey_Index.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlockchainRequest_IndexKey_Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlockchainRequest_IndexKey_Index.Merge(m, src)
}
func (m *ListBlockchainRequest_IndexKey_Index) XXX_Size() int {
	return m.Size()
}
func (m *ListBlockchainRequest_IndexKey_Index) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlockchainRequest_IndexKey_Index.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlockchainRequest_IndexKey_Index proto.InternalMessageInfo

type isListBlockchainRequest_IndexKey_Index_XIndex interface {
	isListBlockchainRequest_IndexKey_Index_XIndex()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListBlockchainRequest_IndexKey_Index_Index struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
}

func (*ListBlockchainRequest_IndexKey_Index_Index) isListBlockchainRequest_IndexKey_Index_XIndex() {}

func (m *ListBlockchainRequest_IndexKey_Index) GetXIndex() isListBlockchainRequest_IndexKey_Index_XIndex {
	if m != nil {
		return m.XIndex
	}
	return nil
}

func (m *ListBlockchainRequest_IndexKey_Index) GetIndex() uint64 {
	if x, ok := m.GetXIndex().(*ListBlockchainRequest_IndexKey_Index_Index); ok {
		return x.Index
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListBlockchainRequest_IndexKey_Index) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListBlockchainRequest_IndexKey_Index_Index)(nil),
	}
}

type ListBlockchainRequest_IndexKey_ChainId struct {
	// Types that are valid to be assigned to XChainId:
	//
	//	*ListBlockchainRequest_IndexKey_ChainId_ChainId
	XChainId isListBlockchainRequest_IndexKey_ChainId_XChainId `protobuf_oneof:"_chain_id"`
}

func (m *ListBlockchainRequest_IndexKey_ChainId) Reset() {
	*m = ListBlockchainRequest_IndexKey_ChainId{}
}
func (m *ListBlockchainRequest_IndexKey_ChainId) String() string { return proto.CompactTextString(m) }
func (*ListBlockchainRequest_IndexKey_ChainId) ProtoMessage()    {}
func (*ListBlockchainRequest_IndexKey_ChainId) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{14, 0, 1}
}
func (m *ListBlockchainRequest_IndexKey_ChainId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlockchainRequest_IndexKey_ChainId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlockchainRequest_IndexKey_ChainId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlockchainRequest_IndexKey_ChainId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlockchainRequest_IndexKey_ChainId.Merge(m, src)
}
func (m *ListBlockchainRequest_IndexKey_ChainId) XXX_Size() int {
	return m.Size()
}
func (m *ListBlockchainRequest_IndexKey_ChainId) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlockchainRequest_IndexKey_ChainId.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlockchainRequest_IndexKey_ChainId proto.InternalMessageInfo

type isListBlockchainRequest_IndexKey_ChainId_XChainId interface {
	isListBlockchainRequest_IndexKey_ChainId_XChainId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListBlockchainRequest_IndexKey_ChainId_ChainId struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3,oneof" json:"chain_id,omitempty"`
}

func (*ListBlockchainRequest_IndexKey_ChainId_ChainId) isListBlockchainRequest_IndexKey_ChainId_XChainId() {
}

func (m *ListBlockchainRequest_IndexKey_ChainId) GetXChainId() isListBlockchainRequest_IndexKey_ChainId_XChainId {
	if m != nil {
		return m.XChainId
	}
	return nil
}

func (m *ListBlockchainRequest_IndexKey_ChainId) GetChainId() string {
	if x, ok := m.GetXChainId().(*ListBlockchainRequest_IndexKey_ChainId_ChainId); ok {
		return x.ChainId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListBlockchainRequest_IndexKey_ChainId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListBlockchainRequest_IndexKey_ChainId_ChainId)(nil),
	}
}

type ListBlockchainRequest_IndexKey_Name struct {
	// Types that are valid to be assigned to XName:
	//
	//	*ListBlockchainRequest_IndexKey_Name_Name
	XName isListBlockchainRequest_IndexKey_Name_XName `protobuf_oneof:"_name"`
}

func (m *ListBlockchainRequest_IndexKey_Name) Reset()         { *m = ListBlockchainRequest_IndexKey_Name{} }
func (m *ListBlockchainRequest_IndexKey_Name) String() string { return proto.CompactTextString(m) }
func (*ListBlockchainRequest_IndexKey_Name) ProtoMessage()    {}
func (*ListBlockchainRequest_IndexKey_Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{14, 0, 2}
}
func (m *ListBlockchainRequest_IndexKey_Name) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlockchainRequest_IndexKey_Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlockchainRequest_IndexKey_Name.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlockchainRequest_IndexKey_Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlockchainRequest_IndexKey_Name.Merge(m, src)
}
func (m *ListBlockchainRequest_IndexKey_Name) XXX_Size() int {
	return m.Size()
}
func (m *ListBlockchainRequest_IndexKey_Name) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlockchainRequest_IndexKey_Name.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlockchainRequest_IndexKey_Name proto.InternalMessageInfo

type isListBlockchainRequest_IndexKey_Name_XName interface {
	isListBlockchainRequest_IndexKey_Name_XName()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListBlockchainRequest_IndexKey_Name_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (*ListBlockchainRequest_IndexKey_Name_Name) isListBlockchainRequest_IndexKey_Name_XName() {}

func (m *ListBlockchainRequest_IndexKey_Name) GetXName() isListBlockchainRequest_IndexKey_Name_XName {
	if m != nil {
		return m.XName
	}
	return nil
}

func (m *ListBlockchainRequest_IndexKey_Name) GetName() string {
	if x, ok := m.GetXName().(*ListBlockchainRequest_IndexKey_Name_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListBlockchainRequest_IndexKey_Name) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListBlockchainRequest_IndexKey_Name_Name)(nil),
	}
}

// RangeQuery specifies the from/to index keys for a range query.
type ListBlockchainRequest_RangeQuery struct {
	// from is the index key to use for the start of the range query.
	// To query from the start of an index, specify an index key for that index with empty values.
	From *ListBlockchainRequest_IndexKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the index key to use for the end of the range query.
	// The index key type MUST be the same as the index key type used for from.
	// To query from to the end of an index it can be omitted.
	To *ListBlockchainRequest_IndexKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ListBlockchainRequest_RangeQuery) Reset()         { *m = ListBlockchainRequest_RangeQuery{} }
func (m *ListBlockchainRequest_RangeQuery) String() string { return proto.CompactTextString(m) }
func (*ListBlockchainRequest_RangeQuery) ProtoMessage()    {}
func (*ListBlockchainRequest_RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{14, 1}
}
func (m *ListBlockchainRequest_RangeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlockchainRequest_RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlockchainRequest_RangeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlockchainRequest_RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlockchainRequest_RangeQuery.Merge(m, src)
}
func (m *ListBlockchainRequest_RangeQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListBlockchainRequest_RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlockchainRequest_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlockchainRequest_RangeQuery proto.InternalMessageInfo

func (m *ListBlockchainRequest_RangeQuery) GetFrom() *ListBlockchainRequest_IndexKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListBlockchainRequest_RangeQuery) GetTo() *ListBlockchainRequest_IndexKey {
	if m != nil {
		return m.To
	}
	return nil
}

// ListBlockchainResponse is the StateQuery/ListBlockchainResponse response type.
type ListBlockchainResponse struct {
	// values are the results of the query.
	Values []*Blockchain `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// pagination is the pagination response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListBlockchainResponse) Reset()         { *m = ListBlockchainResponse{} }
func (m *ListBlockchainResponse) String() string { return proto.CompactTextString(m) }
func (*ListBlockchainResponse) ProtoMessage()    {}
func (*ListBlockchainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{15}
}
func (m *ListBlockchainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlockchainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlockchainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlockchainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlockchainResponse.Merge(m, src)
}
func (m *ListBlockchainResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBlockchainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlockchainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlockchainResponse proto.InternalMessageInfo

func (m *ListBlockchainResponse) GetValues() []*Blockchain {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListBlockchainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetAccumulatorRequest is the StateQuery/GetAccumulatorRequest request type.
type GetAccumulatorRequest struct {
	// index specifies the value of the index field in the primary key.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *GetAccumulatorRequest) Reset()         { *m = GetAccumulatorRequest{} }
func (m *GetAccumulatorRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccumulatorRequest) ProtoMessage()    {}
func (*GetAccumulatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{16}
}
func (m *GetAccumulatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccumulatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccumulatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccumulatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccumulatorRequest.Merge(m, src)
}
func (m *GetAccumulatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccumulatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccumulatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccumulatorRequest proto.InternalMessageInfo

func (m *GetAccumulatorRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// GetAccumulatorResponse is the StateQuery/GetAccumulatorResponse response type.
type GetAccumulatorResponse struct {
	// value is the response value.
	Value *Accumulator `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetAccumulatorResponse) Reset()         { *m = GetAccumulatorResponse{} }
func (m *GetAccumulatorResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccumulatorResponse) ProtoMessage()    {}
func (*GetAccumulatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{17}
}
func (m *GetAccumulatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccumulatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccumulatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccumulatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccumulatorResponse.Merge(m, src)
}
func (m *GetAccumulatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccumulatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccumulatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccumulatorResponse proto.InternalMessageInfo

func (m *GetAccumulatorResponse) GetValue() *Accumulator {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetAccumulatorByControllerKeyRequest is the StateQuery/GetAccumulatorByControllerKeyRequest request type.
type GetAccumulatorByControllerKeyRequest struct {
	Controller string `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
	Key        string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetAccumulatorByControllerKeyRequest) Reset()         { *m = GetAccumulatorByControllerKeyRequest{} }
func (m *GetAccumulatorByControllerKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccumulatorByControllerKeyRequest) ProtoMessage()    {}
func (*GetAccumulatorByControllerKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{18}
}
func (m *GetAccumulatorByControllerKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccumulatorByControllerKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccumulatorByControllerKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccumulatorByControllerKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccumulatorByControllerKeyRequest.Merge(m, src)
}
func (m *GetAccumulatorByControllerKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccumulatorByControllerKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccumulatorByControllerKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccumulatorByControllerKeyRequest proto.InternalMessageInfo

func (m *GetAccumulatorByControllerKeyRequest) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

func (m *GetAccumulatorByControllerKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// GetAccumulatorByControllerKeyResponse is the StateQuery/GetAccumulatorByControllerKeyResponse response type.
type GetAccumulatorByControllerKeyResponse struct {
	Value *Accumulator `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetAccumulatorByControllerKeyResponse) Reset()         { *m = GetAccumulatorByControllerKeyResponse{} }
func (m *GetAccumulatorByControllerKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccumulatorByControllerKeyResponse) ProtoMessage()    {}
func (*GetAccumulatorByControllerKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{19}
}
func (m *GetAccumulatorByControllerKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccumulatorByControllerKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccumulatorByControllerKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccumulatorByControllerKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccumulatorByControllerKeyResponse.Merge(m, src)
}
func (m *GetAccumulatorByControllerKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccumulatorByControllerKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccumulatorByControllerKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccumulatorByControllerKeyResponse proto.InternalMessageInfo

func (m *GetAccumulatorByControllerKeyResponse) GetValue() *Accumulator {
	if m != nil {
		return m.Value
	}
	return nil
}

// ListAccumulatorRequest is the StateQuery/ListAccumulatorRequest request type.
type ListAccumulatorRequest struct {
	// query specifies the type of query - either a prefix or range query.
	//
	// Types that are valid to be assigned to Query:
	//
	//	*ListAccumulatorRequest_PrefixQuery
	//	*ListAccumulatorRequest_RangeQuery_
	Query isListAccumulatorRequest_Query `protobuf_oneof:"query"`
	// pagination specifies optional pagination parameters.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListAccumulatorRequest) Reset()         { *m = ListAccumulatorRequest{} }
func (m *ListAccumulatorRequest) String() string { return proto.CompactTextString(m) }
func (*ListAccumulatorRequest) ProtoMessage()    {}
func (*ListAccumulatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{20}
}
func (m *ListAccumulatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccumulatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccumulatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccumulatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccumulatorRequest.Merge(m, src)
}
func (m *ListAccumulatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAccumulatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccumulatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccumulatorRequest proto.InternalMessageInfo

type isListAccumulatorRequest_Query interface {
	isListAccumulatorRequest_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAccumulatorRequest_PrefixQuery struct {
	PrefixQuery *ListAccumulatorRequest_IndexKey `protobuf:"bytes,1,opt,name=prefix_query,json=prefixQuery,proto3,oneof" json:"prefix_query,omitempty"`
}
type ListAccumulatorRequest_RangeQuery_ struct {
	RangeQuery *ListAccumulatorRequest_RangeQuery `protobuf:"bytes,2,opt,name=range_query,json=rangeQuery,proto3,oneof" json:"range_query,omitempty"`
}

func (*ListAccumulatorRequest_PrefixQuery) isListAccumulatorRequest_Query() {}
func (*ListAccumulatorRequest_RangeQuery_) isListAccumulatorRequest_Query() {}

func (m *ListAccumulatorRequest) GetQuery() isListAccumulatorRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListAccumulatorRequest) GetPrefixQuery() *ListAccumulatorRequest_IndexKey {
	if x, ok := m.GetQuery().(*ListAccumulatorRequest_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (m *ListAccumulatorRequest) GetRangeQuery() *ListAccumulatorRequest_RangeQuery {
	if x, ok := m.GetQuery().(*ListAccumulatorRequest_RangeQuery_); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *ListAccumulatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListAccumulatorRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListAccumulatorRequest_PrefixQuery)(nil),
		(*ListAccumulatorRequest_RangeQuery_)(nil),
	}
}

// IndexKey specifies the value of an index key to use in prefix and range queries.
type ListAccumulatorRequest_IndexKey struct {
	// key specifies the index key value.
	//
	// Types that are valid to be assigned to Key:
	//
	//	*ListAccumulatorRequest_IndexKey_Index_
	//	*ListAccumulatorRequest_IndexKey_ControllerKey_
	Key isListAccumulatorRequest_IndexKey_Key `protobuf_oneof:"key"`
}

func (m *ListAccumulatorRequest_IndexKey) Reset()         { *m = ListAccumulatorRequest_IndexKey{} }
func (m *ListAccumulatorRequest_IndexKey) String() string { return proto.CompactTextString(m) }
func (*ListAccumulatorRequest_IndexKey) ProtoMessage()    {}
func (*ListAccumulatorRequest_IndexKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{20, 0}
}
func (m *ListAccumulatorRequest_IndexKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccumulatorRequest_IndexKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccumulatorRequest_IndexKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccumulatorRequest_IndexKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccumulatorRequest_IndexKey.Merge(m, src)
}
func (m *ListAccumulatorRequest_IndexKey) XXX_Size() int {
	return m.Size()
}
func (m *ListAccumulatorRequest_IndexKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccumulatorRequest_IndexKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccumulatorRequest_IndexKey proto.InternalMessageInfo

type isListAccumulatorRequest_IndexKey_Key interface {
	isListAccumulatorRequest_IndexKey_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAccumulatorRequest_IndexKey_Index_ struct {
	Index *ListAccumulatorRequest_IndexKey_Index `protobuf:"bytes,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
}
type ListAccumulatorRequest_IndexKey_ControllerKey_ struct {
	ControllerKey *ListAccumulatorRequest_IndexKey_ControllerKey `protobuf:"bytes,2,opt,name=controller_key,json=controllerKey,proto3,oneof" json:"controller_key,omitempty"`
}

func (*ListAccumulatorRequest_IndexKey_Index_) isListAccumulatorRequest_IndexKey_Key()         {}
func (*ListAccumulatorRequest_IndexKey_ControllerKey_) isListAccumulatorRequest_IndexKey_Key() {}

func (m *ListAccumulatorRequest_IndexKey) GetKey() isListAccumulatorRequest_IndexKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListAccumulatorRequest_IndexKey) GetIndex() *ListAccumulatorRequest_IndexKey_Index {
	if x, ok := m.GetKey().(*ListAccumulatorRequest_IndexKey_Index_); ok {
		return x.Index
	}
	return nil
}

func (m *ListAccumulatorRequest_IndexKey) GetControllerKey() *ListAccumulatorRequest_IndexKey_ControllerKey {
	if x, ok := m.GetKey().(*ListAccumulatorRequest_IndexKey_ControllerKey_); ok {
		return x.ControllerKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListAccumulatorRequest_IndexKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListAccumulatorRequest_IndexKey_Index_)(nil),
		(*ListAccumulatorRequest_IndexKey_ControllerKey_)(nil),
	}
}

type ListAccumulatorRequest_IndexKey_Index struct {
	// Types that are valid to be assigned to XIndex:
	//
	//	*ListAccumulatorRequest_IndexKey_Index_Index
	XIndex isListAccumulatorRequest_IndexKey_Index_XIndex `protobuf_oneof:"_index"`
}

func (m *ListAccumulatorRequest_IndexKey_Index) Reset()         { *m = ListAccumulatorRequest_IndexKey_Index{} }
func (m *ListAccumulatorRequest_IndexKey_Index) String() string { return proto.CompactTextString(m) }
func (*ListAccumulatorRequest_IndexKey_Index) ProtoMessage()    {}
func (*ListAccumulatorRequest_IndexKey_Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{20, 0, 0}
}
func (m *ListAccumulatorRequest_IndexKey_Index) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccumulatorRequest_IndexKey_Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccumulatorRequest_IndexKey_Index.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccumulatorRequest_IndexKey_Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccumulatorRequest_IndexKey_Index.Merge(m, src)
}
func (m *ListAccumulatorRequest_IndexKey_Index) XXX_Size() int {
	return m.Size()
}
func (m *ListAccumulatorRequest_IndexKey_Index) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccumulatorRequest_IndexKey_Index.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccumulatorRequest_IndexKey_Index proto.InternalMessageInfo

type isListAccumulatorRequest_IndexKey_Index_XIndex interface {
	isListAccumulatorRequest_IndexKey_Index_XIndex()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAccumulatorRequest_IndexKey_Index_Index struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
}

func (*ListAccumulatorRequest_IndexKey_Index_Index) isListAccumulatorRequest_IndexKey_Index_XIndex() {
}

func (m *ListAccumulatorRequest_IndexKey_Index) GetXIndex() isListAccumulatorRequest_IndexKey_Index_XIndex {
	if m != nil {
		return m.XIndex
	}
	return nil
}

func (m *ListAccumulatorRequest_IndexKey_Index) GetIndex() uint64 {
	if x, ok := m.GetXIndex().(*ListAccumulatorRequest_IndexKey_Index_Index); ok {
		return x.Index
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListAccumulatorRequest_IndexKey_Index) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListAccumulatorRequest_IndexKey_Index_Index)(nil),
	}
}

type ListAccumulatorRequest_IndexKey_ControllerKey struct {
	// Types that are valid to be assigned to XController:
	//
	//	*ListAccumulatorRequest_IndexKey_ControllerKey_Controller
	XController isListAccumulatorRequest_IndexKey_ControllerKey_XController `protobuf_oneof:"_controller"`
	// Types that are valid to be assigned to XKey:
	//
	//	*ListAccumulatorRequest_IndexKey_ControllerKey_Key
	XKey isListAccumulatorRequest_IndexKey_ControllerKey_XKey `protobuf_oneof:"_key"`
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey) Reset() {
	*m = ListAccumulatorRequest_IndexKey_ControllerKey{}
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey) String() string {
	return proto.CompactTextString(m)
}
func (*ListAccumulatorRequest_IndexKey_ControllerKey) ProtoMessage() {}
func (*ListAccumulatorRequest_IndexKey_ControllerKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{20, 0, 1}
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccumulatorRequest_IndexKey_ControllerKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccumulatorRequest_IndexKey_ControllerKey.Merge(m, src)
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey) XXX_Size() int {
	return m.Size()
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccumulatorRequest_IndexKey_ControllerKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccumulatorRequest_IndexKey_ControllerKey proto.InternalMessageInfo

type isListAccumulatorRequest_IndexKey_ControllerKey_XController interface {
	isListAccumulatorRequest_IndexKey_ControllerKey_XController()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isListAccumulatorRequest_IndexKey_ControllerKey_XKey interface {
	isListAccumulatorRequest_IndexKey_ControllerKey_XKey()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAccumulatorRequest_IndexKey_ControllerKey_Controller struct {
	Controller string `protobuf:"bytes,1,opt,name=controller,proto3,oneof" json:"controller,omitempty"`
}
type ListAccumulatorRequest_IndexKey_ControllerKey_Key struct {
	Key string `protobuf:"bytes,2,opt,name=key,proto3,oneof" json:"key,omitempty"`
}

func (*ListAccumulatorRequest_IndexKey_ControllerKey_Controller) isListAccumulatorRequest_IndexKey_ControllerKey_XController() {
}
func (*ListAccumulatorRequest_IndexKey_ControllerKey_Key) isListAccumulatorRequest_IndexKey_ControllerKey_XKey() {
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey) GetXController() isListAccumulatorRequest_IndexKey_ControllerKey_XController {
	if m != nil {
		return m.XController
	}
	return nil
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey) GetXKey() isListAccumulatorRequest_IndexKey_ControllerKey_XKey {
	if m != nil {
		return m.XKey
	}
	return nil
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey) GetController() string {
	if x, ok := m.GetXController().(*ListAccumulatorRequest_IndexKey_ControllerKey_Controller); ok {
		return x.Controller
	}
	return ""
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey) GetKey() string {
	if x, ok := m.GetXKey().(*ListAccumulatorRequest_IndexKey_ControllerKey_Key); ok {
		return x.Key
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListAccumulatorRequest_IndexKey_ControllerKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListAccumulatorRequest_IndexKey_ControllerKey_Controller)(nil),
		(*ListAccumulatorRequest_IndexKey_ControllerKey_Key)(nil),
	}
}

// RangeQuery specifies the from/to index keys for a range query.
type ListAccumulatorRequest_RangeQuery struct {
	// from is the index key to use for the start of the range query.
	// To query from the start of an index, specify an index key for that index with empty values.
	From *ListAccumulatorRequest_IndexKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the index key to use for the end of the range query.
	// The index key type MUST be the same as the index key type used for from.
	// To query from to the end of an index it can be omitted.
	To *ListAccumulatorRequest_IndexKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ListAccumulatorRequest_RangeQuery) Reset()         { *m = ListAccumulatorRequest_RangeQuery{} }
func (m *ListAccumulatorRequest_RangeQuery) String() string { return proto.CompactTextString(m) }
func (*ListAccumulatorRequest_RangeQuery) ProtoMessage()    {}
func (*ListAccumulatorRequest_RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{20, 1}
}
func (m *ListAccumulatorRequest_RangeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccumulatorRequest_RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccumulatorRequest_RangeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccumulatorRequest_RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccumulatorRequest_RangeQuery.Merge(m, src)
}
func (m *ListAccumulatorRequest_RangeQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListAccumulatorRequest_RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccumulatorRequest_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccumulatorRequest_RangeQuery proto.InternalMessageInfo

func (m *ListAccumulatorRequest_RangeQuery) GetFrom() *ListAccumulatorRequest_IndexKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListAccumulatorRequest_RangeQuery) GetTo() *ListAccumulatorRequest_IndexKey {
	if m != nil {
		return m.To
	}
	return nil
}

// ListAccumulatorResponse is the StateQuery/ListAccumulatorResponse response type.
type ListAccumulatorResponse struct {
	// values are the results of the query.
	Values []*Accumulator `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// pagination is the pagination response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListAccumulatorResponse) Reset()         { *m = ListAccumulatorResponse{} }
func (m *ListAccumulatorResponse) String() string { return proto.CompactTextString(m) }
func (*ListAccumulatorResponse) ProtoMessage()    {}
func (*ListAccumulatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{21}
}
func (m *ListAccumulatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccumulatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccumulatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccumulatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccumulatorResponse.Merge(m, src)
}
func (m *ListAccumulatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAccumulatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccumulatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccumulatorResponse proto.InternalMessageInfo

func (m *ListAccumulatorResponse) GetValues() []*Accumulator {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListAccumulatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetControllerRequest is the StateQuery/GetControllerRequest request type.
type GetControllerRequest struct {
	// sequence specifies the value of the sequence field in the primary key.
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *GetControllerRequest) Reset()         { *m = GetControllerRequest{} }
func (m *GetControllerRequest) String() string { return proto.CompactTextString(m) }
func (*GetControllerRequest) ProtoMessage()    {}
func (*GetControllerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{22}
}
func (m *GetControllerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetControllerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetControllerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetControllerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetControllerRequest.Merge(m, src)
}
func (m *GetControllerRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetControllerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetControllerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetControllerRequest proto.InternalMessageInfo

func (m *GetControllerRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// GetControllerResponse is the StateQuery/GetControllerResponse response type.
type GetControllerResponse struct {
	// value is the response value.
	Value *Controller `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetControllerResponse) Reset()         { *m = GetControllerResponse{} }
func (m *GetControllerResponse) String() string { return proto.CompactTextString(m) }
func (*GetControllerResponse) ProtoMessage()    {}
func (*GetControllerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{23}
}
func (m *GetControllerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetControllerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetControllerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetControllerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetControllerResponse.Merge(m, src)
}
func (m *GetControllerResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetControllerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetControllerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetControllerResponse proto.InternalMessageInfo

func (m *GetControllerResponse) GetValue() *Controller {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetControllerByAddressRequest is the StateQuery/GetControllerByAddressRequest request type.
type GetControllerByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetControllerByAddressRequest) Reset()         { *m = GetControllerByAddressRequest{} }
func (m *GetControllerByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*GetControllerByAddressRequest) ProtoMessage()    {}
func (*GetControllerByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{24}
}
func (m *GetControllerByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetControllerByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetControllerByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetControllerByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetControllerByAddressRequest.Merge(m, src)
}
func (m *GetControllerByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetControllerByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetControllerByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetControllerByAddressRequest proto.InternalMessageInfo

func (m *GetControllerByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// GetControllerByAddressResponse is the StateQuery/GetControllerByAddressResponse response type.
type GetControllerByAddressResponse struct {
	Value *Controller `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetControllerByAddressResponse) Reset()         { *m = GetControllerByAddressResponse{} }
func (m *GetControllerByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*GetControllerByAddressResponse) ProtoMessage()    {}
func (*GetControllerByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{25}
}
func (m *GetControllerByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetControllerByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetControllerByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetControllerByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetControllerByAddressResponse.Merge(m, src)
}
func (m *GetControllerByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetControllerByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetControllerByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetControllerByAddressResponse proto.InternalMessageInfo

func (m *GetControllerByAddressResponse) GetValue() *Controller {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetControllerByPublicKeyRequest is the StateQuery/GetControllerByPublicKeyRequest request type.
type GetControllerByPublicKeyRequest struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *GetControllerByPublicKeyRequest) Reset()         { *m = GetControllerByPublicKeyRequest{} }
func (m *GetControllerByPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetControllerByPublicKeyRequest) ProtoMessage()    {}
func (*GetControllerByPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{26}
}
func (m *GetControllerByPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetControllerByPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetControllerByPublicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetControllerByPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetControllerByPublicKeyRequest.Merge(m, src)
}
func (m *GetControllerByPublicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetControllerByPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetControllerByPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetControllerByPublicKeyRequest proto.InternalMessageInfo

func (m *GetControllerByPublicKeyRequest) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

// GetControllerByPublicKeyResponse is the StateQuery/GetControllerByPublicKeyResponse response type.
type GetControllerByPublicKeyResponse struct {
	Value *Controller `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetControllerByPublicKeyResponse) Reset()         { *m = GetControllerByPublicKeyResponse{} }
func (m *GetControllerByPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GetControllerByPublicKeyResponse) ProtoMessage()    {}
func (*GetControllerByPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{27}
}
func (m *GetControllerByPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetControllerByPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetControllerByPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetControllerByPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetControllerByPublicKeyResponse.Merge(m, src)
}
func (m *GetControllerByPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetControllerByPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetControllerByPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetControllerByPublicKeyResponse proto.InternalMessageInfo

func (m *GetControllerByPublicKeyResponse) GetValue() *Controller {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetControllerByPeerIdRequest is the StateQuery/GetControllerByPeerIdRequest request type.
type GetControllerByPeerIdRequest struct {
	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (m *GetControllerByPeerIdRequest) Reset()         { *m = GetControllerByPeerIdRequest{} }
func (m *GetControllerByPeerIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetControllerByPeerIdRequest) ProtoMessage()    {}
func (*GetControllerByPeerIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{28}
}
func (m *GetControllerByPeerIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetControllerByPeerIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetControllerByPeerIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetControllerByPeerIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetControllerByPeerIdRequest.Merge(m, src)
}
func (m *GetControllerByPeerIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetControllerByPeerIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetControllerByPeerIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetControllerByPeerIdRequest proto.InternalMessageInfo

func (m *GetControllerByPeerIdRequest) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

// GetControllerByPeerIdResponse is the StateQuery/GetControllerByPeerIdResponse response type.
type GetControllerByPeerIdResponse struct {
	Value *Controller `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetControllerByPeerIdResponse) Reset()         { *m = GetControllerByPeerIdResponse{} }
func (m *GetControllerByPeerIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetControllerByPeerIdResponse) ProtoMessage()    {}
func (*GetControllerByPeerIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{29}
}
func (m *GetControllerByPeerIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetControllerByPeerIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetControllerByPeerIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetControllerByPeerIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetControllerByPeerIdResponse.Merge(m, src)
}
func (m *GetControllerByPeerIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetControllerByPeerIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetControllerByPeerIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetControllerByPeerIdResponse proto.InternalMessageInfo

func (m *GetControllerByPeerIdResponse) GetValue() *Controller {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetControllerByIpnsRequest is the StateQuery/GetControllerByIpnsRequest request type.
type GetControllerByIpnsRequest struct {
	Ipns string `protobuf:"bytes,1,opt,name=ipns,proto3" json:"ipns,omitempty"`
}

func (m *GetControllerByIpnsRequest) Reset()         { *m = GetControllerByIpnsRequest{} }
func (m *GetControllerByIpnsRequest) String() string { return proto.CompactTextString(m) }
func (*GetControllerByIpnsRequest) ProtoMessage()    {}
func (*GetControllerByIpnsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{30}
}
func (m *GetControllerByIpnsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetControllerByIpnsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetControllerByIpnsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetControllerByIpnsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetControllerByIpnsRequest.Merge(m, src)
}
func (m *GetControllerByIpnsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetControllerByIpnsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetControllerByIpnsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetControllerByIpnsRequest proto.InternalMessageInfo

func (m *GetControllerByIpnsRequest) GetIpns() string {
	if m != nil {
		return m.Ipns
	}
	return ""
}

// GetControllerByIpnsResponse is the StateQuery/GetControllerByIpnsResponse response type.
type GetControllerByIpnsResponse struct {
	Value *Controller `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetControllerByIpnsResponse) Reset()         { *m = GetControllerByIpnsResponse{} }
func (m *GetControllerByIpnsResponse) String() string { return proto.CompactTextString(m) }
func (*GetControllerByIpnsResponse) ProtoMessage()    {}
func (*GetControllerByIpnsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{31}
}
func (m *GetControllerByIpnsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetControllerByIpnsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetControllerByIpnsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetControllerByIpnsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetControllerByIpnsResponse.Merge(m, src)
}
func (m *GetControllerByIpnsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetControllerByIpnsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetControllerByIpnsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetControllerByIpnsResponse proto.InternalMessageInfo

func (m *GetControllerByIpnsResponse) GetValue() *Controller {
	if m != nil {
		return m.Value
	}
	return nil
}

// ListControllerRequest is the StateQuery/ListControllerRequest request type.
type ListControllerRequest struct {
	// query specifies the type of query - either a prefix or range query.
	//
	// Types that are valid to be assigned to Query:
	//
	//	*ListControllerRequest_PrefixQuery
	//	*ListControllerRequest_RangeQuery_
	Query isListControllerRequest_Query `protobuf_oneof:"query"`
	// pagination specifies optional pagination parameters.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListControllerRequest) Reset()         { *m = ListControllerRequest{} }
func (m *ListControllerRequest) String() string { return proto.CompactTextString(m) }
func (*ListControllerRequest) ProtoMessage()    {}
func (*ListControllerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{32}
}
func (m *ListControllerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListControllerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListControllerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListControllerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListControllerRequest.Merge(m, src)
}
func (m *ListControllerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListControllerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListControllerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListControllerRequest proto.InternalMessageInfo

type isListControllerRequest_Query interface {
	isListControllerRequest_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListControllerRequest_PrefixQuery struct {
	PrefixQuery *ListControllerRequest_IndexKey `protobuf:"bytes,1,opt,name=prefix_query,json=prefixQuery,proto3,oneof" json:"prefix_query,omitempty"`
}
type ListControllerRequest_RangeQuery_ struct {
	RangeQuery *ListControllerRequest_RangeQuery `protobuf:"bytes,2,opt,name=range_query,json=rangeQuery,proto3,oneof" json:"range_query,omitempty"`
}

func (*ListControllerRequest_PrefixQuery) isListControllerRequest_Query() {}
func (*ListControllerRequest_RangeQuery_) isListControllerRequest_Query() {}

func (m *ListControllerRequest) GetQuery() isListControllerRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListControllerRequest) GetPrefixQuery() *ListControllerRequest_IndexKey {
	if x, ok := m.GetQuery().(*ListControllerRequest_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (m *ListControllerRequest) GetRangeQuery() *ListControllerRequest_RangeQuery {
	if x, ok := m.GetQuery().(*ListControllerRequest_RangeQuery_); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *ListControllerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListControllerRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListControllerRequest_PrefixQuery)(nil),
		(*ListControllerRequest_RangeQuery_)(nil),
	}
}

// IndexKey specifies the value of an index key to use in prefix and range queries.
type ListControllerRequest_IndexKey struct {
	// key specifies the index key value.
	//
	// Types that are valid to be assigned to Key:
	//
	//	*ListControllerRequest_IndexKey_Sequence_
	//	*ListControllerRequest_IndexKey_Address_
	//	*ListControllerRequest_IndexKey_PublicKey_
	//	*ListControllerRequest_IndexKey_PeerId_
	//	*ListControllerRequest_IndexKey_Ipns_
	Key isListControllerRequest_IndexKey_Key `protobuf_oneof:"key"`
}

func (m *ListControllerRequest_IndexKey) Reset()         { *m = ListControllerRequest_IndexKey{} }
func (m *ListControllerRequest_IndexKey) String() string { return proto.CompactTextString(m) }
func (*ListControllerRequest_IndexKey) ProtoMessage()    {}
func (*ListControllerRequest_IndexKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{32, 0}
}
func (m *ListControllerRequest_IndexKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListControllerRequest_IndexKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListControllerRequest_IndexKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListControllerRequest_IndexKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListControllerRequest_IndexKey.Merge(m, src)
}
func (m *ListControllerRequest_IndexKey) XXX_Size() int {
	return m.Size()
}
func (m *ListControllerRequest_IndexKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListControllerRequest_IndexKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListControllerRequest_IndexKey proto.InternalMessageInfo

type isListControllerRequest_IndexKey_Key interface {
	isListControllerRequest_IndexKey_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListControllerRequest_IndexKey_Sequence_ struct {
	Sequence *ListControllerRequest_IndexKey_Sequence `protobuf:"bytes,1,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
}
type ListControllerRequest_IndexKey_Address_ struct {
	Address *ListControllerRequest_IndexKey_Address `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
}
type ListControllerRequest_IndexKey_PublicKey_ struct {
	PublicKey *ListControllerRequest_IndexKey_PublicKey `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3,oneof" json:"public_key,omitempty"`
}
type ListControllerRequest_IndexKey_PeerId_ struct {
	PeerId *ListControllerRequest_IndexKey_PeerId `protobuf:"bytes,4,opt,name=peer_id,json=peerId,proto3,oneof" json:"peer_id,omitempty"`
}
type ListControllerRequest_IndexKey_Ipns_ struct {
	Ipns *ListControllerRequest_IndexKey_Ipns `protobuf:"bytes,5,opt,name=ipns,proto3,oneof" json:"ipns,omitempty"`
}

func (*ListControllerRequest_IndexKey_Sequence_) isListControllerRequest_IndexKey_Key()  {}
func (*ListControllerRequest_IndexKey_Address_) isListControllerRequest_IndexKey_Key()   {}
func (*ListControllerRequest_IndexKey_PublicKey_) isListControllerRequest_IndexKey_Key() {}
func (*ListControllerRequest_IndexKey_PeerId_) isListControllerRequest_IndexKey_Key()    {}
func (*ListControllerRequest_IndexKey_Ipns_) isListControllerRequest_IndexKey_Key()      {}

func (m *ListControllerRequest_IndexKey) GetKey() isListControllerRequest_IndexKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListControllerRequest_IndexKey) GetSequence() *ListControllerRequest_IndexKey_Sequence {
	if x, ok := m.GetKey().(*ListControllerRequest_IndexKey_Sequence_); ok {
		return x.Sequence
	}
	return nil
}

func (m *ListControllerRequest_IndexKey) GetAddress() *ListControllerRequest_IndexKey_Address {
	if x, ok := m.GetKey().(*ListControllerRequest_IndexKey_Address_); ok {
		return x.Address
	}
	return nil
}

func (m *ListControllerRequest_IndexKey) GetPublicKey() *ListControllerRequest_IndexKey_PublicKey {
	if x, ok := m.GetKey().(*ListControllerRequest_IndexKey_PublicKey_); ok {
		return x.PublicKey
	}
	return nil
}

func (m *ListControllerRequest_IndexKey) GetPeerId() *ListControllerRequest_IndexKey_PeerId {
	if x, ok := m.GetKey().(*ListControllerRequest_IndexKey_PeerId_); ok {
		return x.PeerId
	}
	return nil
}

func (m *ListControllerRequest_IndexKey) GetIpns() *ListControllerRequest_IndexKey_Ipns {
	if x, ok := m.GetKey().(*ListControllerRequest_IndexKey_Ipns_); ok {
		return x.Ipns
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListControllerRequest_IndexKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListControllerRequest_IndexKey_Sequence_)(nil),
		(*ListControllerRequest_IndexKey_Address_)(nil),
		(*ListControllerRequest_IndexKey_PublicKey_)(nil),
		(*ListControllerRequest_IndexKey_PeerId_)(nil),
		(*ListControllerRequest_IndexKey_Ipns_)(nil),
	}
}

type ListControllerRequest_IndexKey_Sequence struct {
	// Types that are valid to be assigned to XSequence:
	//
	//	*ListControllerRequest_IndexKey_Sequence_Sequence
	XSequence isListControllerRequest_IndexKey_Sequence_XSequence `protobuf_oneof:"_sequence"`
}

func (m *ListControllerRequest_IndexKey_Sequence) Reset() {
	*m = ListControllerRequest_IndexKey_Sequence{}
}
func (m *ListControllerRequest_IndexKey_Sequence) String() string { return proto.CompactTextString(m) }
func (*ListControllerRequest_IndexKey_Sequence) ProtoMessage()    {}
func (*ListControllerRequest_IndexKey_Sequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{32, 0, 0}
}
func (m *ListControllerRequest_IndexKey_Sequence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListControllerRequest_IndexKey_Sequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListControllerRequest_IndexKey_Sequence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListControllerRequest_IndexKey_Sequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListControllerRequest_IndexKey_Sequence.Merge(m, src)
}
func (m *ListControllerRequest_IndexKey_Sequence) XXX_Size() int {
	return m.Size()
}
func (m *ListControllerRequest_IndexKey_Sequence) XXX_DiscardUnknown() {
	xxx_messageInfo_ListControllerRequest_IndexKey_Sequence.DiscardUnknown(m)
}

var xxx_messageInfo_ListControllerRequest_IndexKey_Sequence proto.InternalMessageInfo

type isListControllerRequest_IndexKey_Sequence_XSequence interface {
	isListControllerRequest_IndexKey_Sequence_XSequence()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListControllerRequest_IndexKey_Sequence_Sequence struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
}

func (*ListControllerRequest_IndexKey_Sequence_Sequence) isListControllerRequest_IndexKey_Sequence_XSequence() {
}

func (m *ListControllerRequest_IndexKey_Sequence) GetXSequence() isListControllerRequest_IndexKey_Sequence_XSequence {
	if m != nil {
		return m.XSequence
	}
	return nil
}

func (m *ListControllerRequest_IndexKey_Sequence) GetSequence() uint64 {
	if x, ok := m.GetXSequence().(*ListControllerRequest_IndexKey_Sequence_Sequence); ok {
		return x.Sequence
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListControllerRequest_IndexKey_Sequence) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListControllerRequest_IndexKey_Sequence_Sequence)(nil),
	}
}

type ListControllerRequest_IndexKey_Address struct {
	// Types that are valid to be assigned to XAddress:
	//
	//	*ListControllerRequest_IndexKey_Address_Address
	XAddress isListControllerRequest_IndexKey_Address_XAddress `protobuf_oneof:"_address"`
}

func (m *ListControllerRequest_IndexKey_Address) Reset() {
	*m = ListControllerRequest_IndexKey_Address{}
}
func (m *ListControllerRequest_IndexKey_Address) String() string { return proto.CompactTextString(m) }
func (*ListControllerRequest_IndexKey_Address) ProtoMessage()    {}
func (*ListControllerRequest_IndexKey_Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{32, 0, 1}
}
func (m *ListControllerRequest_IndexKey_Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListControllerRequest_IndexKey_Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListControllerRequest_IndexKey_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListControllerRequest_IndexKey_Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListControllerRequest_IndexKey_Address.Merge(m, src)
}
func (m *ListControllerRequest_IndexKey_Address) XXX_Size() int {
	return m.Size()
}
func (m *ListControllerRequest_IndexKey_Address) XXX_DiscardUnknown() {
	xxx_messageInfo_ListControllerRequest_IndexKey_Address.DiscardUnknown(m)
}

var xxx_messageInfo_ListControllerRequest_IndexKey_Address proto.InternalMessageInfo

type isListControllerRequest_IndexKey_Address_XAddress interface {
	isListControllerRequest_IndexKey_Address_XAddress()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListControllerRequest_IndexKey_Address_Address struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3,oneof" json:"address,omitempty"`
}

func (*ListControllerRequest_IndexKey_Address_Address) isListControllerRequest_IndexKey_Address_XAddress() {
}

func (m *ListControllerRequest_IndexKey_Address) GetXAddress() isListControllerRequest_IndexKey_Address_XAddress {
	if m != nil {
		return m.XAddress
	}
	return nil
}

func (m *ListControllerRequest_IndexKey_Address) GetAddress() string {
	if x, ok := m.GetXAddress().(*ListControllerRequest_IndexKey_Address_Address); ok {
		return x.Address
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListControllerRequest_IndexKey_Address) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListControllerRequest_IndexKey_Address_Address)(nil),
	}
}

type ListControllerRequest_IndexKey_PublicKey struct {
	// Types that are valid to be assigned to XPublicKey:
	//
	//	*ListControllerRequest_IndexKey_PublicKey_PublicKey
	XPublicKey isListControllerRequest_IndexKey_PublicKey_XPublicKey `protobuf_oneof:"_public_key"`
}

func (m *ListControllerRequest_IndexKey_PublicKey) Reset() {
	*m = ListControllerRequest_IndexKey_PublicKey{}
}
func (m *ListControllerRequest_IndexKey_PublicKey) String() string { return proto.CompactTextString(m) }
func (*ListControllerRequest_IndexKey_PublicKey) ProtoMessage()    {}
func (*ListControllerRequest_IndexKey_PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{32, 0, 2}
}
func (m *ListControllerRequest_IndexKey_PublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListControllerRequest_IndexKey_PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListControllerRequest_IndexKey_PublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListControllerRequest_IndexKey_PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListControllerRequest_IndexKey_PublicKey.Merge(m, src)
}
func (m *ListControllerRequest_IndexKey_PublicKey) XXX_Size() int {
	return m.Size()
}
func (m *ListControllerRequest_IndexKey_PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListControllerRequest_IndexKey_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListControllerRequest_IndexKey_PublicKey proto.InternalMessageInfo

type isListControllerRequest_IndexKey_PublicKey_XPublicKey interface {
	isListControllerRequest_IndexKey_PublicKey_XPublicKey()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListControllerRequest_IndexKey_PublicKey_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof" json:"public_key,omitempty"`
}

func (*ListControllerRequest_IndexKey_PublicKey_PublicKey) isListControllerRequest_IndexKey_PublicKey_XPublicKey() {
}

func (m *ListControllerRequest_IndexKey_PublicKey) GetXPublicKey() isListControllerRequest_IndexKey_PublicKey_XPublicKey {
	if m != nil {
		return m.XPublicKey
	}
	return nil
}

func (m *ListControllerRequest_IndexKey_PublicKey) GetPublicKey() []byte {
	if x, ok := m.GetXPublicKey().(*ListControllerRequest_IndexKey_PublicKey_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListControllerRequest_IndexKey_PublicKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListControllerRequest_IndexKey_PublicKey_PublicKey)(nil),
	}
}

type ListControllerRequest_IndexKey_PeerId struct {
	// Types that are valid to be assigned to XPeerId:
	//
	//	*ListControllerRequest_IndexKey_PeerId_PeerId
	XPeerId isListControllerRequest_IndexKey_PeerId_XPeerId `protobuf_oneof:"_peer_id"`
}

func (m *ListControllerRequest_IndexKey_PeerId) Reset()         { *m = ListControllerRequest_IndexKey_PeerId{} }
func (m *ListControllerRequest_IndexKey_PeerId) String() string { return proto.CompactTextString(m) }
func (*ListControllerRequest_IndexKey_PeerId) ProtoMessage()    {}
func (*ListControllerRequest_IndexKey_PeerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{32, 0, 3}
}
func (m *ListControllerRequest_IndexKey_PeerId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListControllerRequest_IndexKey_PeerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListControllerRequest_IndexKey_PeerId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListControllerRequest_IndexKey_PeerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListControllerRequest_IndexKey_PeerId.Merge(m, src)
}
func (m *ListControllerRequest_IndexKey_PeerId) XXX_Size() int {
	return m.Size()
}
func (m *ListControllerRequest_IndexKey_PeerId) XXX_DiscardUnknown() {
	xxx_messageInfo_ListControllerRequest_IndexKey_PeerId.DiscardUnknown(m)
}

var xxx_messageInfo_ListControllerRequest_IndexKey_PeerId proto.InternalMessageInfo

type isListControllerRequest_IndexKey_PeerId_XPeerId interface {
	isListControllerRequest_IndexKey_PeerId_XPeerId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListControllerRequest_IndexKey_PeerId_PeerId struct {
	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3,oneof" json:"peer_id,omitempty"`
}

func (*ListControllerRequest_IndexKey_PeerId_PeerId) isListControllerRequest_IndexKey_PeerId_XPeerId() {
}

func (m *ListControllerRequest_IndexKey_PeerId) GetXPeerId() isListControllerRequest_IndexKey_PeerId_XPeerId {
	if m != nil {
		return m.XPeerId
	}
	return nil
}

func (m *ListControllerRequest_IndexKey_PeerId) GetPeerId() string {
	if x, ok := m.GetXPeerId().(*ListControllerRequest_IndexKey_PeerId_PeerId); ok {
		return x.PeerId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListControllerRequest_IndexKey_PeerId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListControllerRequest_IndexKey_PeerId_PeerId)(nil),
	}
}

type ListControllerRequest_IndexKey_Ipns struct {
	// Types that are valid to be assigned to XIpns:
	//
	//	*ListControllerRequest_IndexKey_Ipns_Ipns
	XIpns isListControllerRequest_IndexKey_Ipns_XIpns `protobuf_oneof:"_ipns"`
}

func (m *ListControllerRequest_IndexKey_Ipns) Reset()         { *m = ListControllerRequest_IndexKey_Ipns{} }
func (m *ListControllerRequest_IndexKey_Ipns) String() string { return proto.CompactTextString(m) }
func (*ListControllerRequest_IndexKey_Ipns) ProtoMessage()    {}
func (*ListControllerRequest_IndexKey_Ipns) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{32, 0, 4}
}
func (m *ListControllerRequest_IndexKey_Ipns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListControllerRequest_IndexKey_Ipns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListControllerRequest_IndexKey_Ipns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListControllerRequest_IndexKey_Ipns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListControllerRequest_IndexKey_Ipns.Merge(m, src)
}
func (m *ListControllerRequest_IndexKey_Ipns) XXX_Size() int {
	return m.Size()
}
func (m *ListControllerRequest_IndexKey_Ipns) XXX_DiscardUnknown() {
	xxx_messageInfo_ListControllerRequest_IndexKey_Ipns.DiscardUnknown(m)
}

var xxx_messageInfo_ListControllerRequest_IndexKey_Ipns proto.InternalMessageInfo

type isListControllerRequest_IndexKey_Ipns_XIpns interface {
	isListControllerRequest_IndexKey_Ipns_XIpns()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListControllerRequest_IndexKey_Ipns_Ipns struct {
	Ipns string `protobuf:"bytes,1,opt,name=ipns,proto3,oneof" json:"ipns,omitempty"`
}

func (*ListControllerRequest_IndexKey_Ipns_Ipns) isListControllerRequest_IndexKey_Ipns_XIpns() {}

func (m *ListControllerRequest_IndexKey_Ipns) GetXIpns() isListControllerRequest_IndexKey_Ipns_XIpns {
	if m != nil {
		return m.XIpns
	}
	return nil
}

func (m *ListControllerRequest_IndexKey_Ipns) GetIpns() string {
	if x, ok := m.GetXIpns().(*ListControllerRequest_IndexKey_Ipns_Ipns); ok {
		return x.Ipns
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListControllerRequest_IndexKey_Ipns) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListControllerRequest_IndexKey_Ipns_Ipns)(nil),
	}
}

// RangeQuery specifies the from/to index keys for a range query.
type ListControllerRequest_RangeQuery struct {
	// from is the index key to use for the start of the range query.
	// To query from the start of an index, specify an index key for that index with empty values.
	From *ListControllerRequest_IndexKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the index key to use for the end of the range query.
	// The index key type MUST be the same as the index key type used for from.
	// To query from to the end of an index it can be omitted.
	To *ListControllerRequest_IndexKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ListControllerRequest_RangeQuery) Reset()         { *m = ListControllerRequest_RangeQuery{} }
func (m *ListControllerRequest_RangeQuery) String() string { return proto.CompactTextString(m) }
func (*ListControllerRequest_RangeQuery) ProtoMessage()    {}
func (*ListControllerRequest_RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{32, 1}
}
func (m *ListControllerRequest_RangeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListControllerRequest_RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListControllerRequest_RangeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListControllerRequest_RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListControllerRequest_RangeQuery.Merge(m, src)
}
func (m *ListControllerRequest_RangeQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListControllerRequest_RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListControllerRequest_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListControllerRequest_RangeQuery proto.InternalMessageInfo

func (m *ListControllerRequest_RangeQuery) GetFrom() *ListControllerRequest_IndexKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListControllerRequest_RangeQuery) GetTo() *ListControllerRequest_IndexKey {
	if m != nil {
		return m.To
	}
	return nil
}

// ListControllerResponse is the StateQuery/ListControllerResponse response type.
type ListControllerResponse struct {
	// values are the results of the query.
	Values []*Controller `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// pagination is the pagination response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListControllerResponse) Reset()         { *m = ListControllerResponse{} }
func (m *ListControllerResponse) String() string { return proto.CompactTextString(m) }
func (*ListControllerResponse) ProtoMessage()    {}
func (*ListControllerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1c94deb98674ab, []int{33}
}
func (m *ListControllerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListControllerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListControllerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListControllerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListControllerResponse.Merge(m, src)
}
func (m *ListControllerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListControllerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListControllerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListControllerResponse proto.InternalMessageInfo

func (m *ListControllerResponse) GetValues() []*Controller {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListControllerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*GetAccountRequest)(nil), "sonrhq.sonr.identity.module.v1.GetAccountRequest")
	proto.RegisterType((*GetAccountResponse)(nil), "sonrhq.sonr.identity.module.v1.GetAccountResponse")
	proto.RegisterType((*GetAccountByAddressRequest)(nil), "sonrhq.sonr.identity.module.v1.GetAccountByAddressRequest")
	proto.RegisterType((*GetAccountByAddressResponse)(nil), "sonrhq.sonr.identity.module.v1.GetAccountByAddressResponse")
	proto.RegisterType((*GetAccountByPublicKeyRequest)(nil), "sonrhq.sonr.identity.module.v1.GetAccountByPublicKeyRequest")
	proto.RegisterType((*GetAccountByPublicKeyResponse)(nil), "sonrhq.sonr.identity.module.v1.GetAccountByPublicKeyResponse")
	proto.RegisterType((*ListAccountRequest)(nil), "sonrhq.sonr.identity.module.v1.ListAccountRequest")
	proto.RegisterType((*ListAccountRequest_IndexKey)(nil), "sonrhq.sonr.identity.module.v1.ListAccountRequest.IndexKey")
	proto.RegisterType((*ListAccountRequest_IndexKey_Sequence)(nil), "sonrhq.sonr.identity.module.v1.ListAccountRequest.IndexKey.Sequence")
	proto.RegisterType((*ListAccountRequest_IndexKey_Address)(nil), "sonrhq.sonr.identity.module.v1.ListAccountRequest.IndexKey.Address")
	proto.RegisterType((*ListAccountRequest_IndexKey_PublicKey)(nil), "sonrhq.sonr.identity.module.v1.ListAccountRequest.IndexKey.PublicKey")
	proto.RegisterType((*ListAccountRequest_RangeQuery)(nil), "sonrhq.sonr.identity.module.v1.ListAccountRequest.RangeQuery")
	proto.RegisterType((*ListAccountResponse)(nil), "sonrhq.sonr.identity.module.v1.ListAccountResponse")
	proto.RegisterType((*GetBlockchainRequest)(nil), "sonrhq.sonr.identity.module.v1.GetBlockchainRequest")
	proto.RegisterType((*GetBlockchainResponse)(nil), "sonrhq.sonr.identity.module.v1.GetBlockchainResponse")
	proto.RegisterType((*GetBlockchainByChainIdRequest)(nil), "sonrhq.sonr.identity.module.v1.GetBlockchainByChainIdRequest")
	proto.RegisterType((*GetBlockchainByChainIdResponse)(nil), "sonrhq.sonr.identity.module.v1.GetBlockchainByChainIdResponse")
	proto.RegisterType((*GetBlockchainByNameRequest)(nil), "sonrhq.sonr.identity.module.v1.GetBlockchainByNameRequest")
	proto.RegisterType((*GetBlockchainByNameResponse)(nil), "sonrhq.sonr.identity.module.v1.GetBlockchainByNameResponse")
	proto.RegisterType((*ListBlockchainRequest)(nil), "sonrhq.sonr.identity.module.v1.ListBlockchainRequest")
	proto.RegisterType((*ListBlockchainRequest_IndexKey)(nil), "sonrhq.sonr.identity.module.v1.ListBlockchainRequest.IndexKey")
	proto.RegisterType((*ListBlockchainRequest_IndexKey_Index)(nil), "sonrhq.sonr.identity.module.v1.ListBlockchainRequest.IndexKey.Index")
	proto.RegisterType((*ListBlockchainRequest_IndexKey_ChainId)(nil), "sonrhq.sonr.identity.module.v1.ListBlockchainRequest.IndexKey.ChainId")
	proto.RegisterType((*ListBlockchainRequest_IndexKey_Name)(nil), "sonrhq.sonr.identity.module.v1.ListBlockchainRequest.IndexKey.Name")
	proto.RegisterType((*ListBlockchainRequest_RangeQuery)(nil), "sonrhq.sonr.identity.module.v1.ListBlockchainRequest.RangeQuery")
	proto.RegisterType((*ListBlockchainResponse)(nil), "sonrhq.sonr.identity.module.v1.ListBlockchainResponse")
	proto.RegisterType((*GetAccumulatorRequest)(nil), "sonrhq.sonr.identity.module.v1.GetAccumulatorRequest")
	proto.RegisterType((*GetAccumulatorResponse)(nil), "sonrhq.sonr.identity.module.v1.GetAccumulatorResponse")
	proto.RegisterType((*GetAccumulatorByControllerKeyRequest)(nil), "sonrhq.sonr.identity.module.v1.GetAccumulatorByControllerKeyRequest")
	proto.RegisterType((*GetAccumulatorByControllerKeyResponse)(nil), "sonrhq.sonr.identity.module.v1.GetAccumulatorByControllerKeyResponse")
	proto.RegisterType((*ListAccumulatorRequest)(nil), "sonrhq.sonr.identity.module.v1.ListAccumulatorRequest")
	proto.RegisterType((*ListAccumulatorRequest_IndexKey)(nil), "sonrhq.sonr.identity.module.v1.ListAccumulatorRequest.IndexKey")
	proto.RegisterType((*ListAccumulatorRequest_IndexKey_Index)(nil), "sonrhq.sonr.identity.module.v1.ListAccumulatorRequest.IndexKey.Index")
	proto.RegisterType((*ListAccumulatorRequest_IndexKey_ControllerKey)(nil), "sonrhq.sonr.identity.module.v1.ListAccumulatorRequest.IndexKey.ControllerKey")
	proto.RegisterType((*ListAccumulatorRequest_RangeQuery)(nil), "sonrhq.sonr.identity.module.v1.ListAccumulatorRequest.RangeQuery")
	proto.RegisterType((*ListAccumulatorResponse)(nil), "sonrhq.sonr.identity.module.v1.ListAccumulatorResponse")
	proto.RegisterType((*GetControllerRequest)(nil), "sonrhq.sonr.identity.module.v1.GetControllerRequest")
	proto.RegisterType((*GetControllerResponse)(nil), "sonrhq.sonr.identity.module.v1.GetControllerResponse")
	proto.RegisterType((*GetControllerByAddressRequest)(nil), "sonrhq.sonr.identity.module.v1.GetControllerByAddressRequest")
	proto.RegisterType((*GetControllerByAddressResponse)(nil), "sonrhq.sonr.identity.module.v1.GetControllerByAddressResponse")
	proto.RegisterType((*GetControllerByPublicKeyRequest)(nil), "sonrhq.sonr.identity.module.v1.GetControllerByPublicKeyRequest")
	proto.RegisterType((*GetControllerByPublicKeyResponse)(nil), "sonrhq.sonr.identity.module.v1.GetControllerByPublicKeyResponse")
	proto.RegisterType((*GetControllerByPeerIdRequest)(nil), "sonrhq.sonr.identity.module.v1.GetControllerByPeerIdRequest")
	proto.RegisterType((*GetControllerByPeerIdResponse)(nil), "sonrhq.sonr.identity.module.v1.GetControllerByPeerIdResponse")
	proto.RegisterType((*GetControllerByIpnsRequest)(nil), "sonrhq.sonr.identity.module.v1.GetControllerByIpnsRequest")
	proto.RegisterType((*GetControllerByIpnsResponse)(nil), "sonrhq.sonr.identity.module.v1.GetControllerByIpnsResponse")
	proto.RegisterType((*ListControllerRequest)(nil), "sonrhq.sonr.identity.module.v1.ListControllerRequest")
	proto.RegisterType((*ListControllerRequest_IndexKey)(nil), "sonrhq.sonr.identity.module.v1.ListControllerRequest.IndexKey")
	proto.RegisterType((*ListControllerRequest_IndexKey_Sequence)(nil), "sonrhq.sonr.identity.module.v1.ListControllerRequest.IndexKey.Sequence")
	proto.RegisterType((*ListControllerRequest_IndexKey_Address)(nil), "sonrhq.sonr.identity.module.v1.ListControllerRequest.IndexKey.Address")
	proto.RegisterType((*ListControllerRequest_IndexKey_PublicKey)(nil), "sonrhq.sonr.identity.module.v1.ListControllerRequest.IndexKey.PublicKey")
	proto.RegisterType((*ListControllerRequest_IndexKey_PeerId)(nil), "sonrhq.sonr.identity.module.v1.ListControllerRequest.IndexKey.PeerId")
	proto.RegisterType((*ListControllerRequest_IndexKey_Ipns)(nil), "sonrhq.sonr.identity.module.v1.ListControllerRequest.IndexKey.Ipns")
	proto.RegisterType((*ListControllerRequest_RangeQuery)(nil), "sonrhq.sonr.identity.module.v1.ListControllerRequest.RangeQuery")
	proto.RegisterType((*ListControllerResponse)(nil), "sonrhq.sonr.identity.module.v1.ListControllerResponse")
}

func init() {
	proto.RegisterFile("sonrhq/sonr/identity/module/v1/state_query.proto", fileDescriptor_2d1c94deb98674ab)
}

var fileDescriptor_2d1c94deb98674ab = []byte{
	// 1709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xcd, 0x8f, 0xd3, 0x46,
	0x14, 0xb7, 0xf7, 0x23, 0xd9, 0x7d, 0x61, 0x69, 0x19, 0xbe, 0x16, 0x17, 0x02, 0x72, 0xbf, 0x10,
	0xa5, 0x09, 0x1b, 0xd8, 0xa5, 0x85, 0x2e, 0xec, 0x66, 0x81, 0x0d, 0xa2, 0x05, 0x9a, 0xbd, 0x14,
	0x95, 0x36, 0x38, 0xce, 0x00, 0x29, 0x59, 0x3b, 0x38, 0xce, 0x8a, 0x5c, 0x2a, 0x55, 0xea, 0x81,
	0x4b, 0x25, 0xd4, 0x43, 0xa5, 0x9e, 0x38, 0x55, 0x48, 0x3d, 0x54, 0x55, 0xff, 0x81, 0x1e, 0xdb,
	0x23, 0xc7, 0x1e, 0x2b, 0x38, 0xf4, 0xd6, 0x3f, 0x80, 0x53, 0x35, 0xe3, 0x71, 0x3c, 0x1e, 0xdb,
	0x59, 0x3b, 0xf6, 0x1e, 0x7a, 0x5a, 0xdb, 0x99, 0xf7, 0x7b, 0x6f, 0x9e, 0xdf, 0xfb, 0xbd, 0x79,
	0xcf, 0x0b, 0xa7, 0x7a, 0xa6, 0x61, 0xdd, 0x7f, 0x58, 0x26, 0x7f, 0xca, 0xed, 0x16, 0x36, 0xec,
	0xb6, 0x3d, 0x28, 0x6f, 0x9a, 0xad, 0x7e, 0x07, 0x97, 0xb7, 0x16, 0xca, 0x3d, 0x5b, 0xb3, 0x71,
	0xe3, 0x61, 0x1f, 0x5b, 0x83, 0x52, 0xd7, 0x32, 0x6d, 0x13, 0x15, 0x1d, 0x89, 0x12, 0xf9, 0x53,
	0x72, 0x25, 0x4a, 0x8e, 0x44, 0x69, 0x6b, 0x41, 0x39, 0xa1, 0x9b, 0xbd, 0x4d, 0xb3, 0x57, 0x6e,
	0x6a, 0x3d, 0x5c, 0xa6, 0x82, 0xe5, 0xad, 0x85, 0x26, 0xb6, 0xb5, 0x85, 0x72, 0x57, 0xbb, 0xd7,
	0x36, 0x34, 0xbb, 0x6d, 0x1a, 0x0e, 0x96, 0x72, 0x22, 0x8e, 0x76, 0x67, 0xad, 0x5a, 0x86, 0x3d,
	0xeb, 0xd8, 0x5e, 0xd5, 0x75, 0xb3, 0x6f, 0xd8, 0x75, 0xfc, 0xb0, 0x8f, 0x7b, 0x36, 0x52, 0x60,
	0xa6, 0x47, 0x2e, 0x0d, 0x1d, 0xcf, 0xcb, 0xc7, 0xe4, 0xe3, 0x53, 0xf5, 0xe1, 0xbd, 0xba, 0x01,
	0x88, 0x17, 0xe8, 0x75, 0x4d, 0xa3, 0x87, 0xd1, 0x32, 0x4c, 0x6f, 0x69, 0x9d, 0xbe, 0xb3, 0xbc,
	0x50, 0x79, 0xb7, 0x34, 0x7a, 0x3b, 0x25, 0x57, 0xde, 0x91, 0x52, 0x97, 0x40, 0xf1, 0x40, 0xab,
	0x83, 0xd5, 0x56, 0xcb, 0xc2, 0xbd, 0x9e, 0x6b, 0xce, 0x3c, 0xe4, 0x35, 0xe7, 0x09, 0x85, 0x9f,
	0xad, 0xbb, 0xb7, 0xea, 0x6d, 0x78, 0x23, 0x54, 0x2e, 0x1b, 0xab, 0x96, 0xe1, 0x30, 0x8f, 0x7e,
	0xb3, 0xdf, 0xec, 0xb4, 0xf5, 0x6b, 0x78, 0xe0, 0xda, 0x75, 0x04, 0xa0, 0x4b, 0x9f, 0x35, 0x1e,
	0xe0, 0x01, 0xd5, 0xb1, 0xab, 0x3e, 0xdb, 0x75, 0x57, 0xa9, 0x5f, 0xc2, 0x91, 0x08, 0xf1, 0x6c,
	0xcc, 0xfb, 0x23, 0x0f, 0xe8, 0xe3, 0x76, 0x4f, 0x7c, 0x79, 0x77, 0x60, 0x57, 0xd7, 0xc2, 0x77,
	0xdb, 0x8f, 0x9c, 0xf8, 0x62, 0xe0, 0xe7, 0xb7, 0x03, 0x0f, 0x22, 0x95, 0xae, 0x1a, 0x2d, 0xfc,
	0xe8, 0x1a, 0x1e, 0xd4, 0xa4, 0x7a, 0xc1, 0x81, 0xfc, 0x94, 0x20, 0xa2, 0x3b, 0x50, 0xb0, 0x34,
	0xe3, 0x1e, 0x0b, 0xe0, 0xf9, 0x09, 0xaa, 0x60, 0x79, 0x0c, 0x05, 0x75, 0x82, 0x42, 0x31, 0x6b,
	0x52, 0x1d, 0xac, 0xe1, 0x1d, 0xba, 0x02, 0xe0, 0x45, 0xf5, 0xfc, 0x24, 0x55, 0xf0, 0x4e, 0xc9,
	0x49, 0x81, 0x12, 0x49, 0x81, 0x92, 0x93, 0x3b, 0x2c, 0x05, 0x4a, 0x37, 0xb5, 0x7b, 0x98, 0x81,
	0xd6, 0x39, 0x49, 0xe5, 0xdf, 0x49, 0x98, 0x71, 0x77, 0x81, 0x9a, 0x42, 0x54, 0x17, 0x2a, 0x97,
	0x52, 0x38, 0xa5, 0xb4, 0xc1, 0xb0, 0x6a, 0x92, 0x97, 0x1d, 0xa8, 0xe1, 0x85, 0xaa, 0xe3, 0x96,
	0xb5, 0x34, 0x2a, 0x58, 0x3c, 0xd7, 0xa4, 0x61, 0xc4, 0xa3, 0xbb, 0xbe, 0x98, 0x73, 0x3c, 0x73,
	0x39, 0x8d, 0x8e, 0x61, 0x58, 0xd6, 0x24, 0x2e, 0x78, 0x95, 0x0f, 0x60, 0xc6, 0xdd, 0x20, 0x3a,
	0x2a, 0xd2, 0x01, 0xbf, 0xe5, 0xc7, 0xb2, 0x5c, 0x2d, 0xc0, 0x6c, 0xc3, 0xbd, 0x57, 0xce, 0x40,
	0x9e, 0xd9, 0x8d, 0x8e, 0x08, 0x89, 0xcb, 0x6d, 0x84, 0x88, 0x01, 0xcc, 0x34, 0xd8, 0xad, 0x72,
	0x01, 0x66, 0x87, 0x96, 0x20, 0x35, 0x98, 0x58, 0x3e, 0xeb, 0x88, 0xf0, 0x1c, 0x14, 0x1a, 0xde,
	0xa2, 0xea, 0x34, 0x4c, 0x3e, 0xc0, 0x03, 0xe5, 0x67, 0x19, 0xc0, 0x8b, 0x2a, 0x74, 0x03, 0xa6,
	0xee, 0x5a, 0xe6, 0x66, 0x06, 0x39, 0x50, 0xa7, 0x40, 0xe8, 0x1a, 0x4c, 0xd8, 0x26, 0x7b, 0xb5,
	0xa9, 0xe0, 0x26, 0x6c, 0xb3, 0x9a, 0x87, 0x69, 0x1a, 0xc6, 0xea, 0x53, 0x19, 0xf6, 0xfa, 0x16,
	0x33, 0x82, 0xb8, 0x08, 0x39, 0x9a, 0xea, 0xc4, 0x7d, 0x93, 0x49, 0x18, 0x82, 0x89, 0xa1, 0x75,
	0x5f, 0x1e, 0x4d, 0x30, 0x9a, 0xd9, 0x2e, 0x8f, 0x1c, 0xed, 0x7c, 0x22, 0xa9, 0x27, 0x61, 0xdf,
	0x3a, 0xb6, 0xab, 0x1d, 0x53, 0x7f, 0xa0, 0xdf, 0xd7, 0xda, 0x86, 0x4b, 0x36, 0xfb, 0x60, 0xba,
	0x4d, 0xb6, 0xc4, 0xca, 0x84, 0x73, 0xa3, 0xde, 0x82, 0xfd, 0xc2, 0x6a, 0xb6, 0xa1, 0x15, 0x3f,
	0xe3, 0x9d, 0xd8, 0x6e, 0x3f, 0x1c, 0x04, 0x23, 0xbd, 0x73, 0x94, 0x54, 0xbd, 0xe7, 0xd5, 0xc1,
	0x1a, 0xf9, 0x73, 0xb5, 0xe5, 0x5a, 0x74, 0x08, 0x66, 0xe8, 0x0f, 0x8d, 0x76, 0xcb, 0xad, 0x16,
	0xba, 0xb3, 0x42, 0x6d, 0x42, 0x31, 0x4a, 0x36, 0x33, 0xfb, 0x4e, 0xd1, 0x4a, 0xc6, 0xeb, 0xb8,
	0xae, 0x6d, 0xba, 0xdc, 0x84, 0x10, 0x4c, 0x19, 0xda, 0x26, 0x66, 0x86, 0xd1, 0x6b, 0xb5, 0x41,
	0x6b, 0x58, 0x50, 0x22, 0x33, 0x93, 0x9e, 0xe5, 0x61, 0x3f, 0x89, 0xae, 0xe0, 0xdb, 0xd3, 0x43,
	0x4b, 0xc5, 0x85, 0x38, 0x71, 0x1d, 0x00, 0x8b, 0xac, 0x16, 0x7a, 0x58, 0xb5, 0x58, 0x19, 0x4f,
	0xc7, 0x8e, 0x17, 0x8c, 0xdf, 0xf9, 0x82, 0x71, 0x9b, 0x0f, 0xee, 0x98, 0xd5, 0x22, 0xda, 0x2f,
	0xce, 0x45, 0x4d, 0x62, 0x49, 0x82, 0x74, 0x2e, 0x50, 0x1d, 0xa7, 0x5c, 0x49, 0xa9, 0x80, 0x45,
	0x33, 0x61, 0x59, 0x16, 0xf2, 0xe8, 0x16, 0x0b, 0xb8, 0xc9, 0xf8, 0xc5, 0x68, 0x84, 0x02, 0x12,
	0x98, 0x35, 0xc9, 0x89, 0x5b, 0xe5, 0x24, 0x4c, 0xd3, 0x1f, 0xd0, 0x21, 0x1f, 0x07, 0x0c, 0x37,
	0x48, 0x48, 0x7a, 0x06, 0x72, 0x0d, 0x7a, 0xa3, 0x2c, 0x41, 0x9e, 0x99, 0x87, 0x8a, 0x62, 0x86,
	0x72, 0x06, 0xbb, 0xd5, 0xc4, 0x5d, 0xa0, 0x1c, 0x87, 0x29, 0xa2, 0x15, 0x1d, 0xe4, 0x33, 0xc7,
	0xb5, 0x81, 0xac, 0xce, 0xc3, 0x74, 0x83, 0x5c, 0xbb, 0x15, 0xe0, 0x57, 0x7f, 0x05, 0xa8, 0xfb,
	0x2a, 0x40, 0xca, 0xd0, 0x66, 0x45, 0xe0, 0x3a, 0x57, 0x04, 0xd2, 0x22, 0xfa, 0xea, 0xc0, 0x4f,
	0x32, 0x1c, 0x10, 0xd7, 0x33, 0x1a, 0xa8, 0x0a, 0xa5, 0x20, 0x09, 0x0f, 0x64, 0x5e, 0x0d, 0xde,
	0xa7, 0xfc, 0xbe, 0xaa, 0xeb, 0xfd, 0xcd, 0x7e, 0x47, 0xb3, 0x4d, 0x6b, 0x74, 0x39, 0xf8, 0x1c,
	0x0e, 0x88, 0xcb, 0xd9, 0xae, 0x56, 0xfd, 0xe4, 0xf6, 0x5e, 0x8c, 0xfa, 0x36, 0xc4, 0x60, 0xec,
	0xf6, 0x19, 0xbc, 0xe5, 0x07, 0xaf, 0x0e, 0xd6, 0x4c, 0xc3, 0xb6, 0xcc, 0x4e, 0x07, 0x5b, 0xdc,
	0x61, 0xbd, 0x08, 0xa0, 0x0f, 0x9f, 0x33, 0x02, 0xe6, 0x9e, 0xa0, 0xd7, 0x69, 0xf8, 0x50, 0xaf,
	0xcc, 0xd6, 0xc9, 0xa5, 0xfa, 0x15, 0xbc, 0xbd, 0x0d, 0x72, 0x76, 0xbb, 0xf8, 0x27, 0xe7, 0xbc,
	0xf9, 0x10, 0x9f, 0xb6, 0x42, 0x49, 0xfa, 0x62, 0xcc, 0xc3, 0x87, 0x80, 0x16, 0xc9, 0xd2, 0xad,
	0x30, 0x96, 0x5e, 0x1d, 0x53, 0xc9, 0x8e, 0xd3, 0xf4, 0xab, 0x09, 0x8e, 0xa6, 0xbf, 0xf0, 0xd3,
	0xf4, 0xe5, 0x94, 0x9e, 0x11, 0x79, 0x7a, 0x0b, 0x76, 0x7b, 0x61, 0xd2, 0x70, 0x63, 0xa4, 0x50,
	0xf9, 0x24, 0xad, 0x1e, 0x5f, 0x30, 0xd5, 0xa4, 0xfa, 0x9c, 0xce, 0x3f, 0x48, 0xc8, 0xaf, 0x4d,
	0x98, 0xf3, 0xe1, 0xa1, 0x37, 0x83, 0xf1, 0x4e, 0x5e, 0x86, 0xf7, 0xec, 0xb1, 0x2c, 0xa3, 0xfd,
	0x5c, 0xd0, 0xd7, 0x64, 0x1a, 0xf6, 0xee, 0xd9, 0xda, 0x5b, 0x58, 0xcd, 0xc1, 0x14, 0x7f, 0xc6,
	0xfe, 0xcd, 0xcf, 0xb0, 0x1b, 0x3e, 0x86, 0x4d, 0x1b, 0x97, 0x8c, 0x62, 0x6f, 0x70, 0x14, 0x9b,
	0x1a, 0xd2, 0xc7, 0xb1, 0xcf, 0x64, 0x38, 0x18, 0x10, 0x60, 0x89, 0xbc, 0x26, 0x90, 0x6c, 0xa2,
	0x4c, 0xce, 0x9c, 0x65, 0x2b, 0xf4, 0xcc, 0xed, 0xbd, 0xd5, 0x38, 0xd3, 0x19, 0xe7, 0xe4, 0xcd,
	0xcb, 0x8c, 0x79, 0x8c, 0xe4, 0x20, 0x18, 0x45, 0x7d, 0x48, 0x4f, 0xde, 0xde, 0xf3, 0x04, 0x63,
	0x1a, 0xe7, 0xe0, 0x1d, 0x2a, 0x9a, 0x99, 0x79, 0x2b, 0x70, 0x54, 0xd0, 0x91, 0x74, 0x5e, 0xd3,
	0x82, 0x63, 0xd1, 0x08, 0x99, 0xd9, 0x79, 0x96, 0x0e, 0x95, 0x7c, 0x5a, 0x30, 0xb6, 0xbc, 0xfe,
	0xe5, 0x20, 0xe4, 0xbb, 0x18, 0x5b, 0x5e, 0xfb, 0x92, 0xeb, 0xd2, 0xdf, 0x55, 0x2d, 0xe0, 0x7f,
	0x57, 0x30, 0x33, 0xdb, 0x9c, 0xe6, 0x85, 0x57, 0x71, 0xb5, 0x6b, 0xf4, 0xb8, 0xe6, 0xa5, 0xdd,
	0x35, 0xdc, 0x97, 0x4b, 0xaf, 0x59, 0xf3, 0x12, 0x94, 0xc8, 0xcc, 0xa4, 0x57, 0xb3, 0x4e, 0xf3,
	0x12, 0x4c, 0x83, 0x14, 0xcd, 0x4b, 0x00, 0x6c, 0x07, 0x9a, 0x97, 0xa0, 0x8e, 0x1d, 0xaf, 0x8a,
	0xdf, 0xe7, 0xb8, 0xaa, 0x88, 0x03, 0xd3, 0xae, 0xf5, 0x74, 0xae, 0x09, 0x1f, 0x78, 0x35, 0xc5,
	0x81, 0xd7, 0x95, 0x94, 0x5a, 0x42, 0x66, 0x5e, 0xed, 0x90, 0x99, 0x57, 0x2d, 0xa5, 0x9a, 0xf0,
	0xb1, 0x17, 0xba, 0xe3, 0x65, 0xdf, 0x54, 0xfc, 0xd3, 0xc4, 0x28, 0x3d, 0x34, 0x47, 0x6b, 0x92,
	0x9b, 0xc6, 0xa4, 0x23, 0xa3, 0x59, 0x34, 0x1d, 0xbf, 0x23, 0x1b, 0x01, 0x4f, 0xb2, 0x8d, 0x74,
	0x43, 0x04, 0xf2, 0xff, 0x36, 0xb3, 0x53, 0x2a, 0x90, 0x73, 0xdc, 0x83, 0x0e, 0x0b, 0xa4, 0xe7,
	0xf9, 0xcb, 0xd5, 0xc9, 0x7e, 0x26, 0xfd, 0x20, 0xd9, 0x33, 0xe9, 0x07, 0x3d, 0x32, 0x72, 0x3d,
	0xe0, 0xf6, 0x83, 0xe4, 0x3a, 0xbb, 0x7e, 0x30, 0xda, 0xfd, 0xe3, 0xf6, 0x83, 0x23, 0x10, 0x43,
	0xfb, 0xc1, 0x90, 0x7a, 0x9e, 0xb8, 0x1f, 0xe4, 0x30, 0xb2, 0x3e, 0xa9, 0x54, 0xbe, 0xdb, 0x0b,
	0x7b, 0x36, 0x6c, 0xcd, 0x76, 0x7c, 0xbc, 0x81, 0xad, 0xad, 0xb6, 0x8e, 0x51, 0x1f, 0xc0, 0xfb,
	0xfe, 0x81, 0x16, 0xb6, 0x33, 0x30, 0xf0, 0x19, 0x4a, 0xa9, 0x24, 0x11, 0x71, 0xcc, 0x52, 0x25,
	0xf4, 0x44, 0x86, 0xbd, 0x21, 0x1f, 0x85, 0xd0, 0xb9, 0xf8, 0x68, 0xe2, 0xd1, 0x46, 0x39, 0x3f,
	0x96, 0xec, 0xd0, 0xa4, 0x1f, 0x64, 0xb7, 0x61, 0x16, 0x3e, 0x05, 0xa1, 0x8f, 0x92, 0x00, 0x8b,
	0x07, 0x1a, 0x65, 0x79, 0x4c, 0xe9, 0xa1, 0x61, 0x8f, 0xa0, 0xc0, 0xcd, 0x9d, 0x51, 0x25, 0xf9,
	0x44, 0x5b, 0x39, 0x9d, 0x48, 0x66, 0xa8, 0xf9, 0x6b, 0x98, 0xf3, 0x4d, 0x3d, 0xd1, 0x99, 0x18,
	0x7b, 0x09, 0xcc, 0x51, 0x94, 0xc5, 0x84, 0x52, 0x43, 0xfd, 0x3f, 0xca, 0x74, 0x28, 0x11, 0x32,
	0x0c, 0x46, 0xcb, 0x89, 0x30, 0xc5, 0x01, 0xb4, 0x72, 0x61, 0x5c, 0x71, 0x31, 0x82, 0xc5, 0x91,
	0x70, 0xac, 0x08, 0x8e, 0x98, 0x3c, 0xc7, 0x8a, 0xe0, 0xa8, 0x19, 0xb4, 0x2a, 0xa1, 0x6f, 0x64,
	0xd8, 0xed, 0x9f, 0x4c, 0xa1, 0xc5, 0xb1, 0x26, 0x5f, 0xca, 0x52, 0x52, 0x31, 0x9f, 0x0d, 0xfe,
	0x81, 0x0c, 0x5a, 0x8c, 0x97, 0x00, 0x42, 0x67, 0xb8, 0xbd, 0x0d, 0xe1, 0xe3, 0x2a, 0x55, 0x42,
	0xbf, 0xc8, 0xee, 0x47, 0xdd, 0x88, 0xa1, 0x10, 0xba, 0x94, 0x0c, 0x3b, 0x7c, 0x5a, 0xa5, 0x5c,
	0x4e, 0x89, 0x32, 0x34, 0xf8, 0x5b, 0x19, 0x5e, 0x13, 0xda, 0x5d, 0xb4, 0x34, 0x5e, 0x43, 0xad,
	0x9c, 0x4d, 0x2c, 0x27, 0xa4, 0xbb, 0x67, 0x64, 0xac, 0x74, 0x0f, 0x94, 0xc9, 0x58, 0xe9, 0x1e,
	0x2c, 0x96, 0x5e, 0xba, 0x87, 0xb4, 0xa0, 0xb1, 0xd2, 0x3d, 0xba, 0xeb, 0x8d, 0x95, 0xee, 0x23,
	0x3a, 0x5f, 0x55, 0x42, 0x4f, 0x65, 0x98, 0x8f, 0x6a, 0x3c, 0xd1, 0xc5, 0x84, 0xf0, 0x81, 0x1a,
	0xb1, 0x32, 0x3e, 0x80, 0x58, 0xbf, 0x82, 0xbd, 0x67, 0xac, 0xfa, 0x15, 0xd9, 0xeb, 0x2a, 0xcb,
	0x63, 0x4a, 0x8b, 0x4c, 0x29, 0xf6, 0x9f, 0xb1, 0x98, 0x32, 0xa2, 0xcd, 0x8d, 0xc5, 0x94, 0x51,
	0x0d, 0x2f, 0xc7, 0x94, 0x5c, 0xac, 0x2f, 0x8e, 0x75, 0x26, 0x8c, 0xc7, 0x94, 0x61, 0xd1, 0x5e,
	0x9d, 0xff, 0xf3, 0x45, 0x51, 0x7e, 0xfe, 0xa2, 0x28, 0xff, 0xfd, 0xa2, 0x28, 0x3f, 0x79, 0x59,
	0x94, 0x9e, 0xbf, 0x2c, 0x4a, 0x7f, 0xbd, 0x2c, 0x4a, 0xcd, 0x1c, 0xfd, 0xaf, 0x9f, 0xd3, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x74, 0x67, 0x22, 0x32, 0xa1, 0x24, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StateQueryServiceClient is the client API for StateQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateQueryServiceClient interface {
	// Get queries the Account table by its primary key.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// GetAccountByAddress queries the Account table by its Address index
	GetAccountByAddress(ctx context.Context, in *GetAccountByAddressRequest, opts ...grpc.CallOption) (*GetAccountByAddressResponse, error)
	// GetAccountByPublicKey queries the Account table by its PublicKey index
	GetAccountByPublicKey(ctx context.Context, in *GetAccountByPublicKeyRequest, opts ...grpc.CallOption) (*GetAccountByPublicKeyResponse, error)
	// ListAccount queries the Account table using prefix and range queries against defined indexes.
	ListAccount(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error)
	// Get queries the Blockchain table by its primary key.
	GetBlockchain(ctx context.Context, in *GetBlockchainRequest, opts ...grpc.CallOption) (*GetBlockchainResponse, error)
	// GetBlockchainByChainId queries the Blockchain table by its ChainId index
	GetBlockchainByChainId(ctx context.Context, in *GetBlockchainByChainIdRequest, opts ...grpc.CallOption) (*GetBlockchainByChainIdResponse, error)
	// GetBlockchainByName queries the Blockchain table by its Name index
	GetBlockchainByName(ctx context.Context, in *GetBlockchainByNameRequest, opts ...grpc.CallOption) (*GetBlockchainByNameResponse, error)
	// ListBlockchain queries the Blockchain table using prefix and range queries against defined indexes.
	ListBlockchain(ctx context.Context, in *ListBlockchainRequest, opts ...grpc.CallOption) (*ListBlockchainResponse, error)
	// Get queries the Accumulator table by its primary key.
	GetAccumulator(ctx context.Context, in *GetAccumulatorRequest, opts ...grpc.CallOption) (*GetAccumulatorResponse, error)
	// GetAccumulatorByControllerKey queries the Accumulator table by its ControllerKey index
	GetAccumulatorByControllerKey(ctx context.Context, in *GetAccumulatorByControllerKeyRequest, opts ...grpc.CallOption) (*GetAccumulatorByControllerKeyResponse, error)
	// ListAccumulator queries the Accumulator table using prefix and range queries against defined indexes.
	ListAccumulator(ctx context.Context, in *ListAccumulatorRequest, opts ...grpc.CallOption) (*ListAccumulatorResponse, error)
	// Get queries the Controller table by its primary key.
	GetController(ctx context.Context, in *GetControllerRequest, opts ...grpc.CallOption) (*GetControllerResponse, error)
	// GetControllerByAddress queries the Controller table by its Address index
	GetControllerByAddress(ctx context.Context, in *GetControllerByAddressRequest, opts ...grpc.CallOption) (*GetControllerByAddressResponse, error)
	// GetControllerByPublicKey queries the Controller table by its PublicKey index
	GetControllerByPublicKey(ctx context.Context, in *GetControllerByPublicKeyRequest, opts ...grpc.CallOption) (*GetControllerByPublicKeyResponse, error)
	// GetControllerByPeerId queries the Controller table by its PeerId index
	GetControllerByPeerId(ctx context.Context, in *GetControllerByPeerIdRequest, opts ...grpc.CallOption) (*GetControllerByPeerIdResponse, error)
	// GetControllerByIpns queries the Controller table by its Ipns index
	GetControllerByIpns(ctx context.Context, in *GetControllerByIpnsRequest, opts ...grpc.CallOption) (*GetControllerByIpnsResponse, error)
	// ListController queries the Controller table using prefix and range queries against defined indexes.
	ListController(ctx context.Context, in *ListControllerRequest, opts ...grpc.CallOption) (*ListControllerResponse, error)
}

type stateQueryServiceClient struct {
	cc grpc1.ClientConn
}

func NewStateQueryServiceClient(cc grpc1.ClientConn) StateQueryServiceClient {
	return &stateQueryServiceClient{cc}
}

func (c *stateQueryServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetAccountByAddress(ctx context.Context, in *GetAccountByAddressRequest, opts ...grpc.CallOption) (*GetAccountByAddressResponse, error) {
	out := new(GetAccountByAddressResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetAccountByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetAccountByPublicKey(ctx context.Context, in *GetAccountByPublicKeyRequest, opts ...grpc.CallOption) (*GetAccountByPublicKeyResponse, error) {
	out := new(GetAccountByPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetAccountByPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListAccount(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error) {
	out := new(ListAccountResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/ListAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetBlockchain(ctx context.Context, in *GetBlockchainRequest, opts ...grpc.CallOption) (*GetBlockchainResponse, error) {
	out := new(GetBlockchainResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetBlockchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetBlockchainByChainId(ctx context.Context, in *GetBlockchainByChainIdRequest, opts ...grpc.CallOption) (*GetBlockchainByChainIdResponse, error) {
	out := new(GetBlockchainByChainIdResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetBlockchainByChainId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetBlockchainByName(ctx context.Context, in *GetBlockchainByNameRequest, opts ...grpc.CallOption) (*GetBlockchainByNameResponse, error) {
	out := new(GetBlockchainByNameResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetBlockchainByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListBlockchain(ctx context.Context, in *ListBlockchainRequest, opts ...grpc.CallOption) (*ListBlockchainResponse, error) {
	out := new(ListBlockchainResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/ListBlockchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetAccumulator(ctx context.Context, in *GetAccumulatorRequest, opts ...grpc.CallOption) (*GetAccumulatorResponse, error) {
	out := new(GetAccumulatorResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetAccumulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetAccumulatorByControllerKey(ctx context.Context, in *GetAccumulatorByControllerKeyRequest, opts ...grpc.CallOption) (*GetAccumulatorByControllerKeyResponse, error) {
	out := new(GetAccumulatorByControllerKeyResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetAccumulatorByControllerKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListAccumulator(ctx context.Context, in *ListAccumulatorRequest, opts ...grpc.CallOption) (*ListAccumulatorResponse, error) {
	out := new(ListAccumulatorResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/ListAccumulator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetController(ctx context.Context, in *GetControllerRequest, opts ...grpc.CallOption) (*GetControllerResponse, error) {
	out := new(GetControllerResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetControllerByAddress(ctx context.Context, in *GetControllerByAddressRequest, opts ...grpc.CallOption) (*GetControllerByAddressResponse, error) {
	out := new(GetControllerByAddressResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetControllerByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetControllerByPublicKey(ctx context.Context, in *GetControllerByPublicKeyRequest, opts ...grpc.CallOption) (*GetControllerByPublicKeyResponse, error) {
	out := new(GetControllerByPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetControllerByPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetControllerByPeerId(ctx context.Context, in *GetControllerByPeerIdRequest, opts ...grpc.CallOption) (*GetControllerByPeerIdResponse, error) {
	out := new(GetControllerByPeerIdResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetControllerByPeerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetControllerByIpns(ctx context.Context, in *GetControllerByIpnsRequest, opts ...grpc.CallOption) (*GetControllerByIpnsResponse, error) {
	out := new(GetControllerByIpnsResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/GetControllerByIpns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListController(ctx context.Context, in *ListControllerRequest, opts ...grpc.CallOption) (*ListControllerResponse, error) {
	out := new(ListControllerResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.module.v1.StateQueryService/ListController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateQueryServiceServer is the server API for StateQueryService service.
type StateQueryServiceServer interface {
	// Get queries the Account table by its primary key.
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// GetAccountByAddress queries the Account table by its Address index
	GetAccountByAddress(context.Context, *GetAccountByAddressRequest) (*GetAccountByAddressResponse, error)
	// GetAccountByPublicKey queries the Account table by its PublicKey index
	GetAccountByPublicKey(context.Context, *GetAccountByPublicKeyRequest) (*GetAccountByPublicKeyResponse, error)
	// ListAccount queries the Account table using prefix and range queries against defined indexes.
	ListAccount(context.Context, *ListAccountRequest) (*ListAccountResponse, error)
	// Get queries the Blockchain table by its primary key.
	GetBlockchain(context.Context, *GetBlockchainRequest) (*GetBlockchainResponse, error)
	// GetBlockchainByChainId queries the Blockchain table by its ChainId index
	GetBlockchainByChainId(context.Context, *GetBlockchainByChainIdRequest) (*GetBlockchainByChainIdResponse, error)
	// GetBlockchainByName queries the Blockchain table by its Name index
	GetBlockchainByName(context.Context, *GetBlockchainByNameRequest) (*GetBlockchainByNameResponse, error)
	// ListBlockchain queries the Blockchain table using prefix and range queries against defined indexes.
	ListBlockchain(context.Context, *ListBlockchainRequest) (*ListBlockchainResponse, error)
	// Get queries the Accumulator table by its primary key.
	GetAccumulator(context.Context, *GetAccumulatorRequest) (*GetAccumulatorResponse, error)
	// GetAccumulatorByControllerKey queries the Accumulator table by its ControllerKey index
	GetAccumulatorByControllerKey(context.Context, *GetAccumulatorByControllerKeyRequest) (*GetAccumulatorByControllerKeyResponse, error)
	// ListAccumulator queries the Accumulator table using prefix and range queries against defined indexes.
	ListAccumulator(context.Context, *ListAccumulatorRequest) (*ListAccumulatorResponse, error)
	// Get queries the Controller table by its primary key.
	GetController(context.Context, *GetControllerRequest) (*GetControllerResponse, error)
	// GetControllerByAddress queries the Controller table by its Address index
	GetControllerByAddress(context.Context, *GetControllerByAddressRequest) (*GetControllerByAddressResponse, error)
	// GetControllerByPublicKey queries the Controller table by its PublicKey index
	GetControllerByPublicKey(context.Context, *GetControllerByPublicKeyRequest) (*GetControllerByPublicKeyResponse, error)
	// GetControllerByPeerId queries the Controller table by its PeerId index
	GetControllerByPeerId(context.Context, *GetControllerByPeerIdRequest) (*GetControllerByPeerIdResponse, error)
	// GetControllerByIpns queries the Controller table by its Ipns index
	GetControllerByIpns(context.Context, *GetControllerByIpnsRequest) (*GetControllerByIpnsResponse, error)
	// ListController queries the Controller table using prefix and range queries against defined indexes.
	ListController(context.Context, *ListControllerRequest) (*ListControllerResponse, error)
}

// UnimplementedStateQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStateQueryServiceServer struct {
}

func (*UnimplementedStateQueryServiceServer) GetAccount(ctx context.Context, req *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetAccountByAddress(ctx context.Context, req *GetAccountByAddressRequest) (*GetAccountByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByAddress not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetAccountByPublicKey(ctx context.Context, req *GetAccountByPublicKeyRequest) (*GetAccountByPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByPublicKey not implemented")
}
func (*UnimplementedStateQueryServiceServer) ListAccount(ctx context.Context, req *ListAccountRequest) (*ListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccount not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetBlockchain(ctx context.Context, req *GetBlockchainRequest) (*GetBlockchainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchain not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetBlockchainByChainId(ctx context.Context, req *GetBlockchainByChainIdRequest) (*GetBlockchainByChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchainByChainId not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetBlockchainByName(ctx context.Context, req *GetBlockchainByNameRequest) (*GetBlockchainByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchainByName not implemented")
}
func (*UnimplementedStateQueryServiceServer) ListBlockchain(ctx context.Context, req *ListBlockchainRequest) (*ListBlockchainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockchain not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetAccumulator(ctx context.Context, req *GetAccumulatorRequest) (*GetAccumulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccumulator not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetAccumulatorByControllerKey(ctx context.Context, req *GetAccumulatorByControllerKeyRequest) (*GetAccumulatorByControllerKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccumulatorByControllerKey not implemented")
}
func (*UnimplementedStateQueryServiceServer) ListAccumulator(ctx context.Context, req *ListAccumulatorRequest) (*ListAccumulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccumulator not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetController(ctx context.Context, req *GetControllerRequest) (*GetControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetController not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetControllerByAddress(ctx context.Context, req *GetControllerByAddressRequest) (*GetControllerByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerByAddress not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetControllerByPublicKey(ctx context.Context, req *GetControllerByPublicKeyRequest) (*GetControllerByPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerByPublicKey not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetControllerByPeerId(ctx context.Context, req *GetControllerByPeerIdRequest) (*GetControllerByPeerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerByPeerId not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetControllerByIpns(ctx context.Context, req *GetControllerByIpnsRequest) (*GetControllerByIpnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerByIpns not implemented")
}
func (*UnimplementedStateQueryServiceServer) ListController(ctx context.Context, req *ListControllerRequest) (*ListControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListController not implemented")
}

func RegisterStateQueryServiceServer(s grpc1.Server, srv StateQueryServiceServer) {
	s.RegisterService(&_StateQueryService_serviceDesc, srv)
}

func _StateQueryService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetAccountByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetAccountByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetAccountByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetAccountByAddress(ctx, req.(*GetAccountByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetAccountByPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetAccountByPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetAccountByPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetAccountByPublicKey(ctx, req.(*GetAccountByPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/ListAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListAccount(ctx, req.(*ListAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetBlockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetBlockchain(ctx, req.(*GetBlockchainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetBlockchainByChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainByChainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetBlockchainByChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetBlockchainByChainId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetBlockchainByChainId(ctx, req.(*GetBlockchainByChainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetBlockchainByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetBlockchainByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetBlockchainByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetBlockchainByName(ctx, req.(*GetBlockchainByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockchainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/ListBlockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListBlockchain(ctx, req.(*ListBlockchainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetAccumulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccumulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetAccumulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetAccumulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetAccumulator(ctx, req.(*GetAccumulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetAccumulatorByControllerKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccumulatorByControllerKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetAccumulatorByControllerKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetAccumulatorByControllerKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetAccumulatorByControllerKey(ctx, req.(*GetAccumulatorByControllerKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListAccumulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccumulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListAccumulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/ListAccumulator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListAccumulator(ctx, req.(*ListAccumulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetController(ctx, req.(*GetControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetControllerByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetControllerByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetControllerByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetControllerByAddress(ctx, req.(*GetControllerByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetControllerByPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerByPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetControllerByPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetControllerByPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetControllerByPublicKey(ctx, req.(*GetControllerByPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetControllerByPeerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerByPeerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetControllerByPeerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetControllerByPeerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetControllerByPeerId(ctx, req.(*GetControllerByPeerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetControllerByIpns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerByIpnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetControllerByIpns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/GetControllerByIpns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetControllerByIpns(ctx, req.(*GetControllerByIpnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.module.v1.StateQueryService/ListController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListController(ctx, req.(*ListControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StateQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.sonr.identity.module.v1.StateQueryService",
	HandlerType: (*StateQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _StateQueryService_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountByAddress",
			Handler:    _StateQueryService_GetAccountByAddress_Handler,
		},
		{
			MethodName: "GetAccountByPublicKey",
			Handler:    _StateQueryService_GetAccountByPublicKey_Handler,
		},
		{
			MethodName: "ListAccount",
			Handler:    _StateQueryService_ListAccount_Handler,
		},
		{
			MethodName: "GetBlockchain",
			Handler:    _StateQueryService_GetBlockchain_Handler,
		},
		{
			MethodName: "GetBlockchainByChainId",
			Handler:    _StateQueryService_GetBlockchainByChainId_Handler,
		},
		{
			MethodName: "GetBlockchainByName",
			Handler:    _StateQueryService_GetBlockchainByName_Handler,
		},
		{
			MethodName: "ListBlockchain",
			Handler:    _StateQueryService_ListBlockchain_Handler,
		},
		{
			MethodName: "GetAccumulator",
			Handler:    _StateQueryService_GetAccumulator_Handler,
		},
		{
			MethodName: "GetAccumulatorByControllerKey",
			Handler:    _StateQueryService_GetAccumulatorByControllerKey_Handler,
		},
		{
			MethodName: "ListAccumulator",
			Handler:    _StateQueryService_ListAccumulator_Handler,
		},
		{
			MethodName: "GetController",
			Handler:    _StateQueryService_GetController_Handler,
		},
		{
			MethodName: "GetControllerByAddress",
			Handler:    _StateQueryService_GetControllerByAddress_Handler,
		},
		{
			MethodName: "GetControllerByPublicKey",
			Handler:    _StateQueryService_GetControllerByPublicKey_Handler,
		},
		{
			MethodName: "GetControllerByPeerId",
			Handler:    _StateQueryService_GetControllerByPeerId_Handler,
		},
		{
			MethodName: "GetControllerByIpns",
			Handler:    _StateQueryService_GetControllerByIpns_Handler,
		},
		{
			MethodName: "ListController",
			Handler:    _StateQueryService_ListController_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonrhq/sonr/identity/module/v1/state_query.proto",
}

func (m *GetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintStateQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountByPublicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountByPublicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountByPublicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountByPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountByPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountByPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountRequest_PrefixQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_PrefixQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixQuery != nil {
		{
			size, err := m.PrefixQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListAccountRequest_RangeQuery_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_RangeQuery_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeQuery != nil {
		{
			size, err := m.RangeQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListAccountRequest_IndexKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountRequest_IndexKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_IndexKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size := m.Key.Size()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountRequest_IndexKey_Sequence_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_IndexKey_Sequence_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sequence != nil {
		{
			size, err := m.Sequence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListAccountRequest_IndexKey_Address_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_IndexKey_Address_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListAccountRequest_IndexKey_PublicKey_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_IndexKey_PublicKey_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublicKey != nil {
		{
			size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ListAccountRequest_IndexKey_Sequence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountRequest_IndexKey_Sequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_IndexKey_Sequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XSequence != nil {
		{
			size := m.XSequence.Size()
			i -= size
			if _, err := m.XSequence.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountRequest_IndexKey_Sequence_Sequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_IndexKey_Sequence_Sequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStateQuery(dAtA, i, uint64(m.Sequence))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListAccountRequest_IndexKey_Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountRequest_IndexKey_Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_IndexKey_Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XAddress != nil {
		{
			size := m.XAddress.Size()
			i -= size
			if _, err := m.XAddress.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountRequest_IndexKey_Address_Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_IndexKey_Address_Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Address)
	copy(dAtA[i:], m.Address)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Address)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListAccountRequest_IndexKey_PublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountRequest_IndexKey_PublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_IndexKey_PublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XPublicKey != nil {
		{
			size := m.XPublicKey.Size()
			i -= size
			if _, err := m.XPublicKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountRequest_IndexKey_PublicKey_PublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_IndexKey_PublicKey_PublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublicKey != nil {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListAccountRequest_RangeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountRequest_RangeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountRequest_RangeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockchainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockchainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockchainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintStateQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockchainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockchainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockchainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockchainByChainIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockchainByChainIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockchainByChainIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockchainByChainIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockchainByChainIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockchainByChainIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockchainByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockchainByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockchainByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockchainByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockchainByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockchainByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBlockchainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlockchainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListBlockchainRequest_PrefixQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_PrefixQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixQuery != nil {
		{
			size, err := m.PrefixQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListBlockchainRequest_RangeQuery_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_RangeQuery_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeQuery != nil {
		{
			size, err := m.RangeQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListBlockchainRequest_IndexKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlockchainRequest_IndexKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_IndexKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size := m.Key.Size()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListBlockchainRequest_IndexKey_Index_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_IndexKey_Index_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Index != nil {
		{
			size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListBlockchainRequest_IndexKey_ChainId_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_IndexKey_ChainId_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChainId != nil {
		{
			size, err := m.ChainId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListBlockchainRequest_IndexKey_Name_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_IndexKey_Name_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ListBlockchainRequest_IndexKey_Index) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlockchainRequest_IndexKey_Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_IndexKey_Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XIndex != nil {
		{
			size := m.XIndex.Size()
			i -= size
			if _, err := m.XIndex.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListBlockchainRequest_IndexKey_Index_Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_IndexKey_Index_Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStateQuery(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListBlockchainRequest_IndexKey_ChainId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlockchainRequest_IndexKey_ChainId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_IndexKey_ChainId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XChainId != nil {
		{
			size := m.XChainId.Size()
			i -= size
			if _, err := m.XChainId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListBlockchainRequest_IndexKey_ChainId_ChainId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_IndexKey_ChainId_ChainId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ChainId)
	copy(dAtA[i:], m.ChainId)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.ChainId)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListBlockchainRequest_IndexKey_Name) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlockchainRequest_IndexKey_Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_IndexKey_Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XName != nil {
		{
			size := m.XName.Size()
			i -= size
			if _, err := m.XName.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListBlockchainRequest_IndexKey_Name_Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_IndexKey_Name_Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListBlockchainRequest_RangeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlockchainRequest_RangeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainRequest_RangeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBlockchainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlockchainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlockchainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAccumulatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccumulatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccumulatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintStateQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAccumulatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccumulatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccumulatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccumulatorByControllerKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccumulatorByControllerKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccumulatorByControllerKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccumulatorByControllerKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccumulatorByControllerKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccumulatorByControllerKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAccumulatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccumulatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAccumulatorRequest_PrefixQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_PrefixQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixQuery != nil {
		{
			size, err := m.PrefixQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListAccumulatorRequest_RangeQuery_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_RangeQuery_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeQuery != nil {
		{
			size, err := m.RangeQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListAccumulatorRequest_IndexKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccumulatorRequest_IndexKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_IndexKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size := m.Key.Size()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAccumulatorRequest_IndexKey_Index_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_IndexKey_Index_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Index != nil {
		{
			size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ControllerKey != nil {
		{
			size, err := m.ControllerKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListAccumulatorRequest_IndexKey_Index) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccumulatorRequest_IndexKey_Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_IndexKey_Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XIndex != nil {
		{
			size := m.XIndex.Size()
			i -= size
			if _, err := m.XIndex.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAccumulatorRequest_IndexKey_Index_Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_IndexKey_Index_Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStateQuery(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XKey != nil {
		{
			size := m.XKey.Size()
			i -= size
			if _, err := m.XKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XController != nil {
		{
			size := m.XController.Size()
			i -= size
			if _, err := m.XController.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey_Controller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey_Controller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Controller)
	copy(dAtA[i:], m.Controller)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Controller)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey_Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey_Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Key)
	copy(dAtA[i:], m.Key)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Key)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ListAccumulatorRequest_RangeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccumulatorRequest_RangeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorRequest_RangeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAccumulatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccumulatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccumulatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetControllerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetControllerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetControllerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintStateQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetControllerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetControllerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetControllerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetControllerByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetControllerByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetControllerByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetControllerByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetControllerByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetControllerByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetControllerByPublicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetControllerByPublicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetControllerByPublicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetControllerByPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetControllerByPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetControllerByPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetControllerByPeerIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetControllerByPeerIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetControllerByPeerIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetControllerByPeerIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetControllerByPeerIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetControllerByPeerIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetControllerByIpnsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetControllerByIpnsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetControllerByIpnsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipns) > 0 {
		i -= len(m.Ipns)
		copy(dAtA[i:], m.Ipns)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Ipns)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetControllerByIpnsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetControllerByIpnsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetControllerByIpnsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListControllerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListControllerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListControllerRequest_PrefixQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_PrefixQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixQuery != nil {
		{
			size, err := m.PrefixQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_RangeQuery_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_RangeQuery_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeQuery != nil {
		{
			size, err := m.RangeQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_IndexKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListControllerRequest_IndexKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size := m.Key.Size()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListControllerRequest_IndexKey_Sequence_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_Sequence_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sequence != nil {
		{
			size, err := m.Sequence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_IndexKey_Address_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_Address_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_IndexKey_PublicKey_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_PublicKey_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublicKey != nil {
		{
			size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_IndexKey_PeerId_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_PeerId_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PeerId != nil {
		{
			size, err := m.PeerId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_IndexKey_Ipns_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_Ipns_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipns != nil {
		{
			size, err := m.Ipns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_IndexKey_Sequence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListControllerRequest_IndexKey_Sequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_Sequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XSequence != nil {
		{
			size := m.XSequence.Size()
			i -= size
			if _, err := m.XSequence.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListControllerRequest_IndexKey_Sequence_Sequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_Sequence_Sequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStateQuery(dAtA, i, uint64(m.Sequence))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_IndexKey_Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListControllerRequest_IndexKey_Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XAddress != nil {
		{
			size := m.XAddress.Size()
			i -= size
			if _, err := m.XAddress.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListControllerRequest_IndexKey_Address_Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_Address_Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Address)
	copy(dAtA[i:], m.Address)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Address)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_IndexKey_PublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListControllerRequest_IndexKey_PublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_PublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XPublicKey != nil {
		{
			size := m.XPublicKey.Size()
			i -= size
			if _, err := m.XPublicKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListControllerRequest_IndexKey_PublicKey_PublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_PublicKey_PublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublicKey != nil {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_IndexKey_PeerId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListControllerRequest_IndexKey_PeerId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_PeerId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XPeerId != nil {
		{
			size := m.XPeerId.Size()
			i -= size
			if _, err := m.XPeerId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListControllerRequest_IndexKey_PeerId_PeerId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_PeerId_PeerId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PeerId)
	copy(dAtA[i:], m.PeerId)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.PeerId)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_IndexKey_Ipns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListControllerRequest_IndexKey_Ipns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_Ipns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XIpns != nil {
		{
			size := m.XIpns.Size()
			i -= size
			if _, err := m.XIpns.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListControllerRequest_IndexKey_Ipns_Ipns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_IndexKey_Ipns_Ipns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Ipns)
	copy(dAtA[i:], m.Ipns)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Ipns)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListControllerRequest_RangeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListControllerRequest_RangeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerRequest_RangeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListControllerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListControllerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListControllerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStateQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovStateQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovStateQuery(uint64(m.Sequence))
	}
	return n
}

func (m *GetAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetAccountByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetAccountByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetAccountByPublicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetAccountByPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListAccountRequest_PrefixQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixQuery != nil {
		l = m.PrefixQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListAccountRequest_RangeQuery_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeQuery != nil {
		l = m.RangeQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListAccountRequest_IndexKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *ListAccountRequest_IndexKey_Sequence_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != nil {
		l = m.Sequence.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListAccountRequest_IndexKey_Address_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListAccountRequest_IndexKey_PublicKey_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicKey != nil {
		l = m.PublicKey.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListAccountRequest_IndexKey_Sequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XSequence != nil {
		n += m.XSequence.Size()
	}
	return n
}

func (m *ListAccountRequest_IndexKey_Sequence_Sequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStateQuery(uint64(m.Sequence))
	return n
}
func (m *ListAccountRequest_IndexKey_Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XAddress != nil {
		n += m.XAddress.Size()
	}
	return n
}

func (m *ListAccountRequest_IndexKey_Address_Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListAccountRequest_IndexKey_PublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XPublicKey != nil {
		n += m.XPublicKey.Size()
	}
	return n
}

func (m *ListAccountRequest_IndexKey_PublicKey_PublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicKey != nil {
		l = len(m.PublicKey)
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListAccountRequest_RangeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStateQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetBlockchainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovStateQuery(uint64(m.Index))
	}
	return n
}

func (m *GetBlockchainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetBlockchainByChainIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetBlockchainByChainIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetBlockchainByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetBlockchainByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListBlockchainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListBlockchainRequest_PrefixQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixQuery != nil {
		l = m.PrefixQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListBlockchainRequest_RangeQuery_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeQuery != nil {
		l = m.RangeQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListBlockchainRequest_IndexKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *ListBlockchainRequest_IndexKey_Index_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListBlockchainRequest_IndexKey_ChainId_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != nil {
		l = m.ChainId.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListBlockchainRequest_IndexKey_Name_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListBlockchainRequest_IndexKey_Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XIndex != nil {
		n += m.XIndex.Size()
	}
	return n
}

func (m *ListBlockchainRequest_IndexKey_Index_Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStateQuery(uint64(m.Index))
	return n
}
func (m *ListBlockchainRequest_IndexKey_ChainId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XChainId != nil {
		n += m.XChainId.Size()
	}
	return n
}

func (m *ListBlockchainRequest_IndexKey_ChainId_ChainId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListBlockchainRequest_IndexKey_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XName != nil {
		n += m.XName.Size()
	}
	return n
}

func (m *ListBlockchainRequest_IndexKey_Name_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListBlockchainRequest_RangeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListBlockchainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStateQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetAccumulatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovStateQuery(uint64(m.Index))
	}
	return n
}

func (m *GetAccumulatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetAccumulatorByControllerKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetAccumulatorByControllerKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListAccumulatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListAccumulatorRequest_PrefixQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixQuery != nil {
		l = m.PrefixQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListAccumulatorRequest_RangeQuery_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeQuery != nil {
		l = m.RangeQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListAccumulatorRequest_IndexKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *ListAccumulatorRequest_IndexKey_Index_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ControllerKey != nil {
		l = m.ControllerKey.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListAccumulatorRequest_IndexKey_Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XIndex != nil {
		n += m.XIndex.Size()
	}
	return n
}

func (m *ListAccumulatorRequest_IndexKey_Index_Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStateQuery(uint64(m.Index))
	return n
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XController != nil {
		n += m.XController.Size()
	}
	if m.XKey != nil {
		n += m.XKey.Size()
	}
	return n
}

func (m *ListAccumulatorRequest_IndexKey_ControllerKey_Controller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Controller)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey_Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListAccumulatorRequest_RangeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListAccumulatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStateQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetControllerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovStateQuery(uint64(m.Sequence))
	}
	return n
}

func (m *GetControllerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetControllerByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetControllerByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetControllerByPublicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetControllerByPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetControllerByPeerIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetControllerByPeerIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetControllerByIpnsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ipns)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetControllerByIpnsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListControllerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListControllerRequest_PrefixQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixQuery != nil {
		l = m.PrefixQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListControllerRequest_RangeQuery_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeQuery != nil {
		l = m.RangeQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListControllerRequest_IndexKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *ListControllerRequest_IndexKey_Sequence_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != nil {
		l = m.Sequence.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListControllerRequest_IndexKey_Address_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListControllerRequest_IndexKey_PublicKey_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicKey != nil {
		l = m.PublicKey.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListControllerRequest_IndexKey_PeerId_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerId != nil {
		l = m.PeerId.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListControllerRequest_IndexKey_Ipns_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipns != nil {
		l = m.Ipns.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListControllerRequest_IndexKey_Sequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XSequence != nil {
		n += m.XSequence.Size()
	}
	return n
}

func (m *ListControllerRequest_IndexKey_Sequence_Sequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStateQuery(uint64(m.Sequence))
	return n
}
func (m *ListControllerRequest_IndexKey_Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XAddress != nil {
		n += m.XAddress.Size()
	}
	return n
}

func (m *ListControllerRequest_IndexKey_Address_Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListControllerRequest_IndexKey_PublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XPublicKey != nil {
		n += m.XPublicKey.Size()
	}
	return n
}

func (m *ListControllerRequest_IndexKey_PublicKey_PublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicKey != nil {
		l = len(m.PublicKey)
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListControllerRequest_IndexKey_PeerId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XPeerId != nil {
		n += m.XPeerId.Size()
	}
	return n
}

func (m *ListControllerRequest_IndexKey_PeerId_PeerId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerId)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListControllerRequest_IndexKey_Ipns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XIpns != nil {
		n += m.XIpns.Size()
	}
	return n
}

func (m *ListControllerRequest_IndexKey_Ipns_Ipns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ipns)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListControllerRequest_RangeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListControllerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStateQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func sovStateQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStateQuery(x uint64) (n int) {
	return sovStateQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Account{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Account{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountByPublicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountByPublicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountByPublicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountByPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountByPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountByPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Account{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListAccountRequest_IndexKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListAccountRequest_PrefixQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListAccountRequest_RangeQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListAccountRequest_RangeQuery_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountRequest_IndexKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListAccountRequest_IndexKey_Sequence{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListAccountRequest_IndexKey_Sequence_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListAccountRequest_IndexKey_Address{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListAccountRequest_IndexKey_Address_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListAccountRequest_IndexKey_PublicKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListAccountRequest_IndexKey_PublicKey_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountRequest_IndexKey_Sequence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sequence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sequence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XSequence = &ListAccountRequest_IndexKey_Sequence_Sequence{v}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountRequest_IndexKey_Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAddress = &ListAccountRequest_IndexKey_Address_Address{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountRequest_IndexKey_PublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.XPublicKey = &ListAccountRequest_IndexKey_PublicKey_PublicKey{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountRequest_RangeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &ListAccountRequest_IndexKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &ListAccountRequest_IndexKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Account{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockchainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockchainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockchainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockchainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockchainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockchainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Blockchain{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockchainByChainIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockchainByChainIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockchainByChainIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockchainByChainIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockchainByChainIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockchainByChainIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Blockchain{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockchainByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockchainByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockchainByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockchainByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockchainByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockchainByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Blockchain{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlockchainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBlockchainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBlockchainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListBlockchainRequest_IndexKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListBlockchainRequest_PrefixQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListBlockchainRequest_RangeQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListBlockchainRequest_RangeQuery_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlockchainRequest_IndexKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListBlockchainRequest_IndexKey_Index{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListBlockchainRequest_IndexKey_Index_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListBlockchainRequest_IndexKey_ChainId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListBlockchainRequest_IndexKey_ChainId_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListBlockchainRequest_IndexKey_Name{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListBlockchainRequest_IndexKey_Name_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlockchainRequest_IndexKey_Index) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Index: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Index: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XIndex = &ListBlockchainRequest_IndexKey_Index_Index{v}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlockchainRequest_IndexKey_ChainId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XChainId = &ListBlockchainRequest_IndexKey_ChainId_ChainId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlockchainRequest_IndexKey_Name) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Name: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Name: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XName = &ListBlockchainRequest_IndexKey_Name_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlockchainRequest_RangeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &ListBlockchainRequest_IndexKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &ListBlockchainRequest_IndexKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlockchainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBlockchainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBlockchainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Blockchain{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccumulatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccumulatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccumulatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccumulatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccumulatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccumulatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Accumulator{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccumulatorByControllerKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccumulatorByControllerKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccumulatorByControllerKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccumulatorByControllerKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccumulatorByControllerKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccumulatorByControllerKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Accumulator{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccumulatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAccumulatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAccumulatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListAccumulatorRequest_IndexKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListAccumulatorRequest_PrefixQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListAccumulatorRequest_RangeQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListAccumulatorRequest_RangeQuery_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccumulatorRequest_IndexKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListAccumulatorRequest_IndexKey_Index{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListAccumulatorRequest_IndexKey_Index_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListAccumulatorRequest_IndexKey_ControllerKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListAccumulatorRequest_IndexKey_ControllerKey_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccumulatorRequest_IndexKey_Index) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Index: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Index: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XIndex = &ListAccumulatorRequest_IndexKey_Index_Index{v}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccumulatorRequest_IndexKey_ControllerKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XController = &ListAccumulatorRequest_IndexKey_ControllerKey_Controller{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XKey = &ListAccumulatorRequest_IndexKey_ControllerKey_Key{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccumulatorRequest_RangeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &ListAccumulatorRequest_IndexKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &ListAccumulatorRequest_IndexKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccumulatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAccumulatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAccumulatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Accumulator{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetControllerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetControllerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetControllerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetControllerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetControllerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetControllerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Controller{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetControllerByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetControllerByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetControllerByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetControllerByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetControllerByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetControllerByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Controller{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetControllerByPublicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetControllerByPublicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetControllerByPublicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetControllerByPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetControllerByPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetControllerByPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Controller{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetControllerByPeerIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetControllerByPeerIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetControllerByPeerIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetControllerByPeerIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetControllerByPeerIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetControllerByPeerIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Controller{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetControllerByIpnsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetControllerByIpnsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetControllerByIpnsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetControllerByIpnsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetControllerByIpnsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetControllerByIpnsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Controller{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListControllerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListControllerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListControllerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListControllerRequest_IndexKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListControllerRequest_PrefixQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListControllerRequest_RangeQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListControllerRequest_RangeQuery_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListControllerRequest_IndexKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListControllerRequest_IndexKey_Sequence{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListControllerRequest_IndexKey_Sequence_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListControllerRequest_IndexKey_Address{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListControllerRequest_IndexKey_Address_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListControllerRequest_IndexKey_PublicKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListControllerRequest_IndexKey_PublicKey_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListControllerRequest_IndexKey_PeerId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListControllerRequest_IndexKey_PeerId_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListControllerRequest_IndexKey_Ipns{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListControllerRequest_IndexKey_Ipns_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListControllerRequest_IndexKey_Sequence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sequence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sequence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XSequence = &ListControllerRequest_IndexKey_Sequence_Sequence{v}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListControllerRequest_IndexKey_Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAddress = &ListControllerRequest_IndexKey_Address_Address{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListControllerRequest_IndexKey_PublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.XPublicKey = &ListControllerRequest_IndexKey_PublicKey_PublicKey{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListControllerRequest_IndexKey_PeerId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XPeerId = &ListControllerRequest_IndexKey_PeerId_PeerId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListControllerRequest_IndexKey_Ipns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ipns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ipns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XIpns = &ListControllerRequest_IndexKey_Ipns_Ipns{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListControllerRequest_RangeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &ListControllerRequest_IndexKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &ListControllerRequest_IndexKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListControllerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListControllerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListControllerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Controller{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStateQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStateQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStateQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStateQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStateQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStateQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStateQuery = fmt.Errorf("proto: unexpected end of group")
)
