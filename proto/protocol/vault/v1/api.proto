syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrhq.protocol.vault.v1;

import "core/identity/v1/did.proto";
import "google/api/annotations.proto";
import "protocol/vault/v1/models.proto";

option go_package = "github.com/sonrhq/core/x/identity/types/vault/v1";

// RegisterStartRequest is the request to register a new account.
message RegisterStartRequest {
  string aka = 1;
  int32 threshold = 2; // optional
}

// RegisterStartResponse is the response to a Register request.
message RegisterStartResponse {
  string account_address = 1;
  string aka = 2;
  string create_credential_options = 3;
}

// RegisterFinishRequest is the request to CreateAccount a new key from the private key.
message RegisterFinishRequest {
  string account_address = 1;
  string credential_response = 2;
}

// RegisterFinishResponse is the response to a CreateAccount request.
message RegisterFinishResponse {
  bytes id = 1;
  string address = 2;
  core.identity.v1.DidDocument did_document = 3;
  AccountInfo new_account = 4;
}

// ListAccountsRequest is the request to list the accounts.
message ListAccountsRequest {
  string credential_response = 1;
  string session_id = 2;
}

// ListAccountsResponse is the response to a ListAccounts request.
message ListAccountsResponse {
  repeated AccountInfo accounts = 1;
}

// DeleteAccountRequest is the request to delete an account.
message DeleteAccountRequest {
  string credential_response = 1;
  string session_id = 2;
  string account_name = 3;
}

// DeleteAccountResponse is the response to a DeleteAccount request.
message DeleteAccountResponse {
  bool success = 1;
  core.identity.v1.DidDocument did_document = 2;
  AccountInfo deleted_account = 3;
}

// RefreshRequest is the request to refresh the keypair.
message RefreshRequest {
  string credential_response = 1;
  string session_id = 2;
}

// RefreshResponse is the response to a Refresh request.
message RefreshResponse {
  bytes id = 1;
  string address = 2;
  core.identity.v1.DidDocument did_document = 3;
}

// ==================================================================
// GRPC/REST SERVICE
// ==================================================================

// Vault is the service used for managing a node's keypair.
service Vault {
  // RegisterStart creates a new Webauthn credential and returns it.
  rpc RegisterStart(RegisterStartRequest) returns (RegisterStartResponse) {
    option (google.api.http) = {
      post: "/sonr/protocol/vault/register/start"
      body: "*"
    };
  }

  // RegisterFinish creates a new Bip32 child key and returns the configuration.
  rpc RegisterFinish(RegisterFinishRequest) returns (RegisterFinishResponse) {
    option (google.api.http) = {
      post: "/sonr/protocol/vault/register/finish"
      body: "*"
    };
  }

  // ListAccounts lists the accounts and returns the configuration.
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
    option (google.api.http) = {
      post: "/sonr/protocol/vault/list-accounts"
      body: "*"
    };
  }

  // DeleteAccount deletes the account and returns the configuration.
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
    option (google.api.http) = {
      post: "/sonr/protocol/vault/delete-account"
      body: "*"
    };
  }

  // Refresh refreshes the Wallet shares and returns the updated configuration.
  rpc Refresh(RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
      post: "/sonr/protocol/vault/refresh"
      body: "*"
    };
  }
}
