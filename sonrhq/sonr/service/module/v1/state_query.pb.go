// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sonrhq/sonr/service/module/v1/state_query.proto

package sonrhq_sonr_service_module_v1

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetServiceRecordRequest is the StateQuery/GetServiceRecordRequest request type.
type GetServiceRecordRequest struct {
	// id specifies the value of the id field in the primary key.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetServiceRecordRequest) Reset()         { *m = GetServiceRecordRequest{} }
func (m *GetServiceRecordRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceRecordRequest) ProtoMessage()    {}
func (*GetServiceRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{0}
}
func (m *GetServiceRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRecordRequest.Merge(m, src)
}
func (m *GetServiceRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRecordRequest proto.InternalMessageInfo

func (m *GetServiceRecordRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GetServiceRecordResponse is the StateQuery/GetServiceRecordResponse response type.
type GetServiceRecordResponse struct {
	// value is the response value.
	Value *ServiceRecord `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetServiceRecordResponse) Reset()         { *m = GetServiceRecordResponse{} }
func (m *GetServiceRecordResponse) String() string { return proto.CompactTextString(m) }
func (*GetServiceRecordResponse) ProtoMessage()    {}
func (*GetServiceRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{1}
}
func (m *GetServiceRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRecordResponse.Merge(m, src)
}
func (m *GetServiceRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRecordResponse proto.InternalMessageInfo

func (m *GetServiceRecordResponse) GetValue() *ServiceRecord {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetServiceRecordByOriginRequest is the StateQuery/GetServiceRecordByOriginRequest request type.
type GetServiceRecordByOriginRequest struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *GetServiceRecordByOriginRequest) Reset()         { *m = GetServiceRecordByOriginRequest{} }
func (m *GetServiceRecordByOriginRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceRecordByOriginRequest) ProtoMessage()    {}
func (*GetServiceRecordByOriginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{2}
}
func (m *GetServiceRecordByOriginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceRecordByOriginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceRecordByOriginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceRecordByOriginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRecordByOriginRequest.Merge(m, src)
}
func (m *GetServiceRecordByOriginRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceRecordByOriginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRecordByOriginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRecordByOriginRequest proto.InternalMessageInfo

func (m *GetServiceRecordByOriginRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

// GetServiceRecordByOriginResponse is the StateQuery/GetServiceRecordByOriginResponse response type.
type GetServiceRecordByOriginResponse struct {
	Value *ServiceRecord `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetServiceRecordByOriginResponse) Reset()         { *m = GetServiceRecordByOriginResponse{} }
func (m *GetServiceRecordByOriginResponse) String() string { return proto.CompactTextString(m) }
func (*GetServiceRecordByOriginResponse) ProtoMessage()    {}
func (*GetServiceRecordByOriginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{3}
}
func (m *GetServiceRecordByOriginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceRecordByOriginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceRecordByOriginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceRecordByOriginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRecordByOriginResponse.Merge(m, src)
}
func (m *GetServiceRecordByOriginResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceRecordByOriginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRecordByOriginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRecordByOriginResponse proto.InternalMessageInfo

func (m *GetServiceRecordByOriginResponse) GetValue() *ServiceRecord {
	if m != nil {
		return m.Value
	}
	return nil
}

// ListServiceRecordRequest is the StateQuery/ListServiceRecordRequest request type.
type ListServiceRecordRequest struct {
	// query specifies the type of query - either a prefix or range query.
	//
	// Types that are valid to be assigned to Query:
	//	*ListServiceRecordRequest_PrefixQuery
	//	*ListServiceRecordRequest_RangeQuery_
	Query isListServiceRecordRequest_Query `protobuf_oneof:"query"`
	// pagination specifies optional pagination parameters.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListServiceRecordRequest) Reset()         { *m = ListServiceRecordRequest{} }
func (m *ListServiceRecordRequest) String() string { return proto.CompactTextString(m) }
func (*ListServiceRecordRequest) ProtoMessage()    {}
func (*ListServiceRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{4}
}
func (m *ListServiceRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRecordRequest.Merge(m, src)
}
func (m *ListServiceRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRecordRequest proto.InternalMessageInfo

type isListServiceRecordRequest_Query interface {
	isListServiceRecordRequest_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListServiceRecordRequest_PrefixQuery struct {
	PrefixQuery *ListServiceRecordRequest_IndexKey `protobuf:"bytes,1,opt,name=prefix_query,json=prefixQuery,proto3,oneof" json:"prefix_query,omitempty"`
}
type ListServiceRecordRequest_RangeQuery_ struct {
	RangeQuery *ListServiceRecordRequest_RangeQuery `protobuf:"bytes,2,opt,name=range_query,json=rangeQuery,proto3,oneof" json:"range_query,omitempty"`
}

func (*ListServiceRecordRequest_PrefixQuery) isListServiceRecordRequest_Query() {}
func (*ListServiceRecordRequest_RangeQuery_) isListServiceRecordRequest_Query() {}

func (m *ListServiceRecordRequest) GetQuery() isListServiceRecordRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListServiceRecordRequest) GetPrefixQuery() *ListServiceRecordRequest_IndexKey {
	if x, ok := m.GetQuery().(*ListServiceRecordRequest_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (m *ListServiceRecordRequest) GetRangeQuery() *ListServiceRecordRequest_RangeQuery {
	if x, ok := m.GetQuery().(*ListServiceRecordRequest_RangeQuery_); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *ListServiceRecordRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListServiceRecordRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListServiceRecordRequest_PrefixQuery)(nil),
		(*ListServiceRecordRequest_RangeQuery_)(nil),
	}
}

// IndexKey specifies the value of an index key to use in prefix and range queries.
type ListServiceRecordRequest_IndexKey struct {
	// key specifies the index key value.
	//
	// Types that are valid to be assigned to Key:
	//	*ListServiceRecordRequest_IndexKey_Id_
	//	*ListServiceRecordRequest_IndexKey_Origin_
	//	*ListServiceRecordRequest_IndexKey_Controller_
	Key isListServiceRecordRequest_IndexKey_Key `protobuf_oneof:"key"`
}

func (m *ListServiceRecordRequest_IndexKey) Reset()         { *m = ListServiceRecordRequest_IndexKey{} }
func (m *ListServiceRecordRequest_IndexKey) String() string { return proto.CompactTextString(m) }
func (*ListServiceRecordRequest_IndexKey) ProtoMessage()    {}
func (*ListServiceRecordRequest_IndexKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{4, 0}
}
func (m *ListServiceRecordRequest_IndexKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRecordRequest_IndexKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRecordRequest_IndexKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRecordRequest_IndexKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRecordRequest_IndexKey.Merge(m, src)
}
func (m *ListServiceRecordRequest_IndexKey) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRecordRequest_IndexKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRecordRequest_IndexKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRecordRequest_IndexKey proto.InternalMessageInfo

type isListServiceRecordRequest_IndexKey_Key interface {
	isListServiceRecordRequest_IndexKey_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListServiceRecordRequest_IndexKey_Id_ struct {
	Id *ListServiceRecordRequest_IndexKey_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}
type ListServiceRecordRequest_IndexKey_Origin_ struct {
	Origin *ListServiceRecordRequest_IndexKey_Origin `protobuf:"bytes,2,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
}
type ListServiceRecordRequest_IndexKey_Controller_ struct {
	Controller *ListServiceRecordRequest_IndexKey_Controller `protobuf:"bytes,3,opt,name=controller,proto3,oneof" json:"controller,omitempty"`
}

func (*ListServiceRecordRequest_IndexKey_Id_) isListServiceRecordRequest_IndexKey_Key()         {}
func (*ListServiceRecordRequest_IndexKey_Origin_) isListServiceRecordRequest_IndexKey_Key()     {}
func (*ListServiceRecordRequest_IndexKey_Controller_) isListServiceRecordRequest_IndexKey_Key() {}

func (m *ListServiceRecordRequest_IndexKey) GetKey() isListServiceRecordRequest_IndexKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListServiceRecordRequest_IndexKey) GetId() *ListServiceRecordRequest_IndexKey_Id {
	if x, ok := m.GetKey().(*ListServiceRecordRequest_IndexKey_Id_); ok {
		return x.Id
	}
	return nil
}

func (m *ListServiceRecordRequest_IndexKey) GetOrigin() *ListServiceRecordRequest_IndexKey_Origin {
	if x, ok := m.GetKey().(*ListServiceRecordRequest_IndexKey_Origin_); ok {
		return x.Origin
	}
	return nil
}

func (m *ListServiceRecordRequest_IndexKey) GetController() *ListServiceRecordRequest_IndexKey_Controller {
	if x, ok := m.GetKey().(*ListServiceRecordRequest_IndexKey_Controller_); ok {
		return x.Controller
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListServiceRecordRequest_IndexKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListServiceRecordRequest_IndexKey_Id_)(nil),
		(*ListServiceRecordRequest_IndexKey_Origin_)(nil),
		(*ListServiceRecordRequest_IndexKey_Controller_)(nil),
	}
}

type ListServiceRecordRequest_IndexKey_Id struct {
	// Types that are valid to be assigned to XId:
	//	*ListServiceRecordRequest_IndexKey_Id_Id
	XId isListServiceRecordRequest_IndexKey_Id_XId `protobuf_oneof:"_id"`
}

func (m *ListServiceRecordRequest_IndexKey_Id) Reset()         { *m = ListServiceRecordRequest_IndexKey_Id{} }
func (m *ListServiceRecordRequest_IndexKey_Id) String() string { return proto.CompactTextString(m) }
func (*ListServiceRecordRequest_IndexKey_Id) ProtoMessage()    {}
func (*ListServiceRecordRequest_IndexKey_Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{4, 0, 0}
}
func (m *ListServiceRecordRequest_IndexKey_Id) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRecordRequest_IndexKey_Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRecordRequest_IndexKey_Id.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRecordRequest_IndexKey_Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRecordRequest_IndexKey_Id.Merge(m, src)
}
func (m *ListServiceRecordRequest_IndexKey_Id) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRecordRequest_IndexKey_Id) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRecordRequest_IndexKey_Id.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRecordRequest_IndexKey_Id proto.InternalMessageInfo

type isListServiceRecordRequest_IndexKey_Id_XId interface {
	isListServiceRecordRequest_IndexKey_Id_XId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListServiceRecordRequest_IndexKey_Id_Id struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (*ListServiceRecordRequest_IndexKey_Id_Id) isListServiceRecordRequest_IndexKey_Id_XId() {}

func (m *ListServiceRecordRequest_IndexKey_Id) GetXId() isListServiceRecordRequest_IndexKey_Id_XId {
	if m != nil {
		return m.XId
	}
	return nil
}

func (m *ListServiceRecordRequest_IndexKey_Id) GetId() uint64 {
	if x, ok := m.GetXId().(*ListServiceRecordRequest_IndexKey_Id_Id); ok {
		return x.Id
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListServiceRecordRequest_IndexKey_Id) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListServiceRecordRequest_IndexKey_Id_Id)(nil),
	}
}

type ListServiceRecordRequest_IndexKey_Origin struct {
	// Types that are valid to be assigned to XOrigin:
	//	*ListServiceRecordRequest_IndexKey_Origin_Origin
	XOrigin isListServiceRecordRequest_IndexKey_Origin_XOrigin `protobuf_oneof:"_origin"`
}

func (m *ListServiceRecordRequest_IndexKey_Origin) Reset() {
	*m = ListServiceRecordRequest_IndexKey_Origin{}
}
func (m *ListServiceRecordRequest_IndexKey_Origin) String() string { return proto.CompactTextString(m) }
func (*ListServiceRecordRequest_IndexKey_Origin) ProtoMessage()    {}
func (*ListServiceRecordRequest_IndexKey_Origin) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{4, 0, 1}
}
func (m *ListServiceRecordRequest_IndexKey_Origin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRecordRequest_IndexKey_Origin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRecordRequest_IndexKey_Origin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRecordRequest_IndexKey_Origin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRecordRequest_IndexKey_Origin.Merge(m, src)
}
func (m *ListServiceRecordRequest_IndexKey_Origin) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRecordRequest_IndexKey_Origin) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRecordRequest_IndexKey_Origin.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRecordRequest_IndexKey_Origin proto.InternalMessageInfo

type isListServiceRecordRequest_IndexKey_Origin_XOrigin interface {
	isListServiceRecordRequest_IndexKey_Origin_XOrigin()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListServiceRecordRequest_IndexKey_Origin_Origin struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
}

func (*ListServiceRecordRequest_IndexKey_Origin_Origin) isListServiceRecordRequest_IndexKey_Origin_XOrigin() {
}

func (m *ListServiceRecordRequest_IndexKey_Origin) GetXOrigin() isListServiceRecordRequest_IndexKey_Origin_XOrigin {
	if m != nil {
		return m.XOrigin
	}
	return nil
}

func (m *ListServiceRecordRequest_IndexKey_Origin) GetOrigin() string {
	if x, ok := m.GetXOrigin().(*ListServiceRecordRequest_IndexKey_Origin_Origin); ok {
		return x.Origin
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListServiceRecordRequest_IndexKey_Origin) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListServiceRecordRequest_IndexKey_Origin_Origin)(nil),
	}
}

type ListServiceRecordRequest_IndexKey_Controller struct {
	// Types that are valid to be assigned to XController:
	//	*ListServiceRecordRequest_IndexKey_Controller_Controller
	XController isListServiceRecordRequest_IndexKey_Controller_XController `protobuf_oneof:"_controller"`
}

func (m *ListServiceRecordRequest_IndexKey_Controller) Reset() {
	*m = ListServiceRecordRequest_IndexKey_Controller{}
}
func (m *ListServiceRecordRequest_IndexKey_Controller) String() string {
	return proto.CompactTextString(m)
}
func (*ListServiceRecordRequest_IndexKey_Controller) ProtoMessage() {}
func (*ListServiceRecordRequest_IndexKey_Controller) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{4, 0, 2}
}
func (m *ListServiceRecordRequest_IndexKey_Controller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRecordRequest_IndexKey_Controller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRecordRequest_IndexKey_Controller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRecordRequest_IndexKey_Controller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRecordRequest_IndexKey_Controller.Merge(m, src)
}
func (m *ListServiceRecordRequest_IndexKey_Controller) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRecordRequest_IndexKey_Controller) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRecordRequest_IndexKey_Controller.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRecordRequest_IndexKey_Controller proto.InternalMessageInfo

type isListServiceRecordRequest_IndexKey_Controller_XController interface {
	isListServiceRecordRequest_IndexKey_Controller_XController()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListServiceRecordRequest_IndexKey_Controller_Controller struct {
	Controller string `protobuf:"bytes,1,opt,name=controller,proto3,oneof" json:"controller,omitempty"`
}

func (*ListServiceRecordRequest_IndexKey_Controller_Controller) isListServiceRecordRequest_IndexKey_Controller_XController() {
}

func (m *ListServiceRecordRequest_IndexKey_Controller) GetXController() isListServiceRecordRequest_IndexKey_Controller_XController {
	if m != nil {
		return m.XController
	}
	return nil
}

func (m *ListServiceRecordRequest_IndexKey_Controller) GetController() string {
	if x, ok := m.GetXController().(*ListServiceRecordRequest_IndexKey_Controller_Controller); ok {
		return x.Controller
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListServiceRecordRequest_IndexKey_Controller) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListServiceRecordRequest_IndexKey_Controller_Controller)(nil),
	}
}

// RangeQuery specifies the from/to index keys for a range query.
type ListServiceRecordRequest_RangeQuery struct {
	// from is the index key to use for the start of the range query.
	// To query from the start of an index, specify an index key for that index with empty values.
	From *ListServiceRecordRequest_IndexKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the index key to use for the end of the range query.
	// The index key type MUST be the same as the index key type used for from.
	// To query from to the end of an index it can be omitted.
	To *ListServiceRecordRequest_IndexKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ListServiceRecordRequest_RangeQuery) Reset()         { *m = ListServiceRecordRequest_RangeQuery{} }
func (m *ListServiceRecordRequest_RangeQuery) String() string { return proto.CompactTextString(m) }
func (*ListServiceRecordRequest_RangeQuery) ProtoMessage()    {}
func (*ListServiceRecordRequest_RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{4, 1}
}
func (m *ListServiceRecordRequest_RangeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRecordRequest_RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRecordRequest_RangeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRecordRequest_RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRecordRequest_RangeQuery.Merge(m, src)
}
func (m *ListServiceRecordRequest_RangeQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRecordRequest_RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRecordRequest_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRecordRequest_RangeQuery proto.InternalMessageInfo

func (m *ListServiceRecordRequest_RangeQuery) GetFrom() *ListServiceRecordRequest_IndexKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListServiceRecordRequest_RangeQuery) GetTo() *ListServiceRecordRequest_IndexKey {
	if m != nil {
		return m.To
	}
	return nil
}

// ListServiceRecordResponse is the StateQuery/ListServiceRecordResponse response type.
type ListServiceRecordResponse struct {
	// values are the results of the query.
	Values []*ServiceRecord `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// pagination is the pagination response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListServiceRecordResponse) Reset()         { *m = ListServiceRecordResponse{} }
func (m *ListServiceRecordResponse) String() string { return proto.CompactTextString(m) }
func (*ListServiceRecordResponse) ProtoMessage()    {}
func (*ListServiceRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{5}
}
func (m *ListServiceRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRecordResponse.Merge(m, src)
}
func (m *ListServiceRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRecordResponse proto.InternalMessageInfo

func (m *ListServiceRecordResponse) GetValues() []*ServiceRecord {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListServiceRecordResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetCredentialRequest is the StateQuery/GetCredentialRequest request type.
type GetCredentialRequest struct {
	// id specifies the value of the id field in the primary key.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetCredentialRequest) Reset()         { *m = GetCredentialRequest{} }
func (m *GetCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*GetCredentialRequest) ProtoMessage()    {}
func (*GetCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{6}
}
func (m *GetCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialRequest.Merge(m, src)
}
func (m *GetCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialRequest proto.InternalMessageInfo

func (m *GetCredentialRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GetCredentialResponse is the StateQuery/GetCredentialResponse response type.
type GetCredentialResponse struct {
	// value is the response value.
	Value *Credential `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetCredentialResponse) Reset()         { *m = GetCredentialResponse{} }
func (m *GetCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*GetCredentialResponse) ProtoMessage()    {}
func (*GetCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{7}
}
func (m *GetCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialResponse.Merge(m, src)
}
func (m *GetCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialResponse proto.InternalMessageInfo

func (m *GetCredentialResponse) GetValue() *Credential {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetCredentialByOriginHandleRequest is the StateQuery/GetCredentialByOriginHandleRequest request type.
type GetCredentialByOriginHandleRequest struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Handle string `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *GetCredentialByOriginHandleRequest) Reset()         { *m = GetCredentialByOriginHandleRequest{} }
func (m *GetCredentialByOriginHandleRequest) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByOriginHandleRequest) ProtoMessage()    {}
func (*GetCredentialByOriginHandleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{8}
}
func (m *GetCredentialByOriginHandleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByOriginHandleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByOriginHandleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByOriginHandleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByOriginHandleRequest.Merge(m, src)
}
func (m *GetCredentialByOriginHandleRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByOriginHandleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByOriginHandleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByOriginHandleRequest proto.InternalMessageInfo

func (m *GetCredentialByOriginHandleRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *GetCredentialByOriginHandleRequest) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

// GetCredentialByOriginHandleResponse is the StateQuery/GetCredentialByOriginHandleResponse response type.
type GetCredentialByOriginHandleResponse struct {
	Value *Credential `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetCredentialByOriginHandleResponse) Reset()         { *m = GetCredentialByOriginHandleResponse{} }
func (m *GetCredentialByOriginHandleResponse) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByOriginHandleResponse) ProtoMessage()    {}
func (*GetCredentialByOriginHandleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{9}
}
func (m *GetCredentialByOriginHandleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByOriginHandleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByOriginHandleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByOriginHandleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByOriginHandleResponse.Merge(m, src)
}
func (m *GetCredentialByOriginHandleResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByOriginHandleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByOriginHandleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByOriginHandleResponse proto.InternalMessageInfo

func (m *GetCredentialByOriginHandleResponse) GetValue() *Credential {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetCredentialByCredentialIdRequest is the StateQuery/GetCredentialByCredentialIdRequest request type.
type GetCredentialByCredentialIdRequest struct {
	CredentialId []byte `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (m *GetCredentialByCredentialIdRequest) Reset()         { *m = GetCredentialByCredentialIdRequest{} }
func (m *GetCredentialByCredentialIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByCredentialIdRequest) ProtoMessage()    {}
func (*GetCredentialByCredentialIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{10}
}
func (m *GetCredentialByCredentialIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByCredentialIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByCredentialIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByCredentialIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByCredentialIdRequest.Merge(m, src)
}
func (m *GetCredentialByCredentialIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByCredentialIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByCredentialIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByCredentialIdRequest proto.InternalMessageInfo

func (m *GetCredentialByCredentialIdRequest) GetCredentialId() []byte {
	if m != nil {
		return m.CredentialId
	}
	return nil
}

// GetCredentialByCredentialIdResponse is the StateQuery/GetCredentialByCredentialIdResponse response type.
type GetCredentialByCredentialIdResponse struct {
	Value *Credential `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetCredentialByCredentialIdResponse) Reset()         { *m = GetCredentialByCredentialIdResponse{} }
func (m *GetCredentialByCredentialIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByCredentialIdResponse) ProtoMessage()    {}
func (*GetCredentialByCredentialIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{11}
}
func (m *GetCredentialByCredentialIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByCredentialIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByCredentialIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByCredentialIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByCredentialIdResponse.Merge(m, src)
}
func (m *GetCredentialByCredentialIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByCredentialIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByCredentialIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByCredentialIdResponse proto.InternalMessageInfo

func (m *GetCredentialByCredentialIdResponse) GetValue() *Credential {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetCredentialByPublicKeyRequest is the StateQuery/GetCredentialByPublicKeyRequest request type.
type GetCredentialByPublicKeyRequest struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *GetCredentialByPublicKeyRequest) Reset()         { *m = GetCredentialByPublicKeyRequest{} }
func (m *GetCredentialByPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByPublicKeyRequest) ProtoMessage()    {}
func (*GetCredentialByPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{12}
}
func (m *GetCredentialByPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByPublicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByPublicKeyRequest.Merge(m, src)
}
func (m *GetCredentialByPublicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByPublicKeyRequest proto.InternalMessageInfo

func (m *GetCredentialByPublicKeyRequest) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

// GetCredentialByPublicKeyResponse is the StateQuery/GetCredentialByPublicKeyResponse response type.
type GetCredentialByPublicKeyResponse struct {
	Value *Credential `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetCredentialByPublicKeyResponse) Reset()         { *m = GetCredentialByPublicKeyResponse{} }
func (m *GetCredentialByPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByPublicKeyResponse) ProtoMessage()    {}
func (*GetCredentialByPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{13}
}
func (m *GetCredentialByPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByPublicKeyResponse.Merge(m, src)
}
func (m *GetCredentialByPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByPublicKeyResponse proto.InternalMessageInfo

func (m *GetCredentialByPublicKeyResponse) GetValue() *Credential {
	if m != nil {
		return m.Value
	}
	return nil
}

// ListCredentialRequest is the StateQuery/ListCredentialRequest request type.
type ListCredentialRequest struct {
	// query specifies the type of query - either a prefix or range query.
	//
	// Types that are valid to be assigned to Query:
	//
	//	*ListCredentialRequest_PrefixQuery
	//	*ListCredentialRequest_RangeQuery_
	Query isListCredentialRequest_Query `protobuf_oneof:"query"`
	// pagination specifies optional pagination parameters.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListCredentialRequest) Reset()         { *m = ListCredentialRequest{} }
func (m *ListCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest) ProtoMessage()    {}
func (*ListCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{14}
}
func (m *ListCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest.Merge(m, src)
}
func (m *ListCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest proto.InternalMessageInfo

type isListCredentialRequest_Query interface {
	isListCredentialRequest_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_PrefixQuery struct {
	PrefixQuery *ListCredentialRequest_IndexKey `protobuf:"bytes,1,opt,name=prefix_query,json=prefixQuery,proto3,oneof" json:"prefix_query,omitempty"`
}
type ListCredentialRequest_RangeQuery_ struct {
	RangeQuery *ListCredentialRequest_RangeQuery `protobuf:"bytes,2,opt,name=range_query,json=rangeQuery,proto3,oneof" json:"range_query,omitempty"`
}

func (*ListCredentialRequest_PrefixQuery) isListCredentialRequest_Query() {}
func (*ListCredentialRequest_RangeQuery_) isListCredentialRequest_Query() {}

func (m *ListCredentialRequest) GetQuery() isListCredentialRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListCredentialRequest) GetPrefixQuery() *ListCredentialRequest_IndexKey {
	if x, ok := m.GetQuery().(*ListCredentialRequest_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (m *ListCredentialRequest) GetRangeQuery() *ListCredentialRequest_RangeQuery {
	if x, ok := m.GetQuery().(*ListCredentialRequest_RangeQuery_); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *ListCredentialRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_PrefixQuery)(nil),
		(*ListCredentialRequest_RangeQuery_)(nil),
	}
}

// IndexKey specifies the value of an index key to use in prefix and range queries.
type ListCredentialRequest_IndexKey struct {
	// key specifies the index key value.
	//
	// Types that are valid to be assigned to Key:
	//
	//	*ListCredentialRequest_IndexKey_Id_
	//	*ListCredentialRequest_IndexKey_Handle_
	//	*ListCredentialRequest_IndexKey_OriginHandle_
	//	*ListCredentialRequest_IndexKey_CredentialId_
	//	*ListCredentialRequest_IndexKey_PublicKey_
	Key isListCredentialRequest_IndexKey_Key `protobuf_oneof:"key"`
}

func (m *ListCredentialRequest_IndexKey) Reset()         { *m = ListCredentialRequest_IndexKey{} }
func (m *ListCredentialRequest_IndexKey) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest_IndexKey) ProtoMessage()    {}
func (*ListCredentialRequest_IndexKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{14, 0}
}
func (m *ListCredentialRequest_IndexKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_Key interface {
	isListCredentialRequest_IndexKey_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_Id_ struct {
	Id *ListCredentialRequest_IndexKey_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}
type ListCredentialRequest_IndexKey_Handle_ struct {
	Handle *ListCredentialRequest_IndexKey_Handle `protobuf:"bytes,2,opt,name=handle,proto3,oneof" json:"handle,omitempty"`
}
type ListCredentialRequest_IndexKey_OriginHandle_ struct {
	OriginHandle *ListCredentialRequest_IndexKey_OriginHandle `protobuf:"bytes,3,opt,name=origin_handle,json=originHandle,proto3,oneof" json:"origin_handle,omitempty"`
}
type ListCredentialRequest_IndexKey_CredentialId_ struct {
	CredentialId *ListCredentialRequest_IndexKey_CredentialId `protobuf:"bytes,4,opt,name=credential_id,json=credentialId,proto3,oneof" json:"credential_id,omitempty"`
}
type ListCredentialRequest_IndexKey_PublicKey_ struct {
	PublicKey *ListCredentialRequest_IndexKey_PublicKey `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3,oneof" json:"public_key,omitempty"`
}

func (*ListCredentialRequest_IndexKey_Id_) isListCredentialRequest_IndexKey_Key()           {}
func (*ListCredentialRequest_IndexKey_Handle_) isListCredentialRequest_IndexKey_Key()       {}
func (*ListCredentialRequest_IndexKey_OriginHandle_) isListCredentialRequest_IndexKey_Key() {}
func (*ListCredentialRequest_IndexKey_CredentialId_) isListCredentialRequest_IndexKey_Key() {}
func (*ListCredentialRequest_IndexKey_PublicKey_) isListCredentialRequest_IndexKey_Key()    {}

func (m *ListCredentialRequest_IndexKey) GetKey() isListCredentialRequest_IndexKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey) GetId() *ListCredentialRequest_IndexKey_Id {
	if x, ok := m.GetKey().(*ListCredentialRequest_IndexKey_Id_); ok {
		return x.Id
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey) GetHandle() *ListCredentialRequest_IndexKey_Handle {
	if x, ok := m.GetKey().(*ListCredentialRequest_IndexKey_Handle_); ok {
		return x.Handle
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey) GetOriginHandle() *ListCredentialRequest_IndexKey_OriginHandle {
	if x, ok := m.GetKey().(*ListCredentialRequest_IndexKey_OriginHandle_); ok {
		return x.OriginHandle
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey) GetCredentialId() *ListCredentialRequest_IndexKey_CredentialId {
	if x, ok := m.GetKey().(*ListCredentialRequest_IndexKey_CredentialId_); ok {
		return x.CredentialId
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey) GetPublicKey() *ListCredentialRequest_IndexKey_PublicKey {
	if x, ok := m.GetKey().(*ListCredentialRequest_IndexKey_PublicKey_); ok {
		return x.PublicKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_Id_)(nil),
		(*ListCredentialRequest_IndexKey_Handle_)(nil),
		(*ListCredentialRequest_IndexKey_OriginHandle_)(nil),
		(*ListCredentialRequest_IndexKey_CredentialId_)(nil),
		(*ListCredentialRequest_IndexKey_PublicKey_)(nil),
	}
}

type ListCredentialRequest_IndexKey_Id struct {
	// Types that are valid to be assigned to XId:
	//
	//	*ListCredentialRequest_IndexKey_Id_Id
	XId isListCredentialRequest_IndexKey_Id_XId `protobuf_oneof:"_id"`
}

func (m *ListCredentialRequest_IndexKey_Id) Reset()         { *m = ListCredentialRequest_IndexKey_Id{} }
func (m *ListCredentialRequest_IndexKey_Id) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest_IndexKey_Id) ProtoMessage()    {}
func (*ListCredentialRequest_IndexKey_Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{14, 0, 0}
}
func (m *ListCredentialRequest_IndexKey_Id) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey_Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey_Id.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey_Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey_Id.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey_Id) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey_Id) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey_Id.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey_Id proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_Id_XId interface {
	isListCredentialRequest_IndexKey_Id_XId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_Id_Id struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (*ListCredentialRequest_IndexKey_Id_Id) isListCredentialRequest_IndexKey_Id_XId() {}

func (m *ListCredentialRequest_IndexKey_Id) GetXId() isListCredentialRequest_IndexKey_Id_XId {
	if m != nil {
		return m.XId
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey_Id) GetId() uint64 {
	if x, ok := m.GetXId().(*ListCredentialRequest_IndexKey_Id_Id); ok {
		return x.Id
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey_Id) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_Id_Id)(nil),
	}
}

type ListCredentialRequest_IndexKey_Handle struct {
	// Types that are valid to be assigned to XHandle:
	//
	//	*ListCredentialRequest_IndexKey_Handle_Handle
	XHandle isListCredentialRequest_IndexKey_Handle_XHandle `protobuf_oneof:"_handle"`
}

func (m *ListCredentialRequest_IndexKey_Handle) Reset()         { *m = ListCredentialRequest_IndexKey_Handle{} }
func (m *ListCredentialRequest_IndexKey_Handle) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest_IndexKey_Handle) ProtoMessage()    {}
func (*ListCredentialRequest_IndexKey_Handle) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{14, 0, 1}
}
func (m *ListCredentialRequest_IndexKey_Handle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey_Handle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey_Handle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey_Handle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey_Handle.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey_Handle) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey_Handle) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey_Handle.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey_Handle proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_Handle_XHandle interface {
	isListCredentialRequest_IndexKey_Handle_XHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_Handle_Handle struct {
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3,oneof" json:"handle,omitempty"`
}

func (*ListCredentialRequest_IndexKey_Handle_Handle) isListCredentialRequest_IndexKey_Handle_XHandle() {
}

func (m *ListCredentialRequest_IndexKey_Handle) GetXHandle() isListCredentialRequest_IndexKey_Handle_XHandle {
	if m != nil {
		return m.XHandle
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey_Handle) GetHandle() string {
	if x, ok := m.GetXHandle().(*ListCredentialRequest_IndexKey_Handle_Handle); ok {
		return x.Handle
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey_Handle) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_Handle_Handle)(nil),
	}
}

type ListCredentialRequest_IndexKey_OriginHandle struct {
	// Types that are valid to be assigned to XOrigin:
	//
	//	*ListCredentialRequest_IndexKey_OriginHandle_Origin
	XOrigin isListCredentialRequest_IndexKey_OriginHandle_XOrigin `protobuf_oneof:"_origin"`
	// Types that are valid to be assigned to XHandle:
	//
	//	*ListCredentialRequest_IndexKey_OriginHandle_Handle
	XHandle isListCredentialRequest_IndexKey_OriginHandle_XHandle `protobuf_oneof:"_handle"`
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) Reset() {
	*m = ListCredentialRequest_IndexKey_OriginHandle{}
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) String() string {
	return proto.CompactTextString(m)
}
func (*ListCredentialRequest_IndexKey_OriginHandle) ProtoMessage() {}
func (*ListCredentialRequest_IndexKey_OriginHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{14, 0, 2}
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey_OriginHandle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey_OriginHandle.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey_OriginHandle.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey_OriginHandle proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_OriginHandle_XOrigin interface {
	isListCredentialRequest_IndexKey_OriginHandle_XOrigin()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isListCredentialRequest_IndexKey_OriginHandle_XHandle interface {
	isListCredentialRequest_IndexKey_OriginHandle_XHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_OriginHandle_Origin struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
}
type ListCredentialRequest_IndexKey_OriginHandle_Handle struct {
	Handle string `protobuf:"bytes,2,opt,name=handle,proto3,oneof" json:"handle,omitempty"`
}

func (*ListCredentialRequest_IndexKey_OriginHandle_Origin) isListCredentialRequest_IndexKey_OriginHandle_XOrigin() {
}
func (*ListCredentialRequest_IndexKey_OriginHandle_Handle) isListCredentialRequest_IndexKey_OriginHandle_XHandle() {
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) GetXOrigin() isListCredentialRequest_IndexKey_OriginHandle_XOrigin {
	if m != nil {
		return m.XOrigin
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) GetXHandle() isListCredentialRequest_IndexKey_OriginHandle_XHandle {
	if m != nil {
		return m.XHandle
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) GetOrigin() string {
	if x, ok := m.GetXOrigin().(*ListCredentialRequest_IndexKey_OriginHandle_Origin); ok {
		return x.Origin
	}
	return ""
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) GetHandle() string {
	if x, ok := m.GetXHandle().(*ListCredentialRequest_IndexKey_OriginHandle_Handle); ok {
		return x.Handle
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey_OriginHandle) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_OriginHandle_Origin)(nil),
		(*ListCredentialRequest_IndexKey_OriginHandle_Handle)(nil),
	}
}

type ListCredentialRequest_IndexKey_CredentialId struct {
	// Types that are valid to be assigned to XCredentialId:
	//
	//	*ListCredentialRequest_IndexKey_CredentialId_CredentialId
	XCredentialId isListCredentialRequest_IndexKey_CredentialId_XCredentialId `protobuf_oneof:"_credential_id"`
}

func (m *ListCredentialRequest_IndexKey_CredentialId) Reset() {
	*m = ListCredentialRequest_IndexKey_CredentialId{}
}
func (m *ListCredentialRequest_IndexKey_CredentialId) String() string {
	return proto.CompactTextString(m)
}
func (*ListCredentialRequest_IndexKey_CredentialId) ProtoMessage() {}
func (*ListCredentialRequest_IndexKey_CredentialId) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{14, 0, 3}
}
func (m *ListCredentialRequest_IndexKey_CredentialId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey_CredentialId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey_CredentialId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey_CredentialId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey_CredentialId.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey_CredentialId) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey_CredentialId) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey_CredentialId.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey_CredentialId proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_CredentialId_XCredentialId interface {
	isListCredentialRequest_IndexKey_CredentialId_XCredentialId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_CredentialId_CredentialId struct {
	CredentialId []byte `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3,oneof" json:"credential_id,omitempty"`
}

func (*ListCredentialRequest_IndexKey_CredentialId_CredentialId) isListCredentialRequest_IndexKey_CredentialId_XCredentialId() {
}

func (m *ListCredentialRequest_IndexKey_CredentialId) GetXCredentialId() isListCredentialRequest_IndexKey_CredentialId_XCredentialId {
	if m != nil {
		return m.XCredentialId
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey_CredentialId) GetCredentialId() []byte {
	if x, ok := m.GetXCredentialId().(*ListCredentialRequest_IndexKey_CredentialId_CredentialId); ok {
		return x.CredentialId
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey_CredentialId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_CredentialId_CredentialId)(nil),
	}
}

type ListCredentialRequest_IndexKey_PublicKey struct {
	// Types that are valid to be assigned to XPublicKey:
	//
	//	*ListCredentialRequest_IndexKey_PublicKey_PublicKey
	XPublicKey isListCredentialRequest_IndexKey_PublicKey_XPublicKey `protobuf_oneof:"_public_key"`
}

func (m *ListCredentialRequest_IndexKey_PublicKey) Reset() {
	*m = ListCredentialRequest_IndexKey_PublicKey{}
}
func (m *ListCredentialRequest_IndexKey_PublicKey) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest_IndexKey_PublicKey) ProtoMessage()    {}
func (*ListCredentialRequest_IndexKey_PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{14, 0, 4}
}
func (m *ListCredentialRequest_IndexKey_PublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey_PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey_PublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey_PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey_PublicKey.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey_PublicKey) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey_PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey_PublicKey proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_PublicKey_XPublicKey interface {
	isListCredentialRequest_IndexKey_PublicKey_XPublicKey()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_PublicKey_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof" json:"public_key,omitempty"`
}

func (*ListCredentialRequest_IndexKey_PublicKey_PublicKey) isListCredentialRequest_IndexKey_PublicKey_XPublicKey() {
}

func (m *ListCredentialRequest_IndexKey_PublicKey) GetXPublicKey() isListCredentialRequest_IndexKey_PublicKey_XPublicKey {
	if m != nil {
		return m.XPublicKey
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey_PublicKey) GetPublicKey() []byte {
	if x, ok := m.GetXPublicKey().(*ListCredentialRequest_IndexKey_PublicKey_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey_PublicKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_PublicKey_PublicKey)(nil),
	}
}

// RangeQuery specifies the from/to index keys for a range query.
type ListCredentialRequest_RangeQuery struct {
	// from is the index key to use for the start of the range query.
	// To query from the start of an index, specify an index key for that index with empty values.
	From *ListCredentialRequest_IndexKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the index key to use for the end of the range query.
	// The index key type MUST be the same as the index key type used for from.
	// To query from to the end of an index it can be omitted.
	To *ListCredentialRequest_IndexKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ListCredentialRequest_RangeQuery) Reset()         { *m = ListCredentialRequest_RangeQuery{} }
func (m *ListCredentialRequest_RangeQuery) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest_RangeQuery) ProtoMessage()    {}
func (*ListCredentialRequest_RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{14, 1}
}
func (m *ListCredentialRequest_RangeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_RangeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_RangeQuery.Merge(m, src)
}
func (m *ListCredentialRequest_RangeQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_RangeQuery proto.InternalMessageInfo

func (m *ListCredentialRequest_RangeQuery) GetFrom() *ListCredentialRequest_IndexKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListCredentialRequest_RangeQuery) GetTo() *ListCredentialRequest_IndexKey {
	if m != nil {
		return m.To
	}
	return nil
}

// ListCredentialResponse is the StateQuery/ListCredentialResponse response type.
type ListCredentialResponse struct {
	// values are the results of the query.
	Values []*Credential `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// pagination is the pagination response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListCredentialResponse) Reset()         { *m = ListCredentialResponse{} }
func (m *ListCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*ListCredentialResponse) ProtoMessage()    {}
func (*ListCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{15}
}
func (m *ListCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialResponse.Merge(m, src)
}
func (m *ListCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialResponse proto.InternalMessageInfo

func (m *ListCredentialResponse) GetValues() []*Credential {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListCredentialResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetWitnessRequest is the StateQuery/GetWitnessRequest request type.
type GetWitnessRequest struct {
	// index specifies the value of the index field in the primary key.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *GetWitnessRequest) Reset()         { *m = GetWitnessRequest{} }
func (m *GetWitnessRequest) String() string { return proto.CompactTextString(m) }
func (*GetWitnessRequest) ProtoMessage()    {}
func (*GetWitnessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{16}
}
func (m *GetWitnessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWitnessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWitnessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWitnessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWitnessRequest.Merge(m, src)
}
func (m *GetWitnessRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWitnessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWitnessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWitnessRequest proto.InternalMessageInfo

func (m *GetWitnessRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// GetWitnessResponse is the StateQuery/GetWitnessResponse response type.
type GetWitnessResponse struct {
	// value is the response value.
	Value *Witness `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetWitnessResponse) Reset()         { *m = GetWitnessResponse{} }
func (m *GetWitnessResponse) String() string { return proto.CompactTextString(m) }
func (*GetWitnessResponse) ProtoMessage()    {}
func (*GetWitnessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{17}
}
func (m *GetWitnessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWitnessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWitnessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWitnessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWitnessResponse.Merge(m, src)
}
func (m *GetWitnessResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWitnessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWitnessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWitnessResponse proto.InternalMessageInfo

func (m *GetWitnessResponse) GetValue() *Witness {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetWitnessByOriginKeyRequest is the StateQuery/GetWitnessByOriginKeyRequest request type.
type GetWitnessByOriginKeyRequest struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetWitnessByOriginKeyRequest) Reset()         { *m = GetWitnessByOriginKeyRequest{} }
func (m *GetWitnessByOriginKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetWitnessByOriginKeyRequest) ProtoMessage()    {}
func (*GetWitnessByOriginKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{18}
}
func (m *GetWitnessByOriginKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWitnessByOriginKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWitnessByOriginKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWitnessByOriginKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWitnessByOriginKeyRequest.Merge(m, src)
}
func (m *GetWitnessByOriginKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWitnessByOriginKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWitnessByOriginKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWitnessByOriginKeyRequest proto.InternalMessageInfo

func (m *GetWitnessByOriginKeyRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *GetWitnessByOriginKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// GetWitnessByOriginKeyResponse is the StateQuery/GetWitnessByOriginKeyResponse response type.
type GetWitnessByOriginKeyResponse struct {
	Value *Witness `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetWitnessByOriginKeyResponse) Reset()         { *m = GetWitnessByOriginKeyResponse{} }
func (m *GetWitnessByOriginKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GetWitnessByOriginKeyResponse) ProtoMessage()    {}
func (*GetWitnessByOriginKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{19}
}
func (m *GetWitnessByOriginKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWitnessByOriginKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWitnessByOriginKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWitnessByOriginKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWitnessByOriginKeyResponse.Merge(m, src)
}
func (m *GetWitnessByOriginKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWitnessByOriginKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWitnessByOriginKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWitnessByOriginKeyResponse proto.InternalMessageInfo

func (m *GetWitnessByOriginKeyResponse) GetValue() *Witness {
	if m != nil {
		return m.Value
	}
	return nil
}

// ListWitnessRequest is the StateQuery/ListWitnessRequest request type.
type ListWitnessRequest struct {
	// query specifies the type of query - either a prefix or range query.
	//
	// Types that are valid to be assigned to Query:
	//
	//	*ListWitnessRequest_PrefixQuery
	//	*ListWitnessRequest_RangeQuery_
	Query isListWitnessRequest_Query `protobuf_oneof:"query"`
	// pagination specifies optional pagination parameters.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListWitnessRequest) Reset()         { *m = ListWitnessRequest{} }
func (m *ListWitnessRequest) String() string { return proto.CompactTextString(m) }
func (*ListWitnessRequest) ProtoMessage()    {}
func (*ListWitnessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{20}
}
func (m *ListWitnessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWitnessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWitnessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWitnessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWitnessRequest.Merge(m, src)
}
func (m *ListWitnessRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWitnessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWitnessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWitnessRequest proto.InternalMessageInfo

type isListWitnessRequest_Query interface {
	isListWitnessRequest_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListWitnessRequest_PrefixQuery struct {
	PrefixQuery *ListWitnessRequest_IndexKey `protobuf:"bytes,1,opt,name=prefix_query,json=prefixQuery,proto3,oneof" json:"prefix_query,omitempty"`
}
type ListWitnessRequest_RangeQuery_ struct {
	RangeQuery *ListWitnessRequest_RangeQuery `protobuf:"bytes,2,opt,name=range_query,json=rangeQuery,proto3,oneof" json:"range_query,omitempty"`
}

func (*ListWitnessRequest_PrefixQuery) isListWitnessRequest_Query() {}
func (*ListWitnessRequest_RangeQuery_) isListWitnessRequest_Query() {}

func (m *ListWitnessRequest) GetQuery() isListWitnessRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListWitnessRequest) GetPrefixQuery() *ListWitnessRequest_IndexKey {
	if x, ok := m.GetQuery().(*ListWitnessRequest_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (m *ListWitnessRequest) GetRangeQuery() *ListWitnessRequest_RangeQuery {
	if x, ok := m.GetQuery().(*ListWitnessRequest_RangeQuery_); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *ListWitnessRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListWitnessRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListWitnessRequest_PrefixQuery)(nil),
		(*ListWitnessRequest_RangeQuery_)(nil),
	}
}

// IndexKey specifies the value of an index key to use in prefix and range queries.
type ListWitnessRequest_IndexKey struct {
	// key specifies the index key value.
	//
	// Types that are valid to be assigned to Key:
	//
	//	*ListWitnessRequest_IndexKey_Index_
	//	*ListWitnessRequest_IndexKey_OriginKey_
	Key isListWitnessRequest_IndexKey_Key `protobuf_oneof:"key"`
}

func (m *ListWitnessRequest_IndexKey) Reset()         { *m = ListWitnessRequest_IndexKey{} }
func (m *ListWitnessRequest_IndexKey) String() string { return proto.CompactTextString(m) }
func (*ListWitnessRequest_IndexKey) ProtoMessage()    {}
func (*ListWitnessRequest_IndexKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{20, 0}
}
func (m *ListWitnessRequest_IndexKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWitnessRequest_IndexKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWitnessRequest_IndexKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWitnessRequest_IndexKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWitnessRequest_IndexKey.Merge(m, src)
}
func (m *ListWitnessRequest_IndexKey) XXX_Size() int {
	return m.Size()
}
func (m *ListWitnessRequest_IndexKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWitnessRequest_IndexKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListWitnessRequest_IndexKey proto.InternalMessageInfo

type isListWitnessRequest_IndexKey_Key interface {
	isListWitnessRequest_IndexKey_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListWitnessRequest_IndexKey_Index_ struct {
	Index *ListWitnessRequest_IndexKey_Index `protobuf:"bytes,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
}
type ListWitnessRequest_IndexKey_OriginKey_ struct {
	OriginKey *ListWitnessRequest_IndexKey_OriginKey `protobuf:"bytes,2,opt,name=origin_key,json=originKey,proto3,oneof" json:"origin_key,omitempty"`
}

func (*ListWitnessRequest_IndexKey_Index_) isListWitnessRequest_IndexKey_Key()     {}
func (*ListWitnessRequest_IndexKey_OriginKey_) isListWitnessRequest_IndexKey_Key() {}

func (m *ListWitnessRequest_IndexKey) GetKey() isListWitnessRequest_IndexKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListWitnessRequest_IndexKey) GetIndex() *ListWitnessRequest_IndexKey_Index {
	if x, ok := m.GetKey().(*ListWitnessRequest_IndexKey_Index_); ok {
		return x.Index
	}
	return nil
}

func (m *ListWitnessRequest_IndexKey) GetOriginKey() *ListWitnessRequest_IndexKey_OriginKey {
	if x, ok := m.GetKey().(*ListWitnessRequest_IndexKey_OriginKey_); ok {
		return x.OriginKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListWitnessRequest_IndexKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListWitnessRequest_IndexKey_Index_)(nil),
		(*ListWitnessRequest_IndexKey_OriginKey_)(nil),
	}
}

type ListWitnessRequest_IndexKey_Index struct {
	// Types that are valid to be assigned to XIndex:
	//
	//	*ListWitnessRequest_IndexKey_Index_Index
	XIndex isListWitnessRequest_IndexKey_Index_XIndex `protobuf_oneof:"_index"`
}

func (m *ListWitnessRequest_IndexKey_Index) Reset()         { *m = ListWitnessRequest_IndexKey_Index{} }
func (m *ListWitnessRequest_IndexKey_Index) String() string { return proto.CompactTextString(m) }
func (*ListWitnessRequest_IndexKey_Index) ProtoMessage()    {}
func (*ListWitnessRequest_IndexKey_Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{20, 0, 0}
}
func (m *ListWitnessRequest_IndexKey_Index) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWitnessRequest_IndexKey_Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWitnessRequest_IndexKey_Index.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWitnessRequest_IndexKey_Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWitnessRequest_IndexKey_Index.Merge(m, src)
}
func (m *ListWitnessRequest_IndexKey_Index) XXX_Size() int {
	return m.Size()
}
func (m *ListWitnessRequest_IndexKey_Index) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWitnessRequest_IndexKey_Index.DiscardUnknown(m)
}

var xxx_messageInfo_ListWitnessRequest_IndexKey_Index proto.InternalMessageInfo

type isListWitnessRequest_IndexKey_Index_XIndex interface {
	isListWitnessRequest_IndexKey_Index_XIndex()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListWitnessRequest_IndexKey_Index_Index struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
}

func (*ListWitnessRequest_IndexKey_Index_Index) isListWitnessRequest_IndexKey_Index_XIndex() {}

func (m *ListWitnessRequest_IndexKey_Index) GetXIndex() isListWitnessRequest_IndexKey_Index_XIndex {
	if m != nil {
		return m.XIndex
	}
	return nil
}

func (m *ListWitnessRequest_IndexKey_Index) GetIndex() uint64 {
	if x, ok := m.GetXIndex().(*ListWitnessRequest_IndexKey_Index_Index); ok {
		return x.Index
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListWitnessRequest_IndexKey_Index) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListWitnessRequest_IndexKey_Index_Index)(nil),
	}
}

type ListWitnessRequest_IndexKey_OriginKey struct {
	// Types that are valid to be assigned to XOrigin:
	//
	//	*ListWitnessRequest_IndexKey_OriginKey_Origin
	XOrigin isListWitnessRequest_IndexKey_OriginKey_XOrigin `protobuf_oneof:"_origin"`
	// Types that are valid to be assigned to XKey:
	//
	//	*ListWitnessRequest_IndexKey_OriginKey_Key
	XKey isListWitnessRequest_IndexKey_OriginKey_XKey `protobuf_oneof:"_key"`
}

func (m *ListWitnessRequest_IndexKey_OriginKey) Reset()         { *m = ListWitnessRequest_IndexKey_OriginKey{} }
func (m *ListWitnessRequest_IndexKey_OriginKey) String() string { return proto.CompactTextString(m) }
func (*ListWitnessRequest_IndexKey_OriginKey) ProtoMessage()    {}
func (*ListWitnessRequest_IndexKey_OriginKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{20, 0, 1}
}
func (m *ListWitnessRequest_IndexKey_OriginKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWitnessRequest_IndexKey_OriginKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWitnessRequest_IndexKey_OriginKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWitnessRequest_IndexKey_OriginKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWitnessRequest_IndexKey_OriginKey.Merge(m, src)
}
func (m *ListWitnessRequest_IndexKey_OriginKey) XXX_Size() int {
	return m.Size()
}
func (m *ListWitnessRequest_IndexKey_OriginKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWitnessRequest_IndexKey_OriginKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListWitnessRequest_IndexKey_OriginKey proto.InternalMessageInfo

type isListWitnessRequest_IndexKey_OriginKey_XOrigin interface {
	isListWitnessRequest_IndexKey_OriginKey_XOrigin()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isListWitnessRequest_IndexKey_OriginKey_XKey interface {
	isListWitnessRequest_IndexKey_OriginKey_XKey()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListWitnessRequest_IndexKey_OriginKey_Origin struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
}
type ListWitnessRequest_IndexKey_OriginKey_Key struct {
	Key string `protobuf:"bytes,2,opt,name=key,proto3,oneof" json:"key,omitempty"`
}

func (*ListWitnessRequest_IndexKey_OriginKey_Origin) isListWitnessRequest_IndexKey_OriginKey_XOrigin() {
}
func (*ListWitnessRequest_IndexKey_OriginKey_Key) isListWitnessRequest_IndexKey_OriginKey_XKey() {}

func (m *ListWitnessRequest_IndexKey_OriginKey) GetXOrigin() isListWitnessRequest_IndexKey_OriginKey_XOrigin {
	if m != nil {
		return m.XOrigin
	}
	return nil
}
func (m *ListWitnessRequest_IndexKey_OriginKey) GetXKey() isListWitnessRequest_IndexKey_OriginKey_XKey {
	if m != nil {
		return m.XKey
	}
	return nil
}

func (m *ListWitnessRequest_IndexKey_OriginKey) GetOrigin() string {
	if x, ok := m.GetXOrigin().(*ListWitnessRequest_IndexKey_OriginKey_Origin); ok {
		return x.Origin
	}
	return ""
}

func (m *ListWitnessRequest_IndexKey_OriginKey) GetKey() string {
	if x, ok := m.GetXKey().(*ListWitnessRequest_IndexKey_OriginKey_Key); ok {
		return x.Key
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListWitnessRequest_IndexKey_OriginKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListWitnessRequest_IndexKey_OriginKey_Origin)(nil),
		(*ListWitnessRequest_IndexKey_OriginKey_Key)(nil),
	}
}

// RangeQuery specifies the from/to index keys for a range query.
type ListWitnessRequest_RangeQuery struct {
	// from is the index key to use for the start of the range query.
	// To query from the start of an index, specify an index key for that index with empty values.
	From *ListWitnessRequest_IndexKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the index key to use for the end of the range query.
	// The index key type MUST be the same as the index key type used for from.
	// To query from to the end of an index it can be omitted.
	To *ListWitnessRequest_IndexKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ListWitnessRequest_RangeQuery) Reset()         { *m = ListWitnessRequest_RangeQuery{} }
func (m *ListWitnessRequest_RangeQuery) String() string { return proto.CompactTextString(m) }
func (*ListWitnessRequest_RangeQuery) ProtoMessage()    {}
func (*ListWitnessRequest_RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{20, 1}
}
func (m *ListWitnessRequest_RangeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWitnessRequest_RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWitnessRequest_RangeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWitnessRequest_RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWitnessRequest_RangeQuery.Merge(m, src)
}
func (m *ListWitnessRequest_RangeQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListWitnessRequest_RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWitnessRequest_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListWitnessRequest_RangeQuery proto.InternalMessageInfo

func (m *ListWitnessRequest_RangeQuery) GetFrom() *ListWitnessRequest_IndexKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListWitnessRequest_RangeQuery) GetTo() *ListWitnessRequest_IndexKey {
	if m != nil {
		return m.To
	}
	return nil
}

// ListWitnessResponse is the StateQuery/ListWitnessResponse response type.
type ListWitnessResponse struct {
	// values are the results of the query.
	Values []*Witness `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// pagination is the pagination response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListWitnessResponse) Reset()         { *m = ListWitnessResponse{} }
func (m *ListWitnessResponse) String() string { return proto.CompactTextString(m) }
func (*ListWitnessResponse) ProtoMessage()    {}
func (*ListWitnessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{21}
}
func (m *ListWitnessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWitnessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWitnessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWitnessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWitnessResponse.Merge(m, src)
}
func (m *ListWitnessResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWitnessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWitnessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWitnessResponse proto.InternalMessageInfo

func (m *ListWitnessResponse) GetValues() []*Witness {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListWitnessResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetBaseParamsRequest is the StateQuery/GetBaseParamsRequest request type.
type GetBaseParamsRequest struct {
}

func (m *GetBaseParamsRequest) Reset()         { *m = GetBaseParamsRequest{} }
func (m *GetBaseParamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetBaseParamsRequest) ProtoMessage()    {}
func (*GetBaseParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{22}
}
func (m *GetBaseParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBaseParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBaseParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBaseParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBaseParamsRequest.Merge(m, src)
}
func (m *GetBaseParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBaseParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBaseParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBaseParamsRequest proto.InternalMessageInfo

// GetBaseParamsResponse is the StateQuery/GetBaseParamsResponse request type.
type GetBaseParamsResponse struct {
	Value *BaseParams `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetBaseParamsResponse) Reset()         { *m = GetBaseParamsResponse{} }
func (m *GetBaseParamsResponse) String() string { return proto.CompactTextString(m) }
func (*GetBaseParamsResponse) ProtoMessage()    {}
func (*GetBaseParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{23}
}
func (m *GetBaseParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBaseParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBaseParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBaseParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBaseParamsResponse.Merge(m, src)
}
func (m *GetBaseParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBaseParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBaseParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBaseParamsResponse proto.InternalMessageInfo

func (m *GetBaseParamsResponse) GetValue() *BaseParams {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetReadParamsRequest is the StateQuery/GetReadParamsRequest request type.
type GetReadParamsRequest struct {
}

func (m *GetReadParamsRequest) Reset()         { *m = GetReadParamsRequest{} }
func (m *GetReadParamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetReadParamsRequest) ProtoMessage()    {}
func (*GetReadParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{24}
}
func (m *GetReadParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReadParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReadParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReadParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReadParamsRequest.Merge(m, src)
}
func (m *GetReadParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReadParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReadParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReadParamsRequest proto.InternalMessageInfo

// GetReadParamsResponse is the StateQuery/GetReadParamsResponse request type.
type GetReadParamsResponse struct {
	Value *ReadParams `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetReadParamsResponse) Reset()         { *m = GetReadParamsResponse{} }
func (m *GetReadParamsResponse) String() string { return proto.CompactTextString(m) }
func (*GetReadParamsResponse) ProtoMessage()    {}
func (*GetReadParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{25}
}
func (m *GetReadParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReadParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReadParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReadParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReadParamsResponse.Merge(m, src)
}
func (m *GetReadParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReadParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReadParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReadParamsResponse proto.InternalMessageInfo

func (m *GetReadParamsResponse) GetValue() *ReadParams {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetWriteParamsRequest is the StateQuery/GetWriteParamsRequest request type.
type GetWriteParamsRequest struct {
}

func (m *GetWriteParamsRequest) Reset()         { *m = GetWriteParamsRequest{} }
func (m *GetWriteParamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetWriteParamsRequest) ProtoMessage()    {}
func (*GetWriteParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{26}
}
func (m *GetWriteParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWriteParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWriteParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWriteParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWriteParamsRequest.Merge(m, src)
}
func (m *GetWriteParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWriteParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWriteParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWriteParamsRequest proto.InternalMessageInfo

// GetWriteParamsResponse is the StateQuery/GetWriteParamsResponse request type.
type GetWriteParamsResponse struct {
	Value *WriteParams `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetWriteParamsResponse) Reset()         { *m = GetWriteParamsResponse{} }
func (m *GetWriteParamsResponse) String() string { return proto.CompactTextString(m) }
func (*GetWriteParamsResponse) ProtoMessage()    {}
func (*GetWriteParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{27}
}
func (m *GetWriteParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWriteParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWriteParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWriteParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWriteParamsResponse.Merge(m, src)
}
func (m *GetWriteParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWriteParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWriteParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWriteParamsResponse proto.InternalMessageInfo

func (m *GetWriteParamsResponse) GetValue() *WriteParams {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetOwnParamsRequest is the StateQuery/GetOwnParamsRequest request type.
type GetOwnParamsRequest struct {
}

func (m *GetOwnParamsRequest) Reset()         { *m = GetOwnParamsRequest{} }
func (m *GetOwnParamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetOwnParamsRequest) ProtoMessage()    {}
func (*GetOwnParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{28}
}
func (m *GetOwnParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOwnParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOwnParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOwnParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOwnParamsRequest.Merge(m, src)
}
func (m *GetOwnParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOwnParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOwnParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOwnParamsRequest proto.InternalMessageInfo

// GetOwnParamsResponse is the StateQuery/GetOwnParamsResponse request type.
type GetOwnParamsResponse struct {
	Value *OwnParams `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetOwnParamsResponse) Reset()         { *m = GetOwnParamsResponse{} }
func (m *GetOwnParamsResponse) String() string { return proto.CompactTextString(m) }
func (*GetOwnParamsResponse) ProtoMessage()    {}
func (*GetOwnParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b32688ee8baa33, []int{29}
}
func (m *GetOwnParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOwnParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOwnParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOwnParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOwnParamsResponse.Merge(m, src)
}
func (m *GetOwnParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOwnParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOwnParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOwnParamsResponse proto.InternalMessageInfo

func (m *GetOwnParamsResponse) GetValue() *OwnParams {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*GetServiceRecordRequest)(nil), "sonrhq.sonr.service.module.v1.GetServiceRecordRequest")
	proto.RegisterType((*GetServiceRecordResponse)(nil), "sonrhq.sonr.service.module.v1.GetServiceRecordResponse")
	proto.RegisterType((*GetServiceRecordByOriginRequest)(nil), "sonrhq.sonr.service.module.v1.GetServiceRecordByOriginRequest")
	proto.RegisterType((*GetServiceRecordByOriginResponse)(nil), "sonrhq.sonr.service.module.v1.GetServiceRecordByOriginResponse")
	proto.RegisterType((*ListServiceRecordRequest)(nil), "sonrhq.sonr.service.module.v1.ListServiceRecordRequest")
	proto.RegisterType((*ListServiceRecordRequest_IndexKey)(nil), "sonrhq.sonr.service.module.v1.ListServiceRecordRequest.IndexKey")
	proto.RegisterType((*ListServiceRecordRequest_IndexKey_Id)(nil), "sonrhq.sonr.service.module.v1.ListServiceRecordRequest.IndexKey.Id")
	proto.RegisterType((*ListServiceRecordRequest_IndexKey_Origin)(nil), "sonrhq.sonr.service.module.v1.ListServiceRecordRequest.IndexKey.Origin")
	proto.RegisterType((*ListServiceRecordRequest_IndexKey_Controller)(nil), "sonrhq.sonr.service.module.v1.ListServiceRecordRequest.IndexKey.Controller")
	proto.RegisterType((*ListServiceRecordRequest_RangeQuery)(nil), "sonrhq.sonr.service.module.v1.ListServiceRecordRequest.RangeQuery")
	proto.RegisterType((*ListServiceRecordResponse)(nil), "sonrhq.sonr.service.module.v1.ListServiceRecordResponse")
	proto.RegisterType((*GetCredentialRequest)(nil), "sonrhq.sonr.service.module.v1.GetCredentialRequest")
	proto.RegisterType((*GetCredentialResponse)(nil), "sonrhq.sonr.service.module.v1.GetCredentialResponse")
	proto.RegisterType((*GetCredentialByOriginHandleRequest)(nil), "sonrhq.sonr.service.module.v1.GetCredentialByOriginHandleRequest")
	proto.RegisterType((*GetCredentialByOriginHandleResponse)(nil), "sonrhq.sonr.service.module.v1.GetCredentialByOriginHandleResponse")
	proto.RegisterType((*GetCredentialByCredentialIdRequest)(nil), "sonrhq.sonr.service.module.v1.GetCredentialByCredentialIdRequest")
	proto.RegisterType((*GetCredentialByCredentialIdResponse)(nil), "sonrhq.sonr.service.module.v1.GetCredentialByCredentialIdResponse")
	proto.RegisterType((*GetCredentialByPublicKeyRequest)(nil), "sonrhq.sonr.service.module.v1.GetCredentialByPublicKeyRequest")
	proto.RegisterType((*GetCredentialByPublicKeyResponse)(nil), "sonrhq.sonr.service.module.v1.GetCredentialByPublicKeyResponse")
	proto.RegisterType((*ListCredentialRequest)(nil), "sonrhq.sonr.service.module.v1.ListCredentialRequest")
	proto.RegisterType((*ListCredentialRequest_IndexKey)(nil), "sonrhq.sonr.service.module.v1.ListCredentialRequest.IndexKey")
	proto.RegisterType((*ListCredentialRequest_IndexKey_Id)(nil), "sonrhq.sonr.service.module.v1.ListCredentialRequest.IndexKey.Id")
	proto.RegisterType((*ListCredentialRequest_IndexKey_Handle)(nil), "sonrhq.sonr.service.module.v1.ListCredentialRequest.IndexKey.Handle")
	proto.RegisterType((*ListCredentialRequest_IndexKey_OriginHandle)(nil), "sonrhq.sonr.service.module.v1.ListCredentialRequest.IndexKey.OriginHandle")
	proto.RegisterType((*ListCredentialRequest_IndexKey_CredentialId)(nil), "sonrhq.sonr.service.module.v1.ListCredentialRequest.IndexKey.CredentialId")
	proto.RegisterType((*ListCredentialRequest_IndexKey_PublicKey)(nil), "sonrhq.sonr.service.module.v1.ListCredentialRequest.IndexKey.PublicKey")
	proto.RegisterType((*ListCredentialRequest_RangeQuery)(nil), "sonrhq.sonr.service.module.v1.ListCredentialRequest.RangeQuery")
	proto.RegisterType((*ListCredentialResponse)(nil), "sonrhq.sonr.service.module.v1.ListCredentialResponse")
	proto.RegisterType((*GetWitnessRequest)(nil), "sonrhq.sonr.service.module.v1.GetWitnessRequest")
	proto.RegisterType((*GetWitnessResponse)(nil), "sonrhq.sonr.service.module.v1.GetWitnessResponse")
	proto.RegisterType((*GetWitnessByOriginKeyRequest)(nil), "sonrhq.sonr.service.module.v1.GetWitnessByOriginKeyRequest")
	proto.RegisterType((*GetWitnessByOriginKeyResponse)(nil), "sonrhq.sonr.service.module.v1.GetWitnessByOriginKeyResponse")
	proto.RegisterType((*ListWitnessRequest)(nil), "sonrhq.sonr.service.module.v1.ListWitnessRequest")
	proto.RegisterType((*ListWitnessRequest_IndexKey)(nil), "sonrhq.sonr.service.module.v1.ListWitnessRequest.IndexKey")
	proto.RegisterType((*ListWitnessRequest_IndexKey_Index)(nil), "sonrhq.sonr.service.module.v1.ListWitnessRequest.IndexKey.Index")
	proto.RegisterType((*ListWitnessRequest_IndexKey_OriginKey)(nil), "sonrhq.sonr.service.module.v1.ListWitnessRequest.IndexKey.OriginKey")
	proto.RegisterType((*ListWitnessRequest_RangeQuery)(nil), "sonrhq.sonr.service.module.v1.ListWitnessRequest.RangeQuery")
	proto.RegisterType((*ListWitnessResponse)(nil), "sonrhq.sonr.service.module.v1.ListWitnessResponse")
	proto.RegisterType((*GetBaseParamsRequest)(nil), "sonrhq.sonr.service.module.v1.GetBaseParamsRequest")
	proto.RegisterType((*GetBaseParamsResponse)(nil), "sonrhq.sonr.service.module.v1.GetBaseParamsResponse")
	proto.RegisterType((*GetReadParamsRequest)(nil), "sonrhq.sonr.service.module.v1.GetReadParamsRequest")
	proto.RegisterType((*GetReadParamsResponse)(nil), "sonrhq.sonr.service.module.v1.GetReadParamsResponse")
	proto.RegisterType((*GetWriteParamsRequest)(nil), "sonrhq.sonr.service.module.v1.GetWriteParamsRequest")
	proto.RegisterType((*GetWriteParamsResponse)(nil), "sonrhq.sonr.service.module.v1.GetWriteParamsResponse")
	proto.RegisterType((*GetOwnParamsRequest)(nil), "sonrhq.sonr.service.module.v1.GetOwnParamsRequest")
	proto.RegisterType((*GetOwnParamsResponse)(nil), "sonrhq.sonr.service.module.v1.GetOwnParamsResponse")
}

func init() {
	proto.RegisterFile("sonrhq/sonr/service/module/v1/state_query.proto", fileDescriptor_98b32688ee8baa33)
}

var fileDescriptor_98b32688ee8baa33 = []byte{
	// 1542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcf, 0x6f, 0xd4, 0x46,
	0x14, 0xb6, 0x37, 0xc9, 0x42, 0xde, 0x6e, 0x50, 0x18, 0x48, 0x58, 0x4c, 0x49, 0x23, 0x23, 0x51,
	0x82, 0x90, 0x97, 0x04, 0x5a, 0xfa, 0x83, 0x42, 0x58, 0x50, 0xb3, 0x81, 0xb6, 0x04, 0x43, 0x0b,
	0xaa, 0x54, 0x56, 0xce, 0xee, 0x24, 0x58, 0x6c, 0xd6, 0x89, 0xed, 0xa4, 0x44, 0xaa, 0xd4, 0x53,
	0x25, 0x8e, 0x3d, 0xf4, 0xda, 0x9e, 0xaa, 0xaa, 0xed, 0xa1, 0x97, 0xf6, 0xd2, 0x73, 0x2f, 0x3d,
	0x72, 0x68, 0xa5, 0x1e, 0x2b, 0xf2, 0x8f, 0x54, 0x9e, 0x19, 0xdb, 0x33, 0xb6, 0x77, 0x6d, 0xaf,
	0x97, 0x53, 0x76, 0xcc, 0xbc, 0xef, 0x7b, 0xf3, 0xfc, 0x7e, 0x7c, 0x1e, 0xa0, 0xee, 0x58, 0x3d,
	0xfb, 0xc9, 0x0e, 0xf9, 0x53, 0x77, 0xb0, 0xbd, 0x67, 0xb6, 0x71, 0x7d, 0xcb, 0xea, 0xec, 0x76,
	0x71, 0x7d, 0x6f, 0xb1, 0xee, 0xb8, 0x86, 0x8b, 0x5b, 0x3b, 0xbb, 0xd8, 0xde, 0xd7, 0xb6, 0x6d,
	0xcb, 0xb5, 0xd0, 0x69, 0x6a, 0xa0, 0x79, 0x7f, 0x34, 0x66, 0xa0, 0x51, 0x03, 0x6d, 0x6f, 0x51,
	0x39, 0xdf, 0xb6, 0x9c, 0x2d, 0xcb, 0xa9, 0xaf, 0x1b, 0x0e, 0xae, 0x13, 0xbb, 0xfa, 0xde, 0xe2,
	0x3a, 0x76, 0x8d, 0xc5, 0xfa, 0xb6, 0xb1, 0x69, 0xf6, 0x0c, 0xd7, 0xb4, 0x7a, 0x14, 0x4a, 0x59,
	0xc8, 0xc0, 0x4d, 0xb7, 0xaa, 0x0b, 0x70, 0x62, 0x05, 0xbb, 0xf7, 0xe9, 0x1e, 0x1d, 0xb7, 0x2d,
	0xbb, 0xa3, 0xe3, 0x9d, 0x5d, 0xec, 0xb8, 0xe8, 0x08, 0x94, 0xcc, 0x4e, 0x4d, 0x9e, 0x97, 0xcf,
	0x8d, 0xeb, 0x25, 0xb3, 0xa3, 0x3e, 0x86, 0x5a, 0x7c, 0xab, 0xb3, 0x6d, 0xf5, 0x1c, 0x8c, 0x1a,
	0x30, 0xb1, 0x67, 0x74, 0x77, 0x31, 0xd9, 0x5e, 0x59, 0xba, 0xa0, 0x0d, 0x3c, 0x8c, 0x26, 0x82,
	0x50, 0x53, 0xf5, 0x1d, 0x78, 0x3d, 0x8a, 0xdf, 0xd8, 0xbf, 0x6b, 0x9b, 0x9b, 0x66, 0xcf, 0x77,
	0x69, 0x16, 0xca, 0x16, 0x79, 0x40, 0x78, 0x26, 0x75, 0xb6, 0x52, 0x37, 0x60, 0xbe, 0xbf, 0xe9,
	0x08, 0x5d, 0xfc, 0xf3, 0x10, 0xd4, 0x3e, 0x34, 0x9d, 0xe4, 0x78, 0x61, 0xa8, 0x6e, 0xdb, 0x78,
	0xc3, 0x7c, 0x46, 0x5f, 0x2b, 0xe3, 0x59, 0x4e, 0xe1, 0xe9, 0x07, 0xa7, 0xad, 0xf6, 0x3a, 0xf8,
	0xd9, 0x1d, 0xbc, 0xdf, 0x94, 0xf4, 0x0a, 0xc5, 0xbd, 0xe7, 0xc1, 0x22, 0x0c, 0x15, 0xdb, 0xe8,
	0x6d, 0xb2, 0xe4, 0xa9, 0x95, 0x08, 0x4b, 0x63, 0x58, 0x16, 0xdd, 0x83, 0x22, 0xc0, 0x4d, 0x49,
	0x07, 0x3b, 0x58, 0xa1, 0x0f, 0x00, 0xc2, 0xbc, 0xaa, 0x8d, 0x11, 0x96, 0xb3, 0x1a, 0x4d, 0x42,
	0xcd, 0x4b, 0x42, 0x8d, 0x26, 0x2f, 0x4b, 0x42, 0x6d, 0xcd, 0xd8, 0xc4, 0x0c, 0x54, 0xe7, 0x2c,
	0x95, 0x17, 0x63, 0x70, 0xd8, 0x3f, 0x0a, 0xfa, 0x24, 0x48, 0xa9, 0xca, 0xd2, 0xcd, 0xa2, 0x81,
	0xd1, 0x56, 0x3b, 0x4d, 0xc9, 0xcb, 0x4c, 0x64, 0x04, 0x69, 0x41, 0xa3, 0xb1, 0x52, 0x18, 0x9a,
	0xe6, 0x4e, 0x53, 0xf2, 0x33, 0x0c, 0x6d, 0x01, 0xb4, 0xad, 0x9e, 0x6b, 0x5b, 0xdd, 0x2e, 0xb6,
	0x59, 0x38, 0xee, 0x14, 0xa6, 0xb9, 0x19, 0x40, 0x7a, 0xd1, 0x0f, 0x09, 0x94, 0x79, 0x28, 0xad,
	0x76, 0xd0, 0xb1, 0xb0, 0x02, 0xe9, 0x49, 0x9f, 0xcb, 0x72, 0x63, 0x02, 0xc6, 0x5a, 0x66, 0x47,
	0xb9, 0x08, 0x65, 0xea, 0x24, 0x3a, 0x25, 0x16, 0x45, 0xe8, 0xb4, 0xb7, 0x7b, 0x12, 0x0e, 0xb5,
	0xe8, 0x4a, 0x59, 0x06, 0x08, 0xf9, 0xd0, 0x19, 0xe1, 0x40, 0xbe, 0x25, 0xf7, 0xcc, 0xb3, 0x9e,
	0x82, 0x4a, 0x2b, 0x7c, 0xe2, 0x51, 0x3f, 0xc5, 0xfb, 0xca, 0xef, 0x32, 0x40, 0x98, 0x37, 0xe8,
	0x01, 0x8c, 0x6f, 0xd8, 0xd6, 0xd6, 0xa8, 0xf2, 0x5d, 0x27, 0x68, 0x68, 0x0d, 0x4a, 0xae, 0xc5,
	0xde, 0x67, 0x71, 0xcc, 0x92, 0x6b, 0x35, 0x0e, 0xc1, 0x04, 0x49, 0x59, 0xf5, 0x17, 0x19, 0x4e,
	0x26, 0x98, 0xb0, 0x3e, 0x71, 0x0b, 0xca, 0xa4, 0xd8, 0x9d, 0x9a, 0x3c, 0x3f, 0x96, 0xbb, 0x51,
	0x30, 0x5b, 0xb4, 0x22, 0x94, 0x0f, 0x3d, 0xc6, 0x1b, 0xa9, 0xe5, 0x43, 0x5d, 0xe0, 0xeb, 0x47,
	0x3d, 0x0b, 0xc7, 0x57, 0xb0, 0x7b, 0xd3, 0xc6, 0x1d, 0xdc, 0x73, 0x4d, 0xa3, 0xdb, 0xaf, 0x3b,
	0x3f, 0x82, 0x99, 0xc8, 0x3e, 0x76, 0x9e, 0xeb, 0x62, 0xdf, 0x5b, 0x48, 0x39, 0x0e, 0x87, 0xc0,
	0x9a, 0xde, 0x03, 0x50, 0x05, 0x64, 0xbf, 0xb3, 0x36, 0x8d, 0x5e, 0xa7, 0x8b, 0x53, 0x5a, 0xb3,
	0xf7, 0xfc, 0x09, 0xd9, 0x48, 0x82, 0x30, 0xa9, 0xb3, 0x95, 0xba, 0x01, 0x67, 0x06, 0xa2, 0x8e,
	0xca, 0xfb, 0xd5, 0x98, 0xf7, 0xe1, 0xef, 0xd5, 0xa0, 0x77, 0x9f, 0x81, 0xa9, 0x76, 0xf0, 0xb8,
	0xc5, 0x02, 0x5b, 0xd5, 0xab, 0x6d, 0x6e, 0x6f, 0x82, 0xcb, 0x22, 0xd4, 0xa8, 0x5c, 0x5e, 0x26,
	0x83, 0x90, 0xe7, 0x59, 0xdb, 0x5d, 0xef, 0x9a, 0x6d, 0x2f, 0x91, 0x99, 0xbf, 0xa7, 0x01, 0xb6,
	0xc9, 0xb3, 0xd6, 0x53, 0xbc, 0xcf, 0x9c, 0x9d, 0xdc, 0xf6, 0x77, 0xa9, 0x6d, 0x32, 0x0f, 0xfb,
	0x20, 0x8c, 0xca, 0xcd, 0x3f, 0x00, 0x66, 0xbc, 0x32, 0x8a, 0xe7, 0xe6, 0x7a, 0xe2, 0x24, 0x7c,
	0x3f, 0x43, 0x15, 0xc7, 0xb0, 0xfa, 0x8e, 0xc1, 0xf5, 0xa4, 0x31, 0x78, 0x7d, 0x28, 0x8a, 0x57,
	0x3e, 0x03, 0xff, 0x29, 0x73, 0x33, 0x50, 0xe7, 0x66, 0xe0, 0x72, 0xa1, 0x90, 0x84, 0x03, 0xf0,
	0xb1, 0x50, 0x64, 0x95, 0xa5, 0x5b, 0xc5, 0x70, 0x69, 0x0d, 0x7a, 0x83, 0x84, 0xa2, 0xa2, 0x1d,
	0x98, 0xa2, 0xe5, 0xdc, 0x62, 0x34, 0x34, 0x16, 0xb7, 0x8b, 0xd1, 0xf0, 0x05, 0xdf, 0x94, 0xf4,
	0xaa, 0xc5, 0xad, 0x3d, 0x4a, 0xb1, 0x22, 0xc7, 0x47, 0x41, 0xc9, 0x17, 0xac, 0x47, 0xc9, 0xd7,
	0x37, 0x7a, 0x22, 0x14, 0xd5, 0x44, 0x66, 0x29, 0x31, 0x80, 0x2f, 0x28, 0xbb, 0xa6, 0xc4, 0xd5,
	0x67, 0xb6, 0xf1, 0xce, 0x02, 0x71, 0x2a, 0x78, 0xb7, 0xc1, 0x78, 0xa7, 0x6b, 0x7f, 0xbc, 0xd3,
	0x95, 0xf2, 0x18, 0xaa, 0x7c, 0x40, 0x07, 0xca, 0x02, 0x0e, 0x94, 0x74, 0xe5, 0xa6, 0x1c, 0x05,
	0xa5, 0x5b, 0x79, 0xfc, 0xdb, 0x50, 0xe5, 0xa3, 0x87, 0xce, 0x25, 0xb6, 0xcc, 0x68, 0x50, 0x3d,
	0xbc, 0x69, 0x38, 0xd2, 0x12, 0xb6, 0x2a, 0xd7, 0x60, 0x32, 0x88, 0x0c, 0x52, 0xe3, 0xbd, 0x4c,
	0x88, 0x96, 0x2f, 0x44, 0xc2, 0x4d, 0xbe, 0x10, 0xf9, 0x55, 0x14, 0x22, 0xf7, 0x04, 0x21, 0x52,
	0xac, 0xdd, 0x30, 0x15, 0xf2, 0x11, 0xa7, 0x42, 0x0a, 0x02, 0x0a, 0x12, 0xe4, 0x07, 0x19, 0x66,
	0xa3, 0xfb, 0x59, 0x5f, 0xbe, 0x11, 0xd1, 0x1f, 0x39, 0x1a, 0xf3, 0xc8, 0xc5, 0xc7, 0x02, 0x1c,
	0x5d, 0xc1, 0xee, 0x43, 0xd3, 0xed, 0x61, 0xc7, 0xf1, 0xbb, 0xfb, 0x71, 0x98, 0x30, 0xbd, 0x43,
	0x31, 0xf1, 0x41, 0x17, 0xaa, 0x0e, 0x88, 0xdf, 0xca, 0x0e, 0x73, 0x55, 0x1c, 0x32, 0x67, 0x53,
	0xce, 0xe2, 0x9b, 0xb3, 0x09, 0xd3, 0x84, 0xd7, 0x42, 0x4c, 0x5f, 0x20, 0x70, 0x53, 0xb0, 0x9f,
	0xe6, 0x98, 0x26, 0xe9, 0xc1, 0x04, 0x87, 0xf7, 0x53, 0xfd, 0x1c, 0x4e, 0xf7, 0x41, 0x1a, 0x89,
	0xa3, 0x3f, 0x97, 0x01, 0x79, 0xaf, 0x33, 0x12, 0xa9, 0x56, 0xe2, 0x1c, 0x7c, 0x37, 0x43, 0x1e,
	0x89, 0x40, 0x7d, 0x87, 0x60, 0x2b, 0x69, 0x08, 0x5e, 0xcd, 0x8f, 0xff, 0xca, 0x27, 0xe0, 0xdf,
	0x25, 0x6e, 0x02, 0x3e, 0xe2, 0x13, 0x28, 0xdb, 0x10, 0xec, 0x13, 0x0f, 0xfa, 0xa3, 0x29, 0xb1,
	0x24, 0x44, 0x18, 0x80, 0xcd, 0x29, 0xff, 0xfd, 0x67, 0x9b, 0x85, 0xfd, 0xe0, 0x83, 0x3c, 0xf1,
	0x1a, 0x92, 0xe5, 0x2f, 0x94, 0x0b, 0x30, 0x41, 0xb6, 0xa0, 0x93, 0x42, 0x29, 0x04, 0x7e, 0x78,
	0x1d, 0xeb, 0x30, 0x94, 0x5b, 0x64, 0xa1, 0xe8, 0x30, 0x19, 0xe0, 0x0c, 0xee, 0xca, 0x33, 0x5c,
	0xde, 0x36, 0x65, 0x92, 0xb9, 0x91, 0x7e, 0x5c, 0x86, 0x71, 0xbe, 0x01, 0xfe, 0x24, 0x36, 0xc0,
	0x8f, 0x85, 0x06, 0x58, 0x20, 0xcf, 0x58, 0xf7, 0xbb, 0xcd, 0x75, 0xbf, 0x22, 0x68, 0x42, 0xeb,
	0xfb, 0x5e, 0x86, 0x63, 0xc2, 0x66, 0x56, 0x81, 0xd7, 0x22, 0x7d, 0x2f, 0x6b, 0x09, 0x8e, 0xbc,
	0xe9, 0xcd, 0x92, 0x2f, 0xae, 0x86, 0xe1, 0xe0, 0x35, 0xc3, 0x36, 0xb6, 0xfc, 0xe3, 0xb0, 0x2f,
	0x2c, 0xfe, 0xf9, 0x70, 0x4a, 0x9a, 0x43, 0x60, 0xed, 0x83, 0x32, 0xea, 0xd8, 0xe8, 0x24, 0x31,
	0xf2, 0xcf, 0x87, 0x63, 0xe4, 0x10, 0x18, 0xe3, 0x09, 0x82, 0xfc, 0xd0, 0x36, 0xdd, 0xc8, 0x21,
	0x3f, 0x83, 0xd9, 0xe8, 0x3f, 0x30, 0xce, 0x65, 0x91, 0xf3, 0x7c, 0xda, 0xeb, 0xe1, 0x20, 0x18,
	0xe9, 0x0c, 0x1c, 0x5b, 0xc1, 0xee, 0xdd, 0x2f, 0x7a, 0x22, 0xe5, 0xa7, 0xe4, 0xf4, 0xdc, 0xe3,
	0x20, 0x21, 0x04, 0xc2, 0x73, 0x29, 0x84, 0x21, 0x00, 0x35, 0x5b, 0xfa, 0x6d, 0x1a, 0x8e, 0xde,
	0x77, 0x0d, 0x97, 0x16, 0x07, 0xfb, 0x4c, 0x47, 0x5f, 0xcb, 0x30, 0x1d, 0xbd, 0x2b, 0x44, 0x6f,
	0xa5, 0x60, 0xf7, 0xb9, 0x22, 0x55, 0xae, 0xe4, 0xb6, 0xa3, 0x67, 0x53, 0x25, 0xf4, 0x9d, 0x1c,
	0xbf, 0x4e, 0xf5, 0x07, 0x13, 0xba, 0x96, 0x13, 0x37, 0x72, 0x4f, 0xaa, 0x5c, 0x1f, 0xda, 0x3e,
	0xf0, 0xef, 0xb9, 0x0c, 0x47, 0x63, 0x97, 0x24, 0xe8, 0xca, 0x90, 0x37, 0x31, 0xca, 0xdb, 0xf9,
	0x0d, 0x03, 0x57, 0xbe, 0x84, 0x29, 0xe1, 0x6b, 0x16, 0x5d, 0x4a, 0x3f, 0x5e, 0x4c, 0x88, 0x29,
	0x97, 0xf3, 0x19, 0x05, 0xec, 0x3f, 0xca, 0x70, 0x6a, 0xc0, 0x4d, 0x05, 0xba, 0x91, 0x07, 0x37,
	0xf1, 0xee, 0x44, 0x69, 0x14, 0x81, 0x18, 0xe4, 0xa8, 0x20, 0xd8, 0x73, 0x3a, 0x9a, 0x70, 0x4d,
	0x92, 0xd7, 0xd1, 0xa4, 0xeb, 0x91, 0x30, 0xf5, 0x13, 0xaf, 0x27, 0xb2, 0xa4, 0xfe, 0xa0, 0x9b,
	0x91, 0x2c, 0xa9, 0x3f, 0xf0, 0x5e, 0x44, 0x95, 0xd0, 0x57, 0x70, 0x44, 0xd4, 0xe6, 0xe8, 0xf2,
	0x30, 0xd2, 0x5f, 0x79, 0x33, 0xa7, 0x55, 0xe0, 0x80, 0x03, 0x10, 0xaa, 0x55, 0x74, 0x31, 0xfd,
	0x44, 0xe2, 0xe0, 0x55, 0x16, 0x73, 0x58, 0x04, 0xa4, 0xdf, 0xca, 0x74, 0x26, 0xc4, 0x34, 0x32,
	0x7a, 0x2f, 0x33, 0x5c, 0x5c, 0xa3, 0x2b, 0x57, 0x87, 0x33, 0x0e, 0xdc, 0xda, 0x83, 0x0a, 0xa7,
	0x16, 0xd0, 0x62, 0x6e, 0x19, 0xa2, 0x2c, 0xe5, 0x31, 0x89, 0x34, 0x9d, 0x70, 0x56, 0x67, 0x69,
	0x3a, 0x31, 0xcd, 0x90, 0xa5, 0xe9, 0xc4, 0x05, 0x45, 0xc0, 0x1e, 0xce, 0xed, 0x2c, 0xec, 0x31,
	0xfd, 0x90, 0x85, 0x3d, 0x2e, 0x2e, 0x68, 0x01, 0x88, 0x22, 0x00, 0x65, 0x40, 0x8a, 0x8b, 0x89,
	0xd4, 0x02, 0x48, 0x56, 0x1a, 0xaa, 0x84, 0xf6, 0xa1, 0xca, 0x4b, 0x02, 0xb4, 0x94, 0x0e, 0x14,
	0x95, 0x15, 0xca, 0xa5, 0x5c, 0x36, 0x3e, 0x75, 0xa3, 0xf6, 0xd7, 0xcb, 0x39, 0xf9, 0xc5, 0xcb,
	0x39, 0xf9, 0xbf, 0x97, 0x73, 0xf2, 0x37, 0x07, 0x73, 0xd2, 0x8b, 0x83, 0x39, 0xe9, 0xdf, 0x83,
	0x39, 0x69, 0xbd, 0x4c, 0xfe, 0xc7, 0xf4, 0xd2, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x58, 0xbe,
	0xff, 0x8d, 0xda, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StateQueryServiceClient is the client API for StateQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateQueryServiceClient interface {
	// Get queries the ServiceRecord table by its primary key.
	GetServiceRecord(ctx context.Context, in *GetServiceRecordRequest, opts ...grpc.CallOption) (*GetServiceRecordResponse, error)
	// GetServiceRecordByOrigin queries the ServiceRecord table by its Origin index
	GetServiceRecordByOrigin(ctx context.Context, in *GetServiceRecordByOriginRequest, opts ...grpc.CallOption) (*GetServiceRecordByOriginResponse, error)
	// ListServiceRecord queries the ServiceRecord table using prefix and range queries against defined indexes.
	ListServiceRecord(ctx context.Context, in *ListServiceRecordRequest, opts ...grpc.CallOption) (*ListServiceRecordResponse, error)
	// Get queries the Credential table by its primary key.
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	// GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
	GetCredentialByOriginHandle(ctx context.Context, in *GetCredentialByOriginHandleRequest, opts ...grpc.CallOption) (*GetCredentialByOriginHandleResponse, error)
	// GetCredentialByCredentialId queries the Credential table by its CredentialId index
	GetCredentialByCredentialId(ctx context.Context, in *GetCredentialByCredentialIdRequest, opts ...grpc.CallOption) (*GetCredentialByCredentialIdResponse, error)
	// GetCredentialByPublicKey queries the Credential table by its PublicKey index
	GetCredentialByPublicKey(ctx context.Context, in *GetCredentialByPublicKeyRequest, opts ...grpc.CallOption) (*GetCredentialByPublicKeyResponse, error)
	// ListCredential queries the Credential table using prefix and range queries against defined indexes.
	ListCredential(ctx context.Context, in *ListCredentialRequest, opts ...grpc.CallOption) (*ListCredentialResponse, error)
	// Get queries the Witness table by its primary key.
	GetWitness(ctx context.Context, in *GetWitnessRequest, opts ...grpc.CallOption) (*GetWitnessResponse, error)
	// GetWitnessByOriginKey queries the Witness table by its OriginKey index
	GetWitnessByOriginKey(ctx context.Context, in *GetWitnessByOriginKeyRequest, opts ...grpc.CallOption) (*GetWitnessByOriginKeyResponse, error)
	// ListWitness queries the Witness table using prefix and range queries against defined indexes.
	ListWitness(ctx context.Context, in *ListWitnessRequest, opts ...grpc.CallOption) (*ListWitnessResponse, error)
	// GetBaseParams queries the BaseParams singleton.
	GetBaseParams(ctx context.Context, in *GetBaseParamsRequest, opts ...grpc.CallOption) (*GetBaseParamsResponse, error)
	// GetReadParams queries the ReadParams singleton.
	GetReadParams(ctx context.Context, in *GetReadParamsRequest, opts ...grpc.CallOption) (*GetReadParamsResponse, error)
	// GetWriteParams queries the WriteParams singleton.
	GetWriteParams(ctx context.Context, in *GetWriteParamsRequest, opts ...grpc.CallOption) (*GetWriteParamsResponse, error)
	// GetOwnParams queries the OwnParams singleton.
	GetOwnParams(ctx context.Context, in *GetOwnParamsRequest, opts ...grpc.CallOption) (*GetOwnParamsResponse, error)
}

type stateQueryServiceClient struct {
	cc grpc1.ClientConn
}

func NewStateQueryServiceClient(cc grpc1.ClientConn) StateQueryServiceClient {
	return &stateQueryServiceClient{cc}
}

func (c *stateQueryServiceClient) GetServiceRecord(ctx context.Context, in *GetServiceRecordRequest, opts ...grpc.CallOption) (*GetServiceRecordResponse, error) {
	out := new(GetServiceRecordResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetServiceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetServiceRecordByOrigin(ctx context.Context, in *GetServiceRecordByOriginRequest, opts ...grpc.CallOption) (*GetServiceRecordByOriginResponse, error) {
	out := new(GetServiceRecordByOriginResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetServiceRecordByOrigin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListServiceRecord(ctx context.Context, in *ListServiceRecordRequest, opts ...grpc.CallOption) (*ListServiceRecordResponse, error) {
	out := new(ListServiceRecordResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/ListServiceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialByOriginHandle(ctx context.Context, in *GetCredentialByOriginHandleRequest, opts ...grpc.CallOption) (*GetCredentialByOriginHandleResponse, error) {
	out := new(GetCredentialByOriginHandleResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredentialByOriginHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialByCredentialId(ctx context.Context, in *GetCredentialByCredentialIdRequest, opts ...grpc.CallOption) (*GetCredentialByCredentialIdResponse, error) {
	out := new(GetCredentialByCredentialIdResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredentialByCredentialId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialByPublicKey(ctx context.Context, in *GetCredentialByPublicKeyRequest, opts ...grpc.CallOption) (*GetCredentialByPublicKeyResponse, error) {
	out := new(GetCredentialByPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredentialByPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListCredential(ctx context.Context, in *ListCredentialRequest, opts ...grpc.CallOption) (*ListCredentialResponse, error) {
	out := new(ListCredentialResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/ListCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetWitness(ctx context.Context, in *GetWitnessRequest, opts ...grpc.CallOption) (*GetWitnessResponse, error) {
	out := new(GetWitnessResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetWitness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetWitnessByOriginKey(ctx context.Context, in *GetWitnessByOriginKeyRequest, opts ...grpc.CallOption) (*GetWitnessByOriginKeyResponse, error) {
	out := new(GetWitnessByOriginKeyResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetWitnessByOriginKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListWitness(ctx context.Context, in *ListWitnessRequest, opts ...grpc.CallOption) (*ListWitnessResponse, error) {
	out := new(ListWitnessResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/ListWitness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetBaseParams(ctx context.Context, in *GetBaseParamsRequest, opts ...grpc.CallOption) (*GetBaseParamsResponse, error) {
	out := new(GetBaseParamsResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetBaseParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetReadParams(ctx context.Context, in *GetReadParamsRequest, opts ...grpc.CallOption) (*GetReadParamsResponse, error) {
	out := new(GetReadParamsResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetReadParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetWriteParams(ctx context.Context, in *GetWriteParamsRequest, opts ...grpc.CallOption) (*GetWriteParamsResponse, error) {
	out := new(GetWriteParamsResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetWriteParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetOwnParams(ctx context.Context, in *GetOwnParamsRequest, opts ...grpc.CallOption) (*GetOwnParamsResponse, error) {
	out := new(GetOwnParamsResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.service.module.v1.StateQueryService/GetOwnParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateQueryServiceServer is the server API for StateQueryService service.
type StateQueryServiceServer interface {
	// Get queries the ServiceRecord table by its primary key.
	GetServiceRecord(context.Context, *GetServiceRecordRequest) (*GetServiceRecordResponse, error)
	// GetServiceRecordByOrigin queries the ServiceRecord table by its Origin index
	GetServiceRecordByOrigin(context.Context, *GetServiceRecordByOriginRequest) (*GetServiceRecordByOriginResponse, error)
	// ListServiceRecord queries the ServiceRecord table using prefix and range queries against defined indexes.
	ListServiceRecord(context.Context, *ListServiceRecordRequest) (*ListServiceRecordResponse, error)
	// Get queries the Credential table by its primary key.
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	// GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
	GetCredentialByOriginHandle(context.Context, *GetCredentialByOriginHandleRequest) (*GetCredentialByOriginHandleResponse, error)
	// GetCredentialByCredentialId queries the Credential table by its CredentialId index
	GetCredentialByCredentialId(context.Context, *GetCredentialByCredentialIdRequest) (*GetCredentialByCredentialIdResponse, error)
	// GetCredentialByPublicKey queries the Credential table by its PublicKey index
	GetCredentialByPublicKey(context.Context, *GetCredentialByPublicKeyRequest) (*GetCredentialByPublicKeyResponse, error)
	// ListCredential queries the Credential table using prefix and range queries against defined indexes.
	ListCredential(context.Context, *ListCredentialRequest) (*ListCredentialResponse, error)
	// Get queries the Witness table by its primary key.
	GetWitness(context.Context, *GetWitnessRequest) (*GetWitnessResponse, error)
	// GetWitnessByOriginKey queries the Witness table by its OriginKey index
	GetWitnessByOriginKey(context.Context, *GetWitnessByOriginKeyRequest) (*GetWitnessByOriginKeyResponse, error)
	// ListWitness queries the Witness table using prefix and range queries against defined indexes.
	ListWitness(context.Context, *ListWitnessRequest) (*ListWitnessResponse, error)
	// GetBaseParams queries the BaseParams singleton.
	GetBaseParams(context.Context, *GetBaseParamsRequest) (*GetBaseParamsResponse, error)
	// GetReadParams queries the ReadParams singleton.
	GetReadParams(context.Context, *GetReadParamsRequest) (*GetReadParamsResponse, error)
	// GetWriteParams queries the WriteParams singleton.
	GetWriteParams(context.Context, *GetWriteParamsRequest) (*GetWriteParamsResponse, error)
	// GetOwnParams queries the OwnParams singleton.
	GetOwnParams(context.Context, *GetOwnParamsRequest) (*GetOwnParamsResponse, error)
}

// UnimplementedStateQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStateQueryServiceServer struct {
}

func (*UnimplementedStateQueryServiceServer) GetServiceRecord(ctx context.Context, req *GetServiceRecordRequest) (*GetServiceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecord not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetServiceRecordByOrigin(ctx context.Context, req *GetServiceRecordByOriginRequest) (*GetServiceRecordByOriginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecordByOrigin not implemented")
}
func (*UnimplementedStateQueryServiceServer) ListServiceRecord(ctx context.Context, req *ListServiceRecordRequest) (*ListServiceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceRecord not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetCredential(ctx context.Context, req *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetCredentialByOriginHandle(ctx context.Context, req *GetCredentialByOriginHandleRequest) (*GetCredentialByOriginHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByOriginHandle not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetCredentialByCredentialId(ctx context.Context, req *GetCredentialByCredentialIdRequest) (*GetCredentialByCredentialIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByCredentialId not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetCredentialByPublicKey(ctx context.Context, req *GetCredentialByPublicKeyRequest) (*GetCredentialByPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByPublicKey not implemented")
}
func (*UnimplementedStateQueryServiceServer) ListCredential(ctx context.Context, req *ListCredentialRequest) (*ListCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredential not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetWitness(ctx context.Context, req *GetWitnessRequest) (*GetWitnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWitness not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetWitnessByOriginKey(ctx context.Context, req *GetWitnessByOriginKeyRequest) (*GetWitnessByOriginKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWitnessByOriginKey not implemented")
}
func (*UnimplementedStateQueryServiceServer) ListWitness(ctx context.Context, req *ListWitnessRequest) (*ListWitnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWitness not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetBaseParams(ctx context.Context, req *GetBaseParamsRequest) (*GetBaseParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseParams not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetReadParams(ctx context.Context, req *GetReadParamsRequest) (*GetReadParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadParams not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetWriteParams(ctx context.Context, req *GetWriteParamsRequest) (*GetWriteParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteParams not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetOwnParams(ctx context.Context, req *GetOwnParamsRequest) (*GetOwnParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnParams not implemented")
}

func RegisterStateQueryServiceServer(s grpc1.Server, srv StateQueryServiceServer) {
	s.RegisterService(&_StateQueryService_serviceDesc, srv)
}

func _StateQueryService_GetServiceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetServiceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceRecord(ctx, req.(*GetServiceRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetServiceRecordByOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordByOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceRecordByOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetServiceRecordByOrigin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceRecordByOrigin(ctx, req.(*GetServiceRecordByOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListServiceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListServiceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/ListServiceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListServiceRecord(ctx, req.(*ListServiceRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialByOriginHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByOriginHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialByOriginHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredentialByOriginHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialByOriginHandle(ctx, req.(*GetCredentialByOriginHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialByCredentialId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByCredentialIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialByCredentialId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredentialByCredentialId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialByCredentialId(ctx, req.(*GetCredentialByCredentialIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialByPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialByPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredentialByPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialByPublicKey(ctx, req.(*GetCredentialByPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/ListCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListCredential(ctx, req.(*ListCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWitnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetWitness(ctx, req.(*GetWitnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetWitnessByOriginKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWitnessByOriginKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetWitnessByOriginKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetWitnessByOriginKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetWitnessByOriginKey(ctx, req.(*GetWitnessByOriginKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWitnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/ListWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListWitness(ctx, req.(*ListWitnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetBaseParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetBaseParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetBaseParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetBaseParams(ctx, req.(*GetBaseParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetReadParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetReadParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetReadParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetReadParams(ctx, req.(*GetReadParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetWriteParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetWriteParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetWriteParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetWriteParams(ctx, req.(*GetWriteParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetOwnParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetOwnParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.service.module.v1.StateQueryService/GetOwnParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetOwnParams(ctx, req.(*GetOwnParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StateQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.sonr.service.module.v1.StateQueryService",
	HandlerType: (*StateQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceRecord",
			Handler:    _StateQueryService_GetServiceRecord_Handler,
		},
		{
			MethodName: "GetServiceRecordByOrigin",
			Handler:    _StateQueryService_GetServiceRecordByOrigin_Handler,
		},
		{
			MethodName: "ListServiceRecord",
			Handler:    _StateQueryService_ListServiceRecord_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _StateQueryService_GetCredential_Handler,
		},
		{
			MethodName: "GetCredentialByOriginHandle",
			Handler:    _StateQueryService_GetCredentialByOriginHandle_Handler,
		},
		{
			MethodName: "GetCredentialByCredentialId",
			Handler:    _StateQueryService_GetCredentialByCredentialId_Handler,
		},
		{
			MethodName: "GetCredentialByPublicKey",
			Handler:    _StateQueryService_GetCredentialByPublicKey_Handler,
		},
		{
			MethodName: "ListCredential",
			Handler:    _StateQueryService_ListCredential_Handler,
		},
		{
			MethodName: "GetWitness",
			Handler:    _StateQueryService_GetWitness_Handler,
		},
		{
			MethodName: "GetWitnessByOriginKey",
			Handler:    _StateQueryService_GetWitnessByOriginKey_Handler,
		},
		{
			MethodName: "ListWitness",
			Handler:    _StateQueryService_ListWitness_Handler,
		},
		{
			MethodName: "GetBaseParams",
			Handler:    _StateQueryService_GetBaseParams_Handler,
		},
		{
			MethodName: "GetReadParams",
			Handler:    _StateQueryService_GetReadParams_Handler,
		},
		{
			MethodName: "GetWriteParams",
			Handler:    _StateQueryService_GetWriteParams_Handler,
		},
		{
			MethodName: "GetOwnParams",
			Handler:    _StateQueryService_GetOwnParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonrhq/sonr/service/module/v1/state_query.proto",
}

func (m *GetServiceRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintStateQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetServiceRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetServiceRecordByOriginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceRecordByOriginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceRecordByOriginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetServiceRecordByOriginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceRecordByOriginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceRecordByOriginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRecordRequest_PrefixQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_PrefixQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixQuery != nil {
		{
			size, err := m.PrefixQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListServiceRecordRequest_RangeQuery_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_RangeQuery_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeQuery != nil {
		{
			size, err := m.RangeQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListServiceRecordRequest_IndexKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRecordRequest_IndexKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_IndexKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size := m.Key.Size()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRecordRequest_IndexKey_Id_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_IndexKey_Id_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListServiceRecordRequest_IndexKey_Origin_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_IndexKey_Origin_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListServiceRecordRequest_IndexKey_Controller_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_IndexKey_Controller_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Controller != nil {
		{
			size, err := m.Controller.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ListServiceRecordRequest_IndexKey_Id) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRecordRequest_IndexKey_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_IndexKey_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XId != nil {
		{
			size := m.XId.Size()
			i -= size
			if _, err := m.XId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRecordRequest_IndexKey_Id_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_IndexKey_Id_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStateQuery(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListServiceRecordRequest_IndexKey_Origin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRecordRequest_IndexKey_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_IndexKey_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XOrigin != nil {
		{
			size := m.XOrigin.Size()
			i -= size
			if _, err := m.XOrigin.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRecordRequest_IndexKey_Origin_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_IndexKey_Origin_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Origin)
	copy(dAtA[i:], m.Origin)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListServiceRecordRequest_IndexKey_Controller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRecordRequest_IndexKey_Controller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_IndexKey_Controller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XController != nil {
		{
			size := m.XController.Size()
			i -= size
			if _, err := m.XController.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRecordRequest_IndexKey_Controller_Controller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_IndexKey_Controller_Controller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Controller)
	copy(dAtA[i:], m.Controller)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Controller)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListServiceRecordRequest_RangeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRecordRequest_RangeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordRequest_RangeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintStateQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByOriginHandleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByOriginHandleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByOriginHandleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByOriginHandleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByOriginHandleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByOriginHandleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByCredentialIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByCredentialIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByCredentialIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialId) > 0 {
		i -= len(m.CredentialId)
		copy(dAtA[i:], m.CredentialId)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.CredentialId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByCredentialIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByCredentialIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByCredentialIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByPublicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByPublicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByPublicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_PrefixQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_PrefixQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixQuery != nil {
		{
			size, err := m.PrefixQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_RangeQuery_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_RangeQuery_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeQuery != nil {
		{
			size, err := m.RangeQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size := m.Key.Size()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_Id_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Id_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_Handle_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Handle_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Handle != nil {
		{
			size, err := m.Handle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_OriginHandle_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginHandle_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OriginHandle != nil {
		{
			size, err := m.OriginHandle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_CredentialId_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_CredentialId_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CredentialId != nil {
		{
			size, err := m.CredentialId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_PublicKey_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_PublicKey_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublicKey != nil {
		{
			size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_Id) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XId != nil {
		{
			size := m.XId.Size()
			i -= size
			if _, err := m.XId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_Id_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Id_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStateQuery(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_Handle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey_Handle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Handle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XHandle != nil {
		{
			size := m.XHandle.Size()
			i -= size
			if _, err := m.XHandle.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_Handle_Handle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Handle_Handle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Handle)
	copy(dAtA[i:], m.Handle)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Handle)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XHandle != nil {
		{
			size := m.XHandle.Size()
			i -= size
			if _, err := m.XHandle.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XOrigin != nil {
		{
			size := m.XOrigin.Size()
			i -= size
			if _, err := m.XOrigin.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_OriginHandle_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginHandle_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Origin)
	copy(dAtA[i:], m.Origin)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_OriginHandle_Handle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginHandle_Handle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Handle)
	copy(dAtA[i:], m.Handle)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Handle)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_CredentialId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey_CredentialId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_CredentialId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XCredentialId != nil {
		{
			size := m.XCredentialId.Size()
			i -= size
			if _, err := m.XCredentialId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_CredentialId_CredentialId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_CredentialId_CredentialId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CredentialId != nil {
		i -= len(m.CredentialId)
		copy(dAtA[i:], m.CredentialId)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.CredentialId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_PublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey_PublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_PublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XPublicKey != nil {
		{
			size := m.XPublicKey.Size()
			i -= size
			if _, err := m.XPublicKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_PublicKey_PublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_PublicKey_PublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublicKey != nil {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_RangeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_RangeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_RangeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetWitnessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWitnessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWitnessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintStateQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWitnessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWitnessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWitnessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWitnessByOriginKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWitnessByOriginKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWitnessByOriginKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWitnessByOriginKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWitnessByOriginKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWitnessByOriginKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWitnessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWitnessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListWitnessRequest_PrefixQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_PrefixQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixQuery != nil {
		{
			size, err := m.PrefixQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListWitnessRequest_RangeQuery_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_RangeQuery_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeQuery != nil {
		{
			size, err := m.RangeQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListWitnessRequest_IndexKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWitnessRequest_IndexKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_IndexKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size := m.Key.Size()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListWitnessRequest_IndexKey_Index_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_IndexKey_Index_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Index != nil {
		{
			size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListWitnessRequest_IndexKey_OriginKey_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_IndexKey_OriginKey_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OriginKey != nil {
		{
			size, err := m.OriginKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListWitnessRequest_IndexKey_Index) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWitnessRequest_IndexKey_Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_IndexKey_Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XIndex != nil {
		{
			size := m.XIndex.Size()
			i -= size
			if _, err := m.XIndex.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListWitnessRequest_IndexKey_Index_Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_IndexKey_Index_Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStateQuery(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListWitnessRequest_IndexKey_OriginKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWitnessRequest_IndexKey_OriginKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_IndexKey_OriginKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XKey != nil {
		{
			size := m.XKey.Size()
			i -= size
			if _, err := m.XKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XOrigin != nil {
		{
			size := m.XOrigin.Size()
			i -= size
			if _, err := m.XOrigin.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListWitnessRequest_IndexKey_OriginKey_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_IndexKey_OriginKey_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Origin)
	copy(dAtA[i:], m.Origin)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListWitnessRequest_IndexKey_OriginKey_Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_IndexKey_OriginKey_Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Key)
	copy(dAtA[i:], m.Key)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Key)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ListWitnessRequest_RangeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWitnessRequest_RangeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessRequest_RangeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWitnessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWitnessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWitnessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBaseParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBaseParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBaseParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetBaseParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBaseParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBaseParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReadParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReadParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReadParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetReadParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReadParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReadParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWriteParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWriteParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWriteParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetWriteParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWriteParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWriteParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOwnParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOwnParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOwnParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetOwnParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOwnParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOwnParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStateQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovStateQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetServiceRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStateQuery(uint64(m.Id))
	}
	return n
}

func (m *GetServiceRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetServiceRecordByOriginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetServiceRecordByOriginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListServiceRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListServiceRecordRequest_PrefixQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixQuery != nil {
		l = m.PrefixQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListServiceRecordRequest_RangeQuery_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeQuery != nil {
		l = m.RangeQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListServiceRecordRequest_IndexKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *ListServiceRecordRequest_IndexKey_Id_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListServiceRecordRequest_IndexKey_Origin_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListServiceRecordRequest_IndexKey_Controller_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Controller != nil {
		l = m.Controller.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListServiceRecordRequest_IndexKey_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XId != nil {
		n += m.XId.Size()
	}
	return n
}

func (m *ListServiceRecordRequest_IndexKey_Id_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStateQuery(uint64(m.Id))
	return n
}
func (m *ListServiceRecordRequest_IndexKey_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XOrigin != nil {
		n += m.XOrigin.Size()
	}
	return n
}

func (m *ListServiceRecordRequest_IndexKey_Origin_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListServiceRecordRequest_IndexKey_Controller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XController != nil {
		n += m.XController.Size()
	}
	return n
}

func (m *ListServiceRecordRequest_IndexKey_Controller_Controller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Controller)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListServiceRecordRequest_RangeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListServiceRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStateQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStateQuery(uint64(m.Id))
	}
	return n
}

func (m *GetCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByOriginHandleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByOriginHandleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByCredentialIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialId)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByCredentialIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByPublicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListCredentialRequest_PrefixQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixQuery != nil {
		l = m.PrefixQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_RangeQuery_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeQuery != nil {
		l = m.RangeQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_Id_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_Handle_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Handle != nil {
		l = m.Handle.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_OriginHandle_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginHandle != nil {
		l = m.OriginHandle.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_CredentialId_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CredentialId != nil {
		l = m.CredentialId.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_PublicKey_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicKey != nil {
		l = m.PublicKey.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XId != nil {
		n += m.XId.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_Id_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStateQuery(uint64(m.Id))
	return n
}
func (m *ListCredentialRequest_IndexKey_Handle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XHandle != nil {
		n += m.XHandle.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_Handle_Handle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handle)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XOrigin != nil {
		n += m.XOrigin.Size()
	}
	if m.XHandle != nil {
		n += m.XHandle.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_OriginHandle_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListCredentialRequest_IndexKey_OriginHandle_Handle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handle)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListCredentialRequest_IndexKey_CredentialId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XCredentialId != nil {
		n += m.XCredentialId.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_CredentialId_CredentialId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CredentialId != nil {
		l = len(m.CredentialId)
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_PublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XPublicKey != nil {
		n += m.XPublicKey.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_PublicKey_PublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicKey != nil {
		l = len(m.PublicKey)
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_RangeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStateQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetWitnessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovStateQuery(uint64(m.Index))
	}
	return n
}

func (m *GetWitnessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetWitnessByOriginKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetWitnessByOriginKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListWitnessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListWitnessRequest_PrefixQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixQuery != nil {
		l = m.PrefixQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListWitnessRequest_RangeQuery_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeQuery != nil {
		l = m.RangeQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListWitnessRequest_IndexKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *ListWitnessRequest_IndexKey_Index_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListWitnessRequest_IndexKey_OriginKey_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginKey != nil {
		l = m.OriginKey.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListWitnessRequest_IndexKey_Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XIndex != nil {
		n += m.XIndex.Size()
	}
	return n
}

func (m *ListWitnessRequest_IndexKey_Index_Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStateQuery(uint64(m.Index))
	return n
}
func (m *ListWitnessRequest_IndexKey_OriginKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XOrigin != nil {
		n += m.XOrigin.Size()
	}
	if m.XKey != nil {
		n += m.XKey.Size()
	}
	return n
}

func (m *ListWitnessRequest_IndexKey_OriginKey_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListWitnessRequest_IndexKey_OriginKey_Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListWitnessRequest_RangeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListWitnessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStateQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetBaseParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetBaseParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetReadParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetReadParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetWriteParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetWriteParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetOwnParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetOwnParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func sovStateQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStateQuery(x uint64) (n int) {
	return sovStateQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetServiceRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &ServiceRecord{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceRecordByOriginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceRecordByOriginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceRecordByOriginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceRecordByOriginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceRecordByOriginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceRecordByOriginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &ServiceRecord{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServiceRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServiceRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceRecordRequest_IndexKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListServiceRecordRequest_PrefixQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceRecordRequest_RangeQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListServiceRecordRequest_RangeQuery_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRecordRequest_IndexKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceRecordRequest_IndexKey_Id{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListServiceRecordRequest_IndexKey_Id_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceRecordRequest_IndexKey_Origin{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListServiceRecordRequest_IndexKey_Origin_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceRecordRequest_IndexKey_Controller{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListServiceRecordRequest_IndexKey_Controller_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRecordRequest_IndexKey_Id) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Id: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Id: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XId = &ListServiceRecordRequest_IndexKey_Id_Id{v}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRecordRequest_IndexKey_Origin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Origin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Origin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XOrigin = &ListServiceRecordRequest_IndexKey_Origin_Origin{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRecordRequest_IndexKey_Controller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Controller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Controller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XController = &ListServiceRecordRequest_IndexKey_Controller_Controller{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRecordRequest_RangeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &ListServiceRecordRequest_IndexKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &ListServiceRecordRequest_IndexKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServiceRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServiceRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &ServiceRecord{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Credential{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByOriginHandleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByOriginHandleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByOriginHandleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByOriginHandleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByOriginHandleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByOriginHandleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Credential{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByCredentialIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByCredentialIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByCredentialIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialId = append(m.CredentialId[:0], dAtA[iNdEx:postIndex]...)
			if m.CredentialId == nil {
				m.CredentialId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByCredentialIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByCredentialIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByCredentialIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Credential{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByPublicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByPublicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByPublicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Credential{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListCredentialRequest_PrefixQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_RangeQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListCredentialRequest_RangeQuery_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey_Id{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListCredentialRequest_IndexKey_Id_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey_Handle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListCredentialRequest_IndexKey_Handle_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey_OriginHandle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListCredentialRequest_IndexKey_OriginHandle_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey_CredentialId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListCredentialRequest_IndexKey_CredentialId_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey_PublicKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListCredentialRequest_IndexKey_PublicKey_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_Id) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Id: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Id: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XId = &ListCredentialRequest_IndexKey_Id_Id{v}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_Handle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Handle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Handle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XHandle = &ListCredentialRequest_IndexKey_Handle_Handle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XOrigin = &ListCredentialRequest_IndexKey_OriginHandle_Origin{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XHandle = &ListCredentialRequest_IndexKey_OriginHandle_Handle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_CredentialId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.XCredentialId = &ListCredentialRequest_IndexKey_CredentialId_CredentialId{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_PublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.XPublicKey = &ListCredentialRequest_IndexKey_PublicKey_PublicKey{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_RangeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &ListCredentialRequest_IndexKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &ListCredentialRequest_IndexKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Credential{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWitnessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWitnessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWitnessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWitnessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWitnessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWitnessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Witness{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWitnessByOriginKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWitnessByOriginKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWitnessByOriginKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWitnessByOriginKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWitnessByOriginKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWitnessByOriginKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Witness{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWitnessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWitnessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWitnessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListWitnessRequest_IndexKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListWitnessRequest_PrefixQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListWitnessRequest_RangeQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListWitnessRequest_RangeQuery_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWitnessRequest_IndexKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListWitnessRequest_IndexKey_Index{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListWitnessRequest_IndexKey_Index_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListWitnessRequest_IndexKey_OriginKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListWitnessRequest_IndexKey_OriginKey_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWitnessRequest_IndexKey_Index) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Index: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Index: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XIndex = &ListWitnessRequest_IndexKey_Index_Index{v}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWitnessRequest_IndexKey_OriginKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XOrigin = &ListWitnessRequest_IndexKey_OriginKey_Origin{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XKey = &ListWitnessRequest_IndexKey_OriginKey_Key{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWitnessRequest_RangeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &ListWitnessRequest_IndexKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &ListWitnessRequest_IndexKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWitnessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWitnessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWitnessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Witness{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBaseParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBaseParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBaseParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBaseParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBaseParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBaseParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &BaseParams{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReadParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReadParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReadParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReadParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReadParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReadParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &ReadParams{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWriteParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWriteParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWriteParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWriteParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWriteParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWriteParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &WriteParams{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOwnParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOwnParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOwnParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOwnParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOwnParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOwnParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &OwnParams{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStateQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStateQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStateQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStateQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStateQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStateQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStateQuery = fmt.Errorf("proto: unexpected end of group")
)
