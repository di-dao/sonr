// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/motor/v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fmotor_2fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fmotor_2fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/core.pb.h"
#include "common/v1/data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fmotor_2fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fmotor_2fv1_2fresponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto;
namespace node {
namespace motor {
namespace v1 {
class DecideResponse;
struct DecideResponseDefaultTypeInternal;
extern DecideResponseDefaultTypeInternal _DecideResponse_default_instance_;
class OnLobbyRefreshResponse;
struct OnLobbyRefreshResponseDefaultTypeInternal;
extern OnLobbyRefreshResponseDefaultTypeInternal _OnLobbyRefreshResponse_default_instance_;
class OnMailboxMessageResponse;
struct OnMailboxMessageResponseDefaultTypeInternal;
extern OnMailboxMessageResponseDefaultTypeInternal _OnMailboxMessageResponse_default_instance_;
class OnTransmitCompleteResponse;
struct OnTransmitCompleteResponseDefaultTypeInternal;
extern OnTransmitCompleteResponseDefaultTypeInternal _OnTransmitCompleteResponse_default_instance_;
class OnTransmitCompleteResponse_ResultsEntry_DoNotUse;
struct OnTransmitCompleteResponse_ResultsEntry_DoNotUseDefaultTypeInternal;
extern OnTransmitCompleteResponse_ResultsEntry_DoNotUseDefaultTypeInternal _OnTransmitCompleteResponse_ResultsEntry_DoNotUse_default_instance_;
class OnTransmitDecisionResponse;
struct OnTransmitDecisionResponseDefaultTypeInternal;
extern OnTransmitDecisionResponseDefaultTypeInternal _OnTransmitDecisionResponse_default_instance_;
class OnTransmitInviteResponse;
struct OnTransmitInviteResponseDefaultTypeInternal;
extern OnTransmitInviteResponseDefaultTypeInternal _OnTransmitInviteResponse_default_instance_;
class OnTransmitProgressResponse;
struct OnTransmitProgressResponseDefaultTypeInternal;
extern OnTransmitProgressResponseDefaultTypeInternal _OnTransmitProgressResponse_default_instance_;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class ShareResponse;
struct ShareResponseDefaultTypeInternal;
extern ShareResponseDefaultTypeInternal _ShareResponse_default_instance_;
}  // namespace v1
}  // namespace motor
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> ::node::motor::v1::DecideResponse* Arena::CreateMaybeMessage<::node::motor::v1::DecideResponse>(Arena*);
template<> ::node::motor::v1::OnLobbyRefreshResponse* Arena::CreateMaybeMessage<::node::motor::v1::OnLobbyRefreshResponse>(Arena*);
template<> ::node::motor::v1::OnMailboxMessageResponse* Arena::CreateMaybeMessage<::node::motor::v1::OnMailboxMessageResponse>(Arena*);
template<> ::node::motor::v1::OnTransmitCompleteResponse* Arena::CreateMaybeMessage<::node::motor::v1::OnTransmitCompleteResponse>(Arena*);
template<> ::node::motor::v1::OnTransmitCompleteResponse_ResultsEntry_DoNotUse* Arena::CreateMaybeMessage<::node::motor::v1::OnTransmitCompleteResponse_ResultsEntry_DoNotUse>(Arena*);
template<> ::node::motor::v1::OnTransmitDecisionResponse* Arena::CreateMaybeMessage<::node::motor::v1::OnTransmitDecisionResponse>(Arena*);
template<> ::node::motor::v1::OnTransmitInviteResponse* Arena::CreateMaybeMessage<::node::motor::v1::OnTransmitInviteResponse>(Arena*);
template<> ::node::motor::v1::OnTransmitProgressResponse* Arena::CreateMaybeMessage<::node::motor::v1::OnTransmitProgressResponse>(Arena*);
template<> ::node::motor::v1::SearchResponse* Arena::CreateMaybeMessage<::node::motor::v1::SearchResponse>(Arena*);
template<> ::node::motor::v1::ShareResponse* Arena::CreateMaybeMessage<::node::motor::v1::ShareResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace node {
namespace motor {
namespace v1 {

// ===================================================================

class ShareResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.ShareResponse) */ {
 public:
  inline ShareResponse() : ShareResponse(nullptr) {}
  ~ShareResponse() override;
  explicit constexpr ShareResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShareResponse(const ShareResponse& from);
  ShareResponse(ShareResponse&& from) noexcept
    : ShareResponse() {
    *this = ::std::move(from);
  }

  inline ShareResponse& operator=(const ShareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareResponse& operator=(ShareResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShareResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareResponse* internal_default_instance() {
    return reinterpret_cast<const ShareResponse*>(
               &_ShareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShareResponse& a, ShareResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShareResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShareResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShareResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShareResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.ShareResponse";
  }
  protected:
  explicit ShareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.ShareResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class DecideResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.DecideResponse) */ {
 public:
  inline DecideResponse() : DecideResponse(nullptr) {}
  ~DecideResponse() override;
  explicit constexpr DecideResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DecideResponse(const DecideResponse& from);
  DecideResponse(DecideResponse&& from) noexcept
    : DecideResponse() {
    *this = ::std::move(from);
  }

  inline DecideResponse& operator=(const DecideResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecideResponse& operator=(DecideResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecideResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecideResponse* internal_default_instance() {
    return reinterpret_cast<const DecideResponse*>(
               &_DecideResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DecideResponse& a, DecideResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DecideResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecideResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecideResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecideResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DecideResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DecideResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecideResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.DecideResponse";
  }
  protected:
  explicit DecideResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.DecideResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() override;
  explicit constexpr SearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kPeerIdFieldNumber = 4,
    kSNameFieldNumber = 5,
    kPeerFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // string peer_id = 4 [json_name = "peerId"];
  void clear_peer_id();
  const std::string& peer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peer_id();
  PROTOBUF_NODISCARD std::string* release_peer_id();
  void set_allocated_peer_id(std::string* peer_id);
  private:
  const std::string& _internal_peer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer_id(const std::string& value);
  std::string* _internal_mutable_peer_id();
  public:

  // string s_name = 5 [json_name = "sName"];
  void clear_s_name();
  const std::string& s_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s_name();
  PROTOBUF_NODISCARD std::string* release_s_name();
  void set_allocated_s_name(std::string* s_name);
  private:
  const std::string& _internal_s_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s_name(const std::string& value);
  std::string* _internal_mutable_s_name();
  public:

  // .common.v1.Peer peer = 3 [json_name = "peer"];
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::common::v1::Peer& peer() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_peer();
  ::common::v1::Peer* mutable_peer();
  void set_allocated_peer(::common::v1::Peer* peer);
  private:
  const ::common::v1::Peer& _internal_peer() const;
  ::common::v1::Peer* _internal_mutable_peer();
  public:
  void unsafe_arena_set_allocated_peer(
      ::common::v1::Peer* peer);
  ::common::v1::Peer* unsafe_arena_release_peer();

  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_name_;
  ::common::v1::Peer* peer_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class OnTransmitDecisionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.OnTransmitDecisionResponse) */ {
 public:
  inline OnTransmitDecisionResponse() : OnTransmitDecisionResponse(nullptr) {}
  ~OnTransmitDecisionResponse() override;
  explicit constexpr OnTransmitDecisionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnTransmitDecisionResponse(const OnTransmitDecisionResponse& from);
  OnTransmitDecisionResponse(OnTransmitDecisionResponse&& from) noexcept
    : OnTransmitDecisionResponse() {
    *this = ::std::move(from);
  }

  inline OnTransmitDecisionResponse& operator=(const OnTransmitDecisionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnTransmitDecisionResponse& operator=(OnTransmitDecisionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnTransmitDecisionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnTransmitDecisionResponse* internal_default_instance() {
    return reinterpret_cast<const OnTransmitDecisionResponse*>(
               &_OnTransmitDecisionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OnTransmitDecisionResponse& a, OnTransmitDecisionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnTransmitDecisionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnTransmitDecisionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnTransmitDecisionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnTransmitDecisionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnTransmitDecisionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OnTransmitDecisionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnTransmitDecisionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnTransmitDecisionResponse";
  }
  protected:
  explicit OnTransmitDecisionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 2,
    kReceivedFieldNumber = 3,
    kDecisionFieldNumber = 1,
  };
  // .common.v1.Peer from = 2 [json_name = "from"];
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::common::v1::Peer& from() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_from();
  ::common::v1::Peer* mutable_from();
  void set_allocated_from(::common::v1::Peer* from);
  private:
  const ::common::v1::Peer& _internal_from() const;
  ::common::v1::Peer* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::common::v1::Peer* from);
  ::common::v1::Peer* unsafe_arena_release_from();

  // int64 received = 3 [json_name = "received"];
  void clear_received();
  int64_t received() const;
  void set_received(int64_t value);
  private:
  int64_t _internal_received() const;
  void _internal_set_received(int64_t value);
  public:

  // bool decision = 1 [json_name = "decision"];
  void clear_decision();
  bool decision() const;
  void set_decision(bool value);
  private:
  bool _internal_decision() const;
  void _internal_set_decision(bool value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnTransmitDecisionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::v1::Peer* from_;
  int64_t received_;
  bool decision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class OnLobbyRefreshResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.OnLobbyRefreshResponse) */ {
 public:
  inline OnLobbyRefreshResponse() : OnLobbyRefreshResponse(nullptr) {}
  ~OnLobbyRefreshResponse() override;
  explicit constexpr OnLobbyRefreshResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnLobbyRefreshResponse(const OnLobbyRefreshResponse& from);
  OnLobbyRefreshResponse(OnLobbyRefreshResponse&& from) noexcept
    : OnLobbyRefreshResponse() {
    *this = ::std::move(from);
  }

  inline OnLobbyRefreshResponse& operator=(const OnLobbyRefreshResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnLobbyRefreshResponse& operator=(OnLobbyRefreshResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnLobbyRefreshResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnLobbyRefreshResponse* internal_default_instance() {
    return reinterpret_cast<const OnLobbyRefreshResponse*>(
               &_OnLobbyRefreshResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OnLobbyRefreshResponse& a, OnLobbyRefreshResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnLobbyRefreshResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnLobbyRefreshResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnLobbyRefreshResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnLobbyRefreshResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnLobbyRefreshResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OnLobbyRefreshResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnLobbyRefreshResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnLobbyRefreshResponse";
  }
  protected:
  explicit OnLobbyRefreshResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 2,
    kOlcFieldNumber = 1,
    kReceivedFieldNumber = 3,
  };
  // repeated .common.v1.Peer peers = 2 [json_name = "peers"];
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::common::v1::Peer* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Peer >*
      mutable_peers();
  private:
  const ::common::v1::Peer& _internal_peers(int index) const;
  ::common::v1::Peer* _internal_add_peers();
  public:
  const ::common::v1::Peer& peers(int index) const;
  ::common::v1::Peer* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Peer >&
      peers() const;

  // string olc = 1 [json_name = "olc"];
  void clear_olc();
  const std::string& olc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_olc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_olc();
  PROTOBUF_NODISCARD std::string* release_olc();
  void set_allocated_olc(std::string* olc);
  private:
  const std::string& _internal_olc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_olc(const std::string& value);
  std::string* _internal_mutable_olc();
  public:

  // int64 received = 3 [json_name = "received"];
  void clear_received();
  int64_t received() const;
  void set_received(int64_t value);
  private:
  int64_t _internal_received() const;
  void _internal_set_received(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnLobbyRefreshResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Peer > peers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr olc_;
  int64_t received_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class OnTransmitInviteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.OnTransmitInviteResponse) */ {
 public:
  inline OnTransmitInviteResponse() : OnTransmitInviteResponse(nullptr) {}
  ~OnTransmitInviteResponse() override;
  explicit constexpr OnTransmitInviteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnTransmitInviteResponse(const OnTransmitInviteResponse& from);
  OnTransmitInviteResponse(OnTransmitInviteResponse&& from) noexcept
    : OnTransmitInviteResponse() {
    *this = ::std::move(from);
  }

  inline OnTransmitInviteResponse& operator=(const OnTransmitInviteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnTransmitInviteResponse& operator=(OnTransmitInviteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnTransmitInviteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnTransmitInviteResponse* internal_default_instance() {
    return reinterpret_cast<const OnTransmitInviteResponse*>(
               &_OnTransmitInviteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OnTransmitInviteResponse& a, OnTransmitInviteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnTransmitInviteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnTransmitInviteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnTransmitInviteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnTransmitInviteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnTransmitInviteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OnTransmitInviteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnTransmitInviteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnTransmitInviteResponse";
  }
  protected:
  explicit OnTransmitInviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kReceivedFieldNumber = 1,
  };
  // .common.v1.Peer from = 2 [json_name = "from"];
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::common::v1::Peer& from() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_from();
  ::common::v1::Peer* mutable_from();
  void set_allocated_from(::common::v1::Peer* from);
  private:
  const ::common::v1::Peer& _internal_from() const;
  ::common::v1::Peer* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::common::v1::Peer* from);
  ::common::v1::Peer* unsafe_arena_release_from();

  // .common.v1.Payload payload = 3 [json_name = "payload"];
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::common::v1::Payload& payload() const;
  PROTOBUF_NODISCARD ::common::v1::Payload* release_payload();
  ::common::v1::Payload* mutable_payload();
  void set_allocated_payload(::common::v1::Payload* payload);
  private:
  const ::common::v1::Payload& _internal_payload() const;
  ::common::v1::Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::common::v1::Payload* payload);
  ::common::v1::Payload* unsafe_arena_release_payload();

  // int64 received = 1 [json_name = "received"];
  void clear_received();
  int64_t received() const;
  void set_received(int64_t value);
  private:
  int64_t _internal_received() const;
  void _internal_set_received(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnTransmitInviteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::v1::Peer* from_;
  ::common::v1::Payload* payload_;
  int64_t received_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class OnMailboxMessageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.OnMailboxMessageResponse) */ {
 public:
  inline OnMailboxMessageResponse() : OnMailboxMessageResponse(nullptr) {}
  ~OnMailboxMessageResponse() override;
  explicit constexpr OnMailboxMessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnMailboxMessageResponse(const OnMailboxMessageResponse& from);
  OnMailboxMessageResponse(OnMailboxMessageResponse&& from) noexcept
    : OnMailboxMessageResponse() {
    *this = ::std::move(from);
  }

  inline OnMailboxMessageResponse& operator=(const OnMailboxMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnMailboxMessageResponse& operator=(OnMailboxMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnMailboxMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnMailboxMessageResponse* internal_default_instance() {
    return reinterpret_cast<const OnMailboxMessageResponse*>(
               &_OnMailboxMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OnMailboxMessageResponse& a, OnMailboxMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnMailboxMessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnMailboxMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnMailboxMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnMailboxMessageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnMailboxMessageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OnMailboxMessageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnMailboxMessageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnMailboxMessageResponse";
  }
  protected:
  explicit OnMailboxMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBufferFieldNumber = 2,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kMetadataFieldNumber = 5,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes buffer = 2 [json_name = "buffer"];
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_NODISCARD std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // .common.v1.Profile from = 3 [json_name = "from"];
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::common::v1::Profile& from() const;
  PROTOBUF_NODISCARD ::common::v1::Profile* release_from();
  ::common::v1::Profile* mutable_from();
  void set_allocated_from(::common::v1::Profile* from);
  private:
  const ::common::v1::Profile& _internal_from() const;
  ::common::v1::Profile* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::common::v1::Profile* from);
  ::common::v1::Profile* unsafe_arena_release_from();

  // .common.v1.Profile to = 4 [json_name = "to"];
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::common::v1::Profile& to() const;
  PROTOBUF_NODISCARD ::common::v1::Profile* release_to();
  ::common::v1::Profile* mutable_to();
  void set_allocated_to(::common::v1::Profile* to);
  private:
  const ::common::v1::Profile& _internal_to() const;
  ::common::v1::Profile* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::common::v1::Profile* to);
  ::common::v1::Profile* unsafe_arena_release_to();

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::common::v1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::common::v1::Metadata* release_metadata();
  ::common::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::common::v1::Metadata* metadata);
  private:
  const ::common::v1::Metadata& _internal_metadata() const;
  ::common::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::common::v1::Metadata* metadata);
  ::common::v1::Metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnMailboxMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::common::v1::Profile* from_;
  ::common::v1::Profile* to_;
  ::common::v1::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class OnTransmitProgressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.OnTransmitProgressResponse) */ {
 public:
  inline OnTransmitProgressResponse() : OnTransmitProgressResponse(nullptr) {}
  ~OnTransmitProgressResponse() override;
  explicit constexpr OnTransmitProgressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnTransmitProgressResponse(const OnTransmitProgressResponse& from);
  OnTransmitProgressResponse(OnTransmitProgressResponse&& from) noexcept
    : OnTransmitProgressResponse() {
    *this = ::std::move(from);
  }

  inline OnTransmitProgressResponse& operator=(const OnTransmitProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnTransmitProgressResponse& operator=(OnTransmitProgressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnTransmitProgressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnTransmitProgressResponse* internal_default_instance() {
    return reinterpret_cast<const OnTransmitProgressResponse*>(
               &_OnTransmitProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OnTransmitProgressResponse& a, OnTransmitProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnTransmitProgressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnTransmitProgressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnTransmitProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnTransmitProgressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnTransmitProgressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OnTransmitProgressResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnTransmitProgressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnTransmitProgressResponse";
  }
  protected:
  explicit OnTransmitProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 1,
    kReceivedFieldNumber = 2,
    kCurrentFieldNumber = 3,
    kTotalFieldNumber = 4,
    kDirectionFieldNumber = 5,
  };
  // double progress = 1 [json_name = "progress"];
  void clear_progress();
  double progress() const;
  void set_progress(double value);
  private:
  double _internal_progress() const;
  void _internal_set_progress(double value);
  public:

  // int64 received = 2 [json_name = "received"];
  void clear_received();
  int64_t received() const;
  void set_received(int64_t value);
  private:
  int64_t _internal_received() const;
  void _internal_set_received(int64_t value);
  public:

  // int32 current = 3 [json_name = "current"];
  void clear_current();
  int32_t current() const;
  void set_current(int32_t value);
  private:
  int32_t _internal_current() const;
  void _internal_set_current(int32_t value);
  public:

  // int32 total = 4 [json_name = "total"];
  void clear_total();
  int32_t total() const;
  void set_total(int32_t value);
  private:
  int32_t _internal_total() const;
  void _internal_set_total(int32_t value);
  public:

  // .common.v1.Direction direction = 5 [json_name = "direction"];
  void clear_direction();
  ::common::v1::Direction direction() const;
  void set_direction(::common::v1::Direction value);
  private:
  ::common::v1::Direction _internal_direction() const;
  void _internal_set_direction(::common::v1::Direction value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnTransmitProgressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double progress_;
  int64_t received_;
  int32_t current_;
  int32_t total_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class OnTransmitCompleteResponse_ResultsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OnTransmitCompleteResponse_ResultsEntry_DoNotUse, 
    int32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OnTransmitCompleteResponse_ResultsEntry_DoNotUse, 
    int32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  OnTransmitCompleteResponse_ResultsEntry_DoNotUse();
  explicit constexpr OnTransmitCompleteResponse_ResultsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OnTransmitCompleteResponse_ResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OnTransmitCompleteResponse_ResultsEntry_DoNotUse& other);
  static const OnTransmitCompleteResponse_ResultsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OnTransmitCompleteResponse_ResultsEntry_DoNotUse*>(&_OnTransmitCompleteResponse_ResultsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class OnTransmitCompleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.OnTransmitCompleteResponse) */ {
 public:
  inline OnTransmitCompleteResponse() : OnTransmitCompleteResponse(nullptr) {}
  ~OnTransmitCompleteResponse() override;
  explicit constexpr OnTransmitCompleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnTransmitCompleteResponse(const OnTransmitCompleteResponse& from);
  OnTransmitCompleteResponse(OnTransmitCompleteResponse&& from) noexcept
    : OnTransmitCompleteResponse() {
    *this = ::std::move(from);
  }

  inline OnTransmitCompleteResponse& operator=(const OnTransmitCompleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnTransmitCompleteResponse& operator=(OnTransmitCompleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnTransmitCompleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnTransmitCompleteResponse* internal_default_instance() {
    return reinterpret_cast<const OnTransmitCompleteResponse*>(
               &_OnTransmitCompleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OnTransmitCompleteResponse& a, OnTransmitCompleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnTransmitCompleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnTransmitCompleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnTransmitCompleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnTransmitCompleteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnTransmitCompleteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OnTransmitCompleteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnTransmitCompleteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnTransmitCompleteResponse";
  }
  protected:
  explicit OnTransmitCompleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 7,
    kPayloadFieldNumber = 2,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
    kReceivedAtFieldNumber = 6,
    kDirectionFieldNumber = 1,
  };
  // map<int32, bool> results = 7 [json_name = "results"];
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
      _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
      _internal_mutable_results();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
      results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
      mutable_results();

  // .common.v1.Payload payload = 2 [json_name = "payload"];
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::common::v1::Payload& payload() const;
  PROTOBUF_NODISCARD ::common::v1::Payload* release_payload();
  ::common::v1::Payload* mutable_payload();
  void set_allocated_payload(::common::v1::Payload* payload);
  private:
  const ::common::v1::Payload& _internal_payload() const;
  ::common::v1::Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::common::v1::Payload* payload);
  ::common::v1::Payload* unsafe_arena_release_payload();

  // .common.v1.Peer from = 3 [json_name = "from"];
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::common::v1::Peer& from() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_from();
  ::common::v1::Peer* mutable_from();
  void set_allocated_from(::common::v1::Peer* from);
  private:
  const ::common::v1::Peer& _internal_from() const;
  ::common::v1::Peer* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::common::v1::Peer* from);
  ::common::v1::Peer* unsafe_arena_release_from();

  // .common.v1.Peer to = 4 [json_name = "to"];
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::common::v1::Peer& to() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_to();
  ::common::v1::Peer* mutable_to();
  void set_allocated_to(::common::v1::Peer* to);
  private:
  const ::common::v1::Peer& _internal_to() const;
  ::common::v1::Peer* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::common::v1::Peer* to);
  ::common::v1::Peer* unsafe_arena_release_to();

  // int64 created_at = 5 [json_name = "createdAt"];
  void clear_created_at();
  int64_t created_at() const;
  void set_created_at(int64_t value);
  private:
  int64_t _internal_created_at() const;
  void _internal_set_created_at(int64_t value);
  public:

  // int64 received_at = 6 [json_name = "receivedAt"];
  void clear_received_at();
  int64_t received_at() const;
  void set_received_at(int64_t value);
  private:
  int64_t _internal_received_at() const;
  void _internal_set_received_at(int64_t value);
  public:

  // .common.v1.Direction direction = 1 [json_name = "direction"];
  void clear_direction();
  ::common::v1::Direction direction() const;
  void set_direction(::common::v1::Direction value);
  private:
  ::common::v1::Direction _internal_direction() const;
  void _internal_set_direction(::common::v1::Direction value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnTransmitCompleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OnTransmitCompleteResponse_ResultsEntry_DoNotUse,
      int32_t, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> results_;
  ::common::v1::Payload* payload_;
  ::common::v1::Peer* from_;
  ::common::v1::Peer* to_;
  int64_t created_at_;
  int64_t received_at_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShareResponse

// bool success = 1 [json_name = "success"];
inline void ShareResponse::clear_success() {
  success_ = false;
}
inline bool ShareResponse::_internal_success() const {
  return success_;
}
inline bool ShareResponse::success() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.ShareResponse.success)
  return _internal_success();
}
inline void ShareResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ShareResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.ShareResponse.success)
}

// string error = 2 [json_name = "error"];
inline void ShareResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ShareResponse::error() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.ShareResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShareResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.ShareResponse.error)
}
inline std::string* ShareResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.ShareResponse.error)
  return _s;
}
inline const std::string& ShareResponse::_internal_error() const {
  return error_.Get();
}
inline void ShareResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShareResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShareResponse::release_error() {
  // @@protoc_insertion_point(field_release:node.motor.v1.ShareResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ShareResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.ShareResponse.error)
}

// -------------------------------------------------------------------

// DecideResponse

// bool success = 1 [json_name = "success"];
inline void DecideResponse::clear_success() {
  success_ = false;
}
inline bool DecideResponse::_internal_success() const {
  return success_;
}
inline bool DecideResponse::success() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.DecideResponse.success)
  return _internal_success();
}
inline void DecideResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void DecideResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.DecideResponse.success)
}

// string error = 2 [json_name = "error"];
inline void DecideResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DecideResponse::error() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.DecideResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DecideResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.DecideResponse.error)
}
inline std::string* DecideResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.DecideResponse.error)
  return _s;
}
inline const std::string& DecideResponse::_internal_error() const {
  return error_.Get();
}
inline void DecideResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DecideResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DecideResponse::release_error() {
  // @@protoc_insertion_point(field_release:node.motor.v1.DecideResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DecideResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.DecideResponse.error)
}

// -------------------------------------------------------------------

// SearchResponse

// bool success = 1 [json_name = "success"];
inline void SearchResponse::clear_success() {
  success_ = false;
}
inline bool SearchResponse::_internal_success() const {
  return success_;
}
inline bool SearchResponse::success() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.SearchResponse.success)
  return _internal_success();
}
inline void SearchResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SearchResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.SearchResponse.success)
}

// string error = 2 [json_name = "error"];
inline void SearchResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& SearchResponse::error() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.SearchResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.SearchResponse.error)
}
inline std::string* SearchResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.SearchResponse.error)
  return _s;
}
inline const std::string& SearchResponse::_internal_error() const {
  return error_.Get();
}
inline void SearchResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchResponse::release_error() {
  // @@protoc_insertion_point(field_release:node.motor.v1.SearchResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.SearchResponse.error)
}

// .common.v1.Peer peer = 3 [json_name = "peer"];
inline bool SearchResponse::_internal_has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline bool SearchResponse::has_peer() const {
  return _internal_has_peer();
}
inline const ::common::v1::Peer& SearchResponse::_internal_peer() const {
  const ::common::v1::Peer* p = peer_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& SearchResponse::peer() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.SearchResponse.peer)
  return _internal_peer();
}
inline void SearchResponse::unsafe_arena_set_allocated_peer(
    ::common::v1::Peer* peer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.SearchResponse.peer)
}
inline ::common::v1::Peer* SearchResponse::release_peer() {
  
  ::common::v1::Peer* temp = peer_;
  peer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* SearchResponse::unsafe_arena_release_peer() {
  // @@protoc_insertion_point(field_release:node.motor.v1.SearchResponse.peer)
  
  ::common::v1::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* SearchResponse::_internal_mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    peer_ = p;
  }
  return peer_;
}
inline ::common::v1::Peer* SearchResponse::mutable_peer() {
  ::common::v1::Peer* _msg = _internal_mutable_peer();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.SearchResponse.peer)
  return _msg;
}
inline void SearchResponse::set_allocated_peer(::common::v1::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer));
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.SearchResponse.peer)
}

// string peer_id = 4 [json_name = "peerId"];
inline void SearchResponse::clear_peer_id() {
  peer_id_.ClearToEmpty();
}
inline const std::string& SearchResponse::peer_id() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.SearchResponse.peer_id)
  return _internal_peer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResponse::set_peer_id(ArgT0&& arg0, ArgT... args) {
 
 peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.SearchResponse.peer_id)
}
inline std::string* SearchResponse::mutable_peer_id() {
  std::string* _s = _internal_mutable_peer_id();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.SearchResponse.peer_id)
  return _s;
}
inline const std::string& SearchResponse::_internal_peer_id() const {
  return peer_id_.Get();
}
inline void SearchResponse::_internal_set_peer_id(const std::string& value) {
  
  peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchResponse::_internal_mutable_peer_id() {
  
  return peer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchResponse::release_peer_id() {
  // @@protoc_insertion_point(field_release:node.motor.v1.SearchResponse.peer_id)
  return peer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchResponse::set_allocated_peer_id(std::string* peer_id) {
  if (peer_id != nullptr) {
    
  } else {
    
  }
  peer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (peer_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.SearchResponse.peer_id)
}

// string s_name = 5 [json_name = "sName"];
inline void SearchResponse::clear_s_name() {
  s_name_.ClearToEmpty();
}
inline const std::string& SearchResponse::s_name() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.SearchResponse.s_name)
  return _internal_s_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResponse::set_s_name(ArgT0&& arg0, ArgT... args) {
 
 s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.SearchResponse.s_name)
}
inline std::string* SearchResponse::mutable_s_name() {
  std::string* _s = _internal_mutable_s_name();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.SearchResponse.s_name)
  return _s;
}
inline const std::string& SearchResponse::_internal_s_name() const {
  return s_name_.Get();
}
inline void SearchResponse::_internal_set_s_name(const std::string& value) {
  
  s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchResponse::_internal_mutable_s_name() {
  
  return s_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchResponse::release_s_name() {
  // @@protoc_insertion_point(field_release:node.motor.v1.SearchResponse.s_name)
  return s_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchResponse::set_allocated_s_name(std::string* s_name) {
  if (s_name != nullptr) {
    
  } else {
    
  }
  s_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (s_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.SearchResponse.s_name)
}

// -------------------------------------------------------------------

// OnTransmitDecisionResponse

// bool decision = 1 [json_name = "decision"];
inline void OnTransmitDecisionResponse::clear_decision() {
  decision_ = false;
}
inline bool OnTransmitDecisionResponse::_internal_decision() const {
  return decision_;
}
inline bool OnTransmitDecisionResponse::decision() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitDecisionResponse.decision)
  return _internal_decision();
}
inline void OnTransmitDecisionResponse::_internal_set_decision(bool value) {
  
  decision_ = value;
}
inline void OnTransmitDecisionResponse::set_decision(bool value) {
  _internal_set_decision(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitDecisionResponse.decision)
}

// .common.v1.Peer from = 2 [json_name = "from"];
inline bool OnTransmitDecisionResponse::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool OnTransmitDecisionResponse::has_from() const {
  return _internal_has_from();
}
inline const ::common::v1::Peer& OnTransmitDecisionResponse::_internal_from() const {
  const ::common::v1::Peer* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& OnTransmitDecisionResponse::from() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitDecisionResponse.from)
  return _internal_from();
}
inline void OnTransmitDecisionResponse::unsafe_arena_set_allocated_from(
    ::common::v1::Peer* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.OnTransmitDecisionResponse.from)
}
inline ::common::v1::Peer* OnTransmitDecisionResponse::release_from() {
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* OnTransmitDecisionResponse::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnTransmitDecisionResponse.from)
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* OnTransmitDecisionResponse::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::common::v1::Peer* OnTransmitDecisionResponse::mutable_from() {
  ::common::v1::Peer* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnTransmitDecisionResponse.from)
  return _msg;
}
inline void OnTransmitDecisionResponse::set_allocated_from(::common::v1::Peer* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnTransmitDecisionResponse.from)
}

// int64 received = 3 [json_name = "received"];
inline void OnTransmitDecisionResponse::clear_received() {
  received_ = int64_t{0};
}
inline int64_t OnTransmitDecisionResponse::_internal_received() const {
  return received_;
}
inline int64_t OnTransmitDecisionResponse::received() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitDecisionResponse.received)
  return _internal_received();
}
inline void OnTransmitDecisionResponse::_internal_set_received(int64_t value) {
  
  received_ = value;
}
inline void OnTransmitDecisionResponse::set_received(int64_t value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitDecisionResponse.received)
}

// -------------------------------------------------------------------

// OnLobbyRefreshResponse

// string olc = 1 [json_name = "olc"];
inline void OnLobbyRefreshResponse::clear_olc() {
  olc_.ClearToEmpty();
}
inline const std::string& OnLobbyRefreshResponse::olc() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnLobbyRefreshResponse.olc)
  return _internal_olc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OnLobbyRefreshResponse::set_olc(ArgT0&& arg0, ArgT... args) {
 
 olc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.OnLobbyRefreshResponse.olc)
}
inline std::string* OnLobbyRefreshResponse::mutable_olc() {
  std::string* _s = _internal_mutable_olc();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnLobbyRefreshResponse.olc)
  return _s;
}
inline const std::string& OnLobbyRefreshResponse::_internal_olc() const {
  return olc_.Get();
}
inline void OnLobbyRefreshResponse::_internal_set_olc(const std::string& value) {
  
  olc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OnLobbyRefreshResponse::_internal_mutable_olc() {
  
  return olc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OnLobbyRefreshResponse::release_olc() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnLobbyRefreshResponse.olc)
  return olc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OnLobbyRefreshResponse::set_allocated_olc(std::string* olc) {
  if (olc != nullptr) {
    
  } else {
    
  }
  olc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), olc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (olc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    olc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnLobbyRefreshResponse.olc)
}

// repeated .common.v1.Peer peers = 2 [json_name = "peers"];
inline int OnLobbyRefreshResponse::_internal_peers_size() const {
  return peers_.size();
}
inline int OnLobbyRefreshResponse::peers_size() const {
  return _internal_peers_size();
}
inline ::common::v1::Peer* OnLobbyRefreshResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnLobbyRefreshResponse.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Peer >*
OnLobbyRefreshResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:node.motor.v1.OnLobbyRefreshResponse.peers)
  return &peers_;
}
inline const ::common::v1::Peer& OnLobbyRefreshResponse::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::common::v1::Peer& OnLobbyRefreshResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnLobbyRefreshResponse.peers)
  return _internal_peers(index);
}
inline ::common::v1::Peer* OnLobbyRefreshResponse::_internal_add_peers() {
  return peers_.Add();
}
inline ::common::v1::Peer* OnLobbyRefreshResponse::add_peers() {
  ::common::v1::Peer* _add = _internal_add_peers();
  // @@protoc_insertion_point(field_add:node.motor.v1.OnLobbyRefreshResponse.peers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Peer >&
OnLobbyRefreshResponse::peers() const {
  // @@protoc_insertion_point(field_list:node.motor.v1.OnLobbyRefreshResponse.peers)
  return peers_;
}

// int64 received = 3 [json_name = "received"];
inline void OnLobbyRefreshResponse::clear_received() {
  received_ = int64_t{0};
}
inline int64_t OnLobbyRefreshResponse::_internal_received() const {
  return received_;
}
inline int64_t OnLobbyRefreshResponse::received() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnLobbyRefreshResponse.received)
  return _internal_received();
}
inline void OnLobbyRefreshResponse::_internal_set_received(int64_t value) {
  
  received_ = value;
}
inline void OnLobbyRefreshResponse::set_received(int64_t value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnLobbyRefreshResponse.received)
}

// -------------------------------------------------------------------

// OnTransmitInviteResponse

// int64 received = 1 [json_name = "received"];
inline void OnTransmitInviteResponse::clear_received() {
  received_ = int64_t{0};
}
inline int64_t OnTransmitInviteResponse::_internal_received() const {
  return received_;
}
inline int64_t OnTransmitInviteResponse::received() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitInviteResponse.received)
  return _internal_received();
}
inline void OnTransmitInviteResponse::_internal_set_received(int64_t value) {
  
  received_ = value;
}
inline void OnTransmitInviteResponse::set_received(int64_t value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitInviteResponse.received)
}

// .common.v1.Peer from = 2 [json_name = "from"];
inline bool OnTransmitInviteResponse::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool OnTransmitInviteResponse::has_from() const {
  return _internal_has_from();
}
inline const ::common::v1::Peer& OnTransmitInviteResponse::_internal_from() const {
  const ::common::v1::Peer* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& OnTransmitInviteResponse::from() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitInviteResponse.from)
  return _internal_from();
}
inline void OnTransmitInviteResponse::unsafe_arena_set_allocated_from(
    ::common::v1::Peer* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.OnTransmitInviteResponse.from)
}
inline ::common::v1::Peer* OnTransmitInviteResponse::release_from() {
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* OnTransmitInviteResponse::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnTransmitInviteResponse.from)
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* OnTransmitInviteResponse::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::common::v1::Peer* OnTransmitInviteResponse::mutable_from() {
  ::common::v1::Peer* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnTransmitInviteResponse.from)
  return _msg;
}
inline void OnTransmitInviteResponse::set_allocated_from(::common::v1::Peer* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnTransmitInviteResponse.from)
}

// .common.v1.Payload payload = 3 [json_name = "payload"];
inline bool OnTransmitInviteResponse::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool OnTransmitInviteResponse::has_payload() const {
  return _internal_has_payload();
}
inline const ::common::v1::Payload& OnTransmitInviteResponse::_internal_payload() const {
  const ::common::v1::Payload* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Payload&>(
      ::common::v1::_Payload_default_instance_);
}
inline const ::common::v1::Payload& OnTransmitInviteResponse::payload() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitInviteResponse.payload)
  return _internal_payload();
}
inline void OnTransmitInviteResponse::unsafe_arena_set_allocated_payload(
    ::common::v1::Payload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.OnTransmitInviteResponse.payload)
}
inline ::common::v1::Payload* OnTransmitInviteResponse::release_payload() {
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Payload* OnTransmitInviteResponse::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnTransmitInviteResponse.payload)
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::common::v1::Payload* OnTransmitInviteResponse::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Payload>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::common::v1::Payload* OnTransmitInviteResponse::mutable_payload() {
  ::common::v1::Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnTransmitInviteResponse.payload)
  return _msg;
}
inline void OnTransmitInviteResponse::set_allocated_payload(::common::v1::Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload));
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnTransmitInviteResponse.payload)
}

// -------------------------------------------------------------------

// OnMailboxMessageResponse

// string id = 1 [json_name = "id"];
inline void OnMailboxMessageResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& OnMailboxMessageResponse::id() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnMailboxMessageResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OnMailboxMessageResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.OnMailboxMessageResponse.id)
}
inline std::string* OnMailboxMessageResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnMailboxMessageResponse.id)
  return _s;
}
inline const std::string& OnMailboxMessageResponse::_internal_id() const {
  return id_.Get();
}
inline void OnMailboxMessageResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OnMailboxMessageResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OnMailboxMessageResponse::release_id() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnMailboxMessageResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OnMailboxMessageResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnMailboxMessageResponse.id)
}

// bytes buffer = 2 [json_name = "buffer"];
inline void OnMailboxMessageResponse::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& OnMailboxMessageResponse::buffer() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnMailboxMessageResponse.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OnMailboxMessageResponse::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.OnMailboxMessageResponse.buffer)
}
inline std::string* OnMailboxMessageResponse::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnMailboxMessageResponse.buffer)
  return _s;
}
inline const std::string& OnMailboxMessageResponse::_internal_buffer() const {
  return buffer_.Get();
}
inline void OnMailboxMessageResponse::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OnMailboxMessageResponse::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OnMailboxMessageResponse::release_buffer() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnMailboxMessageResponse.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OnMailboxMessageResponse::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buffer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnMailboxMessageResponse.buffer)
}

// .common.v1.Profile from = 3 [json_name = "from"];
inline bool OnMailboxMessageResponse::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool OnMailboxMessageResponse::has_from() const {
  return _internal_has_from();
}
inline const ::common::v1::Profile& OnMailboxMessageResponse::_internal_from() const {
  const ::common::v1::Profile* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Profile&>(
      ::common::v1::_Profile_default_instance_);
}
inline const ::common::v1::Profile& OnMailboxMessageResponse::from() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnMailboxMessageResponse.from)
  return _internal_from();
}
inline void OnMailboxMessageResponse::unsafe_arena_set_allocated_from(
    ::common::v1::Profile* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.OnMailboxMessageResponse.from)
}
inline ::common::v1::Profile* OnMailboxMessageResponse::release_from() {
  
  ::common::v1::Profile* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Profile* OnMailboxMessageResponse::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnMailboxMessageResponse.from)
  
  ::common::v1::Profile* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::common::v1::Profile* OnMailboxMessageResponse::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Profile>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::common::v1::Profile* OnMailboxMessageResponse::mutable_from() {
  ::common::v1::Profile* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnMailboxMessageResponse.from)
  return _msg;
}
inline void OnMailboxMessageResponse::set_allocated_from(::common::v1::Profile* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnMailboxMessageResponse.from)
}

// .common.v1.Profile to = 4 [json_name = "to"];
inline bool OnMailboxMessageResponse::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool OnMailboxMessageResponse::has_to() const {
  return _internal_has_to();
}
inline const ::common::v1::Profile& OnMailboxMessageResponse::_internal_to() const {
  const ::common::v1::Profile* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Profile&>(
      ::common::v1::_Profile_default_instance_);
}
inline const ::common::v1::Profile& OnMailboxMessageResponse::to() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnMailboxMessageResponse.to)
  return _internal_to();
}
inline void OnMailboxMessageResponse::unsafe_arena_set_allocated_to(
    ::common::v1::Profile* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.OnMailboxMessageResponse.to)
}
inline ::common::v1::Profile* OnMailboxMessageResponse::release_to() {
  
  ::common::v1::Profile* temp = to_;
  to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Profile* OnMailboxMessageResponse::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnMailboxMessageResponse.to)
  
  ::common::v1::Profile* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::common::v1::Profile* OnMailboxMessageResponse::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Profile>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::common::v1::Profile* OnMailboxMessageResponse::mutable_to() {
  ::common::v1::Profile* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnMailboxMessageResponse.to)
  return _msg;
}
inline void OnMailboxMessageResponse::set_allocated_to(::common::v1::Profile* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnMailboxMessageResponse.to)
}

// .common.v1.Metadata metadata = 5 [json_name = "metadata"];
inline bool OnMailboxMessageResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool OnMailboxMessageResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::common::v1::Metadata& OnMailboxMessageResponse::_internal_metadata() const {
  const ::common::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Metadata&>(
      ::common::v1::_Metadata_default_instance_);
}
inline const ::common::v1::Metadata& OnMailboxMessageResponse::metadata() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnMailboxMessageResponse.metadata)
  return _internal_metadata();
}
inline void OnMailboxMessageResponse::unsafe_arena_set_allocated_metadata(
    ::common::v1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.OnMailboxMessageResponse.metadata)
}
inline ::common::v1::Metadata* OnMailboxMessageResponse::release_metadata() {
  
  ::common::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Metadata* OnMailboxMessageResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnMailboxMessageResponse.metadata)
  
  ::common::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::common::v1::Metadata* OnMailboxMessageResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::common::v1::Metadata* OnMailboxMessageResponse::mutable_metadata() {
  ::common::v1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnMailboxMessageResponse.metadata)
  return _msg;
}
inline void OnMailboxMessageResponse::set_allocated_metadata(::common::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnMailboxMessageResponse.metadata)
}

// -------------------------------------------------------------------

// OnTransmitProgressResponse

// double progress = 1 [json_name = "progress"];
inline void OnTransmitProgressResponse::clear_progress() {
  progress_ = 0;
}
inline double OnTransmitProgressResponse::_internal_progress() const {
  return progress_;
}
inline double OnTransmitProgressResponse::progress() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitProgressResponse.progress)
  return _internal_progress();
}
inline void OnTransmitProgressResponse::_internal_set_progress(double value) {
  
  progress_ = value;
}
inline void OnTransmitProgressResponse::set_progress(double value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitProgressResponse.progress)
}

// int64 received = 2 [json_name = "received"];
inline void OnTransmitProgressResponse::clear_received() {
  received_ = int64_t{0};
}
inline int64_t OnTransmitProgressResponse::_internal_received() const {
  return received_;
}
inline int64_t OnTransmitProgressResponse::received() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitProgressResponse.received)
  return _internal_received();
}
inline void OnTransmitProgressResponse::_internal_set_received(int64_t value) {
  
  received_ = value;
}
inline void OnTransmitProgressResponse::set_received(int64_t value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitProgressResponse.received)
}

// int32 current = 3 [json_name = "current"];
inline void OnTransmitProgressResponse::clear_current() {
  current_ = 0;
}
inline int32_t OnTransmitProgressResponse::_internal_current() const {
  return current_;
}
inline int32_t OnTransmitProgressResponse::current() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitProgressResponse.current)
  return _internal_current();
}
inline void OnTransmitProgressResponse::_internal_set_current(int32_t value) {
  
  current_ = value;
}
inline void OnTransmitProgressResponse::set_current(int32_t value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitProgressResponse.current)
}

// int32 total = 4 [json_name = "total"];
inline void OnTransmitProgressResponse::clear_total() {
  total_ = 0;
}
inline int32_t OnTransmitProgressResponse::_internal_total() const {
  return total_;
}
inline int32_t OnTransmitProgressResponse::total() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitProgressResponse.total)
  return _internal_total();
}
inline void OnTransmitProgressResponse::_internal_set_total(int32_t value) {
  
  total_ = value;
}
inline void OnTransmitProgressResponse::set_total(int32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitProgressResponse.total)
}

// .common.v1.Direction direction = 5 [json_name = "direction"];
inline void OnTransmitProgressResponse::clear_direction() {
  direction_ = 0;
}
inline ::common::v1::Direction OnTransmitProgressResponse::_internal_direction() const {
  return static_cast< ::common::v1::Direction >(direction_);
}
inline ::common::v1::Direction OnTransmitProgressResponse::direction() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitProgressResponse.direction)
  return _internal_direction();
}
inline void OnTransmitProgressResponse::_internal_set_direction(::common::v1::Direction value) {
  
  direction_ = value;
}
inline void OnTransmitProgressResponse::set_direction(::common::v1::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitProgressResponse.direction)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OnTransmitCompleteResponse

// .common.v1.Direction direction = 1 [json_name = "direction"];
inline void OnTransmitCompleteResponse::clear_direction() {
  direction_ = 0;
}
inline ::common::v1::Direction OnTransmitCompleteResponse::_internal_direction() const {
  return static_cast< ::common::v1::Direction >(direction_);
}
inline ::common::v1::Direction OnTransmitCompleteResponse::direction() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitCompleteResponse.direction)
  return _internal_direction();
}
inline void OnTransmitCompleteResponse::_internal_set_direction(::common::v1::Direction value) {
  
  direction_ = value;
}
inline void OnTransmitCompleteResponse::set_direction(::common::v1::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitCompleteResponse.direction)
}

// .common.v1.Payload payload = 2 [json_name = "payload"];
inline bool OnTransmitCompleteResponse::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool OnTransmitCompleteResponse::has_payload() const {
  return _internal_has_payload();
}
inline const ::common::v1::Payload& OnTransmitCompleteResponse::_internal_payload() const {
  const ::common::v1::Payload* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Payload&>(
      ::common::v1::_Payload_default_instance_);
}
inline const ::common::v1::Payload& OnTransmitCompleteResponse::payload() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitCompleteResponse.payload)
  return _internal_payload();
}
inline void OnTransmitCompleteResponse::unsafe_arena_set_allocated_payload(
    ::common::v1::Payload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.OnTransmitCompleteResponse.payload)
}
inline ::common::v1::Payload* OnTransmitCompleteResponse::release_payload() {
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Payload* OnTransmitCompleteResponse::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnTransmitCompleteResponse.payload)
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::common::v1::Payload* OnTransmitCompleteResponse::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Payload>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::common::v1::Payload* OnTransmitCompleteResponse::mutable_payload() {
  ::common::v1::Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnTransmitCompleteResponse.payload)
  return _msg;
}
inline void OnTransmitCompleteResponse::set_allocated_payload(::common::v1::Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload));
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnTransmitCompleteResponse.payload)
}

// .common.v1.Peer from = 3 [json_name = "from"];
inline bool OnTransmitCompleteResponse::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool OnTransmitCompleteResponse::has_from() const {
  return _internal_has_from();
}
inline const ::common::v1::Peer& OnTransmitCompleteResponse::_internal_from() const {
  const ::common::v1::Peer* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& OnTransmitCompleteResponse::from() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitCompleteResponse.from)
  return _internal_from();
}
inline void OnTransmitCompleteResponse::unsafe_arena_set_allocated_from(
    ::common::v1::Peer* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.OnTransmitCompleteResponse.from)
}
inline ::common::v1::Peer* OnTransmitCompleteResponse::release_from() {
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* OnTransmitCompleteResponse::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnTransmitCompleteResponse.from)
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* OnTransmitCompleteResponse::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::common::v1::Peer* OnTransmitCompleteResponse::mutable_from() {
  ::common::v1::Peer* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnTransmitCompleteResponse.from)
  return _msg;
}
inline void OnTransmitCompleteResponse::set_allocated_from(::common::v1::Peer* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnTransmitCompleteResponse.from)
}

// .common.v1.Peer to = 4 [json_name = "to"];
inline bool OnTransmitCompleteResponse::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool OnTransmitCompleteResponse::has_to() const {
  return _internal_has_to();
}
inline const ::common::v1::Peer& OnTransmitCompleteResponse::_internal_to() const {
  const ::common::v1::Peer* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& OnTransmitCompleteResponse::to() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitCompleteResponse.to)
  return _internal_to();
}
inline void OnTransmitCompleteResponse::unsafe_arena_set_allocated_to(
    ::common::v1::Peer* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.OnTransmitCompleteResponse.to)
}
inline ::common::v1::Peer* OnTransmitCompleteResponse::release_to() {
  
  ::common::v1::Peer* temp = to_;
  to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* OnTransmitCompleteResponse::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:node.motor.v1.OnTransmitCompleteResponse.to)
  
  ::common::v1::Peer* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* OnTransmitCompleteResponse::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::common::v1::Peer* OnTransmitCompleteResponse::mutable_to() {
  ::common::v1::Peer* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.OnTransmitCompleteResponse.to)
  return _msg;
}
inline void OnTransmitCompleteResponse::set_allocated_to(::common::v1::Peer* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.OnTransmitCompleteResponse.to)
}

// int64 created_at = 5 [json_name = "createdAt"];
inline void OnTransmitCompleteResponse::clear_created_at() {
  created_at_ = int64_t{0};
}
inline int64_t OnTransmitCompleteResponse::_internal_created_at() const {
  return created_at_;
}
inline int64_t OnTransmitCompleteResponse::created_at() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitCompleteResponse.created_at)
  return _internal_created_at();
}
inline void OnTransmitCompleteResponse::_internal_set_created_at(int64_t value) {
  
  created_at_ = value;
}
inline void OnTransmitCompleteResponse::set_created_at(int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitCompleteResponse.created_at)
}

// int64 received_at = 6 [json_name = "receivedAt"];
inline void OnTransmitCompleteResponse::clear_received_at() {
  received_at_ = int64_t{0};
}
inline int64_t OnTransmitCompleteResponse::_internal_received_at() const {
  return received_at_;
}
inline int64_t OnTransmitCompleteResponse::received_at() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.OnTransmitCompleteResponse.received_at)
  return _internal_received_at();
}
inline void OnTransmitCompleteResponse::_internal_set_received_at(int64_t value) {
  
  received_at_ = value;
}
inline void OnTransmitCompleteResponse::set_received_at(int64_t value) {
  _internal_set_received_at(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.OnTransmitCompleteResponse.received_at)
}

// map<int32, bool> results = 7 [json_name = "results"];
inline int OnTransmitCompleteResponse::_internal_results_size() const {
  return results_.size();
}
inline int OnTransmitCompleteResponse::results_size() const {
  return _internal_results_size();
}
inline void OnTransmitCompleteResponse::clear_results() {
  results_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
OnTransmitCompleteResponse::_internal_results() const {
  return results_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
OnTransmitCompleteResponse::results() const {
  // @@protoc_insertion_point(field_map:node.motor.v1.OnTransmitCompleteResponse.results)
  return _internal_results();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
OnTransmitCompleteResponse::_internal_mutable_results() {
  return results_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
OnTransmitCompleteResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_map:node.motor.v1.OnTransmitCompleteResponse.results)
  return _internal_mutable_results();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace motor
}  // namespace node

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fmotor_2fv1_2fresponse_2eproto
