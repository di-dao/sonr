// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package blocks

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func LoginHeader() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex flex-col w-full justify-center items-center space-y-2 gap-1 mx-auto text-center max-w-lg\"><div class=\"w-28 h-28 rounded-full bg-gradient-to-t from-teal-500 via-cyan-600 to-blue-700 border-2 border-stone-400/90 mt-3\"></div><sl-divider style=\"--spacing: 0.6rem;\"></sl-divider><h1 class=\"text-3xl font-semibold\">Login</h1><p class=\"text-stone-300 text-md text-center py-2 text-relaxed\">Begin your <sl-tooltip content=\"Access every IBC enabled blockchain with a secure Interchain Account.\" placement=\"top\"><span class=\"font-semibold text-stone-200\">Crypto Journey</span></sl-tooltip> seamlessly and access decentralized services <sl-tooltip content=\"End to End encryption from the Validator to the client. Multi-Party Computed Wallets. Secure communication channel over Matrix.\" placement=\"top\"><span class=\"font-semibold text-stone-200\">the Safe Way</span></sl-tooltip> by creating a <sl-tooltip content=\"Decentralized Identity representation on the Sonr Blockchain. Anonymous and Encrypted.\" placement=\"top\"><span class=\"font-semibold text-stone-200\">Sonr Identity</span></sl-tooltip></p></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func RegisterHeader() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func ChatHeader() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"h-[64px] flex flex-row border-b-[0.5px] border-stone-600 px-4 justify-between items-center py-3\"><div class=\"flex flex-row justify-start items-center\"><sl-avatar label=\"User avatar\"></sl-avatar><h1 class=\"text-stone-900/90 dark:text-stone-100/90 text-xl font-semibold ml-3\">User Name</h1></div><sl-dropdown><sl-icon-button slot=\"trigger\" name=\"three-dots-vertical\" label=\"Edit\" style=\"font-size: 1.5rem;\"></sl-icon-button> <sl-menu><sl-menu-item>Dropdown Item 1</sl-menu-item> <sl-menu-item>Dropdown Item 2</sl-menu-item> <sl-menu-item>Dropdown Item 3</sl-menu-item> <sl-divider></sl-divider> <sl-menu-item type=\"checkbox\" checked>Checkbox</sl-menu-item> <sl-menu-item disabled>Disabled</sl-menu-item> <sl-menu-item>Prefix <sl-icon slot=\"prefix\" name=\"gift\"></sl-icon></sl-menu-item> <sl-menu-item>Suffix Icon <sl-icon slot=\"suffix\" name=\"heart\"></sl-icon></sl-menu-item></sl-menu></sl-dropdown></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func ConversationsHeader() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"grid grid-cols-2 h-fit px-4 py-5 gap-y-3 pb-5\"><div class=\"col-span-2\"><div class=\"flex flex-row justify-between\"><h1 class=\"text-stone-900/90 dark:text-stone-100/90 text-2xl font-semibold\">Chats</h1><sl-icon-button size=\"large\" name=\"plus-circle\" label=\"Settings\"></sl-icon-button></div></div><div class=\"col-span-2\"><sl-input placeholder=\"Search Conversations\" size=\"medium\"><sl-icon name=\"search\" slot=\"prefix\"></sl-icon></sl-input></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
