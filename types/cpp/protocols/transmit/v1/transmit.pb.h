// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols/transmit/v1/transmit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocols_2ftransmit_2fv1_2ftransmit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocols_2ftransmit_2fv1_2ftransmit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/core.pb.h"
#include "common/v1/data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocols_2ftransmit_2fv1_2ftransmit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocols_2ftransmit_2fv1_2ftransmit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto;
namespace protocols {
namespace transmit {
namespace v1 {
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionItem;
struct SessionItemDefaultTypeInternal;
extern SessionItemDefaultTypeInternal _SessionItem_default_instance_;
class SessionPayload;
struct SessionPayloadDefaultTypeInternal;
extern SessionPayloadDefaultTypeInternal _SessionPayload_default_instance_;
class Session_ResultsEntry_DoNotUse;
struct Session_ResultsEntry_DoNotUseDefaultTypeInternal;
extern Session_ResultsEntry_DoNotUseDefaultTypeInternal _Session_ResultsEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace transmit
}  // namespace protocols
PROTOBUF_NAMESPACE_OPEN
template<> ::protocols::transmit::v1::Session* Arena::CreateMaybeMessage<::protocols::transmit::v1::Session>(Arena*);
template<> ::protocols::transmit::v1::SessionItem* Arena::CreateMaybeMessage<::protocols::transmit::v1::SessionItem>(Arena*);
template<> ::protocols::transmit::v1::SessionPayload* Arena::CreateMaybeMessage<::protocols::transmit::v1::SessionPayload>(Arena*);
template<> ::protocols::transmit::v1::Session_ResultsEntry_DoNotUse* Arena::CreateMaybeMessage<::protocols::transmit::v1::Session_ResultsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocols {
namespace transmit {
namespace v1 {

// ===================================================================

class Session_ResultsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Session_ResultsEntry_DoNotUse, 
    int32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Session_ResultsEntry_DoNotUse, 
    int32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  Session_ResultsEntry_DoNotUse();
  explicit constexpr Session_ResultsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Session_ResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Session_ResultsEntry_DoNotUse& other);
  static const Session_ResultsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Session_ResultsEntry_DoNotUse*>(&_Session_ResultsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.transmit.v1.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit constexpr Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Session& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.transmit.v1.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 6,
    kResultsFieldNumber = 8,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kPayloadFieldNumber = 4,
    kDirectionFieldNumber = 1,
    kCurrentIndexFieldNumber = 7,
    kLastUpdatedFieldNumber = 5,
  };
  // repeated .protocols.transmit.v1.SessionItem items = 6 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::protocols::transmit::v1::SessionItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocols::transmit::v1::SessionItem >*
      mutable_items();
  private:
  const ::protocols::transmit::v1::SessionItem& _internal_items(int index) const;
  ::protocols::transmit::v1::SessionItem* _internal_add_items();
  public:
  const ::protocols::transmit::v1::SessionItem& items(int index) const;
  ::protocols::transmit::v1::SessionItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocols::transmit::v1::SessionItem >&
      items() const;

  // map<int32, bool> results = 8 [json_name = "results"];
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
      _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
      _internal_mutable_results();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
      results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
      mutable_results();

  // .common.v1.Peer from = 2 [json_name = "from"];
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::common::v1::Peer& from() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_from();
  ::common::v1::Peer* mutable_from();
  void set_allocated_from(::common::v1::Peer* from);
  private:
  const ::common::v1::Peer& _internal_from() const;
  ::common::v1::Peer* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::common::v1::Peer* from);
  ::common::v1::Peer* unsafe_arena_release_from();

  // .common.v1.Peer to = 3 [json_name = "to"];
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::common::v1::Peer& to() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_to();
  ::common::v1::Peer* mutable_to();
  void set_allocated_to(::common::v1::Peer* to);
  private:
  const ::common::v1::Peer& _internal_to() const;
  ::common::v1::Peer* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::common::v1::Peer* to);
  ::common::v1::Peer* unsafe_arena_release_to();

  // .common.v1.Payload payload = 4 [json_name = "payload"];
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::common::v1::Payload& payload() const;
  PROTOBUF_NODISCARD ::common::v1::Payload* release_payload();
  ::common::v1::Payload* mutable_payload();
  void set_allocated_payload(::common::v1::Payload* payload);
  private:
  const ::common::v1::Payload& _internal_payload() const;
  ::common::v1::Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::common::v1::Payload* payload);
  ::common::v1::Payload* unsafe_arena_release_payload();

  // .common.v1.Direction direction = 1 [json_name = "direction"];
  void clear_direction();
  ::common::v1::Direction direction() const;
  void set_direction(::common::v1::Direction value);
  private:
  ::common::v1::Direction _internal_direction() const;
  void _internal_set_direction(::common::v1::Direction value);
  public:

  // int32 current_index = 7 [json_name = "currentIndex"];
  void clear_current_index();
  int32_t current_index() const;
  void set_current_index(int32_t value);
  private:
  int32_t _internal_current_index() const;
  void _internal_set_current_index(int32_t value);
  public:

  // int64 last_updated = 5 [json_name = "lastUpdated"];
  void clear_last_updated();
  int64_t last_updated() const;
  void set_last_updated(int64_t value);
  private:
  int64_t _internal_last_updated() const;
  void _internal_set_last_updated(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.transmit.v1.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocols::transmit::v1::SessionItem > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Session_ResultsEntry_DoNotUse,
      int32_t, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> results_;
  ::common::v1::Peer* from_;
  ::common::v1::Peer* to_;
  ::common::v1::Payload* payload_;
  int direction_;
  int32_t current_index_;
  int64_t last_updated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocols_2ftransmit_2fv1_2ftransmit_2eproto;
};
// -------------------------------------------------------------------

class SessionItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.transmit.v1.SessionItem) */ {
 public:
  inline SessionItem() : SessionItem(nullptr) {}
  ~SessionItem() override;
  explicit constexpr SessionItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionItem(const SessionItem& from);
  SessionItem(SessionItem&& from) noexcept
    : SessionItem() {
    *this = ::std::move(from);
  }

  inline SessionItem& operator=(const SessionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionItem& operator=(SessionItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionItem* internal_default_instance() {
    return reinterpret_cast<const SessionItem*>(
               &_SessionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SessionItem& a, SessionItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.transmit.v1.SessionItem";
  }
  protected:
  explicit SessionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 8,
    kItemFieldNumber = 3,
    kIndexFieldNumber = 1,
    kCountFieldNumber = 2,
    kWrittenFieldNumber = 4,
    kSizeFieldNumber = 5,
    kTotalSizeFieldNumber = 6,
    kDirectionFieldNumber = 7,
  };
  // string path = 8 [json_name = "path"];
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .common.v1.FileItem item = 3 [json_name = "item"];
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::common::v1::FileItem& item() const;
  PROTOBUF_NODISCARD ::common::v1::FileItem* release_item();
  ::common::v1::FileItem* mutable_item();
  void set_allocated_item(::common::v1::FileItem* item);
  private:
  const ::common::v1::FileItem& _internal_item() const;
  ::common::v1::FileItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::common::v1::FileItem* item);
  ::common::v1::FileItem* unsafe_arena_release_item();

  // int32 index = 1 [json_name = "index"];
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 count = 2 [json_name = "count"];
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // int64 written = 4 [json_name = "written"];
  void clear_written();
  int64_t written() const;
  void set_written(int64_t value);
  private:
  int64_t _internal_written() const;
  void _internal_set_written(int64_t value);
  public:

  // int64 size = 5 [json_name = "size"];
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 total_size = 6 [json_name = "totalSize"];
  void clear_total_size();
  int64_t total_size() const;
  void set_total_size(int64_t value);
  private:
  int64_t _internal_total_size() const;
  void _internal_set_total_size(int64_t value);
  public:

  // .common.v1.Direction direction = 7 [json_name = "direction"];
  void clear_direction();
  ::common::v1::Direction direction() const;
  void set_direction(::common::v1::Direction value);
  private:
  ::common::v1::Direction _internal_direction() const;
  void _internal_set_direction(::common::v1::Direction value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.transmit.v1.SessionItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::common::v1::FileItem* item_;
  int32_t index_;
  int32_t count_;
  int64_t written_;
  int64_t size_;
  int64_t total_size_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocols_2ftransmit_2fv1_2ftransmit_2eproto;
};
// -------------------------------------------------------------------

class SessionPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.transmit.v1.SessionPayload) */ {
 public:
  inline SessionPayload() : SessionPayload(nullptr) {}
  ~SessionPayload() override;
  explicit constexpr SessionPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionPayload(const SessionPayload& from);
  SessionPayload(SessionPayload&& from) noexcept
    : SessionPayload() {
    *this = ::std::move(from);
  }

  inline SessionPayload& operator=(const SessionPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionPayload& operator=(SessionPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionPayload* internal_default_instance() {
    return reinterpret_cast<const SessionPayload*>(
               &_SessionPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SessionPayload& a, SessionPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionPayload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.transmit.v1.SessionPayload";
  }
  protected:
  explicit SessionPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // .common.v1.Payload payload = 1 [json_name = "payload"];
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::common::v1::Payload& payload() const;
  PROTOBUF_NODISCARD ::common::v1::Payload* release_payload();
  ::common::v1::Payload* mutable_payload();
  void set_allocated_payload(::common::v1::Payload* payload);
  private:
  const ::common::v1::Payload& _internal_payload() const;
  ::common::v1::Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::common::v1::Payload* payload);
  ::common::v1::Payload* unsafe_arena_release_payload();

  // .common.v1.Direction direction = 2 [json_name = "direction"];
  void clear_direction();
  ::common::v1::Direction direction() const;
  void set_direction(::common::v1::Direction value);
  private:
  ::common::v1::Direction _internal_direction() const;
  void _internal_set_direction(::common::v1::Direction value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.transmit.v1.SessionPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::v1::Payload* payload_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocols_2ftransmit_2fv1_2ftransmit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Session

// .common.v1.Direction direction = 1 [json_name = "direction"];
inline void Session::clear_direction() {
  direction_ = 0;
}
inline ::common::v1::Direction Session::_internal_direction() const {
  return static_cast< ::common::v1::Direction >(direction_);
}
inline ::common::v1::Direction Session::direction() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.Session.direction)
  return _internal_direction();
}
inline void Session::_internal_set_direction(::common::v1::Direction value) {
  
  direction_ = value;
}
inline void Session::set_direction(::common::v1::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.Session.direction)
}

// .common.v1.Peer from = 2 [json_name = "from"];
inline bool Session::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool Session::has_from() const {
  return _internal_has_from();
}
inline const ::common::v1::Peer& Session::_internal_from() const {
  const ::common::v1::Peer* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& Session::from() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.Session.from)
  return _internal_from();
}
inline void Session::unsafe_arena_set_allocated_from(
    ::common::v1::Peer* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.transmit.v1.Session.from)
}
inline ::common::v1::Peer* Session::release_from() {
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* Session::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:protocols.transmit.v1.Session.from)
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* Session::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::common::v1::Peer* Session::mutable_from() {
  ::common::v1::Peer* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:protocols.transmit.v1.Session.from)
  return _msg;
}
inline void Session::set_allocated_from(::common::v1::Peer* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:protocols.transmit.v1.Session.from)
}

// .common.v1.Peer to = 3 [json_name = "to"];
inline bool Session::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool Session::has_to() const {
  return _internal_has_to();
}
inline const ::common::v1::Peer& Session::_internal_to() const {
  const ::common::v1::Peer* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& Session::to() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.Session.to)
  return _internal_to();
}
inline void Session::unsafe_arena_set_allocated_to(
    ::common::v1::Peer* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.transmit.v1.Session.to)
}
inline ::common::v1::Peer* Session::release_to() {
  
  ::common::v1::Peer* temp = to_;
  to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* Session::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:protocols.transmit.v1.Session.to)
  
  ::common::v1::Peer* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* Session::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::common::v1::Peer* Session::mutable_to() {
  ::common::v1::Peer* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:protocols.transmit.v1.Session.to)
  return _msg;
}
inline void Session::set_allocated_to(::common::v1::Peer* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:protocols.transmit.v1.Session.to)
}

// .common.v1.Payload payload = 4 [json_name = "payload"];
inline bool Session::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool Session::has_payload() const {
  return _internal_has_payload();
}
inline const ::common::v1::Payload& Session::_internal_payload() const {
  const ::common::v1::Payload* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Payload&>(
      ::common::v1::_Payload_default_instance_);
}
inline const ::common::v1::Payload& Session::payload() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.Session.payload)
  return _internal_payload();
}
inline void Session::unsafe_arena_set_allocated_payload(
    ::common::v1::Payload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.transmit.v1.Session.payload)
}
inline ::common::v1::Payload* Session::release_payload() {
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Payload* Session::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:protocols.transmit.v1.Session.payload)
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::common::v1::Payload* Session::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Payload>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::common::v1::Payload* Session::mutable_payload() {
  ::common::v1::Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:protocols.transmit.v1.Session.payload)
  return _msg;
}
inline void Session::set_allocated_payload(::common::v1::Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload));
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:protocols.transmit.v1.Session.payload)
}

// int64 last_updated = 5 [json_name = "lastUpdated"];
inline void Session::clear_last_updated() {
  last_updated_ = int64_t{0};
}
inline int64_t Session::_internal_last_updated() const {
  return last_updated_;
}
inline int64_t Session::last_updated() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.Session.last_updated)
  return _internal_last_updated();
}
inline void Session::_internal_set_last_updated(int64_t value) {
  
  last_updated_ = value;
}
inline void Session::set_last_updated(int64_t value) {
  _internal_set_last_updated(value);
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.Session.last_updated)
}

// repeated .protocols.transmit.v1.SessionItem items = 6 [json_name = "items"];
inline int Session::_internal_items_size() const {
  return items_.size();
}
inline int Session::items_size() const {
  return _internal_items_size();
}
inline void Session::clear_items() {
  items_.Clear();
}
inline ::protocols::transmit::v1::SessionItem* Session::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:protocols.transmit.v1.Session.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocols::transmit::v1::SessionItem >*
Session::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:protocols.transmit.v1.Session.items)
  return &items_;
}
inline const ::protocols::transmit::v1::SessionItem& Session::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::protocols::transmit::v1::SessionItem& Session::items(int index) const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.Session.items)
  return _internal_items(index);
}
inline ::protocols::transmit::v1::SessionItem* Session::_internal_add_items() {
  return items_.Add();
}
inline ::protocols::transmit::v1::SessionItem* Session::add_items() {
  ::protocols::transmit::v1::SessionItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:protocols.transmit.v1.Session.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocols::transmit::v1::SessionItem >&
Session::items() const {
  // @@protoc_insertion_point(field_list:protocols.transmit.v1.Session.items)
  return items_;
}

// int32 current_index = 7 [json_name = "currentIndex"];
inline void Session::clear_current_index() {
  current_index_ = 0;
}
inline int32_t Session::_internal_current_index() const {
  return current_index_;
}
inline int32_t Session::current_index() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.Session.current_index)
  return _internal_current_index();
}
inline void Session::_internal_set_current_index(int32_t value) {
  
  current_index_ = value;
}
inline void Session::set_current_index(int32_t value) {
  _internal_set_current_index(value);
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.Session.current_index)
}

// map<int32, bool> results = 8 [json_name = "results"];
inline int Session::_internal_results_size() const {
  return results_.size();
}
inline int Session::results_size() const {
  return _internal_results_size();
}
inline void Session::clear_results() {
  results_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
Session::_internal_results() const {
  return results_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
Session::results() const {
  // @@protoc_insertion_point(field_map:protocols.transmit.v1.Session.results)
  return _internal_results();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
Session::_internal_mutable_results() {
  return results_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
Session::mutable_results() {
  // @@protoc_insertion_point(field_mutable_map:protocols.transmit.v1.Session.results)
  return _internal_mutable_results();
}

// -------------------------------------------------------------------

// SessionItem

// int32 index = 1 [json_name = "index"];
inline void SessionItem::clear_index() {
  index_ = 0;
}
inline int32_t SessionItem::_internal_index() const {
  return index_;
}
inline int32_t SessionItem::index() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.SessionItem.index)
  return _internal_index();
}
inline void SessionItem::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void SessionItem::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.SessionItem.index)
}

// int32 count = 2 [json_name = "count"];
inline void SessionItem::clear_count() {
  count_ = 0;
}
inline int32_t SessionItem::_internal_count() const {
  return count_;
}
inline int32_t SessionItem::count() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.SessionItem.count)
  return _internal_count();
}
inline void SessionItem::_internal_set_count(int32_t value) {
  
  count_ = value;
}
inline void SessionItem::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.SessionItem.count)
}

// .common.v1.FileItem item = 3 [json_name = "item"];
inline bool SessionItem::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool SessionItem::has_item() const {
  return _internal_has_item();
}
inline const ::common::v1::FileItem& SessionItem::_internal_item() const {
  const ::common::v1::FileItem* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::FileItem&>(
      ::common::v1::_FileItem_default_instance_);
}
inline const ::common::v1::FileItem& SessionItem::item() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.SessionItem.item)
  return _internal_item();
}
inline void SessionItem::unsafe_arena_set_allocated_item(
    ::common::v1::FileItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.transmit.v1.SessionItem.item)
}
inline ::common::v1::FileItem* SessionItem::release_item() {
  
  ::common::v1::FileItem* temp = item_;
  item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::FileItem* SessionItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:protocols.transmit.v1.SessionItem.item)
  
  ::common::v1::FileItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::common::v1::FileItem* SessionItem::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::FileItem>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::common::v1::FileItem* SessionItem::mutable_item() {
  ::common::v1::FileItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:protocols.transmit.v1.SessionItem.item)
  return _msg;
}
inline void SessionItem::set_allocated_item(::common::v1::FileItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:protocols.transmit.v1.SessionItem.item)
}

// int64 written = 4 [json_name = "written"];
inline void SessionItem::clear_written() {
  written_ = int64_t{0};
}
inline int64_t SessionItem::_internal_written() const {
  return written_;
}
inline int64_t SessionItem::written() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.SessionItem.written)
  return _internal_written();
}
inline void SessionItem::_internal_set_written(int64_t value) {
  
  written_ = value;
}
inline void SessionItem::set_written(int64_t value) {
  _internal_set_written(value);
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.SessionItem.written)
}

// int64 size = 5 [json_name = "size"];
inline void SessionItem::clear_size() {
  size_ = int64_t{0};
}
inline int64_t SessionItem::_internal_size() const {
  return size_;
}
inline int64_t SessionItem::size() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.SessionItem.size)
  return _internal_size();
}
inline void SessionItem::_internal_set_size(int64_t value) {
  
  size_ = value;
}
inline void SessionItem::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.SessionItem.size)
}

// int64 total_size = 6 [json_name = "totalSize"];
inline void SessionItem::clear_total_size() {
  total_size_ = int64_t{0};
}
inline int64_t SessionItem::_internal_total_size() const {
  return total_size_;
}
inline int64_t SessionItem::total_size() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.SessionItem.total_size)
  return _internal_total_size();
}
inline void SessionItem::_internal_set_total_size(int64_t value) {
  
  total_size_ = value;
}
inline void SessionItem::set_total_size(int64_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.SessionItem.total_size)
}

// .common.v1.Direction direction = 7 [json_name = "direction"];
inline void SessionItem::clear_direction() {
  direction_ = 0;
}
inline ::common::v1::Direction SessionItem::_internal_direction() const {
  return static_cast< ::common::v1::Direction >(direction_);
}
inline ::common::v1::Direction SessionItem::direction() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.SessionItem.direction)
  return _internal_direction();
}
inline void SessionItem::_internal_set_direction(::common::v1::Direction value) {
  
  direction_ = value;
}
inline void SessionItem::set_direction(::common::v1::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.SessionItem.direction)
}

// string path = 8 [json_name = "path"];
inline void SessionItem::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& SessionItem::path() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.SessionItem.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionItem::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.SessionItem.path)
}
inline std::string* SessionItem::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:protocols.transmit.v1.SessionItem.path)
  return _s;
}
inline const std::string& SessionItem::_internal_path() const {
  return path_.Get();
}
inline void SessionItem::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionItem::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionItem::release_path() {
  // @@protoc_insertion_point(field_release:protocols.transmit.v1.SessionItem.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionItem::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocols.transmit.v1.SessionItem.path)
}

// -------------------------------------------------------------------

// SessionPayload

// .common.v1.Payload payload = 1 [json_name = "payload"];
inline bool SessionPayload::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool SessionPayload::has_payload() const {
  return _internal_has_payload();
}
inline const ::common::v1::Payload& SessionPayload::_internal_payload() const {
  const ::common::v1::Payload* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Payload&>(
      ::common::v1::_Payload_default_instance_);
}
inline const ::common::v1::Payload& SessionPayload::payload() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.SessionPayload.payload)
  return _internal_payload();
}
inline void SessionPayload::unsafe_arena_set_allocated_payload(
    ::common::v1::Payload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.transmit.v1.SessionPayload.payload)
}
inline ::common::v1::Payload* SessionPayload::release_payload() {
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Payload* SessionPayload::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:protocols.transmit.v1.SessionPayload.payload)
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::common::v1::Payload* SessionPayload::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Payload>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::common::v1::Payload* SessionPayload::mutable_payload() {
  ::common::v1::Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:protocols.transmit.v1.SessionPayload.payload)
  return _msg;
}
inline void SessionPayload::set_allocated_payload(::common::v1::Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload));
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:protocols.transmit.v1.SessionPayload.payload)
}

// .common.v1.Direction direction = 2 [json_name = "direction"];
inline void SessionPayload::clear_direction() {
  direction_ = 0;
}
inline ::common::v1::Direction SessionPayload::_internal_direction() const {
  return static_cast< ::common::v1::Direction >(direction_);
}
inline ::common::v1::Direction SessionPayload::direction() const {
  // @@protoc_insertion_point(field_get:protocols.transmit.v1.SessionPayload.direction)
  return _internal_direction();
}
inline void SessionPayload::_internal_set_direction(::common::v1::Direction value) {
  
  direction_ = value;
}
inline void SessionPayload::set_direction(::common::v1::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:protocols.transmit.v1.SessionPayload.direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace transmit
}  // namespace protocols

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocols_2ftransmit_2fv1_2ftransmit_2eproto
