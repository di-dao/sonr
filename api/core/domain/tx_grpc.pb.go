// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: core/domain/tx.proto

package domain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_CreateUsernameRecord_FullMethodName = "/core.domain.Msg/CreateUsernameRecord"
	Msg_UpdateUsernameRecord_FullMethodName = "/core.domain.Msg/UpdateUsernameRecord"
	Msg_DeleteUsernameRecord_FullMethodName = "/core.domain.Msg/DeleteUsernameRecord"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// CreateUsernameRecord creates a new UsernameRecord.
	CreateUsernameRecord(ctx context.Context, in *MsgCreateUsernameRecords, opts ...grpc.CallOption) (*MsgCreateUsernameRecordsResponse, error)
	// UpdateUsernameRecord updates an existing UsernameRecord.
	UpdateUsernameRecord(ctx context.Context, in *MsgUpdateUsernameRecords, opts ...grpc.CallOption) (*MsgUpdateUsernameRecordsResponse, error)
	// DeleteUsernameRecord deletes an existing UsernameRecord.
	DeleteUsernameRecord(ctx context.Context, in *MsgDeleteUsernameRecords, opts ...grpc.CallOption) (*MsgDeleteUsernameRecordsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateUsernameRecord(ctx context.Context, in *MsgCreateUsernameRecords, opts ...grpc.CallOption) (*MsgCreateUsernameRecordsResponse, error) {
	out := new(MsgCreateUsernameRecordsResponse)
	err := c.cc.Invoke(ctx, Msg_CreateUsernameRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateUsernameRecord(ctx context.Context, in *MsgUpdateUsernameRecords, opts ...grpc.CallOption) (*MsgUpdateUsernameRecordsResponse, error) {
	out := new(MsgUpdateUsernameRecordsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateUsernameRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteUsernameRecord(ctx context.Context, in *MsgDeleteUsernameRecords, opts ...grpc.CallOption) (*MsgDeleteUsernameRecordsResponse, error) {
	out := new(MsgDeleteUsernameRecordsResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteUsernameRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// CreateUsernameRecord creates a new UsernameRecord.
	CreateUsernameRecord(context.Context, *MsgCreateUsernameRecords) (*MsgCreateUsernameRecordsResponse, error)
	// UpdateUsernameRecord updates an existing UsernameRecord.
	UpdateUsernameRecord(context.Context, *MsgUpdateUsernameRecords) (*MsgUpdateUsernameRecordsResponse, error)
	// DeleteUsernameRecord deletes an existing UsernameRecord.
	DeleteUsernameRecord(context.Context, *MsgDeleteUsernameRecords) (*MsgDeleteUsernameRecordsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateUsernameRecord(context.Context, *MsgCreateUsernameRecords) (*MsgCreateUsernameRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsernameRecord not implemented")
}
func (UnimplementedMsgServer) UpdateUsernameRecord(context.Context, *MsgUpdateUsernameRecords) (*MsgUpdateUsernameRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsernameRecord not implemented")
}
func (UnimplementedMsgServer) DeleteUsernameRecord(context.Context, *MsgDeleteUsernameRecords) (*MsgDeleteUsernameRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsernameRecord not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateUsernameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateUsernameRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateUsernameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateUsernameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateUsernameRecord(ctx, req.(*MsgCreateUsernameRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateUsernameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateUsernameRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateUsernameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateUsernameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateUsernameRecord(ctx, req.(*MsgUpdateUsernameRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteUsernameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteUsernameRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteUsernameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteUsernameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteUsernameRecord(ctx, req.(*MsgDeleteUsernameRecords))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.domain.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUsernameRecord",
			Handler:    _Msg_CreateUsernameRecord_Handler,
		},
		{
			MethodName: "UpdateUsernameRecord",
			Handler:    _Msg_UpdateUsernameRecord_Handler,
		},
		{
			MethodName: "DeleteUsernameRecord",
			Handler:    _Msg_DeleteUsernameRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/domain/tx.proto",
}
