syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrhq.protocol.vault.v1;

import "google/api/annotations.proto";
import "protocol/vault/v1/models.proto";
import "sonr/identity/did.proto";

option go_package = "github.com/sonr-hq/sonr/x/identity/types/vault/v1";

// ChallengRequest is the request to generate a challenge.
message ChallengeRequest {
  // Optional RP ID to use for the challenge.
  string rp_id = 1;

  // Username to use for the AlsoKnownAs field in the didDoc
  string username = 2;
}

// ChallengeResponse is the response to a Challenge request.
message ChallengeResponse {
  string session_id = 1;
  string creation_options = 2;
  string rp_name = 3;
  repeated string rp_origins = 4;
  string rp_icon = 5;
}

// RegisterRequest is the request to register a new account.
message NewWalletRequest {
  string session_id = 1;
  string credential_response = 2;
  string prefix = 3; // optional
  int32 threshold = 4; // optional
}

// RegisterResponse is the response to a Register request.
message NewWalletResponse {
  bool success = 1;
  string address = 2;
  sonr.identity.DidDocument did_document = 3;
}

// CreateAccountRequest is the request to CreateAccount a new key from the private key.
message CreateAccountRequest {
  string prefix = 1;
  string account_name = 2;
  sonr.identity.DidDocument did_document = 3;
}

// CreateAccountResponse is the response to a CreateAccount request.
message CreateAccountResponse {
  bytes id = 1;
  string address = 2;
  sonr.identity.DidDocument did_document = 3;
}

// ListAccountsRequest is the request to list the accounts.
message ListAccountsRequest {
  sonr.identity.DidDocument did_document = 1;
}

// ListAccountsResponse is the response to a ListAccounts request.
message ListAccountsResponse {
  repeated sonr.identity.DidDocument did_documents = 1;
}

// DeleteAccountRequest is the request to delete an account.
message DeleteAccountRequest {
  sonr.identity.DidDocument did_document = 1;
}

// DeleteAccountResponse is the response to a DeleteAccount request.
message DeleteAccountResponse {
  bool success = 1;
}

// SignTransactionRequest is the request to sign data with the private key.
message SignTransactionRequest {
  sonr.identity.DidDocument did_document = 1;
  bytes data = 2;
}

// SignTransactionResponse is the response to a Sign request.
message SignTransactionResponse {
  bytes id = 1;
  bytes signature = 2;
  bytes data = 3;
  string creator = 4;
}

// RefreshRequest is the request to refresh the keypair.
message RefreshRequest {
  sonr.identity.DidDocument did_document = 1;
}

// RefreshResponse is the response to a Refresh request.
message RefreshResponse {
  bytes id = 1;
  string address = 2;
  sonr.identity.DidDocument did_document = 3;
}

// Vault is the service used for managing a node's keypair.
service Vault {
  // Challenge generates a challenge and returns it.
  rpc Challenge(ChallengeRequest) returns (ChallengeResponse) {
    option (google.api.http).get = "/sonr-io/highway/vault/challenge/{rp_id}/{username}";
  }

  // NewWallet creates a new Webauthn credential and returns it.
  rpc NewWallet(NewWalletRequest) returns (NewWalletResponse) {
    option (google.api.http) = {
      post: "/sonr-io/highway/vault/new-wallet"
      body: "*"
    };
  }

  // CreateAccount creates a new Bip32 child key and returns the configuration.
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
    option (google.api.http) = {
      post: "/sonr-io/highway/vault/create-account"
      body: "*"
    };
  }

  // ListAccounts lists the accounts and returns the configuration.
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
    option (google.api.http) = {
      post: "/sonr-io/highway/vault/list-accounts"
      body: "*"
    };
  }

  // DeleteAccount deletes the account and returns the configuration.
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
    option (google.api.http) = {
      post: "/sonr-io/highway/vault/delete-account"
      body: "*"
    };
  }

  // SignTransaction signs the data with the Wallet and returns the signature.
  rpc SignTransaction(SignTransactionRequest) returns (SignTransactionResponse) {
    option (google.api.http) = {
      post: "/sonr-io/highway/vault/sign-transaction"
      body: "*"
    };
  }

  // Refresh refreshes the Wallet shares and returns the updated configuration.
  rpc Refresh(RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
      post: "/sonr-io/highway/vault/refresh"
      body: "*"
    };
  }
}
