syntax = "proto3";
package data;
// Require Go Package
option go_package = "/data";

// Cardinal: Designation for the Compass Direction Value
enum Cardinal {
  N = 0;     // North
  NbE = 1;   // North by East
  NNE = 2;   // North North East
  NEbN = 3;  // NorthEast by North
  NE = 4;    // North East
  NEbE = 5;  // NorthEast by East
  ENE = 6;   // East North East
  EbN = 7;   // East by North
  E = 8;     // East
  EbS = 9;   // East by South
  ESE = 10;  // East South East
  SEbE = 11; // SouthEast by East
  SE = 12;   // South East
  SEbS = 13; // SouthEast by South
  SSE = 14;  // South South East
  SbE = 15;  // South by East
  S = 16;    // South
  SbW = 17;  // South by West
  SSW = 18;  // South South West
  SWbS = 19; // SouthWest by South
  SW = 20;   // South West
  SWbW = 21; // SouthWest by West
  WSW = 22;  // West South West
  WbS = 23;  // West by South
  W = 24;    // West
  WbN = 25;  // West by North
  WNW = 26;  // West North West
  NWbW = 27; // North West by West
  NW = 28;   // North West
  NWbN = 29; // North West by North
  NNW = 30;  // North North West
  NbW = 31;  // North by West
}

// List of Linker Peers
message Linkers { repeated Peer list = 1; }

// For Info about Lobby
message Lobby {
  Room room = 1;               // Type of Lobby
  map<string, Peer> peers = 2; // Total Data of Peers
  Status status = 3;

  enum Status {
    EMPTY = 0; // When there are No Peers in Local Room
    FEW = 1;   // When there are <= 5 Peers in Local Room
    MANY = 2;  // When there are > 5 Peers in Local Room
  }
}

// Location from GeoIP and OLC information
message Location {
  // Location Latitude
  double latitude = 1;

  // Location Longitude
  double longitude = 2;

  // Location Placemark Information - Generated
  Placemark placemark = 3;

  // Contains detailed placemark information.
  message Placemark {
    // The name associated with the placemark.
    string name = 1;

    // The street associated with the placemark.
    string street = 2;

    // The abbreviated country name, according to the two letter (alpha-2) [ISO
    // standard](https://www.iso.org/iso-3166-country-codes.html).
    string isoCountryCode = 3;

    // The name of the country associated with the placemark.
    string country = 4;

    // The postal code associated with the placemark.
    string postalCode = 5;

    // The name of the state or province associated with the placemark.
    string administrativeArea = 6;

    // Additional administrative area information for the placemark.
    string subAdministrativeArea = 7;

    // The name of the city associated with the placemark.
    string locality = 8;

    // Additional city-level information for the placemark.
    string subLocality = 9;

    // The street address associated with the placemark.
    string thoroughfare = 10;

    // Additional street address information for the placemark.
    string subThoroughfare = 11;
  }
}

// Holistic Info with all Peer Data
message Member {
  string sName = 1;     // Member Sonr Domain
  string pushToken = 2; // Member Push Token
  Reach reach = 3;      // Member Reach
  Peer active = 4; // Defaults to Primary Device if Online, otherwise uses the
                   // most recent active device.
  repeated Peer associated = 5; // If Primary Device is Online, additional
                                // devices will be grouped here.

  // Status of Member
  enum Reach {
    ONLINE = 0;  // Member is Online
    OFFLINE = 1; // Member is Offline
    GHOST = 2;   // Member is Ghost Mode (Not Receiving)
  }
}

// Basic Info Sent to Peers to Establish Connections
message Peer {
  string sName = 1;          // User Sonr Domain
  ID id = 2;                 // ID references
  Platform platform = 3;     // Peers Device Platform
  string model = 4;          // Peers Device Model
  Position position = 5;     // Peers Positional Information
  Profile profile = 6;       // Peers General Information
  Properties properties = 7; // Peer specific options set
  Status status = 8;         // Peer Status
  string hostName = 9;       // Peer Host Name
  Role role = 10;            // Peer Role

  // ID References
  message ID {
    string peer = 1;      // Host PeerID
    string device = 2;    // Device ID
    string multiAddr = 3; // Peer MultiAddr
    string publicKey = 4; // Public Key of Peer
    string pushToken = 5; // Push Notification token
  }

  // Peers Active Status
  enum Status {
    OFFLINE = 0; // Offline - Not Online or Not a Full Node
    ONLINE = 1;  // Online - Full Node Available
    AWAY = 2;    // Away - Not Online, but has a full node
    BUSY = 3;    // Busy - Online, but busy with Transfer
    PAIRING = 4; // PAIRING - Online/Connected but only for Linking
    GHOST = 5;   // User is Ghost Mode (Not Receiving)
  }

  // Properties
  message Properties {
    // Whether Peer can use automatic point to Transfer
    bool enabledPointShare = 1;
    bool isFlatMode = 2;
  }
}

// Platform is the Operating System of Device
enum Platform {
  OTHER = 0;   // Other/Unknown User Agent
  ANDROID = 1; // Android Operating System
  IOS = 2;     // iOS Operating System
  MACOS = 3;   // Mac Operating System
  WINDOWS = 4; // Windows Operating System
  LINUX = 5;   // Linux Operating System
  WEB = 6;     // Web Platform
}

// Position Includes All Directional Info of Peer
message Position {
  Compass facing = 1;              // Compass Direction of Peer on Z axis
  Compass heading = 2;             // Compass Direction of Peer on X axis
  Proximity proximity = 3;         // Proximity from the User - Calculated
  Accelerometer accelerometer = 4; // Accelerometer Values
  Orientation orientation = 5;     // Orientation Values

  // Accelerometer Sensor Values
  message Accelerometer {
    double x = 1; // X-Axis Value
    double y = 2; // Y-Axis Value
    double z = 3; // Z-Axis Value
  }

  // Compass Direction Values
  message Compass {
    Cardinal cardinal = 1;     // Cardinal Designation of normal Value
    Cardinal antiCardinal = 2; // Cardinal Designation of Antipodal Value
    double direction = 3;      // Normal Compass Value
    double antipodal = 4;      // Inverse Compass Direction of Peer
  }

  // Euler Angle Orientation
  message Orientation {
    double pitch = 1; // Pitch Angle
    double roll = 2;  // Roll Angle
    double yaw = 3;   // Yaw Angle
  }

  // Proximity is the Distance between Peers, from Ultrasonic
  enum Proximity {
    NotFound = 0;  // Unable to Calculate
    Immediate = 1; // Within 5 Meters
    Near = 2;      // Within 10 Meters
    Distant = 3;   // Within 15 Meters
  }
}

// General Information about Peer passed during Authentication
message Profile {
  string sName = 1;      // Sonr Based Username
  string firstName = 2;  // General Info
  string lastName = 3;   // General Info
  bytes picture = 4;     // Profile Picture
  Platform platform = 5; // Peers Device Operating System
}

// Peers Device Role
enum Role {
  PRIMARY = 0;   // Primary Peer
  SECONDARY = 1; // Linked Peer Desktop device
  TERTIARY = 2;  // Linked Peer Peripheral device
}

// Room Information
message Room {
  // Room Type and Name
  Type type = 1;   // Type of Room
  string name = 2; // Room Name

  // Room Type
  enum Type {
    LOCAL = 0;  // Nearby Peers Room
    DEVICE = 1; // User Devices Room
    GROUP = 2;  // User Custom Group Room
  }
}
