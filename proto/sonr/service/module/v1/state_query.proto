// Code generated by protoc-gen-go-cosmos-orm-proto. DO NOT EDIT.
syntax = "proto3";
package sonr.service.module.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "sonr/service/module/v1/state.proto";

// StateQueryService queries the state of the tables specified by sonr/service/module/v1/state.proto.
service StateQueryService {
  // Get queries the Credential table by its primary key.
  rpc GetCredential(GetCredentialRequest) returns (GetCredentialResponse) {}
  // GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
  rpc GetCredentialByOriginHandle(GetCredentialByOriginHandleRequest) returns (GetCredentialByOriginHandleResponse) {}
  // GetCredentialById queries the Credential table by its Id index
  rpc GetCredentialById(GetCredentialByIdRequest) returns (GetCredentialByIdResponse) {}
  // GetCredentialByOriginAuthority queries the Credential table by its OriginAuthority index
  rpc GetCredentialByOriginAuthority(GetCredentialByOriginAuthorityRequest) returns (GetCredentialByOriginAuthorityResponse) {}
  // ListCredential queries the Credential table using prefix and range queries against defined indexes.
  rpc ListCredential(ListCredentialRequest) returns (ListCredentialResponse) {}
  // Get queries the Profile table by its primary key.
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse) {}
  // GetProfileByOriginAuthority queries the Profile table by its OriginAuthority index
  rpc GetProfileByOriginAuthority(GetProfileByOriginAuthorityRequest) returns (GetProfileByOriginAuthorityResponse) {}
  // ListProfile queries the Profile table using prefix and range queries against defined indexes.
  rpc ListProfile(ListProfileRequest) returns (ListProfileResponse) {}
}

// GetCredentialRequest is the StateQuery/GetCredentialRequest request type.
message GetCredentialRequest {
  // sequence specifies the value of the sequence field in the primary key.
  uint64 sequence = 1;
}

// GetCredentialResponse is the StateQuery/GetCredentialResponse response type.
message GetCredentialResponse {
  // value is the response value.
  Credential value = 1;
}

// GetCredentialByOriginHandleRequest is the StateQuery/GetCredentialByOriginHandleRequest request type.
message GetCredentialByOriginHandleRequest {
  string origin = 1;
  string handle = 2;
}

// GetCredentialByOriginHandleResponse is the StateQuery/GetCredentialByOriginHandleResponse response type.
message GetCredentialByOriginHandleResponse {
  Credential value = 1;
}

// GetCredentialByIdRequest is the StateQuery/GetCredentialByIdRequest request type.
message GetCredentialByIdRequest {
  bytes id = 1;
}

// GetCredentialByIdResponse is the StateQuery/GetCredentialByIdResponse response type.
message GetCredentialByIdResponse {
  Credential value = 1;
}

// GetCredentialByOriginAuthorityRequest is the StateQuery/GetCredentialByOriginAuthorityRequest request type.
message GetCredentialByOriginAuthorityRequest {
  string origin = 1;
  string authority = 2;
}

// GetCredentialByOriginAuthorityResponse is the StateQuery/GetCredentialByOriginAuthorityResponse response type.
message GetCredentialByOriginAuthorityResponse {
  Credential value = 1;
}

// ListCredentialRequest is the StateQuery/ListCredentialRequest request type.
message ListCredentialRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // sequence specifies the value of the Sequence index key to use in the query.
      Sequence sequence = 1;
      // handle specifies the value of the Handle index key to use in the query.
      Handle handle = 2;
      // origin_handle specifies the value of the OriginHandle index key to use in the query.
      OriginHandle origin_handle = 3;
      // id specifies the value of the Id index key to use in the query.
      Id id = 4;
      // origin_authority specifies the value of the OriginAuthority index key to use in the query.
      OriginAuthority origin_authority = 5;
    }
    
    message Sequence {
      // sequence is the value of the sequence field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 sequence = 1;
    }
    
    message Handle {
      // handle is the value of the handle field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string handle = 1;
    }
    
    message OriginHandle {
      // origin is the value of the origin field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string origin = 1;
      // handle is the value of the handle field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string handle = 2;
    }
    
    message Id {
      // id is the value of the id field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional bytes id = 1;
    }
    
    message OriginAuthority {
      // origin is the value of the origin field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string origin = 1;
      // authority is the value of the authority field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string authority = 2;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListCredentialResponse is the StateQuery/ListCredentialResponse response type.
message ListCredentialResponse {
  // values are the results of the query.
  repeated Credential values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetProfileRequest is the StateQuery/GetProfileRequest request type.
message GetProfileRequest {
  // index specifies the value of the index field in the primary key.
  uint64 index = 1;
}

// GetProfileResponse is the StateQuery/GetProfileResponse response type.
message GetProfileResponse {
  // value is the response value.
  Profile value = 1;
}

// GetProfileByOriginAuthorityRequest is the StateQuery/GetProfileByOriginAuthorityRequest request type.
message GetProfileByOriginAuthorityRequest {
  string origin = 1;
  string authority = 2;
}

// GetProfileByOriginAuthorityResponse is the StateQuery/GetProfileByOriginAuthorityResponse response type.
message GetProfileByOriginAuthorityResponse {
  Profile value = 1;
}

// ListProfileRequest is the StateQuery/ListProfileRequest request type.
message ListProfileRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // index specifies the value of the Index index key to use in the query.
      Index index = 1;
      // origin_authority specifies the value of the OriginAuthority index key to use in the query.
      OriginAuthority origin_authority = 2;
    }
    
    message Index {
      // index is the value of the index field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 index = 1;
    }
    
    message OriginAuthority {
      // origin is the value of the origin field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string origin = 1;
      // authority is the value of the authority field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string authority = 2;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListProfileResponse is the StateQuery/ListProfileResponse response type.
message ListProfileResponse {
  // values are the results of the query.
  repeated Profile values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

