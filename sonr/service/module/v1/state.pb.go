// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sonr/service/module/v1/state.proto

package sonr_service_module_v1

import (
	_ "cosmos/orm/v1alpha1"
	_ "cosmossdk.io/orm"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ServicePermissions is the specified permissions the application has with the
// user's account.
type ServicePermissions int32

const (
	// SERVICE_PERMISSIONS_BASE - off chain visibility
	ServicePermissions_SERVICE_PERMISSIONS_BASE ServicePermissions = 0
	// SERVICE_PERMISSIONS_READ - read access
	ServicePermissions_SERVICE_PERMISSIONS_READ ServicePermissions = 1
	// SERVICE_PERMISSIONS_WRITE - write access
	ServicePermissions_SERVICE_PERMISSIONS_WRITE ServicePermissions = 2
	// SERVICE_PERMISSIONS_OWN - ownership
	ServicePermissions_SERVICE_PERMISSIONS_OWN ServicePermissions = 3
)

var ServicePermissions_name = map[int32]string{
	0: "SERVICE_PERMISSIONS_BASE",
	1: "SERVICE_PERMISSIONS_READ",
	2: "SERVICE_PERMISSIONS_WRITE",
	3: "SERVICE_PERMISSIONS_OWN",
}

var ServicePermissions_value = map[string]int32{
	"SERVICE_PERMISSIONS_BASE":  0,
	"SERVICE_PERMISSIONS_READ":  1,
	"SERVICE_PERMISSIONS_WRITE": 2,
	"SERVICE_PERMISSIONS_OWN":   3,
}

func (x ServicePermissions) String() string {
	return proto.EnumName(ServicePermissions_name, int32(x))
}

func (ServicePermissions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6669c247b687a5e1, []int{0}
}

// Module is the app config object of the module.
// Learn more: https://docs.cosmos.network/main/building-modules/depinject
type State struct {
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_6669c247b687a5e1, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

// ServiceRecord is the balance of an account.
type ServiceRecord struct {
	Id          uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Origin      string             `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	Name        string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Authority   string             `protobuf:"bytes,5,opt,name=authority,proto3" json:"authority,omitempty"`
	Permissions ServicePermissions `protobuf:"varint,6,opt,name=permissions,proto3,enum=sonr.service.module.v1.ServicePermissions" json:"permissions,omitempty"`
}

func (m *ServiceRecord) Reset()         { *m = ServiceRecord{} }
func (m *ServiceRecord) String() string { return proto.CompactTextString(m) }
func (*ServiceRecord) ProtoMessage()    {}
func (*ServiceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_6669c247b687a5e1, []int{1}
}
func (m *ServiceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRecord.Merge(m, src)
}
func (m *ServiceRecord) XXX_Size() int {
	return m.Size()
}
func (m *ServiceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRecord proto.InternalMessageInfo

func (m *ServiceRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ServiceRecord) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *ServiceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceRecord) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ServiceRecord) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *ServiceRecord) GetPermissions() ServicePermissions {
	if m != nil {
		return m.Permissions
	}
	return ServicePermissions_SERVICE_PERMISSIONS_BASE
}

// Credential is the total supply of the module.
type Credential struct {
	Sequence        uint64   `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Handle          string   `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
	Transport       []string `protobuf:"bytes,3,rep,name=transport,proto3" json:"transport,omitempty"`
	Authority       string   `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	AttestationType string   `protobuf:"bytes,5,opt,name=attestation_type,json=attestationType,proto3" json:"attestation_type,omitempty"`
	Id              []byte   `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Origin          string   `protobuf:"bytes,7,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *Credential) Reset()         { *m = Credential{} }
func (m *Credential) String() string { return proto.CompactTextString(m) }
func (*Credential) ProtoMessage()    {}
func (*Credential) Descriptor() ([]byte, []int) {
	return fileDescriptor_6669c247b687a5e1, []int{2}
}
func (m *Credential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Credential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Credential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Credential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credential.Merge(m, src)
}
func (m *Credential) XXX_Size() int {
	return m.Size()
}
func (m *Credential) XXX_DiscardUnknown() {
	xxx_messageInfo_Credential.DiscardUnknown(m)
}

var xxx_messageInfo_Credential proto.InternalMessageInfo

func (m *Credential) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Credential) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *Credential) GetTransport() []string {
	if m != nil {
		return m.Transport
	}
	return nil
}

func (m *Credential) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *Credential) GetAttestationType() string {
	if m != nil {
		return m.AttestationType
	}
	return ""
}

func (m *Credential) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Credential) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

// Identifier is a psuedo-anonomyous representation of a unique id on the Sonr blockchain. Used as
// authorizer to the underlying wallet interface.
type User struct {
	Index     uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Origin    string `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Authority string `protobuf:"bytes,5,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_6669c247b687a5e1, []int{3}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *User) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *User) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *User) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *User) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// BaseParams is the total supply of the module.
type BaseParams struct {
	Permissions              ServicePermissions `protobuf:"varint,1,opt,name=permissions,proto3,enum=sonr.service.module.v1.ServicePermissions" json:"permissions,omitempty"`
	ResidentKey              string             `protobuf:"bytes,2,opt,name=resident_key,json=residentKey,proto3" json:"resident_key,omitempty"`
	Algorithm                int32              `protobuf:"varint,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	AuthenticationAttachment string             `protobuf:"bytes,4,opt,name=authentication_attachment,json=authenticationAttachment,proto3" json:"authentication_attachment,omitempty"`
}

func (m *BaseParams) Reset()         { *m = BaseParams{} }
func (m *BaseParams) String() string { return proto.CompactTextString(m) }
func (*BaseParams) ProtoMessage()    {}
func (*BaseParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6669c247b687a5e1, []int{4}
}
func (m *BaseParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseParams.Merge(m, src)
}
func (m *BaseParams) XXX_Size() int {
	return m.Size()
}
func (m *BaseParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseParams.DiscardUnknown(m)
}

var xxx_messageInfo_BaseParams proto.InternalMessageInfo

func (m *BaseParams) GetPermissions() ServicePermissions {
	if m != nil {
		return m.Permissions
	}
	return ServicePermissions_SERVICE_PERMISSIONS_BASE
}

func (m *BaseParams) GetResidentKey() string {
	if m != nil {
		return m.ResidentKey
	}
	return ""
}

func (m *BaseParams) GetAlgorithm() int32 {
	if m != nil {
		return m.Algorithm
	}
	return 0
}

func (m *BaseParams) GetAuthenticationAttachment() string {
	if m != nil {
		return m.AuthenticationAttachment
	}
	return ""
}

// ReadParams is the total supply of the module.
type ReadParams struct {
	Permissions              ServicePermissions `protobuf:"varint,1,opt,name=permissions,proto3,enum=sonr.service.module.v1.ServicePermissions" json:"permissions,omitempty"`
	ResidentKey              string             `protobuf:"bytes,2,opt,name=resident_key,json=residentKey,proto3" json:"resident_key,omitempty"`
	Algorithm                int32              `protobuf:"varint,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	AuthenticationAttachment string             `protobuf:"bytes,4,opt,name=authentication_attachment,json=authenticationAttachment,proto3" json:"authentication_attachment,omitempty"`
}

func (m *ReadParams) Reset()         { *m = ReadParams{} }
func (m *ReadParams) String() string { return proto.CompactTextString(m) }
func (*ReadParams) ProtoMessage()    {}
func (*ReadParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6669c247b687a5e1, []int{5}
}
func (m *ReadParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadParams.Merge(m, src)
}
func (m *ReadParams) XXX_Size() int {
	return m.Size()
}
func (m *ReadParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadParams.DiscardUnknown(m)
}

var xxx_messageInfo_ReadParams proto.InternalMessageInfo

func (m *ReadParams) GetPermissions() ServicePermissions {
	if m != nil {
		return m.Permissions
	}
	return ServicePermissions_SERVICE_PERMISSIONS_BASE
}

func (m *ReadParams) GetResidentKey() string {
	if m != nil {
		return m.ResidentKey
	}
	return ""
}

func (m *ReadParams) GetAlgorithm() int32 {
	if m != nil {
		return m.Algorithm
	}
	return 0
}

func (m *ReadParams) GetAuthenticationAttachment() string {
	if m != nil {
		return m.AuthenticationAttachment
	}
	return ""
}

// WriteParams is the total supply of the module.
type WriteParams struct {
	Permissions              ServicePermissions `protobuf:"varint,1,opt,name=permissions,proto3,enum=sonr.service.module.v1.ServicePermissions" json:"permissions,omitempty"`
	ResidentKey              string             `protobuf:"bytes,2,opt,name=resident_key,json=residentKey,proto3" json:"resident_key,omitempty"`
	Algorithm                int32              `protobuf:"varint,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	AuthenticationAttachment string             `protobuf:"bytes,4,opt,name=authentication_attachment,json=authenticationAttachment,proto3" json:"authentication_attachment,omitempty"`
}

func (m *WriteParams) Reset()         { *m = WriteParams{} }
func (m *WriteParams) String() string { return proto.CompactTextString(m) }
func (*WriteParams) ProtoMessage()    {}
func (*WriteParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6669c247b687a5e1, []int{6}
}
func (m *WriteParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteParams.Merge(m, src)
}
func (m *WriteParams) XXX_Size() int {
	return m.Size()
}
func (m *WriteParams) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteParams.DiscardUnknown(m)
}

var xxx_messageInfo_WriteParams proto.InternalMessageInfo

func (m *WriteParams) GetPermissions() ServicePermissions {
	if m != nil {
		return m.Permissions
	}
	return ServicePermissions_SERVICE_PERMISSIONS_BASE
}

func (m *WriteParams) GetResidentKey() string {
	if m != nil {
		return m.ResidentKey
	}
	return ""
}

func (m *WriteParams) GetAlgorithm() int32 {
	if m != nil {
		return m.Algorithm
	}
	return 0
}

func (m *WriteParams) GetAuthenticationAttachment() string {
	if m != nil {
		return m.AuthenticationAttachment
	}
	return ""
}

// OwnParams is the total supply of the module.
type OwnParams struct {
	Permissions              ServicePermissions `protobuf:"varint,1,opt,name=permissions,proto3,enum=sonr.service.module.v1.ServicePermissions" json:"permissions,omitempty"`
	ResidentKey              string             `protobuf:"bytes,2,opt,name=resident_key,json=residentKey,proto3" json:"resident_key,omitempty"`
	Algorithm                int32              `protobuf:"varint,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	AuthenticationAttachment string             `protobuf:"bytes,4,opt,name=authentication_attachment,json=authenticationAttachment,proto3" json:"authentication_attachment,omitempty"`
}

func (m *OwnParams) Reset()         { *m = OwnParams{} }
func (m *OwnParams) String() string { return proto.CompactTextString(m) }
func (*OwnParams) ProtoMessage()    {}
func (*OwnParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6669c247b687a5e1, []int{7}
}
func (m *OwnParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnParams.Merge(m, src)
}
func (m *OwnParams) XXX_Size() int {
	return m.Size()
}
func (m *OwnParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnParams.DiscardUnknown(m)
}

var xxx_messageInfo_OwnParams proto.InternalMessageInfo

func (m *OwnParams) GetPermissions() ServicePermissions {
	if m != nil {
		return m.Permissions
	}
	return ServicePermissions_SERVICE_PERMISSIONS_BASE
}

func (m *OwnParams) GetResidentKey() string {
	if m != nil {
		return m.ResidentKey
	}
	return ""
}

func (m *OwnParams) GetAlgorithm() int32 {
	if m != nil {
		return m.Algorithm
	}
	return 0
}

func (m *OwnParams) GetAuthenticationAttachment() string {
	if m != nil {
		return m.AuthenticationAttachment
	}
	return ""
}

func init() {
	proto.RegisterEnum("sonr.service.module.v1.ServicePermissions", ServicePermissions_name, ServicePermissions_value)
	proto.RegisterType((*State)(nil), "sonr.service.module.v1.State")
	proto.RegisterType((*ServiceRecord)(nil), "sonr.service.module.v1.ServiceRecord")
	proto.RegisterType((*Credential)(nil), "sonr.service.module.v1.Credential")
	proto.RegisterType((*User)(nil), "sonr.service.module.v1.User")
	proto.RegisterType((*BaseParams)(nil), "sonr.service.module.v1.BaseParams")
	proto.RegisterType((*ReadParams)(nil), "sonr.service.module.v1.ReadParams")
	proto.RegisterType((*WriteParams)(nil), "sonr.service.module.v1.WriteParams")
	proto.RegisterType((*OwnParams)(nil), "sonr.service.module.v1.OwnParams")
}

func init() {
	proto.RegisterFile("sonr/service/module/v1/state.proto", fileDescriptor_6669c247b687a5e1)
}

var fileDescriptor_6669c247b687a5e1 = []byte{
	// 707 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0xd9, 0x49, 0x9a, 0xbc, 0xa4, 0xc5, 0x3a, 0x50, 0x7b, 0x2d, 0x25, 0x0a, 0x16, 0x88,
	0x52, 0x20, 0x51, 0xe9, 0x16, 0xa6, 0xb6, 0x64, 0x88, 0x80, 0xb6, 0xb2, 0x0b, 0x15, 0x53, 0x74,
	0xd8, 0xa7, 0xc6, 0x22, 0xb6, 0xc3, 0xdd, 0x25, 0x90, 0x95, 0x89, 0x01, 0x55, 0xfc, 0x02, 0x18,
	0x91, 0xf8, 0x25, 0x8c, 0x95, 0xba, 0x30, 0x42, 0xf2, 0x0f, 0x18, 0x99, 0xd0, 0xd9, 0x4e, 0x93,
	0xb6, 0x29, 0x0b, 0x5b, 0x37, 0xbf, 0xf7, 0xbd, 0xa7, 0xfb, 0xbe, 0xef, 0x7d, 0x92, 0xc1, 0x14,
	0x61, 0xc0, 0xab, 0x82, 0xf1, 0x9e, 0xe7, 0xb0, 0xaa, 0x1f, 0xba, 0xdd, 0x36, 0xab, 0xf6, 0xd6,
	0xaa, 0x42, 0x52, 0xc9, 0x2a, 0x1d, 0x1e, 0xca, 0x10, 0xcf, 0xab, 0x99, 0x4a, 0x32, 0x53, 0x89,
	0x67, 0x2a, 0xbd, 0xb5, 0xa5, 0x05, 0x27, 0x14, 0x7e, 0x28, 0xaa, 0x21, 0xf7, 0xd5, 0x4a, 0xc8,
	0xfd, 0x78, 0x61, 0xa9, 0x7c, 0x0a, 0xa0, 0xed, 0x4e, 0x8b, 0xae, 0x55, 0x85, 0xd3, 0x62, 0x3e,
	0x8d, 0x27, 0xcc, 0x75, 0xc8, 0xd8, 0xea, 0x85, 0xda, 0xea, 0xfb, 0x2f, 0xc7, 0x87, 0xfa, 0x2d,
	0x30, 0x73, 0x08, 0x97, 0xce, 0xd3, 0x48, 0x1e, 0x8b, 0x97, 0x3e, 0x68, 0x30, 0x6b, 0xc7, 0x23,
	0x16, 0x73, 0x42, 0xee, 0xe2, 0x39, 0xd0, 0x3c, 0x97, 0xa0, 0x32, 0x5a, 0x49, 0x5b, 0x9a, 0xe7,
	0xe2, 0x79, 0xc8, 0x86, 0xdc, 0x3b, 0xf0, 0x02, 0xa2, 0x95, 0xd1, 0x4a, 0xde, 0x4a, 0x2a, 0x8c,
	0x21, 0x1d, 0x50, 0x9f, 0x11, 0x3d, 0xea, 0x46, 0xdf, 0xb8, 0x0c, 0x05, 0x97, 0x09, 0x87, 0x7b,
	0x1d, 0xe9, 0x85, 0x01, 0x49, 0x47, 0xd0, 0x64, 0x0b, 0x2f, 0x43, 0x9e, 0x76, 0x65, 0x2b, 0xe4,
	0x9e, 0xec, 0x93, 0x4c, 0x84, 0x8f, 0x1b, 0xf8, 0x29, 0x14, 0x3a, 0x8c, 0xfb, 0x9e, 0x10, 0x5e,
	0x18, 0x08, 0x92, 0x2d, 0xa3, 0x95, 0xb9, 0x87, 0xab, 0x95, 0xe9, 0x5e, 0x55, 0x12, 0xde, 0xbb,
	0xe3, 0x0d, 0x6b, 0x72, 0xbd, 0xf6, 0xe0, 0xf7, 0xe7, 0xe3, 0x43, 0xfd, 0x0e, 0x64, 0x95, 0x22,
	0x03, 0xe1, 0xe2, 0x48, 0x89, 0x81, 0x08, 0xc2, 0xb3, 0x13, 0x4c, 0x0c, 0x8d, 0x20, 0xf3, 0x9b,
	0x06, 0xb0, 0xc5, 0x99, 0xcb, 0x02, 0xe9, 0xd1, 0x36, 0x5e, 0x82, 0x9c, 0x60, 0x6f, 0xba, 0x2c,
	0x70, 0x58, 0xe2, 0xc6, 0x49, 0xad, 0x3c, 0x69, 0xd1, 0xc0, 0x6d, 0xb3, 0x91, 0x27, 0x71, 0xa5,
	0xd4, 0x49, 0x4e, 0x03, 0xd1, 0x09, 0xb9, 0x24, 0x7a, 0x59, 0x57, 0xea, 0x4e, 0x1a, 0xa7, 0xb5,
	0xa7, 0xcf, 0x6a, 0xbf, 0x0b, 0x06, 0x95, 0x92, 0xa9, 0x90, 0x78, 0x61, 0xd0, 0x94, 0xfd, 0x0e,
	0x4b, 0x0c, 0xba, 0x32, 0xd1, 0xdf, 0xeb, 0x77, 0x58, 0x72, 0x22, 0xe5, 0x4e, 0xf1, 0xcc, 0x89,
	0x66, 0x26, 0x4f, 0x54, 0x7b, 0x19, 0x19, 0x60, 0x43, 0x71, 0x2c, 0xc5, 0x40, 0x18, 0x46, 0xe4,
	0x0d, 0x84, 0xaf, 0xc2, 0x6c, 0x3c, 0x7b, 0x3f, 0x69, 0x69, 0x04, 0xe1, 0x5c, 0xe4, 0x97, 0x4e,
	0x10, 0x9e, 0x07, 0x23, 0x81, 0xc7, 0x56, 0xa5, 0x09, 0x22, 0x9a, 0xf9, 0x15, 0x41, 0xfa, 0xb9,
	0x60, 0x1c, 0x5f, 0x83, 0x8c, 0x17, 0xb8, 0xec, 0x5d, 0xe2, 0x51, 0x5c, 0x5c, 0x18, 0x1a, 0x03,
	0xf4, 0xd7, 0xac, 0x9f, 0x64, 0x46, 0x7d, 0xaa, 0xfd, 0x1e, 0x6d, 0x77, 0x59, 0x62, 0x48, 0x5c,
	0xfc, 0x3b, 0x26, 0xb5, 0x7b, 0x91, 0xae, 0xdb, 0x90, 0x4f, 0xde, 0x36, 0xa6, 0x33, 0x45, 0x04,
	0x11, 0xdd, 0x1c, 0x20, 0x80, 0x4d, 0x2a, 0xd8, 0x2e, 0xe5, 0xd4, 0x17, 0x67, 0x23, 0x86, 0xfe,
	0x2b, 0x62, 0xf8, 0x26, 0x14, 0x39, 0x13, 0x9e, 0xca, 0x4c, 0x53, 0x09, 0x8b, 0xd5, 0x16, 0x46,
	0xbd, 0x27, 0xac, 0x1f, 0x49, 0x69, 0x1f, 0x28, 0x46, 0x2d, 0x3f, 0x12, 0x9e, 0xb1, 0xc6, 0x0d,
	0xfc, 0x08, 0x16, 0x15, 0x61, 0x95, 0x39, 0x27, 0x3e, 0x3c, 0x95, 0x92, 0x3a, 0x2d, 0x9f, 0x05,
	0x32, 0xb1, 0x84, 0x9c, 0x1e, 0xd8, 0x38, 0xc1, 0x6b, 0xb9, 0x3f, 0xca, 0x07, 0x2d, 0x97, 0x8e,
	0x44, 0x5a, 0x8c, 0xba, 0x97, 0x58, 0x64, 0xc6, 0x1c, 0x22, 0x28, 0xec, 0x73, 0x4f, 0x5e, 0xe6,
	0x53, 0x66, 0xcd, 0x5f, 0x08, 0xf2, 0x3b, 0x6f, 0x83, 0x4b, 0xac, 0x71, 0x66, 0xf5, 0x23, 0x02,
	0x7c, 0x9e, 0x2b, 0x5e, 0x06, 0x62, 0xd7, 0xad, 0x17, 0x8d, 0xad, 0x7a, 0x73, 0xb7, 0x6e, 0x3d,
	0x6b, 0xd8, 0x76, 0x63, 0x67, 0xdb, 0x6e, 0x6e, 0x6e, 0xd8, 0x75, 0x23, 0x75, 0x11, 0x6a, 0xd5,
	0x37, 0x1e, 0x1b, 0x08, 0xdf, 0x80, 0xc5, 0x69, 0xe8, 0xbe, 0xd5, 0xd8, 0xab, 0x1b, 0x1a, 0xbe,
	0x0e, 0x0b, 0xd3, 0xe0, 0x9d, 0xfd, 0x6d, 0x43, 0xdf, 0x24, 0xdf, 0x07, 0x25, 0x74, 0x34, 0x28,
	0xa1, 0x9f, 0x83, 0x12, 0xfa, 0x34, 0x2c, 0xa5, 0x8e, 0x86, 0xa5, 0xd4, 0x8f, 0x61, 0x29, 0xf5,
	0x2a, 0x1b, 0xfd, 0x25, 0xd7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xd6, 0x8a, 0x66, 0xd3,
	0x07, 0x00, 0x00,
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServiceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintState(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintState(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintState(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintState(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Credential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintState(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintState(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AttestationType) > 0 {
		i -= len(m.AttestationType)
		copy(dAtA[i:], m.AttestationType)
		i = encodeVarintState(dAtA, i, uint64(len(m.AttestationType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintState(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Transport) > 0 {
		for iNdEx := len(m.Transport) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transport[iNdEx])
			copy(dAtA[i:], m.Transport[iNdEx])
			i = encodeVarintState(dAtA, i, uint64(len(m.Transport[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintState(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sequence != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintState(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintState(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintState(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintState(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BaseParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationAttachment) > 0 {
		i -= len(m.AuthenticationAttachment)
		copy(dAtA[i:], m.AuthenticationAttachment)
		i = encodeVarintState(dAtA, i, uint64(len(m.AuthenticationAttachment)))
		i--
		dAtA[i] = 0x22
	}
	if m.Algorithm != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ResidentKey) > 0 {
		i -= len(m.ResidentKey)
		copy(dAtA[i:], m.ResidentKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.ResidentKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Permissions != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReadParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationAttachment) > 0 {
		i -= len(m.AuthenticationAttachment)
		copy(dAtA[i:], m.AuthenticationAttachment)
		i = encodeVarintState(dAtA, i, uint64(len(m.AuthenticationAttachment)))
		i--
		dAtA[i] = 0x22
	}
	if m.Algorithm != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ResidentKey) > 0 {
		i -= len(m.ResidentKey)
		copy(dAtA[i:], m.ResidentKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.ResidentKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Permissions != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WriteParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationAttachment) > 0 {
		i -= len(m.AuthenticationAttachment)
		copy(dAtA[i:], m.AuthenticationAttachment)
		i = encodeVarintState(dAtA, i, uint64(len(m.AuthenticationAttachment)))
		i--
		dAtA[i] = 0x22
	}
	if m.Algorithm != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ResidentKey) > 0 {
		i -= len(m.ResidentKey)
		copy(dAtA[i:], m.ResidentKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.ResidentKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Permissions != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OwnParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationAttachment) > 0 {
		i -= len(m.AuthenticationAttachment)
		copy(dAtA[i:], m.AuthenticationAttachment)
		i = encodeVarintState(dAtA, i, uint64(len(m.AuthenticationAttachment)))
		i--
		dAtA[i] = 0x22
	}
	if m.Algorithm != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ResidentKey) > 0 {
		i -= len(m.ResidentKey)
		copy(dAtA[i:], m.ResidentKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.ResidentKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Permissions != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServiceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovState(uint64(m.Id))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Permissions != 0 {
		n += 1 + sovState(uint64(m.Permissions))
	}
	return n
}

func (m *Credential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovState(uint64(m.Sequence))
	}
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if len(m.Transport) > 0 {
		for _, s := range m.Transport {
			l = len(s)
			n += 1 + l + sovState(uint64(l))
		}
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.AttestationType)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovState(uint64(m.Index))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *BaseParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permissions != 0 {
		n += 1 + sovState(uint64(m.Permissions))
	}
	l = len(m.ResidentKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Algorithm != 0 {
		n += 1 + sovState(uint64(m.Algorithm))
	}
	l = len(m.AuthenticationAttachment)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *ReadParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permissions != 0 {
		n += 1 + sovState(uint64(m.Permissions))
	}
	l = len(m.ResidentKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Algorithm != 0 {
		n += 1 + sovState(uint64(m.Algorithm))
	}
	l = len(m.AuthenticationAttachment)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *WriteParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permissions != 0 {
		n += 1 + sovState(uint64(m.Permissions))
	}
	l = len(m.ResidentKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Algorithm != 0 {
		n += 1 + sovState(uint64(m.Algorithm))
	}
	l = len(m.AuthenticationAttachment)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *OwnParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permissions != 0 {
		n += 1 + sovState(uint64(m.Permissions))
	}
	l = len(m.ResidentKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Algorithm != 0 {
		n += 1 + sovState(uint64(m.Algorithm))
	}
	l = len(m.AuthenticationAttachment)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= ServicePermissions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Credential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transport = append(m.Transport, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= ServicePermissions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidentKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidentKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAttachment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationAttachment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= ServicePermissions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidentKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidentKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAttachment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationAttachment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= ServicePermissions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidentKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidentKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAttachment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationAttachment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= ServicePermissions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidentKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidentKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAttachment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationAttachment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
