// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/common/v1/core.proto

#include "core/common/v1/core.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace core {
namespace common {
namespace v1 {
constexpr Location_Placemark::Location_Placemark(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , street_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iso_country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , postal_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , administrative_area_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sub_administrative_area_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , locality_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sub_locality_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thoroughfare_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sub_thoroughfare_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Location_PlacemarkDefaultTypeInternal {
  constexpr Location_PlacemarkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Location_PlacemarkDefaultTypeInternal() {}
  union {
    Location_Placemark _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Location_PlacemarkDefaultTypeInternal _Location_Placemark_default_instance_;
constexpr Location::Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : placemark_(nullptr)
  , latitude_(0)
  , longitude_(0)
  , last_modified_(int64_t{0}){}
struct LocationDefaultTypeInternal {
  constexpr LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocationDefaultTypeInternal _Location_default_instance_;
constexpr Metadata::Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(int64_t{0}){}
struct MetadataDefaultTypeInternal {
  constexpr MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetadataDefaultTypeInternal _Metadata_default_instance_;
constexpr MIME::MIME(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct MIMEDefaultTypeInternal {
  constexpr MIMEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MIMEDefaultTypeInternal() {}
  union {
    MIME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MIMEDefaultTypeInternal _MIME_default_instance_;
constexpr Peer_Device::Peer_Device(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , host_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , arch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Peer_DeviceDefaultTypeInternal {
  constexpr Peer_DeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Peer_DeviceDefaultTypeInternal() {}
  union {
    Peer_Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Peer_DeviceDefaultTypeInternal _Peer_Device_default_instance_;
constexpr Peer::Peer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_(nullptr)
  , profile_(nullptr)
  , last_modified_(int64_t{0})
  , status_(0)
{}
struct PeerDefaultTypeInternal {
  constexpr PeerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeerDefaultTypeInternal() {}
  union {
    Peer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeerDefaultTypeInternal _Peer_default_instance_;
constexpr Profile::Profile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socials_()
  , s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , picture_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bio_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_modified_(int64_t{0}){}
struct ProfileDefaultTypeInternal {
  constexpr ProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileDefaultTypeInternal() {}
  union {
    Profile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileDefaultTypeInternal _Profile_default_instance_;
constexpr ProfileList::ProfileList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profiles_()
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(int64_t{0})
  , last_modified_(int64_t{0}){}
struct ProfileListDefaultTypeInternal {
  constexpr ProfileListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileListDefaultTypeInternal() {}
  union {
    ProfileList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileListDefaultTypeInternal _ProfileList_default_instance_;
constexpr Social::Social(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , picture_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , valid_(false)
  , media_(0)
{}
struct SocialDefaultTypeInternal {
  constexpr SocialDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocialDefaultTypeInternal() {}
  union {
    Social _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocialDefaultTypeInternal _Social_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace core
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_core_2fcommon_2fv1_2fcore_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcommon_2fv1_2fcore_2eproto = nullptr;

const uint32_t TableStruct_core_2fcommon_2fv1_2fcore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, street_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, iso_country_code_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, country_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, postal_code_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, administrative_area_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, sub_administrative_area_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, locality_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, sub_locality_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, thoroughfare_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location_Placemark, sub_thoroughfare_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location, latitude_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location, longitude_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location, placemark_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Location, last_modified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Metadata, timestamp_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Metadata, node_id_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Metadata, signature_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Metadata, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::MIME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::MIME, type_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::MIME, subtype_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::MIME, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer_Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer_Device, id_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer_Device, host_name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer_Device, os_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer_Device, arch_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer_Device, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer, s_name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer, status_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer, device_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer, profile_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer, public_key_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer, peer_id_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Peer, last_modified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Profile, s_name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Profile, first_name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Profile, last_name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Profile, picture_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Profile, bio_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Profile, socials_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Profile, last_modified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::ProfileList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::ProfileList, profiles_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::ProfileList, created_at_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::ProfileList, key_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::ProfileList, last_modified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Social, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Social, valid_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Social, username_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Social, url_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Social, picture_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Social, media_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::core::common::v1::Location_Placemark)},
  { 17, -1, -1, sizeof(::core::common::v1::Location)},
  { 27, -1, -1, sizeof(::core::common::v1::Metadata)},
  { 37, -1, -1, sizeof(::core::common::v1::MIME)},
  { 46, -1, -1, sizeof(::core::common::v1::Peer_Device)},
  { 57, -1, -1, sizeof(::core::common::v1::Peer)},
  { 70, -1, -1, sizeof(::core::common::v1::Profile)},
  { 83, -1, -1, sizeof(::core::common::v1::ProfileList)},
  { 93, -1, -1, sizeof(::core::common::v1::Social)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_Location_Placemark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_MIME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_Peer_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_Peer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_Profile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_ProfileList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_Social_default_instance_),
};

const char descriptor_table_protodef_core_2fcommon_2fv1_2fcore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031core/common/v1/core.proto\022\016core.common"
  ".v1\"\301\004\n\010Location\022\032\n\010latitude\030\001 \001(\001R\010lati"
  "tude\022\034\n\tlongitude\030\002 \001(\001R\tlongitude\022@\n\tpl"
  "acemark\030\003 \001(\0132\".core.common.v1.Location."
  "PlacemarkR\tplacemark\022#\n\rlast_modified\030\004 "
  "\001(\003R\014lastModified\032\223\003\n\tPlacemark\022\022\n\004name\030"
  "\001 \001(\tR\004name\022\026\n\006street\030\002 \001(\tR\006street\022(\n\020i"
  "so_country_code\030\003 \001(\tR\016isoCountryCode\022\030\n"
  "\007country\030\004 \001(\tR\007country\022\037\n\013postal_code\030\005"
  " \001(\tR\npostalCode\022/\n\023administrative_area\030"
  "\006 \001(\tR\022administrativeArea\0226\n\027sub_adminis"
  "trative_area\030\007 \001(\tR\025subAdministrativeAre"
  "a\022\032\n\010locality\030\010 \001(\tR\010locality\022!\n\014sub_loc"
  "ality\030\t \001(\tR\013subLocality\022\"\n\014thoroughfare"
  "\030\n \001(\tR\014thoroughfare\022)\n\020sub_thoroughfare"
  "\030\013 \001(\tR\017subThoroughfare\"~\n\010Metadata\022\034\n\tt"
  "imestamp\030\001 \001(\003R\ttimestamp\022\027\n\007node_id\030\002 \001"
  "(\tR\006nodeId\022\034\n\tsignature\030\003 \001(\014R\tsignature"
  "\022\035\n\npublic_key\030\004 \001(\014R\tpublicKey\"\343\001\n\004MIME"
  "\022-\n\004type\030\001 \001(\0162\031.core.common.v1.MIME.Typ"
  "eR\004type\022\030\n\007subtype\030\002 \001(\tR\007subtype\022\024\n\005val"
  "ue\030\003 \001(\tR\005value\"|\n\004Type\022\024\n\020TYPE_UNSPECIF"
  "IED\020\000\022\016\n\nTYPE_AUDIO\020\001\022\021\n\rTYPE_DOCUMENT\020\002"
  "\022\016\n\nTYPE_IMAGE\020\003\022\r\n\tTYPE_TEXT\020\004\022\016\n\nTYPE_"
  "VIDEO\020\005\022\014\n\010TYPE_URL\020\006\"\337\003\n\004Peer\022\025\n\006s_name"
  "\030\001 \001(\tR\005sName\0223\n\006status\030\002 \001(\0162\033.core.com"
  "mon.v1.Peer.StatusR\006status\0223\n\006device\030\003 \001"
  "(\0132\033.core.common.v1.Peer.DeviceR\006device\022"
  "1\n\007profile\030\004 \001(\0132\027.core.common.v1.Profil"
  "eR\007profile\022\035\n\npublic_key\030\005 \001(\014R\tpublicKe"
  "y\022\027\n\007peer_id\030\006 \001(\tR\006peerId\022#\n\rlast_modif"
  "ied\030\007 \001(\003R\014lastModified\032o\n\006Device\022\016\n\002id\030"
  "\001 \001(\tR\002id\022\033\n\thost_name\030\002 \001(\tR\010hostName\022\016"
  "\n\002os\030\003 \001(\tR\002os\022\022\n\004arch\030\004 \001(\tR\004arch\022\024\n\005mo"
  "del\030\005 \001(\tR\005model\"U\n\006Status\022\026\n\022STATUS_UNS"
  "PECIFIED\020\000\022\021\n\rSTATUS_ONLINE\020\001\022\017\n\013STATUS_"
  "AWAY\020\002\022\017\n\013STATUS_BUSY\020\003\"\337\001\n\007Profile\022\025\n\006s"
  "_name\030\001 \001(\tR\005sName\022\035\n\nfirst_name\030\002 \001(\tR\t"
  "firstName\022\033\n\tlast_name\030\003 \001(\tR\010lastName\022\030"
  "\n\007picture\030\004 \001(\014R\007picture\022\020\n\003bio\030\006 \001(\tR\003b"
  "io\0220\n\007socials\030\007 \003(\0132\026.core.common.v1.Soc"
  "ialR\007socials\022#\n\rlast_modified\030\010 \001(\003R\014las"
  "tModified\"\230\001\n\013ProfileList\0223\n\010profiles\030\001 "
  "\003(\0132\027.core.common.v1.ProfileR\010profiles\022\035"
  "\n\ncreated_at\030\002 \001(\003R\tcreatedAt\022\020\n\003key\030\003 \001"
  "(\tR\003key\022#\n\rlast_modified\030\004 \001(\003R\014lastModi"
  "fied\"\347\002\n\006Social\022\024\n\005valid\030\001 \001(\010R\005valid\022\032\n"
  "\010username\030\002 \001(\tR\010username\022\020\n\003url\030\003 \001(\tR\003"
  "url\022\030\n\007picture\030\004 \001(\014R\007picture\0222\n\005media\030\005"
  " \001(\0162\034.core.common.v1.Social.MediaR\005medi"
  "a\"\312\001\n\005Media\022\025\n\021MEDIA_UNSPECIFIED\020\000\022\022\n\016ME"
  "DIA_FACEBOOK\020\001\022\021\n\rMEDIA_TWITTER\020\002\022\020\n\014MED"
  "IA_MEDIUM\020\003\022\020\n\014MEDIA_TIKTOK\020\004\022\023\n\017MEDIA_I"
  "NSTAGRAM\020\005\022\021\n\rMEDIA_YOUTUBE\020\006\022\020\n\014MEDIA_G"
  "ITHUB\020\007\022\022\n\016MEDIA_SNAPCHAT\020\010\022\021\n\rMEDIA_SPO"
  "TIFY\020\t*\205\001\n\nConnection\022\032\n\026CONNECTION_UNSP"
  "ECIFIED\020\000\022\023\n\017CONNECTION_WIFI\020\001\022\027\n\023CONNEC"
  "TION_ETHERNET\020\002\022\025\n\021CONNECTION_MOBILE\020\003\022\026"
  "\n\022CONNECTION_OFFLINE\020\004*c\n\013Environment\022\033\n"
  "\027ENVIRONMENT_UNSPECIFIED\020\000\022\033\n\027ENVIRONMEN"
  "T_DEVELOPMENT\020\001\022\032\n\026ENVIRONMENT_PRODUCTIO"
  "N\020\002B Z\036github.com/sonr-io/core/commonb\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcommon_2fv1_2fcore_2eproto = {
  false, false, 2485, descriptor_table_protodef_core_2fcommon_2fv1_2fcore_2eproto, "core/common/v1/core.proto", 
  &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_core_2fcommon_2fv1_2fcore_2eproto::offsets,
  file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto, file_level_enum_descriptors_core_2fcommon_2fv1_2fcore_2eproto, file_level_service_descriptors_core_2fcommon_2fv1_2fcore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_getter() {
  return &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fcommon_2fv1_2fcore_2eproto(&descriptor_table_core_2fcommon_2fv1_2fcore_2eproto);
namespace core {
namespace common {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MIME_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fcommon_2fv1_2fcore_2eproto);
  return file_level_enum_descriptors_core_2fcommon_2fv1_2fcore_2eproto[0];
}
bool MIME_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MIME_Type MIME::TYPE_UNSPECIFIED;
constexpr MIME_Type MIME::TYPE_AUDIO;
constexpr MIME_Type MIME::TYPE_DOCUMENT;
constexpr MIME_Type MIME::TYPE_IMAGE;
constexpr MIME_Type MIME::TYPE_TEXT;
constexpr MIME_Type MIME::TYPE_VIDEO;
constexpr MIME_Type MIME::TYPE_URL;
constexpr MIME_Type MIME::Type_MIN;
constexpr MIME_Type MIME::Type_MAX;
constexpr int MIME::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Peer_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fcommon_2fv1_2fcore_2eproto);
  return file_level_enum_descriptors_core_2fcommon_2fv1_2fcore_2eproto[1];
}
bool Peer_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Peer_Status Peer::STATUS_UNSPECIFIED;
constexpr Peer_Status Peer::STATUS_ONLINE;
constexpr Peer_Status Peer::STATUS_AWAY;
constexpr Peer_Status Peer::STATUS_BUSY;
constexpr Peer_Status Peer::Status_MIN;
constexpr Peer_Status Peer::Status_MAX;
constexpr int Peer::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Social_Media_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fcommon_2fv1_2fcore_2eproto);
  return file_level_enum_descriptors_core_2fcommon_2fv1_2fcore_2eproto[2];
}
bool Social_Media_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Social_Media Social::MEDIA_UNSPECIFIED;
constexpr Social_Media Social::MEDIA_FACEBOOK;
constexpr Social_Media Social::MEDIA_TWITTER;
constexpr Social_Media Social::MEDIA_MEDIUM;
constexpr Social_Media Social::MEDIA_TIKTOK;
constexpr Social_Media Social::MEDIA_INSTAGRAM;
constexpr Social_Media Social::MEDIA_YOUTUBE;
constexpr Social_Media Social::MEDIA_GITHUB;
constexpr Social_Media Social::MEDIA_SNAPCHAT;
constexpr Social_Media Social::MEDIA_SPOTIFY;
constexpr Social_Media Social::Media_MIN;
constexpr Social_Media Social::Media_MAX;
constexpr int Social::Media_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Connection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fcommon_2fv1_2fcore_2eproto);
  return file_level_enum_descriptors_core_2fcommon_2fv1_2fcore_2eproto[3];
}
bool Connection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Environment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fcommon_2fv1_2fcore_2eproto);
  return file_level_enum_descriptors_core_2fcommon_2fv1_2fcore_2eproto[4];
}
bool Environment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Location_Placemark::_Internal {
 public:
};

Location_Placemark::Location_Placemark(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.Location.Placemark)
}
Location_Placemark::Location_Placemark(const Location_Placemark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_street().empty()) {
    street_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_street(), 
      GetArenaForAllocation());
  }
  iso_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    iso_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iso_country_code().empty()) {
    iso_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iso_country_code(), 
      GetArenaForAllocation());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    postal_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_postal_code().empty()) {
    postal_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_postal_code(), 
      GetArenaForAllocation());
  }
  administrative_area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    administrative_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_administrative_area().empty()) {
    administrative_area_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_administrative_area(), 
      GetArenaForAllocation());
  }
  sub_administrative_area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sub_administrative_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_administrative_area().empty()) {
    sub_administrative_area_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sub_administrative_area(), 
      GetArenaForAllocation());
  }
  locality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locality().empty()) {
    locality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locality(), 
      GetArenaForAllocation());
  }
  sub_locality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sub_locality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_locality().empty()) {
    sub_locality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sub_locality(), 
      GetArenaForAllocation());
  }
  thoroughfare_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thoroughfare_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thoroughfare().empty()) {
    thoroughfare_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thoroughfare(), 
      GetArenaForAllocation());
  }
  sub_thoroughfare_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sub_thoroughfare_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_thoroughfare().empty()) {
    sub_thoroughfare_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sub_thoroughfare(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.Location.Placemark)
}

inline void Location_Placemark::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
iso_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  iso_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  postal_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
administrative_area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  administrative_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sub_administrative_area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sub_administrative_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
locality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sub_locality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sub_locality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thoroughfare_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thoroughfare_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sub_thoroughfare_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sub_thoroughfare_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Location_Placemark::~Location_Placemark() {
  // @@protoc_insertion_point(destructor:core.common.v1.Location.Placemark)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Location_Placemark::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  administrative_area_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_administrative_area_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_locality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thoroughfare_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_thoroughfare_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Location_Placemark::ArenaDtor(void* object) {
  Location_Placemark* _this = reinterpret_cast< Location_Placemark* >(object);
  (void)_this;
}
void Location_Placemark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location_Placemark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location_Placemark::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.Location.Placemark)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  street_.ClearToEmpty();
  iso_country_code_.ClearToEmpty();
  country_.ClearToEmpty();
  postal_code_.ClearToEmpty();
  administrative_area_.ClearToEmpty();
  sub_administrative_area_.ClearToEmpty();
  locality_.ClearToEmpty();
  sub_locality_.ClearToEmpty();
  thoroughfare_.ClearToEmpty();
  sub_thoroughfare_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location_Placemark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string street = 2 [json_name = "street"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_street();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.street"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string iso_country_code = 3 [json_name = "isoCountryCode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_iso_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.iso_country_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string country = 4 [json_name = "country"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.country"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string postal_code = 5 [json_name = "postalCode"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_postal_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.postal_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string administrative_area = 6 [json_name = "administrativeArea"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_administrative_area();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.administrative_area"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sub_administrative_area = 7 [json_name = "subAdministrativeArea"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sub_administrative_area();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.sub_administrative_area"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string locality = 8 [json_name = "locality"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_locality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.locality"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sub_locality = 9 [json_name = "subLocality"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sub_locality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.sub_locality"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string thoroughfare = 10 [json_name = "thoroughfare"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_thoroughfare();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.thoroughfare"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sub_thoroughfare = 11 [json_name = "subThoroughfare"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_sub_thoroughfare();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Location.Placemark.sub_thoroughfare"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location_Placemark::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.Location.Placemark)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string street = 2 [json_name = "street"];
  if (!this->_internal_street().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_street().data(), static_cast<int>(this->_internal_street().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.street");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_street(), target);
  }

  // string iso_country_code = 3 [json_name = "isoCountryCode"];
  if (!this->_internal_iso_country_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iso_country_code().data(), static_cast<int>(this->_internal_iso_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.iso_country_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_iso_country_code(), target);
  }

  // string country = 4 [json_name = "country"];
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.country");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_country(), target);
  }

  // string postal_code = 5 [json_name = "postalCode"];
  if (!this->_internal_postal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postal_code().data(), static_cast<int>(this->_internal_postal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.postal_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_postal_code(), target);
  }

  // string administrative_area = 6 [json_name = "administrativeArea"];
  if (!this->_internal_administrative_area().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_administrative_area().data(), static_cast<int>(this->_internal_administrative_area().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.administrative_area");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_administrative_area(), target);
  }

  // string sub_administrative_area = 7 [json_name = "subAdministrativeArea"];
  if (!this->_internal_sub_administrative_area().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_administrative_area().data(), static_cast<int>(this->_internal_sub_administrative_area().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.sub_administrative_area");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sub_administrative_area(), target);
  }

  // string locality = 8 [json_name = "locality"];
  if (!this->_internal_locality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locality().data(), static_cast<int>(this->_internal_locality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.locality");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_locality(), target);
  }

  // string sub_locality = 9 [json_name = "subLocality"];
  if (!this->_internal_sub_locality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_locality().data(), static_cast<int>(this->_internal_sub_locality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.sub_locality");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sub_locality(), target);
  }

  // string thoroughfare = 10 [json_name = "thoroughfare"];
  if (!this->_internal_thoroughfare().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thoroughfare().data(), static_cast<int>(this->_internal_thoroughfare().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.thoroughfare");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_thoroughfare(), target);
  }

  // string sub_thoroughfare = 11 [json_name = "subThoroughfare"];
  if (!this->_internal_sub_thoroughfare().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_thoroughfare().data(), static_cast<int>(this->_internal_sub_thoroughfare().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Location.Placemark.sub_thoroughfare");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sub_thoroughfare(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.Location.Placemark)
  return target;
}

size_t Location_Placemark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.Location.Placemark)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string street = 2 [json_name = "street"];
  if (!this->_internal_street().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_street());
  }

  // string iso_country_code = 3 [json_name = "isoCountryCode"];
  if (!this->_internal_iso_country_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iso_country_code());
  }

  // string country = 4 [json_name = "country"];
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string postal_code = 5 [json_name = "postalCode"];
  if (!this->_internal_postal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postal_code());
  }

  // string administrative_area = 6 [json_name = "administrativeArea"];
  if (!this->_internal_administrative_area().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_administrative_area());
  }

  // string sub_administrative_area = 7 [json_name = "subAdministrativeArea"];
  if (!this->_internal_sub_administrative_area().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_administrative_area());
  }

  // string locality = 8 [json_name = "locality"];
  if (!this->_internal_locality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locality());
  }

  // string sub_locality = 9 [json_name = "subLocality"];
  if (!this->_internal_sub_locality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_locality());
  }

  // string thoroughfare = 10 [json_name = "thoroughfare"];
  if (!this->_internal_thoroughfare().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thoroughfare());
  }

  // string sub_thoroughfare = 11 [json_name = "subThoroughfare"];
  if (!this->_internal_sub_thoroughfare().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_thoroughfare());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location_Placemark::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Location_Placemark::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location_Placemark::GetClassData() const { return &_class_data_; }

void Location_Placemark::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Location_Placemark *>(to)->MergeFrom(
      static_cast<const Location_Placemark &>(from));
}


void Location_Placemark::MergeFrom(const Location_Placemark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.Location.Placemark)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_street().empty()) {
    _internal_set_street(from._internal_street());
  }
  if (!from._internal_iso_country_code().empty()) {
    _internal_set_iso_country_code(from._internal_iso_country_code());
  }
  if (!from._internal_country().empty()) {
    _internal_set_country(from._internal_country());
  }
  if (!from._internal_postal_code().empty()) {
    _internal_set_postal_code(from._internal_postal_code());
  }
  if (!from._internal_administrative_area().empty()) {
    _internal_set_administrative_area(from._internal_administrative_area());
  }
  if (!from._internal_sub_administrative_area().empty()) {
    _internal_set_sub_administrative_area(from._internal_sub_administrative_area());
  }
  if (!from._internal_locality().empty()) {
    _internal_set_locality(from._internal_locality());
  }
  if (!from._internal_sub_locality().empty()) {
    _internal_set_sub_locality(from._internal_sub_locality());
  }
  if (!from._internal_thoroughfare().empty()) {
    _internal_set_thoroughfare(from._internal_thoroughfare());
  }
  if (!from._internal_sub_thoroughfare().empty()) {
    _internal_set_sub_thoroughfare(from._internal_sub_thoroughfare());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location_Placemark::CopyFrom(const Location_Placemark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.Location.Placemark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location_Placemark::IsInitialized() const {
  return true;
}

void Location_Placemark::InternalSwap(Location_Placemark* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &street_, lhs_arena,
      &other->street_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &iso_country_code_, lhs_arena,
      &other->iso_country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, lhs_arena,
      &other->country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &postal_code_, lhs_arena,
      &other->postal_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &administrative_area_, lhs_arena,
      &other->administrative_area_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sub_administrative_area_, lhs_arena,
      &other->sub_administrative_area_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &locality_, lhs_arena,
      &other->locality_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sub_locality_, lhs_arena,
      &other->sub_locality_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thoroughfare_, lhs_arena,
      &other->thoroughfare_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sub_thoroughfare_, lhs_arena,
      &other->sub_thoroughfare_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Location_Placemark::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto[0]);
}

// ===================================================================

class Location::_Internal {
 public:
  static const ::core::common::v1::Location_Placemark& placemark(const Location* msg);
};

const ::core::common::v1::Location_Placemark&
Location::_Internal::placemark(const Location* msg) {
  return *msg->placemark_;
}
Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_placemark()) {
    placemark_ = new ::core::common::v1::Location_Placemark(*from.placemark_);
  } else {
    placemark_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_modified_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(last_modified_));
  // @@protoc_insertion_point(copy_constructor:core.common.v1.Location)
}

inline void Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&placemark_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_modified_) -
    reinterpret_cast<char*>(&placemark_)) + sizeof(last_modified_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:core.common.v1.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete placemark_;
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && placemark_ != nullptr) {
    delete placemark_;
  }
  placemark_ = nullptr;
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_modified_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(last_modified_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude = 1 [json_name = "latitude"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 2 [json_name = "longitude"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.Location.Placemark placemark = 3 [json_name = "placemark"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_placemark(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_modified = 4 [json_name = "lastModified"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1 [json_name = "latitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2 [json_name = "longitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // .core.common.v1.Location.Placemark placemark = 3 [json_name = "placemark"];
  if (this->_internal_has_placemark()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::placemark(this), target, stream);
  }

  // int64 last_modified = 4 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_modified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .core.common.v1.Location.Placemark placemark = 3 [json_name = "placemark"];
  if (this->_internal_has_placemark()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *placemark_);
  }

  // double latitude = 1 [json_name = "latitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2 [json_name = "longitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // int64 last_modified = 4 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_modified());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }

void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Location *>(to)->MergeFrom(
      static_cast<const Location &>(from));
}


void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.Location)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_placemark()) {
    _internal_mutable_placemark()->::core::common::v1::Location_Placemark::MergeFrom(from._internal_placemark());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_last_modified() != 0) {
    _internal_set_last_modified(from._internal_last_modified());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, last_modified_)
      + sizeof(Location::last_modified_)
      - PROTOBUF_FIELD_OFFSET(Location, placemark_)>(
          reinterpret_cast<char*>(&placemark_),
          reinterpret_cast<char*>(&other->placemark_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto[1]);
}

// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:core.common.v1.Metadata)
}

inline void Metadata::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timestamp_ = int64_t{0};
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:core.common.v1.Metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
}
void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  signature_.ClearToEmpty();
  public_key_.ClearToEmpty();
  timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1 [json_name = "timestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_id = 2 [json_name = "nodeId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Metadata.node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature = 3 [json_name = "signature"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 4 [json_name = "publicKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string node_id = 2 [json_name = "nodeId"];
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Metadata.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // bytes signature = 3 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  // bytes public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.Metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 2 [json_name = "nodeId"];
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // bytes signature = 3 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }

void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Metadata *>(to)->MergeFrom(
      static_cast<const Metadata &>(from));
}


void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, lhs_arena,
      &other->node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto[2]);
}

// ===================================================================

class MIME::_Internal {
 public:
};

MIME::MIME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.MIME)
}
MIME::MIME(const MIME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subtype().empty()) {
    subtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subtype(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:core.common.v1.MIME)
}

inline void MIME::SharedCtor() {
subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

MIME::~MIME() {
  // @@protoc_insertion_point(destructor:core.common.v1.MIME)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MIME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  subtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MIME::ArenaDtor(void* object) {
  MIME* _this = reinterpret_cast< MIME* >(object);
  (void)_this;
}
void MIME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MIME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MIME::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.MIME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subtype_.ClearToEmpty();
  value_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MIME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .core.common.v1.MIME.Type type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::core::common::v1::MIME_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string subtype = 2 [json_name = "subtype"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.MIME.subtype"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 3 [json_name = "value"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.MIME.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MIME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.MIME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.common.v1.MIME.Type type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string subtype = 2 [json_name = "subtype"];
  if (!this->_internal_subtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subtype().data(), static_cast<int>(this->_internal_subtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.MIME.subtype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subtype(), target);
  }

  // string value = 3 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.MIME.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.MIME)
  return target;
}

size_t MIME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.MIME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subtype = 2 [json_name = "subtype"];
  if (!this->_internal_subtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subtype());
  }

  // string value = 3 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .core.common.v1.MIME.Type type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MIME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MIME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MIME::GetClassData() const { return &_class_data_; }

void MIME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MIME *>(to)->MergeFrom(
      static_cast<const MIME &>(from));
}


void MIME::MergeFrom(const MIME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.MIME)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subtype().empty()) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MIME::CopyFrom(const MIME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.MIME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIME::IsInitialized() const {
  return true;
}

void MIME::InternalSwap(MIME* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subtype_, lhs_arena,
      &other->subtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MIME::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto[3]);
}

// ===================================================================

class Peer_Device::_Internal {
 public:
};

Peer_Device::Peer_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.Peer.Device)
}
Peer_Device::Peer_Device(const Peer_Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_name().empty()) {
    host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host_name(), 
      GetArenaForAllocation());
  }
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os().empty()) {
    os_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os(), 
      GetArenaForAllocation());
  }
  arch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    arch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arch().empty()) {
    arch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_arch(), 
      GetArenaForAllocation());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.Peer.Device)
}

inline void Peer_Device::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
arch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  arch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Peer_Device::~Peer_Device() {
  // @@protoc_insertion_point(destructor:core.common.v1.Peer.Device)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Peer_Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Peer_Device::ArenaDtor(void* object) {
  Peer_Device* _this = reinterpret_cast< Peer_Device* >(object);
  (void)_this;
}
void Peer_Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Peer_Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Peer_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.Peer.Device)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  host_name_.ClearToEmpty();
  os_.ClearToEmpty();
  arch_.ClearToEmpty();
  model_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Peer_Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Peer.Device.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string host_name = 2 [json_name = "hostName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Peer.Device.host_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string os = 3 [json_name = "os"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Peer.Device.os"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string arch = 4 [json_name = "arch"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_arch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Peer.Device.arch"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model = 5 [json_name = "model"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Peer.Device.model"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Peer_Device::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.Peer.Device)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Peer.Device.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string host_name = 2 [json_name = "hostName"];
  if (!this->_internal_host_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Peer.Device.host_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_name(), target);
  }

  // string os = 3 [json_name = "os"];
  if (!this->_internal_os().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Peer.Device.os");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_os(), target);
  }

  // string arch = 4 [json_name = "arch"];
  if (!this->_internal_arch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arch().data(), static_cast<int>(this->_internal_arch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Peer.Device.arch");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_arch(), target);
  }

  // string model = 5 [json_name = "model"];
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Peer.Device.model");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.Peer.Device)
  return target;
}

size_t Peer_Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.Peer.Device)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string host_name = 2 [json_name = "hostName"];
  if (!this->_internal_host_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  // string os = 3 [json_name = "os"];
  if (!this->_internal_os().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // string arch = 4 [json_name = "arch"];
  if (!this->_internal_arch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arch());
  }

  // string model = 5 [json_name = "model"];
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Peer_Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Peer_Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Peer_Device::GetClassData() const { return &_class_data_; }

void Peer_Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Peer_Device *>(to)->MergeFrom(
      static_cast<const Peer_Device &>(from));
}


void Peer_Device::MergeFrom(const Peer_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.Peer.Device)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_host_name().empty()) {
    _internal_set_host_name(from._internal_host_name());
  }
  if (!from._internal_os().empty()) {
    _internal_set_os(from._internal_os());
  }
  if (!from._internal_arch().empty()) {
    _internal_set_arch(from._internal_arch());
  }
  if (!from._internal_model().empty()) {
    _internal_set_model(from._internal_model());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Peer_Device::CopyFrom(const Peer_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.Peer.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer_Device::IsInitialized() const {
  return true;
}

void Peer_Device::InternalSwap(Peer_Device* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_name_, lhs_arena,
      &other->host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &os_, lhs_arena,
      &other->os_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &arch_, lhs_arena,
      &other->arch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Peer_Device::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto[4]);
}

// ===================================================================

class Peer::_Internal {
 public:
  static const ::core::common::v1::Peer_Device& device(const Peer* msg);
  static const ::core::common::v1::Profile& profile(const Peer* msg);
};

const ::core::common::v1::Peer_Device&
Peer::_Internal::device(const Peer* msg) {
  return *msg->device_;
}
const ::core::common::v1::Profile&
Peer::_Internal::profile(const Peer* msg) {
  return *msg->profile_;
}
Peer::Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.Peer)
}
Peer::Peer(const Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_peer_id().empty()) {
    peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peer_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_device()) {
    device_ = new ::core::common::v1::Peer_Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_profile()) {
    profile_ = new ::core::common::v1::Profile(*from.profile_);
  } else {
    profile_ = nullptr;
  }
  ::memcpy(&last_modified_, &from.last_modified_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&last_modified_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:core.common.v1.Peer)
}

inline void Peer::SharedCtor() {
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&device_)) + sizeof(status_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:core.common.v1.Peer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Peer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete profile_;
}

void Peer::ArenaDtor(void* object) {
  Peer* _this = reinterpret_cast< Peer* >(object);
  (void)_this;
}
void Peer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.Peer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_name_.ClearToEmpty();
  public_key_.ClearToEmpty();
  peer_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  if (GetArenaForAllocation() == nullptr && profile_ != nullptr) {
    delete profile_;
  }
  profile_ = nullptr;
  ::memset(&last_modified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&last_modified_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Peer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Peer.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.Peer.Status status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::core::common::v1::Peer_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.Peer.Device device = 3 [json_name = "device"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.Profile profile = 4 [json_name = "profile"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 5 [json_name = "publicKey"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string peer_id = 6 [json_name = "peerId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_peer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Peer.peer_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_modified = 7 [json_name = "lastModified"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Peer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.Peer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Peer.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // .core.common.v1.Peer.Status status = 2 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .core.common.v1.Peer.Device device = 3 [json_name = "device"];
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::device(this), target, stream);
  }

  // .core.common.v1.Profile profile = 4 [json_name = "profile"];
  if (this->_internal_has_profile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::profile(this), target, stream);
  }

  // bytes public_key = 5 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_public_key(), target);
  }

  // string peer_id = 6 [json_name = "peerId"];
  if (!this->_internal_peer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_id().data(), static_cast<int>(this->_internal_peer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Peer.peer_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_peer_id(), target);
  }

  // int64 last_modified = 7 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_last_modified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.Peer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // bytes public_key = 5 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // string peer_id = 6 [json_name = "peerId"];
  if (!this->_internal_peer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_id());
  }

  // .core.common.v1.Peer.Device device = 3 [json_name = "device"];
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .core.common.v1.Profile profile = 4 [json_name = "profile"];
  if (this->_internal_has_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profile_);
  }

  // int64 last_modified = 7 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_modified());
  }

  // .core.common.v1.Peer.Status status = 2 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Peer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Peer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Peer::GetClassData() const { return &_class_data_; }

void Peer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Peer *>(to)->MergeFrom(
      static_cast<const Peer &>(from));
}


void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_peer_id().empty()) {
    _internal_set_peer_id(from._internal_peer_id());
  }
  if (from._internal_has_device()) {
    _internal_mutable_device()->::core::common::v1::Peer_Device::MergeFrom(from._internal_device());
  }
  if (from._internal_has_profile()) {
    _internal_mutable_profile()->::core::common::v1::Profile::MergeFrom(from._internal_profile());
  }
  if (from._internal_last_modified() != 0) {
    _internal_set_last_modified(from._internal_last_modified());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::InternalSwap(Peer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &peer_id_, lhs_arena,
      &other->peer_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Peer, status_)
      + sizeof(Peer::status_)
      - PROTOBUF_FIELD_OFFSET(Peer, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Peer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto[5]);
}

// ===================================================================

class Profile::_Internal {
 public:
};

Profile::Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  socials_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.Profile)
}
Profile::Profile(const Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      socials_(from.socials_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_first_name().empty()) {
    first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_name(), 
      GetArenaForAllocation());
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_name().empty()) {
    last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_name(), 
      GetArenaForAllocation());
  }
  picture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_picture().empty()) {
    picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_picture(), 
      GetArenaForAllocation());
  }
  bio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bio().empty()) {
    bio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bio(), 
      GetArenaForAllocation());
  }
  last_modified_ = from.last_modified_;
  // @@protoc_insertion_point(copy_constructor:core.common.v1.Profile)
}

inline void Profile::SharedCtor() {
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
picture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_modified_ = int64_t{0};
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:core.common.v1.Profile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Profile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  picture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Profile::ArenaDtor(void* object) {
  Profile* _this = reinterpret_cast< Profile* >(object);
  (void)_this;
}
void Profile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Profile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.Profile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  socials_.Clear();
  s_name_.ClearToEmpty();
  first_name_.ClearToEmpty();
  last_name_.ClearToEmpty();
  picture_.ClearToEmpty();
  bio_.ClearToEmpty();
  last_modified_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Profile.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string first_name = 2 [json_name = "firstName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Profile.first_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last_name = 3 [json_name = "lastName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Profile.last_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes picture = 4 [json_name = "picture"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_picture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bio = 6 [json_name = "bio"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Profile.bio"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .core.common.v1.Social socials = 7 [json_name = "socials"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_socials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 last_modified = 8 [json_name = "lastModified"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Profile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.Profile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Profile.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // string first_name = 2 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Profile.first_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first_name(), target);
  }

  // string last_name = 3 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Profile.last_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_name(), target);
  }

  // bytes picture = 4 [json_name = "picture"];
  if (!this->_internal_picture().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_picture(), target);
  }

  // string bio = 6 [json_name = "bio"];
  if (!this->_internal_bio().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bio().data(), static_cast<int>(this->_internal_bio().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Profile.bio");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bio(), target);
  }

  // repeated .core.common.v1.Social socials = 7 [json_name = "socials"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_socials_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_socials(i), target, stream);
  }

  // int64 last_modified = 8 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_last_modified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.Profile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .core.common.v1.Social socials = 7 [json_name = "socials"];
  total_size += 1UL * this->_internal_socials_size();
  for (const auto& msg : this->socials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // string first_name = 2 [json_name = "firstName"];
  if (!this->_internal_first_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 3 [json_name = "lastName"];
  if (!this->_internal_last_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // bytes picture = 4 [json_name = "picture"];
  if (!this->_internal_picture().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_picture());
  }

  // string bio = 6 [json_name = "bio"];
  if (!this->_internal_bio().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bio());
  }

  // int64 last_modified = 8 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_modified());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Profile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Profile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Profile::GetClassData() const { return &_class_data_; }

void Profile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Profile *>(to)->MergeFrom(
      static_cast<const Profile &>(from));
}


void Profile::MergeFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  socials_.MergeFrom(from.socials_);
  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (!from._internal_first_name().empty()) {
    _internal_set_first_name(from._internal_first_name());
  }
  if (!from._internal_last_name().empty()) {
    _internal_set_last_name(from._internal_last_name());
  }
  if (!from._internal_picture().empty()) {
    _internal_set_picture(from._internal_picture());
  }
  if (!from._internal_bio().empty()) {
    _internal_set_bio(from._internal_bio());
  }
  if (from._internal_last_modified() != 0) {
    _internal_set_last_modified(from._internal_last_modified());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  return true;
}

void Profile::InternalSwap(Profile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  socials_.InternalSwap(&other->socials_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_name_, lhs_arena,
      &other->first_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_name_, lhs_arena,
      &other->last_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &picture_, lhs_arena,
      &other->picture_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bio_, lhs_arena,
      &other->bio_, rhs_arena
  );
  swap(last_modified_, other->last_modified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto[6]);
}

// ===================================================================

class ProfileList::_Internal {
 public:
};

ProfileList::ProfileList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  profiles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.ProfileList)
}
ProfileList::ProfileList(const ProfileList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      profiles_(from.profiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&created_at_, &from.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_modified_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(last_modified_));
  // @@protoc_insertion_point(copy_constructor:core.common.v1.ProfileList)
}

inline void ProfileList::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_modified_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(last_modified_));
}

ProfileList::~ProfileList() {
  // @@protoc_insertion_point(destructor:core.common.v1.ProfileList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileList::ArenaDtor(void* object) {
  ProfileList* _this = reinterpret_cast< ProfileList* >(object);
  (void)_this;
}
void ProfileList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileList::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.ProfileList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profiles_.Clear();
  key_.ClearToEmpty();
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_modified_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(last_modified_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .core.common.v1.Profile profiles = 1 [json_name = "profiles"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 2 [json_name = "createdAt"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 3 [json_name = "key"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.ProfileList.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_modified = 4 [json_name = "lastModified"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.ProfileList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .core.common.v1.Profile profiles = 1 [json_name = "profiles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_profiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_profiles(i), target, stream);
  }

  // int64 created_at = 2 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_created_at(), target);
  }

  // string key = 3 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.ProfileList.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // int64 last_modified = 4 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_modified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.ProfileList)
  return target;
}

size_t ProfileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.ProfileList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .core.common.v1.Profile profiles = 1 [json_name = "profiles"];
  total_size += 1UL * this->_internal_profiles_size();
  for (const auto& msg : this->profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key = 3 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int64 created_at = 2 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  // int64 last_modified = 4 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_modified());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileList::GetClassData() const { return &_class_data_; }

void ProfileList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProfileList *>(to)->MergeFrom(
      static_cast<const ProfileList &>(from));
}


void ProfileList::MergeFrom(const ProfileList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.ProfileList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  profiles_.MergeFrom(from.profiles_);
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_last_modified() != 0) {
    _internal_set_last_modified(from._internal_last_modified());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileList::CopyFrom(const ProfileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.ProfileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileList::IsInitialized() const {
  return true;
}

void ProfileList::InternalSwap(ProfileList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  profiles_.InternalSwap(&other->profiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileList, last_modified_)
      + sizeof(ProfileList::last_modified_)
      - PROTOBUF_FIELD_OFFSET(ProfileList, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto[7]);
}

// ===================================================================

class Social::_Internal {
 public:
};

Social::Social(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.Social)
}
Social::Social(const Social& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  picture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_picture().empty()) {
    picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_picture(), 
      GetArenaForAllocation());
  }
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&media_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(media_));
  // @@protoc_insertion_point(copy_constructor:core.common.v1.Social)
}

inline void Social::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
picture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&valid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&media_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(media_));
}

Social::~Social() {
  // @@protoc_insertion_point(destructor:core.common.v1.Social)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Social::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  picture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Social::ArenaDtor(void* object) {
  Social* _this = reinterpret_cast< Social* >(object);
  (void)_this;
}
void Social::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Social::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Social::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.Social)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  url_.ClearToEmpty();
  picture_.ClearToEmpty();
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&media_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(media_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Social::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool valid = 1 [json_name = "valid"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2 [json_name = "username"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Social.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 3 [json_name = "url"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.Social.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes picture = 4 [json_name = "picture"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_picture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.Social.Media media = 5 [json_name = "media"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_media(static_cast<::core::common::v1::Social_Media>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Social::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.Social)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1 [json_name = "valid"];
  if (this->_internal_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  // string username = 2 [json_name = "username"];
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Social.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.Social.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // bytes picture = 4 [json_name = "picture"];
  if (!this->_internal_picture().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_picture(), target);
  }

  // .core.common.v1.Social.Media media = 5 [json_name = "media"];
  if (this->_internal_media() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_media(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.Social)
  return target;
}

size_t Social::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.Social)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2 [json_name = "username"];
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes picture = 4 [json_name = "picture"];
  if (!this->_internal_picture().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_picture());
  }

  // bool valid = 1 [json_name = "valid"];
  if (this->_internal_valid() != 0) {
    total_size += 1 + 1;
  }

  // .core.common.v1.Social.Media media = 5 [json_name = "media"];
  if (this->_internal_media() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_media());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Social::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Social::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Social::GetClassData() const { return &_class_data_; }

void Social::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Social *>(to)->MergeFrom(
      static_cast<const Social &>(from));
}


void Social::MergeFrom(const Social& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.Social)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_picture().empty()) {
    _internal_set_picture(from._internal_picture());
  }
  if (from._internal_valid() != 0) {
    _internal_set_valid(from._internal_valid());
  }
  if (from._internal_media() != 0) {
    _internal_set_media(from._internal_media());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Social::CopyFrom(const Social& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.Social)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Social::IsInitialized() const {
  return true;
}

void Social::InternalSwap(Social* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &picture_, lhs_arena,
      &other->picture_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Social, media_)
      + sizeof(Social::media_)
      - PROTOBUF_FIELD_OFFSET(Social, valid_)>(
          reinterpret_cast<char*>(&valid_),
          reinterpret_cast<char*>(&other->valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Social::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fcore_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fcore_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::core::common::v1::Location_Placemark* Arena::CreateMaybeMessage< ::core::common::v1::Location_Placemark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::Location_Placemark >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::Location* Arena::CreateMaybeMessage< ::core::common::v1::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::Metadata* Arena::CreateMaybeMessage< ::core::common::v1::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::MIME* Arena::CreateMaybeMessage< ::core::common::v1::MIME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::MIME >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::Peer_Device* Arena::CreateMaybeMessage< ::core::common::v1::Peer_Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::Peer_Device >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::Peer* Arena::CreateMaybeMessage< ::core::common::v1::Peer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::Profile* Arena::CreateMaybeMessage< ::core::common::v1::Profile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::Profile >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::ProfileList* Arena::CreateMaybeMessage< ::core::common::v1::ProfileList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::ProfileList >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::Social* Arena::CreateMaybeMessage< ::core::common::v1::Social >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::Social >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
