// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/motor/v1/request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fmotor_2fv1_2frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fmotor_2fv1_2frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/core.pb.h"
#include "common/v1/data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fmotor_2fv1_2frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fmotor_2fv1_2frequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fmotor_2fv1_2frequest_2eproto;
namespace node {
namespace motor {
namespace v1 {
class DecideRequest;
struct DecideRequestDefaultTypeInternal;
extern DecideRequestDefaultTypeInternal _DecideRequest_default_instance_;
class InitializeRequest;
struct InitializeRequestDefaultTypeInternal;
extern InitializeRequestDefaultTypeInternal _InitializeRequest_default_instance_;
class InitializeRequest_DeviceOptions;
struct InitializeRequest_DeviceOptionsDefaultTypeInternal;
extern InitializeRequest_DeviceOptionsDefaultTypeInternal _InitializeRequest_DeviceOptions_default_instance_;
class InitializeRequest_HostOptions;
struct InitializeRequest_HostOptionsDefaultTypeInternal;
extern InitializeRequest_HostOptionsDefaultTypeInternal _InitializeRequest_HostOptions_default_instance_;
class InitializeRequest_IPAddress;
struct InitializeRequest_IPAddressDefaultTypeInternal;
extern InitializeRequest_IPAddressDefaultTypeInternal _InitializeRequest_IPAddress_default_instance_;
class InitializeRequest_ServiceOptions;
struct InitializeRequest_ServiceOptionsDefaultTypeInternal;
extern InitializeRequest_ServiceOptionsDefaultTypeInternal _InitializeRequest_ServiceOptions_default_instance_;
class InitializeRequest_VariablesEntry_DoNotUse;
struct InitializeRequest_VariablesEntry_DoNotUseDefaultTypeInternal;
extern InitializeRequest_VariablesEntry_DoNotUseDefaultTypeInternal _InitializeRequest_VariablesEntry_DoNotUse_default_instance_;
class OnLobbyRefreshRequest;
struct OnLobbyRefreshRequestDefaultTypeInternal;
extern OnLobbyRefreshRequestDefaultTypeInternal _OnLobbyRefreshRequest_default_instance_;
class OnMailboxMessageRequest;
struct OnMailboxMessageRequestDefaultTypeInternal;
extern OnMailboxMessageRequestDefaultTypeInternal _OnMailboxMessageRequest_default_instance_;
class OnTransmitCompleteRequest;
struct OnTransmitCompleteRequestDefaultTypeInternal;
extern OnTransmitCompleteRequestDefaultTypeInternal _OnTransmitCompleteRequest_default_instance_;
class OnTransmitDecisionRequest;
struct OnTransmitDecisionRequestDefaultTypeInternal;
extern OnTransmitDecisionRequestDefaultTypeInternal _OnTransmitDecisionRequest_default_instance_;
class OnTransmitInviteRequest;
struct OnTransmitInviteRequestDefaultTypeInternal;
extern OnTransmitInviteRequestDefaultTypeInternal _OnTransmitInviteRequest_default_instance_;
class OnTransmitProgressRequest;
struct OnTransmitProgressRequestDefaultTypeInternal;
extern OnTransmitProgressRequestDefaultTypeInternal _OnTransmitProgressRequest_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class ShareRequest;
struct ShareRequestDefaultTypeInternal;
extern ShareRequestDefaultTypeInternal _ShareRequest_default_instance_;
}  // namespace v1
}  // namespace motor
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> ::node::motor::v1::DecideRequest* Arena::CreateMaybeMessage<::node::motor::v1::DecideRequest>(Arena*);
template<> ::node::motor::v1::InitializeRequest* Arena::CreateMaybeMessage<::node::motor::v1::InitializeRequest>(Arena*);
template<> ::node::motor::v1::InitializeRequest_DeviceOptions* Arena::CreateMaybeMessage<::node::motor::v1::InitializeRequest_DeviceOptions>(Arena*);
template<> ::node::motor::v1::InitializeRequest_HostOptions* Arena::CreateMaybeMessage<::node::motor::v1::InitializeRequest_HostOptions>(Arena*);
template<> ::node::motor::v1::InitializeRequest_IPAddress* Arena::CreateMaybeMessage<::node::motor::v1::InitializeRequest_IPAddress>(Arena*);
template<> ::node::motor::v1::InitializeRequest_ServiceOptions* Arena::CreateMaybeMessage<::node::motor::v1::InitializeRequest_ServiceOptions>(Arena*);
template<> ::node::motor::v1::InitializeRequest_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::node::motor::v1::InitializeRequest_VariablesEntry_DoNotUse>(Arena*);
template<> ::node::motor::v1::OnLobbyRefreshRequest* Arena::CreateMaybeMessage<::node::motor::v1::OnLobbyRefreshRequest>(Arena*);
template<> ::node::motor::v1::OnMailboxMessageRequest* Arena::CreateMaybeMessage<::node::motor::v1::OnMailboxMessageRequest>(Arena*);
template<> ::node::motor::v1::OnTransmitCompleteRequest* Arena::CreateMaybeMessage<::node::motor::v1::OnTransmitCompleteRequest>(Arena*);
template<> ::node::motor::v1::OnTransmitDecisionRequest* Arena::CreateMaybeMessage<::node::motor::v1::OnTransmitDecisionRequest>(Arena*);
template<> ::node::motor::v1::OnTransmitInviteRequest* Arena::CreateMaybeMessage<::node::motor::v1::OnTransmitInviteRequest>(Arena*);
template<> ::node::motor::v1::OnTransmitProgressRequest* Arena::CreateMaybeMessage<::node::motor::v1::OnTransmitProgressRequest>(Arena*);
template<> ::node::motor::v1::SearchRequest* Arena::CreateMaybeMessage<::node::motor::v1::SearchRequest>(Arena*);
template<> ::node::motor::v1::ShareRequest* Arena::CreateMaybeMessage<::node::motor::v1::ShareRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace node {
namespace motor {
namespace v1 {

enum InitializeRequest_IPAddress_Family : int {
  InitializeRequest_IPAddress_Family_FAMILY_UNSPECIFIED = 0,
  InitializeRequest_IPAddress_Family_FAMILY_IPV4 = 1,
  InitializeRequest_IPAddress_Family_FAMILY_IPV6 = 2,
  InitializeRequest_IPAddress_Family_InitializeRequest_IPAddress_Family_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InitializeRequest_IPAddress_Family_InitializeRequest_IPAddress_Family_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InitializeRequest_IPAddress_Family_IsValid(int value);
constexpr InitializeRequest_IPAddress_Family InitializeRequest_IPAddress_Family_Family_MIN = InitializeRequest_IPAddress_Family_FAMILY_UNSPECIFIED;
constexpr InitializeRequest_IPAddress_Family InitializeRequest_IPAddress_Family_Family_MAX = InitializeRequest_IPAddress_Family_FAMILY_IPV6;
constexpr int InitializeRequest_IPAddress_Family_Family_ARRAYSIZE = InitializeRequest_IPAddress_Family_Family_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InitializeRequest_IPAddress_Family_descriptor();
template<typename T>
inline const std::string& InitializeRequest_IPAddress_Family_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InitializeRequest_IPAddress_Family>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InitializeRequest_IPAddress_Family_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InitializeRequest_IPAddress_Family_descriptor(), enum_t_value);
}
inline bool InitializeRequest_IPAddress_Family_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InitializeRequest_IPAddress_Family* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InitializeRequest_IPAddress_Family>(
    InitializeRequest_IPAddress_Family_descriptor(), name, value);
}
// ===================================================================

class InitializeRequest_VariablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitializeRequest_VariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitializeRequest_VariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  InitializeRequest_VariablesEntry_DoNotUse();
  explicit constexpr InitializeRequest_VariablesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InitializeRequest_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InitializeRequest_VariablesEntry_DoNotUse& other);
  static const InitializeRequest_VariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InitializeRequest_VariablesEntry_DoNotUse*>(&_InitializeRequest_VariablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "node.motor.v1.InitializeRequest.VariablesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "node.motor.v1.InitializeRequest.VariablesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class InitializeRequest_DeviceOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.InitializeRequest.DeviceOptions) */ {
 public:
  inline InitializeRequest_DeviceOptions() : InitializeRequest_DeviceOptions(nullptr) {}
  ~InitializeRequest_DeviceOptions() override;
  explicit constexpr InitializeRequest_DeviceOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitializeRequest_DeviceOptions(const InitializeRequest_DeviceOptions& from);
  InitializeRequest_DeviceOptions(InitializeRequest_DeviceOptions&& from) noexcept
    : InitializeRequest_DeviceOptions() {
    *this = ::std::move(from);
  }

  inline InitializeRequest_DeviceOptions& operator=(const InitializeRequest_DeviceOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeRequest_DeviceOptions& operator=(InitializeRequest_DeviceOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeRequest_DeviceOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeRequest_DeviceOptions* internal_default_instance() {
    return reinterpret_cast<const InitializeRequest_DeviceOptions*>(
               &_InitializeRequest_DeviceOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitializeRequest_DeviceOptions& a, InitializeRequest_DeviceOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeRequest_DeviceOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeRequest_DeviceOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeRequest_DeviceOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitializeRequest_DeviceOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitializeRequest_DeviceOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitializeRequest_DeviceOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializeRequest_DeviceOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.InitializeRequest.DeviceOptions";
  }
  protected:
  explicit InitializeRequest_DeviceOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kHomeDirFieldNumber = 2,
    kSupportDirFieldNumber = 3,
    kTempDirFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string home_dir = 2 [json_name = "homeDir"];
  void clear_home_dir();
  const std::string& home_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_home_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_home_dir();
  PROTOBUF_NODISCARD std::string* release_home_dir();
  void set_allocated_home_dir(std::string* home_dir);
  private:
  const std::string& _internal_home_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home_dir(const std::string& value);
  std::string* _internal_mutable_home_dir();
  public:

  // string support_dir = 3 [json_name = "supportDir"];
  void clear_support_dir();
  const std::string& support_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_support_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_support_dir();
  PROTOBUF_NODISCARD std::string* release_support_dir();
  void set_allocated_support_dir(std::string* support_dir);
  private:
  const std::string& _internal_support_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_support_dir(const std::string& value);
  std::string* _internal_mutable_support_dir();
  public:

  // string temp_dir = 4 [json_name = "tempDir"];
  void clear_temp_dir();
  const std::string& temp_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_temp_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_temp_dir();
  PROTOBUF_NODISCARD std::string* release_temp_dir();
  void set_allocated_temp_dir(std::string* temp_dir);
  private:
  const std::string& _internal_temp_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_temp_dir(const std::string& value);
  std::string* _internal_mutable_temp_dir();
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.InitializeRequest.DeviceOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr support_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr temp_dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class InitializeRequest_HostOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.InitializeRequest.HostOptions) */ {
 public:
  inline InitializeRequest_HostOptions() : InitializeRequest_HostOptions(nullptr) {}
  ~InitializeRequest_HostOptions() override;
  explicit constexpr InitializeRequest_HostOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitializeRequest_HostOptions(const InitializeRequest_HostOptions& from);
  InitializeRequest_HostOptions(InitializeRequest_HostOptions&& from) noexcept
    : InitializeRequest_HostOptions() {
    *this = ::std::move(from);
  }

  inline InitializeRequest_HostOptions& operator=(const InitializeRequest_HostOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeRequest_HostOptions& operator=(InitializeRequest_HostOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeRequest_HostOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeRequest_HostOptions* internal_default_instance() {
    return reinterpret_cast<const InitializeRequest_HostOptions*>(
               &_InitializeRequest_HostOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InitializeRequest_HostOptions& a, InitializeRequest_HostOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeRequest_HostOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeRequest_HostOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeRequest_HostOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitializeRequest_HostOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitializeRequest_HostOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitializeRequest_HostOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializeRequest_HostOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.InitializeRequest.HostOptions";
  }
  protected:
  explicit InitializeRequest_HostOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenAddrsFieldNumber = 4,
    kQuicTransportFieldNumber = 1,
    kHttpTransportFieldNumber = 2,
    kIpv4OnlyFieldNumber = 3,
  };
  // repeated .node.motor.v1.InitializeRequest.IPAddress listen_addrs = 4 [json_name = "listenAddrs"];
  int listen_addrs_size() const;
  private:
  int _internal_listen_addrs_size() const;
  public:
  void clear_listen_addrs();
  ::node::motor::v1::InitializeRequest_IPAddress* mutable_listen_addrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::motor::v1::InitializeRequest_IPAddress >*
      mutable_listen_addrs();
  private:
  const ::node::motor::v1::InitializeRequest_IPAddress& _internal_listen_addrs(int index) const;
  ::node::motor::v1::InitializeRequest_IPAddress* _internal_add_listen_addrs();
  public:
  const ::node::motor::v1::InitializeRequest_IPAddress& listen_addrs(int index) const;
  ::node::motor::v1::InitializeRequest_IPAddress* add_listen_addrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::motor::v1::InitializeRequest_IPAddress >&
      listen_addrs() const;

  // bool quic_transport = 1 [json_name = "quicTransport"];
  void clear_quic_transport();
  bool quic_transport() const;
  void set_quic_transport(bool value);
  private:
  bool _internal_quic_transport() const;
  void _internal_set_quic_transport(bool value);
  public:

  // bool http_transport = 2 [json_name = "httpTransport"];
  void clear_http_transport();
  bool http_transport() const;
  void set_http_transport(bool value);
  private:
  bool _internal_http_transport() const;
  void _internal_set_http_transport(bool value);
  public:

  // bool ipv4_only = 3 [json_name = "ipv4Only"];
  void clear_ipv4_only();
  bool ipv4_only() const;
  void set_ipv4_only(bool value);
  private:
  bool _internal_ipv4_only() const;
  void _internal_set_ipv4_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.InitializeRequest.HostOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::motor::v1::InitializeRequest_IPAddress > listen_addrs_;
  bool quic_transport_;
  bool http_transport_;
  bool ipv4_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class InitializeRequest_ServiceOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.InitializeRequest.ServiceOptions) */ {
 public:
  inline InitializeRequest_ServiceOptions() : InitializeRequest_ServiceOptions(nullptr) {}
  ~InitializeRequest_ServiceOptions() override;
  explicit constexpr InitializeRequest_ServiceOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitializeRequest_ServiceOptions(const InitializeRequest_ServiceOptions& from);
  InitializeRequest_ServiceOptions(InitializeRequest_ServiceOptions&& from) noexcept
    : InitializeRequest_ServiceOptions() {
    *this = ::std::move(from);
  }

  inline InitializeRequest_ServiceOptions& operator=(const InitializeRequest_ServiceOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeRequest_ServiceOptions& operator=(InitializeRequest_ServiceOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeRequest_ServiceOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeRequest_ServiceOptions* internal_default_instance() {
    return reinterpret_cast<const InitializeRequest_ServiceOptions*>(
               &_InitializeRequest_ServiceOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitializeRequest_ServiceOptions& a, InitializeRequest_ServiceOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeRequest_ServiceOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeRequest_ServiceOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeRequest_ServiceOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitializeRequest_ServiceOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitializeRequest_ServiceOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitializeRequest_ServiceOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializeRequest_ServiceOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.InitializeRequest.ServiceOptions";
  }
  protected:
  explicit InitializeRequest_ServiceOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextileFieldNumber = 1,
    kMailboxFieldNumber = 2,
    kBucketsFieldNumber = 3,
    kIntervalFieldNumber = 4,
  };
  // bool textile = 1 [json_name = "textile"];
  void clear_textile();
  bool textile() const;
  void set_textile(bool value);
  private:
  bool _internal_textile() const;
  void _internal_set_textile(bool value);
  public:

  // bool mailbox = 2 [json_name = "mailbox"];
  void clear_mailbox();
  bool mailbox() const;
  void set_mailbox(bool value);
  private:
  bool _internal_mailbox() const;
  void _internal_set_mailbox(bool value);
  public:

  // bool buckets = 3 [json_name = "buckets"];
  void clear_buckets();
  bool buckets() const;
  void set_buckets(bool value);
  private:
  bool _internal_buckets() const;
  void _internal_set_buckets(bool value);
  public:

  // int32 interval = 4 [json_name = "interval"];
  void clear_interval();
  int32_t interval() const;
  void set_interval(int32_t value);
  private:
  int32_t _internal_interval() const;
  void _internal_set_interval(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.InitializeRequest.ServiceOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool textile_;
  bool mailbox_;
  bool buckets_;
  int32_t interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class InitializeRequest_IPAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.InitializeRequest.IPAddress) */ {
 public:
  inline InitializeRequest_IPAddress() : InitializeRequest_IPAddress(nullptr) {}
  ~InitializeRequest_IPAddress() override;
  explicit constexpr InitializeRequest_IPAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitializeRequest_IPAddress(const InitializeRequest_IPAddress& from);
  InitializeRequest_IPAddress(InitializeRequest_IPAddress&& from) noexcept
    : InitializeRequest_IPAddress() {
    *this = ::std::move(from);
  }

  inline InitializeRequest_IPAddress& operator=(const InitializeRequest_IPAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeRequest_IPAddress& operator=(InitializeRequest_IPAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeRequest_IPAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeRequest_IPAddress* internal_default_instance() {
    return reinterpret_cast<const InitializeRequest_IPAddress*>(
               &_InitializeRequest_IPAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InitializeRequest_IPAddress& a, InitializeRequest_IPAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeRequest_IPAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeRequest_IPAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeRequest_IPAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitializeRequest_IPAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitializeRequest_IPAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitializeRequest_IPAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializeRequest_IPAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.InitializeRequest.IPAddress";
  }
  protected:
  explicit InitializeRequest_IPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InitializeRequest_IPAddress_Family Family;
  static constexpr Family FAMILY_UNSPECIFIED =
    InitializeRequest_IPAddress_Family_FAMILY_UNSPECIFIED;
  static constexpr Family FAMILY_IPV4 =
    InitializeRequest_IPAddress_Family_FAMILY_IPV4;
  static constexpr Family FAMILY_IPV6 =
    InitializeRequest_IPAddress_Family_FAMILY_IPV6;
  static inline bool Family_IsValid(int value) {
    return InitializeRequest_IPAddress_Family_IsValid(value);
  }
  static constexpr Family Family_MIN =
    InitializeRequest_IPAddress_Family_Family_MIN;
  static constexpr Family Family_MAX =
    InitializeRequest_IPAddress_Family_Family_MAX;
  static constexpr int Family_ARRAYSIZE =
    InitializeRequest_IPAddress_Family_Family_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Family_descriptor() {
    return InitializeRequest_IPAddress_Family_descriptor();
  }
  template<typename T>
  static inline const std::string& Family_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Family>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Family_Name.");
    return InitializeRequest_IPAddress_Family_Name(enum_t_value);
  }
  static inline bool Family_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Family* value) {
    return InitializeRequest_IPAddress_Family_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddressFieldNumber = 2,
    kInternalFieldNumber = 3,
    kFamilyFieldNumber = 4,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 2 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool internal = 3 [json_name = "internal"];
  void clear_internal();
  bool internal() const;
  void set_internal(bool value);
  private:
  bool _internal_internal() const;
  void _internal_set_internal(bool value);
  public:

  // .node.motor.v1.InitializeRequest.IPAddress.Family family = 4 [json_name = "family"];
  void clear_family();
  ::node::motor::v1::InitializeRequest_IPAddress_Family family() const;
  void set_family(::node::motor::v1::InitializeRequest_IPAddress_Family value);
  private:
  ::node::motor::v1::InitializeRequest_IPAddress_Family _internal_family() const;
  void _internal_set_family(::node::motor::v1::InitializeRequest_IPAddress_Family value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.InitializeRequest.IPAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  bool internal_;
  int family_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class InitializeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.InitializeRequest) */ {
 public:
  inline InitializeRequest() : InitializeRequest(nullptr) {}
  ~InitializeRequest() override;
  explicit constexpr InitializeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitializeRequest(const InitializeRequest& from);
  InitializeRequest(InitializeRequest&& from) noexcept
    : InitializeRequest() {
    *this = ::std::move(from);
  }

  inline InitializeRequest& operator=(const InitializeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeRequest& operator=(InitializeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeRequest* internal_default_instance() {
    return reinterpret_cast<const InitializeRequest*>(
               &_InitializeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InitializeRequest& a, InitializeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitializeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitializeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitializeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.InitializeRequest";
  }
  protected:
  explicit InitializeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InitializeRequest_DeviceOptions DeviceOptions;
  typedef InitializeRequest_HostOptions HostOptions;
  typedef InitializeRequest_ServiceOptions ServiceOptions;
  typedef InitializeRequest_IPAddress IPAddress;

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 8,
    kWalletPassphraseFieldNumber = 9,
    kLocationFieldNumber = 1,
    kProfileFieldNumber = 2,
    kHostOptionsFieldNumber = 4,
    kServiceOptionsFieldNumber = 5,
    kDeviceOptionsFieldNumber = 6,
    kConnectionFieldNumber = 3,
    kEnvironmentFieldNumber = 7,
  };
  // map<string, string> variables = 8 [json_name = "variables"];
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_variables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_variables();

  // string wallet_passphrase = 9 [json_name = "walletPassphrase"];
  void clear_wallet_passphrase();
  const std::string& wallet_passphrase() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wallet_passphrase(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wallet_passphrase();
  PROTOBUF_NODISCARD std::string* release_wallet_passphrase();
  void set_allocated_wallet_passphrase(std::string* wallet_passphrase);
  private:
  const std::string& _internal_wallet_passphrase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wallet_passphrase(const std::string& value);
  std::string* _internal_mutable_wallet_passphrase();
  public:

  // .common.v1.Location location = 1 [json_name = "location"];
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::common::v1::Location& location() const;
  PROTOBUF_NODISCARD ::common::v1::Location* release_location();
  ::common::v1::Location* mutable_location();
  void set_allocated_location(::common::v1::Location* location);
  private:
  const ::common::v1::Location& _internal_location() const;
  ::common::v1::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::common::v1::Location* location);
  ::common::v1::Location* unsafe_arena_release_location();

  // .common.v1.Profile profile = 2 [json_name = "profile"];
  bool has_profile() const;
  private:
  bool _internal_has_profile() const;
  public:
  void clear_profile();
  const ::common::v1::Profile& profile() const;
  PROTOBUF_NODISCARD ::common::v1::Profile* release_profile();
  ::common::v1::Profile* mutable_profile();
  void set_allocated_profile(::common::v1::Profile* profile);
  private:
  const ::common::v1::Profile& _internal_profile() const;
  ::common::v1::Profile* _internal_mutable_profile();
  public:
  void unsafe_arena_set_allocated_profile(
      ::common::v1::Profile* profile);
  ::common::v1::Profile* unsafe_arena_release_profile();

  // .node.motor.v1.InitializeRequest.HostOptions host_options = 4 [json_name = "hostOptions"];
  bool has_host_options() const;
  private:
  bool _internal_has_host_options() const;
  public:
  void clear_host_options();
  const ::node::motor::v1::InitializeRequest_HostOptions& host_options() const;
  PROTOBUF_NODISCARD ::node::motor::v1::InitializeRequest_HostOptions* release_host_options();
  ::node::motor::v1::InitializeRequest_HostOptions* mutable_host_options();
  void set_allocated_host_options(::node::motor::v1::InitializeRequest_HostOptions* host_options);
  private:
  const ::node::motor::v1::InitializeRequest_HostOptions& _internal_host_options() const;
  ::node::motor::v1::InitializeRequest_HostOptions* _internal_mutable_host_options();
  public:
  void unsafe_arena_set_allocated_host_options(
      ::node::motor::v1::InitializeRequest_HostOptions* host_options);
  ::node::motor::v1::InitializeRequest_HostOptions* unsafe_arena_release_host_options();

  // .node.motor.v1.InitializeRequest.ServiceOptions service_options = 5 [json_name = "serviceOptions"];
  bool has_service_options() const;
  private:
  bool _internal_has_service_options() const;
  public:
  void clear_service_options();
  const ::node::motor::v1::InitializeRequest_ServiceOptions& service_options() const;
  PROTOBUF_NODISCARD ::node::motor::v1::InitializeRequest_ServiceOptions* release_service_options();
  ::node::motor::v1::InitializeRequest_ServiceOptions* mutable_service_options();
  void set_allocated_service_options(::node::motor::v1::InitializeRequest_ServiceOptions* service_options);
  private:
  const ::node::motor::v1::InitializeRequest_ServiceOptions& _internal_service_options() const;
  ::node::motor::v1::InitializeRequest_ServiceOptions* _internal_mutable_service_options();
  public:
  void unsafe_arena_set_allocated_service_options(
      ::node::motor::v1::InitializeRequest_ServiceOptions* service_options);
  ::node::motor::v1::InitializeRequest_ServiceOptions* unsafe_arena_release_service_options();

  // .node.motor.v1.InitializeRequest.DeviceOptions device_options = 6 [json_name = "deviceOptions"];
  bool has_device_options() const;
  private:
  bool _internal_has_device_options() const;
  public:
  void clear_device_options();
  const ::node::motor::v1::InitializeRequest_DeviceOptions& device_options() const;
  PROTOBUF_NODISCARD ::node::motor::v1::InitializeRequest_DeviceOptions* release_device_options();
  ::node::motor::v1::InitializeRequest_DeviceOptions* mutable_device_options();
  void set_allocated_device_options(::node::motor::v1::InitializeRequest_DeviceOptions* device_options);
  private:
  const ::node::motor::v1::InitializeRequest_DeviceOptions& _internal_device_options() const;
  ::node::motor::v1::InitializeRequest_DeviceOptions* _internal_mutable_device_options();
  public:
  void unsafe_arena_set_allocated_device_options(
      ::node::motor::v1::InitializeRequest_DeviceOptions* device_options);
  ::node::motor::v1::InitializeRequest_DeviceOptions* unsafe_arena_release_device_options();

  // .common.v1.Connection connection = 3 [json_name = "connection"];
  void clear_connection();
  ::common::v1::Connection connection() const;
  void set_connection(::common::v1::Connection value);
  private:
  ::common::v1::Connection _internal_connection() const;
  void _internal_set_connection(::common::v1::Connection value);
  public:

  // .common.v1.Environment environment = 7 [json_name = "environment"];
  void clear_environment();
  ::common::v1::Environment environment() const;
  void set_environment(::common::v1::Environment value);
  private:
  ::common::v1::Environment _internal_environment() const;
  void _internal_set_environment(::common::v1::Environment value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.InitializeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InitializeRequest_VariablesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> variables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_passphrase_;
  ::common::v1::Location* location_;
  ::common::v1::Profile* profile_;
  ::node::motor::v1::InitializeRequest_HostOptions* host_options_;
  ::node::motor::v1::InitializeRequest_ServiceOptions* service_options_;
  ::node::motor::v1::InitializeRequest_DeviceOptions* device_options_;
  int connection_;
  int environment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class ShareRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.ShareRequest) */ {
 public:
  inline ShareRequest() : ShareRequest(nullptr) {}
  ~ShareRequest() override;
  explicit constexpr ShareRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShareRequest(const ShareRequest& from);
  ShareRequest(ShareRequest&& from) noexcept
    : ShareRequest() {
    *this = ::std::move(from);
  }

  inline ShareRequest& operator=(const ShareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareRequest& operator=(ShareRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShareRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareRequest* internal_default_instance() {
    return reinterpret_cast<const ShareRequest*>(
               &_ShareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ShareRequest& a, ShareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShareRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShareRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShareRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShareRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.ShareRequest";
  }
  protected:
  explicit ShareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kPeerFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // repeated .common.v1.SupplyItem items = 3 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::common::v1::SupplyItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::SupplyItem >*
      mutable_items();
  private:
  const ::common::v1::SupplyItem& _internal_items(int index) const;
  ::common::v1::SupplyItem* _internal_add_items();
  public:
  const ::common::v1::SupplyItem& items(int index) const;
  ::common::v1::SupplyItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::SupplyItem >&
      items() const;

  // .common.v1.Peer peer = 1 [json_name = "peer"];
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::common::v1::Peer& peer() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_peer();
  ::common::v1::Peer* mutable_peer();
  void set_allocated_peer(::common::v1::Peer* peer);
  private:
  const ::common::v1::Peer& _internal_peer() const;
  ::common::v1::Peer* _internal_mutable_peer();
  public:
  void unsafe_arena_set_allocated_peer(
      ::common::v1::Peer* peer);
  ::common::v1::Peer* unsafe_arena_release_peer();

  // .common.v1.MessageItem message = 2 [json_name = "message"];
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::common::v1::MessageItem& message() const;
  PROTOBUF_NODISCARD ::common::v1::MessageItem* release_message();
  ::common::v1::MessageItem* mutable_message();
  void set_allocated_message(::common::v1::MessageItem* message);
  private:
  const ::common::v1::MessageItem& _internal_message() const;
  ::common::v1::MessageItem* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::common::v1::MessageItem* message);
  ::common::v1::MessageItem* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:node.motor.v1.ShareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::SupplyItem > items_;
  ::common::v1::Peer* peer_;
  ::common::v1::MessageItem* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class DecideRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.DecideRequest) */ {
 public:
  inline DecideRequest() : DecideRequest(nullptr) {}
  ~DecideRequest() override;
  explicit constexpr DecideRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DecideRequest(const DecideRequest& from);
  DecideRequest(DecideRequest&& from) noexcept
    : DecideRequest() {
    *this = ::std::move(from);
  }

  inline DecideRequest& operator=(const DecideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecideRequest& operator=(DecideRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecideRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecideRequest* internal_default_instance() {
    return reinterpret_cast<const DecideRequest*>(
               &_DecideRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DecideRequest& a, DecideRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DecideRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecideRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecideRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecideRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DecideRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DecideRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecideRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.DecideRequest";
  }
  protected:
  explicit DecideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 2,
    kDecisionFieldNumber = 1,
  };
  // .common.v1.Peer peer = 2 [json_name = "peer"];
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::common::v1::Peer& peer() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_peer();
  ::common::v1::Peer* mutable_peer();
  void set_allocated_peer(::common::v1::Peer* peer);
  private:
  const ::common::v1::Peer& _internal_peer() const;
  ::common::v1::Peer* _internal_mutable_peer();
  public:
  void unsafe_arena_set_allocated_peer(
      ::common::v1::Peer* peer);
  ::common::v1::Peer* unsafe_arena_release_peer();

  // bool decision = 1 [json_name = "decision"];
  void clear_decision();
  bool decision() const;
  void set_decision(bool value);
  private:
  bool _internal_decision() const;
  void _internal_set_decision(bool value);
  public:

  // @@protoc_insertion_point(class_scope:node.motor.v1.DecideRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::v1::Peer* peer_;
  bool decision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.motor.v1.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit constexpr SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  enum QueryCase {
    kSName = 1,
    kPeerId = 2,
    QUERY_NOT_SET = 0,
  };

  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSNameFieldNumber = 1,
    kPeerIdFieldNumber = 2,
  };
  // string s_name = 1 [json_name = "sName"];
  bool has_s_name() const;
  private:
  bool _internal_has_s_name() const;
  public:
  void clear_s_name();
  const std::string& s_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s_name();
  PROTOBUF_NODISCARD std::string* release_s_name();
  void set_allocated_s_name(std::string* s_name);
  private:
  const std::string& _internal_s_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s_name(const std::string& value);
  std::string* _internal_mutable_s_name();
  public:

  // string peer_id = 2 [json_name = "peerId"];
  bool has_peer_id() const;
  private:
  bool _internal_has_peer_id() const;
  public:
  void clear_peer_id();
  const std::string& peer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peer_id();
  PROTOBUF_NODISCARD std::string* release_peer_id();
  void set_allocated_peer_id(std::string* peer_id);
  private:
  const std::string& _internal_peer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer_id(const std::string& value);
  std::string* _internal_mutable_peer_id();
  public:

  void clear_query();
  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:node.motor.v1.SearchRequest)
 private:
  class _Internal;
  void set_has_s_name();
  void set_has_peer_id();

  inline bool has_query() const;
  inline void clear_has_query();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union QueryUnion {
    constexpr QueryUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_id_;
  } query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class OnLobbyRefreshRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:node.motor.v1.OnLobbyRefreshRequest) */ {
 public:
  inline OnLobbyRefreshRequest() : OnLobbyRefreshRequest(nullptr) {}
  explicit constexpr OnLobbyRefreshRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnLobbyRefreshRequest(const OnLobbyRefreshRequest& from);
  OnLobbyRefreshRequest(OnLobbyRefreshRequest&& from) noexcept
    : OnLobbyRefreshRequest() {
    *this = ::std::move(from);
  }

  inline OnLobbyRefreshRequest& operator=(const OnLobbyRefreshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnLobbyRefreshRequest& operator=(OnLobbyRefreshRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnLobbyRefreshRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnLobbyRefreshRequest* internal_default_instance() {
    return reinterpret_cast<const OnLobbyRefreshRequest*>(
               &_OnLobbyRefreshRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OnLobbyRefreshRequest& a, OnLobbyRefreshRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnLobbyRefreshRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnLobbyRefreshRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnLobbyRefreshRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnLobbyRefreshRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OnLobbyRefreshRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OnLobbyRefreshRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnLobbyRefreshRequest";
  }
  protected:
  explicit OnLobbyRefreshRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnLobbyRefreshRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class OnMailboxMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:node.motor.v1.OnMailboxMessageRequest) */ {
 public:
  inline OnMailboxMessageRequest() : OnMailboxMessageRequest(nullptr) {}
  explicit constexpr OnMailboxMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnMailboxMessageRequest(const OnMailboxMessageRequest& from);
  OnMailboxMessageRequest(OnMailboxMessageRequest&& from) noexcept
    : OnMailboxMessageRequest() {
    *this = ::std::move(from);
  }

  inline OnMailboxMessageRequest& operator=(const OnMailboxMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnMailboxMessageRequest& operator=(OnMailboxMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnMailboxMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnMailboxMessageRequest* internal_default_instance() {
    return reinterpret_cast<const OnMailboxMessageRequest*>(
               &_OnMailboxMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OnMailboxMessageRequest& a, OnMailboxMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnMailboxMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnMailboxMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnMailboxMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnMailboxMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OnMailboxMessageRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OnMailboxMessageRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnMailboxMessageRequest";
  }
  protected:
  explicit OnMailboxMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnMailboxMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class OnTransmitDecisionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:node.motor.v1.OnTransmitDecisionRequest) */ {
 public:
  inline OnTransmitDecisionRequest() : OnTransmitDecisionRequest(nullptr) {}
  explicit constexpr OnTransmitDecisionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnTransmitDecisionRequest(const OnTransmitDecisionRequest& from);
  OnTransmitDecisionRequest(OnTransmitDecisionRequest&& from) noexcept
    : OnTransmitDecisionRequest() {
    *this = ::std::move(from);
  }

  inline OnTransmitDecisionRequest& operator=(const OnTransmitDecisionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnTransmitDecisionRequest& operator=(OnTransmitDecisionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnTransmitDecisionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnTransmitDecisionRequest* internal_default_instance() {
    return reinterpret_cast<const OnTransmitDecisionRequest*>(
               &_OnTransmitDecisionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OnTransmitDecisionRequest& a, OnTransmitDecisionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnTransmitDecisionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnTransmitDecisionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnTransmitDecisionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnTransmitDecisionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OnTransmitDecisionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OnTransmitDecisionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnTransmitDecisionRequest";
  }
  protected:
  explicit OnTransmitDecisionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnTransmitDecisionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class OnTransmitInviteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:node.motor.v1.OnTransmitInviteRequest) */ {
 public:
  inline OnTransmitInviteRequest() : OnTransmitInviteRequest(nullptr) {}
  explicit constexpr OnTransmitInviteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnTransmitInviteRequest(const OnTransmitInviteRequest& from);
  OnTransmitInviteRequest(OnTransmitInviteRequest&& from) noexcept
    : OnTransmitInviteRequest() {
    *this = ::std::move(from);
  }

  inline OnTransmitInviteRequest& operator=(const OnTransmitInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnTransmitInviteRequest& operator=(OnTransmitInviteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnTransmitInviteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnTransmitInviteRequest* internal_default_instance() {
    return reinterpret_cast<const OnTransmitInviteRequest*>(
               &_OnTransmitInviteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OnTransmitInviteRequest& a, OnTransmitInviteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnTransmitInviteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnTransmitInviteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnTransmitInviteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnTransmitInviteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OnTransmitInviteRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OnTransmitInviteRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnTransmitInviteRequest";
  }
  protected:
  explicit OnTransmitInviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnTransmitInviteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class OnTransmitProgressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:node.motor.v1.OnTransmitProgressRequest) */ {
 public:
  inline OnTransmitProgressRequest() : OnTransmitProgressRequest(nullptr) {}
  explicit constexpr OnTransmitProgressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnTransmitProgressRequest(const OnTransmitProgressRequest& from);
  OnTransmitProgressRequest(OnTransmitProgressRequest&& from) noexcept
    : OnTransmitProgressRequest() {
    *this = ::std::move(from);
  }

  inline OnTransmitProgressRequest& operator=(const OnTransmitProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnTransmitProgressRequest& operator=(OnTransmitProgressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnTransmitProgressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnTransmitProgressRequest* internal_default_instance() {
    return reinterpret_cast<const OnTransmitProgressRequest*>(
               &_OnTransmitProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(OnTransmitProgressRequest& a, OnTransmitProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnTransmitProgressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnTransmitProgressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnTransmitProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnTransmitProgressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OnTransmitProgressRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OnTransmitProgressRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnTransmitProgressRequest";
  }
  protected:
  explicit OnTransmitProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnTransmitProgressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// -------------------------------------------------------------------

class OnTransmitCompleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:node.motor.v1.OnTransmitCompleteRequest) */ {
 public:
  inline OnTransmitCompleteRequest() : OnTransmitCompleteRequest(nullptr) {}
  explicit constexpr OnTransmitCompleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnTransmitCompleteRequest(const OnTransmitCompleteRequest& from);
  OnTransmitCompleteRequest(OnTransmitCompleteRequest&& from) noexcept
    : OnTransmitCompleteRequest() {
    *this = ::std::move(from);
  }

  inline OnTransmitCompleteRequest& operator=(const OnTransmitCompleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnTransmitCompleteRequest& operator=(OnTransmitCompleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnTransmitCompleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnTransmitCompleteRequest* internal_default_instance() {
    return reinterpret_cast<const OnTransmitCompleteRequest*>(
               &_OnTransmitCompleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(OnTransmitCompleteRequest& a, OnTransmitCompleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnTransmitCompleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnTransmitCompleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnTransmitCompleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnTransmitCompleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OnTransmitCompleteRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OnTransmitCompleteRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.motor.v1.OnTransmitCompleteRequest";
  }
  protected:
  explicit OnTransmitCompleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:node.motor.v1.OnTransmitCompleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmotor_2fv1_2frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InitializeRequest_DeviceOptions

// string id = 1 [json_name = "id"];
inline void InitializeRequest_DeviceOptions::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& InitializeRequest_DeviceOptions::id() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.DeviceOptions.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitializeRequest_DeviceOptions::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.DeviceOptions.id)
}
inline std::string* InitializeRequest_DeviceOptions::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.DeviceOptions.id)
  return _s;
}
inline const std::string& InitializeRequest_DeviceOptions::_internal_id() const {
  return id_.Get();
}
inline void InitializeRequest_DeviceOptions::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitializeRequest_DeviceOptions::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitializeRequest_DeviceOptions::release_id() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.DeviceOptions.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitializeRequest_DeviceOptions::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.DeviceOptions.id)
}

// string home_dir = 2 [json_name = "homeDir"];
inline void InitializeRequest_DeviceOptions::clear_home_dir() {
  home_dir_.ClearToEmpty();
}
inline const std::string& InitializeRequest_DeviceOptions::home_dir() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.DeviceOptions.home_dir)
  return _internal_home_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitializeRequest_DeviceOptions::set_home_dir(ArgT0&& arg0, ArgT... args) {
 
 home_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.DeviceOptions.home_dir)
}
inline std::string* InitializeRequest_DeviceOptions::mutable_home_dir() {
  std::string* _s = _internal_mutable_home_dir();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.DeviceOptions.home_dir)
  return _s;
}
inline const std::string& InitializeRequest_DeviceOptions::_internal_home_dir() const {
  return home_dir_.Get();
}
inline void InitializeRequest_DeviceOptions::_internal_set_home_dir(const std::string& value) {
  
  home_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitializeRequest_DeviceOptions::_internal_mutable_home_dir() {
  
  return home_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitializeRequest_DeviceOptions::release_home_dir() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.DeviceOptions.home_dir)
  return home_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitializeRequest_DeviceOptions::set_allocated_home_dir(std::string* home_dir) {
  if (home_dir != nullptr) {
    
  } else {
    
  }
  home_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), home_dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (home_dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    home_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.DeviceOptions.home_dir)
}

// string support_dir = 3 [json_name = "supportDir"];
inline void InitializeRequest_DeviceOptions::clear_support_dir() {
  support_dir_.ClearToEmpty();
}
inline const std::string& InitializeRequest_DeviceOptions::support_dir() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.DeviceOptions.support_dir)
  return _internal_support_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitializeRequest_DeviceOptions::set_support_dir(ArgT0&& arg0, ArgT... args) {
 
 support_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.DeviceOptions.support_dir)
}
inline std::string* InitializeRequest_DeviceOptions::mutable_support_dir() {
  std::string* _s = _internal_mutable_support_dir();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.DeviceOptions.support_dir)
  return _s;
}
inline const std::string& InitializeRequest_DeviceOptions::_internal_support_dir() const {
  return support_dir_.Get();
}
inline void InitializeRequest_DeviceOptions::_internal_set_support_dir(const std::string& value) {
  
  support_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitializeRequest_DeviceOptions::_internal_mutable_support_dir() {
  
  return support_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitializeRequest_DeviceOptions::release_support_dir() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.DeviceOptions.support_dir)
  return support_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitializeRequest_DeviceOptions::set_allocated_support_dir(std::string* support_dir) {
  if (support_dir != nullptr) {
    
  } else {
    
  }
  support_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), support_dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (support_dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    support_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.DeviceOptions.support_dir)
}

// string temp_dir = 4 [json_name = "tempDir"];
inline void InitializeRequest_DeviceOptions::clear_temp_dir() {
  temp_dir_.ClearToEmpty();
}
inline const std::string& InitializeRequest_DeviceOptions::temp_dir() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.DeviceOptions.temp_dir)
  return _internal_temp_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitializeRequest_DeviceOptions::set_temp_dir(ArgT0&& arg0, ArgT... args) {
 
 temp_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.DeviceOptions.temp_dir)
}
inline std::string* InitializeRequest_DeviceOptions::mutable_temp_dir() {
  std::string* _s = _internal_mutable_temp_dir();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.DeviceOptions.temp_dir)
  return _s;
}
inline const std::string& InitializeRequest_DeviceOptions::_internal_temp_dir() const {
  return temp_dir_.Get();
}
inline void InitializeRequest_DeviceOptions::_internal_set_temp_dir(const std::string& value) {
  
  temp_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitializeRequest_DeviceOptions::_internal_mutable_temp_dir() {
  
  return temp_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitializeRequest_DeviceOptions::release_temp_dir() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.DeviceOptions.temp_dir)
  return temp_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitializeRequest_DeviceOptions::set_allocated_temp_dir(std::string* temp_dir) {
  if (temp_dir != nullptr) {
    
  } else {
    
  }
  temp_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), temp_dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (temp_dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    temp_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.DeviceOptions.temp_dir)
}

// -------------------------------------------------------------------

// InitializeRequest_HostOptions

// bool quic_transport = 1 [json_name = "quicTransport"];
inline void InitializeRequest_HostOptions::clear_quic_transport() {
  quic_transport_ = false;
}
inline bool InitializeRequest_HostOptions::_internal_quic_transport() const {
  return quic_transport_;
}
inline bool InitializeRequest_HostOptions::quic_transport() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.HostOptions.quic_transport)
  return _internal_quic_transport();
}
inline void InitializeRequest_HostOptions::_internal_set_quic_transport(bool value) {
  
  quic_transport_ = value;
}
inline void InitializeRequest_HostOptions::set_quic_transport(bool value) {
  _internal_set_quic_transport(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.HostOptions.quic_transport)
}

// bool http_transport = 2 [json_name = "httpTransport"];
inline void InitializeRequest_HostOptions::clear_http_transport() {
  http_transport_ = false;
}
inline bool InitializeRequest_HostOptions::_internal_http_transport() const {
  return http_transport_;
}
inline bool InitializeRequest_HostOptions::http_transport() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.HostOptions.http_transport)
  return _internal_http_transport();
}
inline void InitializeRequest_HostOptions::_internal_set_http_transport(bool value) {
  
  http_transport_ = value;
}
inline void InitializeRequest_HostOptions::set_http_transport(bool value) {
  _internal_set_http_transport(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.HostOptions.http_transport)
}

// bool ipv4_only = 3 [json_name = "ipv4Only"];
inline void InitializeRequest_HostOptions::clear_ipv4_only() {
  ipv4_only_ = false;
}
inline bool InitializeRequest_HostOptions::_internal_ipv4_only() const {
  return ipv4_only_;
}
inline bool InitializeRequest_HostOptions::ipv4_only() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.HostOptions.ipv4_only)
  return _internal_ipv4_only();
}
inline void InitializeRequest_HostOptions::_internal_set_ipv4_only(bool value) {
  
  ipv4_only_ = value;
}
inline void InitializeRequest_HostOptions::set_ipv4_only(bool value) {
  _internal_set_ipv4_only(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.HostOptions.ipv4_only)
}

// repeated .node.motor.v1.InitializeRequest.IPAddress listen_addrs = 4 [json_name = "listenAddrs"];
inline int InitializeRequest_HostOptions::_internal_listen_addrs_size() const {
  return listen_addrs_.size();
}
inline int InitializeRequest_HostOptions::listen_addrs_size() const {
  return _internal_listen_addrs_size();
}
inline void InitializeRequest_HostOptions::clear_listen_addrs() {
  listen_addrs_.Clear();
}
inline ::node::motor::v1::InitializeRequest_IPAddress* InitializeRequest_HostOptions::mutable_listen_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.HostOptions.listen_addrs)
  return listen_addrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::motor::v1::InitializeRequest_IPAddress >*
InitializeRequest_HostOptions::mutable_listen_addrs() {
  // @@protoc_insertion_point(field_mutable_list:node.motor.v1.InitializeRequest.HostOptions.listen_addrs)
  return &listen_addrs_;
}
inline const ::node::motor::v1::InitializeRequest_IPAddress& InitializeRequest_HostOptions::_internal_listen_addrs(int index) const {
  return listen_addrs_.Get(index);
}
inline const ::node::motor::v1::InitializeRequest_IPAddress& InitializeRequest_HostOptions::listen_addrs(int index) const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.HostOptions.listen_addrs)
  return _internal_listen_addrs(index);
}
inline ::node::motor::v1::InitializeRequest_IPAddress* InitializeRequest_HostOptions::_internal_add_listen_addrs() {
  return listen_addrs_.Add();
}
inline ::node::motor::v1::InitializeRequest_IPAddress* InitializeRequest_HostOptions::add_listen_addrs() {
  ::node::motor::v1::InitializeRequest_IPAddress* _add = _internal_add_listen_addrs();
  // @@protoc_insertion_point(field_add:node.motor.v1.InitializeRequest.HostOptions.listen_addrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::node::motor::v1::InitializeRequest_IPAddress >&
InitializeRequest_HostOptions::listen_addrs() const {
  // @@protoc_insertion_point(field_list:node.motor.v1.InitializeRequest.HostOptions.listen_addrs)
  return listen_addrs_;
}

// -------------------------------------------------------------------

// InitializeRequest_ServiceOptions

// bool textile = 1 [json_name = "textile"];
inline void InitializeRequest_ServiceOptions::clear_textile() {
  textile_ = false;
}
inline bool InitializeRequest_ServiceOptions::_internal_textile() const {
  return textile_;
}
inline bool InitializeRequest_ServiceOptions::textile() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.ServiceOptions.textile)
  return _internal_textile();
}
inline void InitializeRequest_ServiceOptions::_internal_set_textile(bool value) {
  
  textile_ = value;
}
inline void InitializeRequest_ServiceOptions::set_textile(bool value) {
  _internal_set_textile(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.ServiceOptions.textile)
}

// bool mailbox = 2 [json_name = "mailbox"];
inline void InitializeRequest_ServiceOptions::clear_mailbox() {
  mailbox_ = false;
}
inline bool InitializeRequest_ServiceOptions::_internal_mailbox() const {
  return mailbox_;
}
inline bool InitializeRequest_ServiceOptions::mailbox() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.ServiceOptions.mailbox)
  return _internal_mailbox();
}
inline void InitializeRequest_ServiceOptions::_internal_set_mailbox(bool value) {
  
  mailbox_ = value;
}
inline void InitializeRequest_ServiceOptions::set_mailbox(bool value) {
  _internal_set_mailbox(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.ServiceOptions.mailbox)
}

// bool buckets = 3 [json_name = "buckets"];
inline void InitializeRequest_ServiceOptions::clear_buckets() {
  buckets_ = false;
}
inline bool InitializeRequest_ServiceOptions::_internal_buckets() const {
  return buckets_;
}
inline bool InitializeRequest_ServiceOptions::buckets() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.ServiceOptions.buckets)
  return _internal_buckets();
}
inline void InitializeRequest_ServiceOptions::_internal_set_buckets(bool value) {
  
  buckets_ = value;
}
inline void InitializeRequest_ServiceOptions::set_buckets(bool value) {
  _internal_set_buckets(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.ServiceOptions.buckets)
}

// int32 interval = 4 [json_name = "interval"];
inline void InitializeRequest_ServiceOptions::clear_interval() {
  interval_ = 0;
}
inline int32_t InitializeRequest_ServiceOptions::_internal_interval() const {
  return interval_;
}
inline int32_t InitializeRequest_ServiceOptions::interval() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.ServiceOptions.interval)
  return _internal_interval();
}
inline void InitializeRequest_ServiceOptions::_internal_set_interval(int32_t value) {
  
  interval_ = value;
}
inline void InitializeRequest_ServiceOptions::set_interval(int32_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.ServiceOptions.interval)
}

// -------------------------------------------------------------------

// InitializeRequest_IPAddress

// string name = 1 [json_name = "name"];
inline void InitializeRequest_IPAddress::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InitializeRequest_IPAddress::name() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.IPAddress.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitializeRequest_IPAddress::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.IPAddress.name)
}
inline std::string* InitializeRequest_IPAddress::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.IPAddress.name)
  return _s;
}
inline const std::string& InitializeRequest_IPAddress::_internal_name() const {
  return name_.Get();
}
inline void InitializeRequest_IPAddress::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitializeRequest_IPAddress::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitializeRequest_IPAddress::release_name() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.IPAddress.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitializeRequest_IPAddress::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.IPAddress.name)
}

// string address = 2 [json_name = "address"];
inline void InitializeRequest_IPAddress::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& InitializeRequest_IPAddress::address() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.IPAddress.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitializeRequest_IPAddress::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.IPAddress.address)
}
inline std::string* InitializeRequest_IPAddress::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.IPAddress.address)
  return _s;
}
inline const std::string& InitializeRequest_IPAddress::_internal_address() const {
  return address_.Get();
}
inline void InitializeRequest_IPAddress::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitializeRequest_IPAddress::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitializeRequest_IPAddress::release_address() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.IPAddress.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitializeRequest_IPAddress::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.IPAddress.address)
}

// bool internal = 3 [json_name = "internal"];
inline void InitializeRequest_IPAddress::clear_internal() {
  internal_ = false;
}
inline bool InitializeRequest_IPAddress::_internal_internal() const {
  return internal_;
}
inline bool InitializeRequest_IPAddress::internal() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.IPAddress.internal)
  return _internal_internal();
}
inline void InitializeRequest_IPAddress::_internal_set_internal(bool value) {
  
  internal_ = value;
}
inline void InitializeRequest_IPAddress::set_internal(bool value) {
  _internal_set_internal(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.IPAddress.internal)
}

// .node.motor.v1.InitializeRequest.IPAddress.Family family = 4 [json_name = "family"];
inline void InitializeRequest_IPAddress::clear_family() {
  family_ = 0;
}
inline ::node::motor::v1::InitializeRequest_IPAddress_Family InitializeRequest_IPAddress::_internal_family() const {
  return static_cast< ::node::motor::v1::InitializeRequest_IPAddress_Family >(family_);
}
inline ::node::motor::v1::InitializeRequest_IPAddress_Family InitializeRequest_IPAddress::family() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.IPAddress.family)
  return _internal_family();
}
inline void InitializeRequest_IPAddress::_internal_set_family(::node::motor::v1::InitializeRequest_IPAddress_Family value) {
  
  family_ = value;
}
inline void InitializeRequest_IPAddress::set_family(::node::motor::v1::InitializeRequest_IPAddress_Family value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.IPAddress.family)
}

// -------------------------------------------------------------------

// InitializeRequest

// .common.v1.Location location = 1 [json_name = "location"];
inline bool InitializeRequest::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool InitializeRequest::has_location() const {
  return _internal_has_location();
}
inline const ::common::v1::Location& InitializeRequest::_internal_location() const {
  const ::common::v1::Location* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Location&>(
      ::common::v1::_Location_default_instance_);
}
inline const ::common::v1::Location& InitializeRequest::location() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.location)
  return _internal_location();
}
inline void InitializeRequest::unsafe_arena_set_allocated_location(
    ::common::v1::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.InitializeRequest.location)
}
inline ::common::v1::Location* InitializeRequest::release_location() {
  
  ::common::v1::Location* temp = location_;
  location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Location* InitializeRequest::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.location)
  
  ::common::v1::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::common::v1::Location* InitializeRequest::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Location>(GetArenaForAllocation());
    location_ = p;
  }
  return location_;
}
inline ::common::v1::Location* InitializeRequest::mutable_location() {
  ::common::v1::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.location)
  return _msg;
}
inline void InitializeRequest::set_allocated_location(::common::v1::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.location)
}

// .common.v1.Profile profile = 2 [json_name = "profile"];
inline bool InitializeRequest::_internal_has_profile() const {
  return this != internal_default_instance() && profile_ != nullptr;
}
inline bool InitializeRequest::has_profile() const {
  return _internal_has_profile();
}
inline const ::common::v1::Profile& InitializeRequest::_internal_profile() const {
  const ::common::v1::Profile* p = profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Profile&>(
      ::common::v1::_Profile_default_instance_);
}
inline const ::common::v1::Profile& InitializeRequest::profile() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.profile)
  return _internal_profile();
}
inline void InitializeRequest::unsafe_arena_set_allocated_profile(
    ::common::v1::Profile* profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_);
  }
  profile_ = profile;
  if (profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.InitializeRequest.profile)
}
inline ::common::v1::Profile* InitializeRequest::release_profile() {
  
  ::common::v1::Profile* temp = profile_;
  profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Profile* InitializeRequest::unsafe_arena_release_profile() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.profile)
  
  ::common::v1::Profile* temp = profile_;
  profile_ = nullptr;
  return temp;
}
inline ::common::v1::Profile* InitializeRequest::_internal_mutable_profile() {
  
  if (profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Profile>(GetArenaForAllocation());
    profile_ = p;
  }
  return profile_;
}
inline ::common::v1::Profile* InitializeRequest::mutable_profile() {
  ::common::v1::Profile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.profile)
  return _msg;
}
inline void InitializeRequest::set_allocated_profile(::common::v1::Profile* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_);
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile));
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    
  } else {
    
  }
  profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.profile)
}

// .common.v1.Connection connection = 3 [json_name = "connection"];
inline void InitializeRequest::clear_connection() {
  connection_ = 0;
}
inline ::common::v1::Connection InitializeRequest::_internal_connection() const {
  return static_cast< ::common::v1::Connection >(connection_);
}
inline ::common::v1::Connection InitializeRequest::connection() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.connection)
  return _internal_connection();
}
inline void InitializeRequest::_internal_set_connection(::common::v1::Connection value) {
  
  connection_ = value;
}
inline void InitializeRequest::set_connection(::common::v1::Connection value) {
  _internal_set_connection(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.connection)
}

// .node.motor.v1.InitializeRequest.HostOptions host_options = 4 [json_name = "hostOptions"];
inline bool InitializeRequest::_internal_has_host_options() const {
  return this != internal_default_instance() && host_options_ != nullptr;
}
inline bool InitializeRequest::has_host_options() const {
  return _internal_has_host_options();
}
inline void InitializeRequest::clear_host_options() {
  if (GetArenaForAllocation() == nullptr && host_options_ != nullptr) {
    delete host_options_;
  }
  host_options_ = nullptr;
}
inline const ::node::motor::v1::InitializeRequest_HostOptions& InitializeRequest::_internal_host_options() const {
  const ::node::motor::v1::InitializeRequest_HostOptions* p = host_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::node::motor::v1::InitializeRequest_HostOptions&>(
      ::node::motor::v1::_InitializeRequest_HostOptions_default_instance_);
}
inline const ::node::motor::v1::InitializeRequest_HostOptions& InitializeRequest::host_options() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.host_options)
  return _internal_host_options();
}
inline void InitializeRequest::unsafe_arena_set_allocated_host_options(
    ::node::motor::v1::InitializeRequest_HostOptions* host_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_options_);
  }
  host_options_ = host_options;
  if (host_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.InitializeRequest.host_options)
}
inline ::node::motor::v1::InitializeRequest_HostOptions* InitializeRequest::release_host_options() {
  
  ::node::motor::v1::InitializeRequest_HostOptions* temp = host_options_;
  host_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::node::motor::v1::InitializeRequest_HostOptions* InitializeRequest::unsafe_arena_release_host_options() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.host_options)
  
  ::node::motor::v1::InitializeRequest_HostOptions* temp = host_options_;
  host_options_ = nullptr;
  return temp;
}
inline ::node::motor::v1::InitializeRequest_HostOptions* InitializeRequest::_internal_mutable_host_options() {
  
  if (host_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::node::motor::v1::InitializeRequest_HostOptions>(GetArenaForAllocation());
    host_options_ = p;
  }
  return host_options_;
}
inline ::node::motor::v1::InitializeRequest_HostOptions* InitializeRequest::mutable_host_options() {
  ::node::motor::v1::InitializeRequest_HostOptions* _msg = _internal_mutable_host_options();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.host_options)
  return _msg;
}
inline void InitializeRequest::set_allocated_host_options(::node::motor::v1::InitializeRequest_HostOptions* host_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete host_options_;
  }
  if (host_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::node::motor::v1::InitializeRequest_HostOptions>::GetOwningArena(host_options);
    if (message_arena != submessage_arena) {
      host_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_options, submessage_arena);
    }
    
  } else {
    
  }
  host_options_ = host_options;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.host_options)
}

// .node.motor.v1.InitializeRequest.ServiceOptions service_options = 5 [json_name = "serviceOptions"];
inline bool InitializeRequest::_internal_has_service_options() const {
  return this != internal_default_instance() && service_options_ != nullptr;
}
inline bool InitializeRequest::has_service_options() const {
  return _internal_has_service_options();
}
inline void InitializeRequest::clear_service_options() {
  if (GetArenaForAllocation() == nullptr && service_options_ != nullptr) {
    delete service_options_;
  }
  service_options_ = nullptr;
}
inline const ::node::motor::v1::InitializeRequest_ServiceOptions& InitializeRequest::_internal_service_options() const {
  const ::node::motor::v1::InitializeRequest_ServiceOptions* p = service_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::node::motor::v1::InitializeRequest_ServiceOptions&>(
      ::node::motor::v1::_InitializeRequest_ServiceOptions_default_instance_);
}
inline const ::node::motor::v1::InitializeRequest_ServiceOptions& InitializeRequest::service_options() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.service_options)
  return _internal_service_options();
}
inline void InitializeRequest::unsafe_arena_set_allocated_service_options(
    ::node::motor::v1::InitializeRequest_ServiceOptions* service_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_options_);
  }
  service_options_ = service_options;
  if (service_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.InitializeRequest.service_options)
}
inline ::node::motor::v1::InitializeRequest_ServiceOptions* InitializeRequest::release_service_options() {
  
  ::node::motor::v1::InitializeRequest_ServiceOptions* temp = service_options_;
  service_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::node::motor::v1::InitializeRequest_ServiceOptions* InitializeRequest::unsafe_arena_release_service_options() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.service_options)
  
  ::node::motor::v1::InitializeRequest_ServiceOptions* temp = service_options_;
  service_options_ = nullptr;
  return temp;
}
inline ::node::motor::v1::InitializeRequest_ServiceOptions* InitializeRequest::_internal_mutable_service_options() {
  
  if (service_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::node::motor::v1::InitializeRequest_ServiceOptions>(GetArenaForAllocation());
    service_options_ = p;
  }
  return service_options_;
}
inline ::node::motor::v1::InitializeRequest_ServiceOptions* InitializeRequest::mutable_service_options() {
  ::node::motor::v1::InitializeRequest_ServiceOptions* _msg = _internal_mutable_service_options();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.service_options)
  return _msg;
}
inline void InitializeRequest::set_allocated_service_options(::node::motor::v1::InitializeRequest_ServiceOptions* service_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete service_options_;
  }
  if (service_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::node::motor::v1::InitializeRequest_ServiceOptions>::GetOwningArena(service_options);
    if (message_arena != submessage_arena) {
      service_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_options, submessage_arena);
    }
    
  } else {
    
  }
  service_options_ = service_options;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.service_options)
}

// .node.motor.v1.InitializeRequest.DeviceOptions device_options = 6 [json_name = "deviceOptions"];
inline bool InitializeRequest::_internal_has_device_options() const {
  return this != internal_default_instance() && device_options_ != nullptr;
}
inline bool InitializeRequest::has_device_options() const {
  return _internal_has_device_options();
}
inline void InitializeRequest::clear_device_options() {
  if (GetArenaForAllocation() == nullptr && device_options_ != nullptr) {
    delete device_options_;
  }
  device_options_ = nullptr;
}
inline const ::node::motor::v1::InitializeRequest_DeviceOptions& InitializeRequest::_internal_device_options() const {
  const ::node::motor::v1::InitializeRequest_DeviceOptions* p = device_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::node::motor::v1::InitializeRequest_DeviceOptions&>(
      ::node::motor::v1::_InitializeRequest_DeviceOptions_default_instance_);
}
inline const ::node::motor::v1::InitializeRequest_DeviceOptions& InitializeRequest::device_options() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.device_options)
  return _internal_device_options();
}
inline void InitializeRequest::unsafe_arena_set_allocated_device_options(
    ::node::motor::v1::InitializeRequest_DeviceOptions* device_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_options_);
  }
  device_options_ = device_options;
  if (device_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.InitializeRequest.device_options)
}
inline ::node::motor::v1::InitializeRequest_DeviceOptions* InitializeRequest::release_device_options() {
  
  ::node::motor::v1::InitializeRequest_DeviceOptions* temp = device_options_;
  device_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::node::motor::v1::InitializeRequest_DeviceOptions* InitializeRequest::unsafe_arena_release_device_options() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.device_options)
  
  ::node::motor::v1::InitializeRequest_DeviceOptions* temp = device_options_;
  device_options_ = nullptr;
  return temp;
}
inline ::node::motor::v1::InitializeRequest_DeviceOptions* InitializeRequest::_internal_mutable_device_options() {
  
  if (device_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::node::motor::v1::InitializeRequest_DeviceOptions>(GetArenaForAllocation());
    device_options_ = p;
  }
  return device_options_;
}
inline ::node::motor::v1::InitializeRequest_DeviceOptions* InitializeRequest::mutable_device_options() {
  ::node::motor::v1::InitializeRequest_DeviceOptions* _msg = _internal_mutable_device_options();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.device_options)
  return _msg;
}
inline void InitializeRequest::set_allocated_device_options(::node::motor::v1::InitializeRequest_DeviceOptions* device_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_options_;
  }
  if (device_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::node::motor::v1::InitializeRequest_DeviceOptions>::GetOwningArena(device_options);
    if (message_arena != submessage_arena) {
      device_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_options, submessage_arena);
    }
    
  } else {
    
  }
  device_options_ = device_options;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.device_options)
}

// .common.v1.Environment environment = 7 [json_name = "environment"];
inline void InitializeRequest::clear_environment() {
  environment_ = 0;
}
inline ::common::v1::Environment InitializeRequest::_internal_environment() const {
  return static_cast< ::common::v1::Environment >(environment_);
}
inline ::common::v1::Environment InitializeRequest::environment() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.environment)
  return _internal_environment();
}
inline void InitializeRequest::_internal_set_environment(::common::v1::Environment value) {
  
  environment_ = value;
}
inline void InitializeRequest::set_environment(::common::v1::Environment value) {
  _internal_set_environment(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.environment)
}

// map<string, string> variables = 8 [json_name = "variables"];
inline int InitializeRequest::_internal_variables_size() const {
  return variables_.size();
}
inline int InitializeRequest::variables_size() const {
  return _internal_variables_size();
}
inline void InitializeRequest::clear_variables() {
  variables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InitializeRequest::_internal_variables() const {
  return variables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InitializeRequest::variables() const {
  // @@protoc_insertion_point(field_map:node.motor.v1.InitializeRequest.variables)
  return _internal_variables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InitializeRequest::_internal_mutable_variables() {
  return variables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InitializeRequest::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_map:node.motor.v1.InitializeRequest.variables)
  return _internal_mutable_variables();
}

// string wallet_passphrase = 9 [json_name = "walletPassphrase"];
inline void InitializeRequest::clear_wallet_passphrase() {
  wallet_passphrase_.ClearToEmpty();
}
inline const std::string& InitializeRequest::wallet_passphrase() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.InitializeRequest.wallet_passphrase)
  return _internal_wallet_passphrase();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitializeRequest::set_wallet_passphrase(ArgT0&& arg0, ArgT... args) {
 
 wallet_passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.InitializeRequest.wallet_passphrase)
}
inline std::string* InitializeRequest::mutable_wallet_passphrase() {
  std::string* _s = _internal_mutable_wallet_passphrase();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.InitializeRequest.wallet_passphrase)
  return _s;
}
inline const std::string& InitializeRequest::_internal_wallet_passphrase() const {
  return wallet_passphrase_.Get();
}
inline void InitializeRequest::_internal_set_wallet_passphrase(const std::string& value) {
  
  wallet_passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitializeRequest::_internal_mutable_wallet_passphrase() {
  
  return wallet_passphrase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitializeRequest::release_wallet_passphrase() {
  // @@protoc_insertion_point(field_release:node.motor.v1.InitializeRequest.wallet_passphrase)
  return wallet_passphrase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitializeRequest::set_allocated_wallet_passphrase(std::string* wallet_passphrase) {
  if (wallet_passphrase != nullptr) {
    
  } else {
    
  }
  wallet_passphrase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wallet_passphrase,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wallet_passphrase_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wallet_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.InitializeRequest.wallet_passphrase)
}

// -------------------------------------------------------------------

// ShareRequest

// .common.v1.Peer peer = 1 [json_name = "peer"];
inline bool ShareRequest::_internal_has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline bool ShareRequest::has_peer() const {
  return _internal_has_peer();
}
inline const ::common::v1::Peer& ShareRequest::_internal_peer() const {
  const ::common::v1::Peer* p = peer_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& ShareRequest::peer() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.ShareRequest.peer)
  return _internal_peer();
}
inline void ShareRequest::unsafe_arena_set_allocated_peer(
    ::common::v1::Peer* peer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.ShareRequest.peer)
}
inline ::common::v1::Peer* ShareRequest::release_peer() {
  
  ::common::v1::Peer* temp = peer_;
  peer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* ShareRequest::unsafe_arena_release_peer() {
  // @@protoc_insertion_point(field_release:node.motor.v1.ShareRequest.peer)
  
  ::common::v1::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* ShareRequest::_internal_mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    peer_ = p;
  }
  return peer_;
}
inline ::common::v1::Peer* ShareRequest::mutable_peer() {
  ::common::v1::Peer* _msg = _internal_mutable_peer();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.ShareRequest.peer)
  return _msg;
}
inline void ShareRequest::set_allocated_peer(::common::v1::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer));
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.ShareRequest.peer)
}

// .common.v1.MessageItem message = 2 [json_name = "message"];
inline bool ShareRequest::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ShareRequest::has_message() const {
  return _internal_has_message();
}
inline const ::common::v1::MessageItem& ShareRequest::_internal_message() const {
  const ::common::v1::MessageItem* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::MessageItem&>(
      ::common::v1::_MessageItem_default_instance_);
}
inline const ::common::v1::MessageItem& ShareRequest::message() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.ShareRequest.message)
  return _internal_message();
}
inline void ShareRequest::unsafe_arena_set_allocated_message(
    ::common::v1::MessageItem* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.ShareRequest.message)
}
inline ::common::v1::MessageItem* ShareRequest::release_message() {
  
  ::common::v1::MessageItem* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::MessageItem* ShareRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:node.motor.v1.ShareRequest.message)
  
  ::common::v1::MessageItem* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::common::v1::MessageItem* ShareRequest::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::MessageItem>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::common::v1::MessageItem* ShareRequest::mutable_message() {
  ::common::v1::MessageItem* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.ShareRequest.message)
  return _msg;
}
inline void ShareRequest::set_allocated_message(::common::v1::MessageItem* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.ShareRequest.message)
}

// repeated .common.v1.SupplyItem items = 3 [json_name = "items"];
inline int ShareRequest::_internal_items_size() const {
  return items_.size();
}
inline int ShareRequest::items_size() const {
  return _internal_items_size();
}
inline ::common::v1::SupplyItem* ShareRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:node.motor.v1.ShareRequest.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::SupplyItem >*
ShareRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:node.motor.v1.ShareRequest.items)
  return &items_;
}
inline const ::common::v1::SupplyItem& ShareRequest::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::common::v1::SupplyItem& ShareRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:node.motor.v1.ShareRequest.items)
  return _internal_items(index);
}
inline ::common::v1::SupplyItem* ShareRequest::_internal_add_items() {
  return items_.Add();
}
inline ::common::v1::SupplyItem* ShareRequest::add_items() {
  ::common::v1::SupplyItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:node.motor.v1.ShareRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::SupplyItem >&
ShareRequest::items() const {
  // @@protoc_insertion_point(field_list:node.motor.v1.ShareRequest.items)
  return items_;
}

// -------------------------------------------------------------------

// DecideRequest

// bool decision = 1 [json_name = "decision"];
inline void DecideRequest::clear_decision() {
  decision_ = false;
}
inline bool DecideRequest::_internal_decision() const {
  return decision_;
}
inline bool DecideRequest::decision() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.DecideRequest.decision)
  return _internal_decision();
}
inline void DecideRequest::_internal_set_decision(bool value) {
  
  decision_ = value;
}
inline void DecideRequest::set_decision(bool value) {
  _internal_set_decision(value);
  // @@protoc_insertion_point(field_set:node.motor.v1.DecideRequest.decision)
}

// .common.v1.Peer peer = 2 [json_name = "peer"];
inline bool DecideRequest::_internal_has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline bool DecideRequest::has_peer() const {
  return _internal_has_peer();
}
inline const ::common::v1::Peer& DecideRequest::_internal_peer() const {
  const ::common::v1::Peer* p = peer_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& DecideRequest::peer() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.DecideRequest.peer)
  return _internal_peer();
}
inline void DecideRequest::unsafe_arena_set_allocated_peer(
    ::common::v1::Peer* peer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:node.motor.v1.DecideRequest.peer)
}
inline ::common::v1::Peer* DecideRequest::release_peer() {
  
  ::common::v1::Peer* temp = peer_;
  peer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* DecideRequest::unsafe_arena_release_peer() {
  // @@protoc_insertion_point(field_release:node.motor.v1.DecideRequest.peer)
  
  ::common::v1::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* DecideRequest::_internal_mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    peer_ = p;
  }
  return peer_;
}
inline ::common::v1::Peer* DecideRequest::mutable_peer() {
  ::common::v1::Peer* _msg = _internal_mutable_peer();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.DecideRequest.peer)
  return _msg;
}
inline void DecideRequest::set_allocated_peer(::common::v1::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer));
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.DecideRequest.peer)
}

// -------------------------------------------------------------------

// SearchRequest

// string s_name = 1 [json_name = "sName"];
inline bool SearchRequest::_internal_has_s_name() const {
  return query_case() == kSName;
}
inline bool SearchRequest::has_s_name() const {
  return _internal_has_s_name();
}
inline void SearchRequest::set_has_s_name() {
  _oneof_case_[0] = kSName;
}
inline void SearchRequest::clear_s_name() {
  if (_internal_has_s_name()) {
    query_.s_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_query();
  }
}
inline const std::string& SearchRequest::s_name() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.SearchRequest.s_name)
  return _internal_s_name();
}
template <typename ArgT0, typename... ArgT>
inline void SearchRequest::set_s_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_s_name()) {
    clear_query();
    set_has_s_name();
    query_.s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.SearchRequest.s_name)
}
inline std::string* SearchRequest::mutable_s_name() {
  std::string* _s = _internal_mutable_s_name();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.SearchRequest.s_name)
  return _s;
}
inline const std::string& SearchRequest::_internal_s_name() const {
  if (_internal_has_s_name()) {
    return query_.s_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SearchRequest::_internal_set_s_name(const std::string& value) {
  if (!_internal_has_s_name()) {
    clear_query();
    set_has_s_name();
    query_.s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_s_name() {
  if (!_internal_has_s_name()) {
    clear_query();
    set_has_s_name();
    query_.s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return query_.s_name_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequest::release_s_name() {
  // @@protoc_insertion_point(field_release:node.motor.v1.SearchRequest.s_name)
  if (_internal_has_s_name()) {
    clear_has_query();
    return query_.s_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SearchRequest::set_allocated_s_name(std::string* s_name) {
  if (has_query()) {
    clear_query();
  }
  if (s_name != nullptr) {
    set_has_s_name();
    query_.s_name_.UnsafeSetDefault(s_name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(s_name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.SearchRequest.s_name)
}

// string peer_id = 2 [json_name = "peerId"];
inline bool SearchRequest::_internal_has_peer_id() const {
  return query_case() == kPeerId;
}
inline bool SearchRequest::has_peer_id() const {
  return _internal_has_peer_id();
}
inline void SearchRequest::set_has_peer_id() {
  _oneof_case_[0] = kPeerId;
}
inline void SearchRequest::clear_peer_id() {
  if (_internal_has_peer_id()) {
    query_.peer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_query();
  }
}
inline const std::string& SearchRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:node.motor.v1.SearchRequest.peer_id)
  return _internal_peer_id();
}
template <typename ArgT0, typename... ArgT>
inline void SearchRequest::set_peer_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_peer_id()) {
    clear_query();
    set_has_peer_id();
    query_.peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.motor.v1.SearchRequest.peer_id)
}
inline std::string* SearchRequest::mutable_peer_id() {
  std::string* _s = _internal_mutable_peer_id();
  // @@protoc_insertion_point(field_mutable:node.motor.v1.SearchRequest.peer_id)
  return _s;
}
inline const std::string& SearchRequest::_internal_peer_id() const {
  if (_internal_has_peer_id()) {
    return query_.peer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SearchRequest::_internal_set_peer_id(const std::string& value) {
  if (!_internal_has_peer_id()) {
    clear_query();
    set_has_peer_id();
    query_.peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  query_.peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_peer_id() {
  if (!_internal_has_peer_id()) {
    clear_query();
    set_has_peer_id();
    query_.peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return query_.peer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:node.motor.v1.SearchRequest.peer_id)
  if (_internal_has_peer_id()) {
    clear_has_query();
    return query_.peer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SearchRequest::set_allocated_peer_id(std::string* peer_id) {
  if (has_query()) {
    clear_query();
  }
  if (peer_id != nullptr) {
    set_has_peer_id();
    query_.peer_id_.UnsafeSetDefault(peer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(peer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:node.motor.v1.SearchRequest.peer_id)
}

inline bool SearchRequest::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void SearchRequest::clear_has_query() {
  _oneof_case_[0] = QUERY_NOT_SET;
}
inline SearchRequest::QueryCase SearchRequest::query_case() const {
  return SearchRequest::QueryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OnLobbyRefreshRequest

// -------------------------------------------------------------------

// OnMailboxMessageRequest

// -------------------------------------------------------------------

// OnTransmitDecisionRequest

// -------------------------------------------------------------------

// OnTransmitInviteRequest

// -------------------------------------------------------------------

// OnTransmitProgressRequest

// -------------------------------------------------------------------

// OnTransmitCompleteRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace motor
}  // namespace node

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::node::motor::v1::InitializeRequest_IPAddress_Family> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::node::motor::v1::InitializeRequest_IPAddress_Family>() {
  return ::node::motor::v1::InitializeRequest_IPAddress_Family_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fmotor_2fv1_2frequest_2eproto
