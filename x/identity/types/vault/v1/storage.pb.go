// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol/vault/v1/storage.proto

// Package Motor is used for defining a Motor node and its properties.

package v1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/sonrhq/core/x/identity/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RefreshSharesRequest is the request to refresh the keypair.
type RefreshSharesRequest struct {
	CredentialResponse string `protobuf:"bytes,1,opt,name=credential_response,json=credentialResponse,proto3" json:"credential_response,omitempty"`
	SessionId          string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *RefreshSharesRequest) Reset()         { *m = RefreshSharesRequest{} }
func (m *RefreshSharesRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshSharesRequest) ProtoMessage()    {}
func (*RefreshSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af55eaf18dea4938, []int{0}
}
func (m *RefreshSharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSharesRequest.Merge(m, src)
}
func (m *RefreshSharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSharesRequest proto.InternalMessageInfo

func (m *RefreshSharesRequest) GetCredentialResponse() string {
	if m != nil {
		return m.CredentialResponse
	}
	return ""
}

func (m *RefreshSharesRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

// RefreshSharesResponse is the response to a Refresh request.
type RefreshSharesResponse struct {
	Id          []byte             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address     string             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	DidDocument *types.DidDocument `protobuf:"bytes,3,opt,name=did_document,json=didDocument,proto3" json:"did_document,omitempty"`
}

func (m *RefreshSharesResponse) Reset()         { *m = RefreshSharesResponse{} }
func (m *RefreshSharesResponse) String() string { return proto.CompactTextString(m) }
func (*RefreshSharesResponse) ProtoMessage()    {}
func (*RefreshSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af55eaf18dea4938, []int{1}
}
func (m *RefreshSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSharesResponse.Merge(m, src)
}
func (m *RefreshSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSharesResponse proto.InternalMessageInfo

func (m *RefreshSharesResponse) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RefreshSharesResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RefreshSharesResponse) GetDidDocument() *types.DidDocument {
	if m != nil {
		return m.DidDocument
	}
	return nil
}

func init() {
	proto.RegisterType((*RefreshSharesRequest)(nil), "sonrhq.protocol.vault.v1.RefreshSharesRequest")
	proto.RegisterType((*RefreshSharesResponse)(nil), "sonrhq.protocol.vault.v1.RefreshSharesResponse")
}

func init() { proto.RegisterFile("protocol/vault/v1/storage.proto", fileDescriptor_af55eaf18dea4938) }

var fileDescriptor_af55eaf18dea4938 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x0b, 0xd3, 0x30,
	0x14, 0x5e, 0x2a, 0x28, 0xcb, 0xa6, 0x87, 0xa8, 0x50, 0xaa, 0xd6, 0x51, 0x44, 0x86, 0x87, 0xc4,
	0xcd, 0x9b, 0x47, 0x19, 0x88, 0x1e, 0x3b, 0xf0, 0xe0, 0x65, 0x64, 0xcd, 0x5b, 0x1b, 0xe8, 0x92,
	0x2e, 0x49, 0x8b, 0xbb, 0x7a, 0xf4, 0x24, 0x78, 0xf1, 0x5f, 0xf0, 0x3f, 0xf1, 0x38, 0xf0, 0xe2,
	0x51, 0x36, 0xff, 0x10, 0x69, 0x9b, 0x39, 0xfc, 0x05, 0x1e, 0x5f, 0xbe, 0xef, 0x7b, 0xdf, 0xcb,
	0xf7, 0x1e, 0xbe, 0x5f, 0x19, 0xed, 0x74, 0xa6, 0x4b, 0xd6, 0xf0, 0xba, 0x74, 0xac, 0x99, 0x31,
	0xeb, 0xb4, 0xe1, 0x39, 0xd0, 0x0e, 0x21, 0xa1, 0xd5, 0xca, 0x14, 0x3b, 0x7a, 0xe6, 0xd1, 0x8e,
	0x47, 0x9b, 0x59, 0x14, 0x65, 0xda, 0x00, 0x93, 0x02, 0x94, 0x93, 0x6e, 0xdf, 0x2a, 0x85, 0x14,
	0x3d, 0x2f, 0xba, 0x9b, 0x6b, 0x9d, 0x97, 0xc0, 0x78, 0x25, 0x19, 0x57, 0x4a, 0x3b, 0xee, 0xa4,
	0x56, 0xd6, 0xa3, 0xf1, 0x9f, 0xa6, 0x5b, 0x2d, 0xa0, 0xf4, 0x78, 0xb2, 0xc1, 0xb7, 0x52, 0xd8,
	0x18, 0xb0, 0xc5, 0xb2, 0xe0, 0x06, 0x6c, 0x0a, 0xbb, 0x1a, 0xac, 0x23, 0x0c, 0xdf, 0xcc, 0x0c,
	0x74, 0x86, 0xbc, 0x5c, 0x19, 0xb0, 0x95, 0x56, 0x16, 0x42, 0x34, 0x41, 0xd3, 0x61, 0x4a, 0x2e,
	0x50, 0xea, 0x11, 0x72, 0x0f, 0x63, 0x0b, 0xd6, 0x4a, 0xad, 0x56, 0x52, 0x84, 0x41, 0xc7, 0x1b,
	0xfa, 0x97, 0x17, 0x22, 0x79, 0x87, 0xf0, 0xed, 0xdf, 0x8c, 0xbc, 0xf0, 0x06, 0x0e, 0xa4, 0xe8,
	0x1a, 0x8f, 0xd3, 0x40, 0x0a, 0x12, 0xe2, 0x6b, 0x5c, 0x08, 0x03, 0xd6, 0xfa, 0x2e, 0xe7, 0x92,
	0x3c, 0xc7, 0x63, 0x21, 0xc5, 0x4a, 0xe8, 0xac, 0xde, 0x82, 0x72, 0xe1, 0x95, 0x09, 0x9a, 0x8e,
	0xe6, 0x0f, 0xa8, 0x8f, 0xad, 0xcd, 0x88, 0x9e, 0x33, 0xa2, 0xcd, 0x8c, 0x2e, 0xa4, 0x58, 0x78,
	0x6e, 0x3a, 0x12, 0x97, 0x62, 0xfe, 0x09, 0xe1, 0xf1, 0xab, 0x36, 0x8e, 0x65, 0x9f, 0x3f, 0xf9,
	0x88, 0xf0, 0xf5, 0x5f, 0xa6, 0x23, 0x94, 0xfe, 0x6b, 0x19, 0xf4, 0x6f, 0x79, 0x45, 0xec, 0xbf,
	0xf9, 0xfd, 0xb7, 0x93, 0x87, 0x6f, 0xbf, 0x7c, 0xff, 0x10, 0x4c, 0x9e, 0xa2, 0x47, 0xc9, 0x1d,
	0xd6, 0x6a, 0xfd, 0x82, 0xfc, 0x49, 0x30, 0xd3, 0xab, 0x9e, 0xbd, 0xfc, 0x7c, 0x8c, 0xd1, 0xe1,
	0x18, 0xa3, 0x6f, 0xc7, 0x18, 0xbd, 0x3f, 0xc5, 0x83, 0xc3, 0x29, 0x1e, 0x7c, 0x3d, 0xc5, 0x83,
	0xd7, 0x8f, 0x73, 0xe9, 0x8a, 0x7a, 0x4d, 0x33, 0xbd, 0x65, 0xbd, 0x39, 0xeb, 0xce, 0xe4, 0xcd,
	0xe5, 0x50, 0xdc, 0xbe, 0x02, 0xfb, 0x73, 0xf3, 0xeb, 0xab, 0xdd, 0x70, 0x4f, 0x7e, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x1e, 0x5f, 0xee, 0xf5, 0x8a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VaultStorageClient is the client API for VaultStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VaultStorageClient interface {
	// RefreshShares refreshes the Wallet shares and returns the updated configuration.
	RefreshShares(ctx context.Context, in *RefreshSharesRequest, opts ...grpc.CallOption) (*RefreshSharesResponse, error)
}

type vaultStorageClient struct {
	cc grpc1.ClientConn
}

func NewVaultStorageClient(cc grpc1.ClientConn) VaultStorageClient {
	return &vaultStorageClient{cc}
}

func (c *vaultStorageClient) RefreshShares(ctx context.Context, in *RefreshSharesRequest, opts ...grpc.CallOption) (*RefreshSharesResponse, error) {
	out := new(RefreshSharesResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.protocol.vault.v1.VaultStorage/RefreshShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultStorageServer is the server API for VaultStorage service.
type VaultStorageServer interface {
	// RefreshShares refreshes the Wallet shares and returns the updated configuration.
	RefreshShares(context.Context, *RefreshSharesRequest) (*RefreshSharesResponse, error)
}

// UnimplementedVaultStorageServer can be embedded to have forward compatible implementations.
type UnimplementedVaultStorageServer struct {
}

func (*UnimplementedVaultStorageServer) RefreshShares(ctx context.Context, req *RefreshSharesRequest) (*RefreshSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshShares not implemented")
}

func RegisterVaultStorageServer(s grpc1.Server, srv VaultStorageServer) {
	s.RegisterService(&_VaultStorage_serviceDesc, srv)
}

func _VaultStorage_RefreshShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultStorageServer).RefreshShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.protocol.vault.v1.VaultStorage/RefreshShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultStorageServer).RefreshShares(ctx, req.(*RefreshSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VaultStorage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.protocol.vault.v1.VaultStorage",
	HandlerType: (*VaultStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshShares",
			Handler:    _VaultStorage_RefreshShares_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/vault/v1/storage.proto",
}

func (m *RefreshSharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshSharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CredentialResponse) > 0 {
		i -= len(m.CredentialResponse)
		copy(dAtA[i:], m.CredentialResponse)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.CredentialResponse)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RefreshSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DidDocument != nil {
		{
			size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RefreshSharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialResponse)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *RefreshSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.DidDocument != nil {
		l = m.DidDocument.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func sovStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RefreshSharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocument == nil {
				m.DidDocument = &types.DidDocument{}
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorage = fmt.Errorf("proto: unexpected end of group")
)
