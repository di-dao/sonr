// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bucket/v1/bucket.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BucketType is the type of a bucket.
type BucketType int32

const (
	// BucketTypeUnspecified is the default value.
	BucketType_BUCKET_TYPE_UNSPECIFIED BucketType = 0
	// BucketTypeApp is an App specific bucket. For Assets regarding the service.
	BucketType_BUCKET_TYPE_APP BucketType = 1
	// BucketTypeUser is a User specific bucket. For any remote user data that is required
	// to be stored in the Network.
	BucketType_BUCKET_TYPE_USER BucketType = 2
)

var BucketType_name = map[int32]string{
	0: "BUCKET_TYPE_UNSPECIFIED",
	1: "BUCKET_TYPE_APP",
	2: "BUCKET_TYPE_USER",
}

var BucketType_value = map[string]int32{
	"BUCKET_TYPE_UNSPECIFIED": 0,
	"BUCKET_TYPE_APP":         1,
	"BUCKET_TYPE_USER":        2,
}

func (x BucketType) String() string {
	return proto.EnumName(BucketType_name, int32(x))
}

func (BucketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7d367366d18ad104, []int{0}
}

// EventType is the type of event being performed on a Bucket.
type BucketEventType int32

const (
	// EventTypeUnspecified is the default value.
	BucketEventType_BUCKET_EVENT_TYPE_UNSPECIFIED BucketEventType = 0
	// EventTypeGet is a get event being performed on a Bucket record.
	BucketEventType_BUCKET_EVENT_TYPE_GET BucketEventType = 1
	// EventTypeSet is a set event on the Bucket store.
	BucketEventType_BUCKET_EVENT_TYPE_SET BucketEventType = 2
	// EventTypeDelete is a delete event on the Bucket store.
	BucketEventType_BUCKET_EVENT_TYPE_DELETE BucketEventType = 3
)

var BucketEventType_name = map[int32]string{
	0: "BUCKET_EVENT_TYPE_UNSPECIFIED",
	1: "BUCKET_EVENT_TYPE_GET",
	2: "BUCKET_EVENT_TYPE_SET",
	3: "BUCKET_EVENT_TYPE_DELETE",
}

var BucketEventType_value = map[string]int32{
	"BUCKET_EVENT_TYPE_UNSPECIFIED": 0,
	"BUCKET_EVENT_TYPE_GET":         1,
	"BUCKET_EVENT_TYPE_SET":         2,
	"BUCKET_EVENT_TYPE_DELETE":      3,
}

func (x BucketEventType) String() string {
	return proto.EnumName(BucketEventType_name, int32(x))
}

func (BucketEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7d367366d18ad104, []int{1}
}

// Bucket is a collection of objects.
type BucketDoc struct {
	// Label is human-readable name of the bucket.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Description is a human-readable description of the bucket.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Type is the kind of bucket for either App specific or User specific data.
	Type BucketType `protobuf:"varint,3,opt,name=type,proto3,enum=sonrio.sonr.bucket.BucketType" json:"type,omitempty"`
	// Did is the identifier of the bucket.
	Did string `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
	// Objects are stored in a tree structure.
	ObjectDids []string `protobuf:"bytes,5,rep,name=object_dids,json=objectDids,proto3" json:"object_dids,omitempty"`
}

func (m *BucketDoc) Reset()         { *m = BucketDoc{} }
func (m *BucketDoc) String() string { return proto.CompactTextString(m) }
func (*BucketDoc) ProtoMessage()    {}
func (*BucketDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d367366d18ad104, []int{0}
}
func (m *BucketDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BucketDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BucketDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BucketDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketDoc.Merge(m, src)
}
func (m *BucketDoc) XXX_Size() int {
	return m.Size()
}
func (m *BucketDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketDoc.DiscardUnknown(m)
}

var xxx_messageInfo_BucketDoc proto.InternalMessageInfo

func (m *BucketDoc) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *BucketDoc) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BucketDoc) GetType() BucketType {
	if m != nil {
		return m.Type
	}
	return BucketType_BUCKET_TYPE_UNSPECIFIED
}

func (m *BucketDoc) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *BucketDoc) GetObjectDids() []string {
	if m != nil {
		return m.ObjectDids
	}
	return nil
}

// BucketEvent is the base event type for all Bucket events.
type BucketEvent struct {
	// Owner is the peer that originated the event.
	PeerDid string `protobuf:"bytes,1,opt,name=peer_did,json=peerDid,proto3" json:"peer_did,omitempty"`
	// Type is the type of event being performed on a Bucket.
	Type BucketEventType `protobuf:"varint,2,opt,name=type,proto3,enum=sonrio.sonr.bucket.BucketEventType" json:"type,omitempty"`
	// Metadata is the metadata associated with the event.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BucketEvent) Reset()         { *m = BucketEvent{} }
func (m *BucketEvent) String() string { return proto.CompactTextString(m) }
func (*BucketEvent) ProtoMessage()    {}
func (*BucketEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d367366d18ad104, []int{1}
}
func (m *BucketEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BucketEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BucketEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BucketEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketEvent.Merge(m, src)
}
func (m *BucketEvent) XXX_Size() int {
	return m.Size()
}
func (m *BucketEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BucketEvent proto.InternalMessageInfo

func (m *BucketEvent) GetPeerDid() string {
	if m != nil {
		return m.PeerDid
	}
	return ""
}

func (m *BucketEvent) GetType() BucketEventType {
	if m != nil {
		return m.Type
	}
	return BucketEventType_BUCKET_EVENT_TYPE_UNSPECIFIED
}

func (m *BucketEvent) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterEnum("sonrio.sonr.bucket.BucketType", BucketType_name, BucketType_value)
	proto.RegisterEnum("sonrio.sonr.bucket.BucketEventType", BucketEventType_name, BucketEventType_value)
	proto.RegisterType((*BucketDoc)(nil), "sonrio.sonr.bucket.BucketDoc")
	proto.RegisterType((*BucketEvent)(nil), "sonrio.sonr.bucket.BucketEvent")
	proto.RegisterMapType((map[string]string)(nil), "sonrio.sonr.bucket.BucketEvent.MetadataEntry")
}

func init() { proto.RegisterFile("bucket/v1/bucket.proto", fileDescriptor_7d367366d18ad104) }

var fileDescriptor_7d367366d18ad104 = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xda, 0x29, 0x34, 0x13, 0x41, 0xad, 0xa5, 0x80, 0xcb, 0x8f, 0x31, 0x45, 0x42, 0x51,
	0xa5, 0xda, 0x22, 0x1c, 0x40, 0x70, 0x81, 0xd4, 0x0b, 0x8a, 0x80, 0x2a, 0x72, 0x5c, 0x24, 0xb8,
	0x44, 0xb6, 0x77, 0x05, 0x4b, 0xd3, 0xac, 0x65, 0x6f, 0x22, 0xfc, 0x06, 0x1c, 0x79, 0x0e, 0x9e,
	0x84, 0x63, 0x8f, 0x1c, 0x51, 0x72, 0xe2, 0x2d, 0xd0, 0xae, 0x2d, 0x48, 0x49, 0x50, 0x4f, 0x3b,
	0xb3, 0xdf, 0x37, 0x33, 0xdf, 0x7e, 0x3b, 0x70, 0x2d, 0x99, 0xa6, 0xc7, 0x4c, 0xfa, 0xb3, 0x07,
	0x7e, 0x15, 0x79, 0x59, 0x2e, 0xa4, 0xc0, 0xb8, 0x10, 0x93, 0x9c, 0x0b, 0x4f, 0x1d, 0x5e, 0x85,
	0xec, 0x7e, 0x43, 0xd0, 0xea, 0xe9, 0x30, 0x10, 0x29, 0xde, 0x86, 0x8d, 0x71, 0x9c, 0xb0, 0xb1,
	0x8d, 0x5c, 0xd4, 0x69, 0x85, 0x55, 0x82, 0x5d, 0x68, 0x53, 0x56, 0xa4, 0x39, 0xcf, 0x24, 0x17,
	0x13, 0xdb, 0xd0, 0xd8, 0xf2, 0x15, 0xee, 0x42, 0x53, 0x96, 0x19, 0xb3, 0x4d, 0x17, 0x75, 0x2e,
	0x77, 0x1d, 0x6f, 0x75, 0x90, 0x57, 0x0d, 0x89, 0xca, 0x8c, 0x85, 0x9a, 0x8b, 0x2d, 0x30, 0x29,
	0xa7, 0x76, 0x53, 0x77, 0x53, 0x21, 0xbe, 0x03, 0x6d, 0x91, 0x7c, 0x62, 0xa9, 0x1c, 0x51, 0x4e,
	0x0b, 0x7b, 0xc3, 0x35, 0x3b, 0xad, 0x10, 0xaa, 0xab, 0x80, 0xd3, 0x62, 0xf7, 0x17, 0x82, 0x76,
	0xd5, 0x87, 0xcc, 0xd8, 0x44, 0xe2, 0x1d, 0xd8, 0xcc, 0x18, 0xcb, 0x15, 0xbd, 0x56, 0x7c, 0x51,
	0xe5, 0x01, 0xa7, 0xf8, 0x51, 0xad, 0xc8, 0xd0, 0x8a, 0xee, 0xfd, 0x5f, 0x91, 0xee, 0xb4, 0x24,
	0xab, 0x0f, 0x9b, 0x27, 0x4c, 0xc6, 0x34, 0x96, 0xb1, 0xdd, 0x74, 0xcd, 0x4e, 0xbb, 0xbb, 0x7f,
	0x4e, 0xb1, 0xf7, 0xa6, 0xe6, 0x93, 0x89, 0xcc, 0xcb, 0xf0, 0x4f, 0xf9, 0x8d, 0xa7, 0x70, 0xe9,
	0x0c, 0xa4, 0x9e, 0x7c, 0xcc, 0xca, 0x5a, 0xaa, 0x0a, 0x95, 0xe1, 0xb3, 0x78, 0x3c, 0x65, 0xb5,
	0xa9, 0x55, 0xf2, 0xc4, 0x78, 0x8c, 0xf6, 0x22, 0x80, 0xbf, 0x96, 0xe1, 0x9b, 0x70, 0xbd, 0x77,
	0x74, 0xf0, 0x8a, 0x44, 0xa3, 0xe8, 0xdd, 0x80, 0x8c, 0x8e, 0x0e, 0x87, 0x03, 0x72, 0xd0, 0x7f,
	0xd1, 0x27, 0x81, 0xd5, 0xc0, 0x57, 0x60, 0x6b, 0x19, 0x7c, 0x3e, 0x18, 0x58, 0x08, 0x6f, 0x83,
	0x75, 0xa6, 0x62, 0x48, 0x42, 0xcb, 0xd8, 0xfb, 0x82, 0x60, 0xeb, 0x9f, 0x77, 0xe3, 0xbb, 0x70,
	0xbb, 0x66, 0x92, 0xb7, 0xe4, 0x70, 0xed, 0x84, 0x1d, 0xb8, 0xba, 0x4a, 0x79, 0x49, 0x22, 0x0b,
	0xad, 0x87, 0x86, 0x24, 0xb2, 0x0c, 0x7c, 0x0b, 0xec, 0x55, 0x28, 0x20, 0xaf, 0x49, 0x44, 0x2c,
	0xb3, 0xf7, 0xec, 0xfb, 0xdc, 0x41, 0xa7, 0x73, 0x07, 0xfd, 0x9c, 0x3b, 0xe8, 0xeb, 0xc2, 0x69,
	0x9c, 0x2e, 0x9c, 0xc6, 0x8f, 0x85, 0xd3, 0x78, 0x7f, 0xff, 0x03, 0x97, 0x1f, 0xa7, 0x89, 0x97,
	0x8a, 0x13, 0x5f, 0x79, 0xbe, 0xcf, 0x85, 0x3e, 0xfd, 0xcf, 0xf5, 0x3e, 0xfb, 0xea, 0xa7, 0x8a,
	0xe4, 0x82, 0x5e, 0xeb, 0x87, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xda, 0xd0, 0x7b, 0x41, 0xf0,
	0x02, 0x00, 0x00,
}

func (m *BucketDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BucketDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectDids) > 0 {
		for iNdEx := len(m.ObjectDids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ObjectDids[iNdEx])
			copy(dAtA[i:], m.ObjectDids[iNdEx])
			i = encodeVarintBucket(dAtA, i, uint64(len(m.ObjectDids[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintBucket(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BucketEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BucketEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBucket(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBucket(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBucket(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Type != 0 {
		i = encodeVarintBucket(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PeerDid) > 0 {
		i -= len(m.PeerDid)
		copy(dAtA[i:], m.PeerDid)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.PeerDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBucket(dAtA []byte, offset int, v uint64) int {
	offset -= sovBucket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BucketDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovBucket(uint64(m.Type))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	if len(m.ObjectDids) > 0 {
		for _, s := range m.ObjectDids {
			l = len(s)
			n += 1 + l + sovBucket(uint64(l))
		}
	}
	return n
}

func (m *BucketEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerDid)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovBucket(uint64(m.Type))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBucket(uint64(len(k))) + 1 + len(v) + sovBucket(uint64(len(v)))
			n += mapEntrySize + 1 + sovBucket(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBucket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBucket(x uint64) (n int) {
	return sovBucket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BucketDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBucket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BucketType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectDids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectDids = append(m.ObjectDids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBucket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBucket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BucketEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBucket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BucketEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBucket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBucket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBucket
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBucket
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBucket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBucket
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBucket
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBucket(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBucket
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBucket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBucket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBucket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBucket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBucket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBucket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBucket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBucket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBucket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBucket = fmt.Errorf("proto: unexpected end of group")
)
