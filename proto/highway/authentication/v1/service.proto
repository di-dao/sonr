syntax = "proto3";

// Package highway.authentication.v1 provides authentication services.
package highway.authentication.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "sonr.io/core/types/highway/authentication/v1;authenticationpb";

// AuthenticationService provides methods for user authentication.
service AuthenticationService {
  // Params retrieves authentication parameters.
  rpc Params(ParamsRequest) returns (ParamsResponse) {
    option (google.api.http).get = "/highway/auth/params/{origin}";
  }

  // Login authenticates a user.
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http).post = "/highway/auth/login/{origin}";
  }

  // Register registers a new user.
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http).post = "/highway/auth/register/{origin}";
  }

  // CurrentUser retrieves the currently authenticated user.
  rpc CurrentUser(google.protobuf.Empty) returns (CurrentUserResponse) {
    option (google.api.http).get = "/highway/auth/current";
  }

  // RefreshToken refreshes a user's authentication token.
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http).post = "/highway/auth/jwt/refresh/{jwt}";
  }

  // VerifyToken verifies a user's authentication token.
  rpc VerifyToken(VerifyTokenRequest) returns (VerifyTokenResponse) {
    option (google.api.http).post = "/highway/auth/jwt/verify/{jwt}";
  }
}

// LoginRequest is the request for the Login method.
message LoginRequest {
  string origin = 1;    // The origin of the request.
  string alias = 2;     // The user's alias.
  string assertion = 3; // The user's assertion.
}

// LoginResponse is the response from the Login method.
message LoginResponse {
  bool success = 1;   // Indicates if the login was successful.
  string message = 2; // A message about the login attempt.
  string jwt = 3;     // The user's JSON Web Token.
  string address = 4; // The user's address.
  string origin = 5;  // The origin of the request.
}

// CurrentUserResponse is the response from the CurrentUser method.
message CurrentUserResponse {
  bool success = 1;   // Indicates if the request was successful.
  string message = 2; // A message about the request.
  string address = 3; // The user's address.
  string alias = 4;   // The user's alias.
  string origin = 5;  // The origin of the request.
}

// ParamsRequest is the request for the Params method.
message ParamsRequest {
  bool existing = 1; // Indicates if the user exists.
  string origin = 2; // The origin of the request.
  string alias = 3;  // The user's alias.
}

// ParamsResponse is the response from the Params method.
message ParamsResponse {
  bool success = 1;               // Indicates if the request was successful.
  string message = 2;             // A message about the request.
  bool existing = 3;              // Indicates if the user exists.
  string origin = 4;              // The origin of the request.
  string alias = 5;               // The user's alias.
  string address = 6;             // The user's address.
  string challenge = 7;           // The challenge for the user.
  string attestation_options = 8; // The attestation options for the user.
  string assertion_options = 9;   // The assertion options for the user.
}

// RegisterRequest is the request for the Register method.
message RegisterRequest {
  string origin = 1;      // The origin of the request.
  string username = 2;    // The user's username.
  string attestation = 3; // The user's attestation.
  string challenge = 4;   // The challenge for the user.
}

// RegisterResponse is the response from the Register method.
message RegisterResponse {
  bool success = 1;   // Indicates if the registration was successful.
  string message = 2; // A message about the registration attempt.
  string tx_hash = 3; // The transaction hash of the registration.
  string address = 4; // The user's address.
  string jwt = 5;     // The user's JSON Web Token.
  string origin = 6;  // The origin of the request.
}

// RefreshTokenRequest is the request for the RefreshToken method.
message RefreshTokenRequest { string jwt = 1; } // The user's JSON Web Token.

// RefreshTokenResponse is the response from the RefreshToken method.
message RefreshTokenResponse {
  bool success = 1;   // Indicates if the token refresh was successful.
  string message = 2; // A message about the token refresh attempt.
  string new_jwt = 3; // The new JSON Web Token.
}

// VerifyTokenRequest is the request for the VerifyToken method.
message VerifyTokenRequest { string jwt = 1; } // The user's JSON Web Token.

// VerifyTokenResponse is the response from the VerifyToken method.
message VerifyTokenResponse {
  bool success = 1;   // Indicates if the token verification was successful.
  string message = 2; // A message about the token verification attempt.
  bool is_valid = 3;  // Indicates if the token is valid.
}
