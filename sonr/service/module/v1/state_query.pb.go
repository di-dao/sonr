// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sonr/service/module/v1/state_query.proto

package sonr_service_module_v1

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetServiceRequest is the StateQuery/GetServiceRequest request type.
type GetServiceRequest struct {
	// id specifies the value of the id field in the primary key.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetServiceRequest) Reset()         { *m = GetServiceRequest{} }
func (m *GetServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceRequest) ProtoMessage()    {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{0}
}
func (m *GetServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRequest.Merge(m, src)
}
func (m *GetServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRequest proto.InternalMessageInfo

func (m *GetServiceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GetServiceResponse is the StateQuery/GetServiceResponse response type.
type GetServiceResponse struct {
	// value is the response value.
	Value *Service `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetServiceResponse) Reset()         { *m = GetServiceResponse{} }
func (m *GetServiceResponse) String() string { return proto.CompactTextString(m) }
func (*GetServiceResponse) ProtoMessage()    {}
func (*GetServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{1}
}
func (m *GetServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceResponse.Merge(m, src)
}
func (m *GetServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceResponse proto.InternalMessageInfo

func (m *GetServiceResponse) GetValue() *Service {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetServiceByOriginRequest is the StateQuery/GetServiceByOriginRequest request type.
type GetServiceByOriginRequest struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *GetServiceByOriginRequest) Reset()         { *m = GetServiceByOriginRequest{} }
func (m *GetServiceByOriginRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceByOriginRequest) ProtoMessage()    {}
func (*GetServiceByOriginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{2}
}
func (m *GetServiceByOriginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceByOriginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceByOriginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceByOriginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceByOriginRequest.Merge(m, src)
}
func (m *GetServiceByOriginRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceByOriginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceByOriginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceByOriginRequest proto.InternalMessageInfo

func (m *GetServiceByOriginRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

// GetServiceByOriginResponse is the StateQuery/GetServiceByOriginResponse response type.
type GetServiceByOriginResponse struct {
	Value *Service `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetServiceByOriginResponse) Reset()         { *m = GetServiceByOriginResponse{} }
func (m *GetServiceByOriginResponse) String() string { return proto.CompactTextString(m) }
func (*GetServiceByOriginResponse) ProtoMessage()    {}
func (*GetServiceByOriginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{3}
}
func (m *GetServiceByOriginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceByOriginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceByOriginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceByOriginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceByOriginResponse.Merge(m, src)
}
func (m *GetServiceByOriginResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceByOriginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceByOriginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceByOriginResponse proto.InternalMessageInfo

func (m *GetServiceByOriginResponse) GetValue() *Service {
	if m != nil {
		return m.Value
	}
	return nil
}

// ListServiceRequest is the StateQuery/ListServiceRequest request type.
type ListServiceRequest struct {
	// query specifies the type of query - either a prefix or range query.
	//
	// Types that are valid to be assigned to Query:
	//	*ListServiceRequest_PrefixQuery
	//	*ListServiceRequest_RangeQuery_
	Query isListServiceRequest_Query `protobuf_oneof:"query"`
	// pagination specifies optional pagination parameters.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListServiceRequest) Reset()         { *m = ListServiceRequest{} }
func (m *ListServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ListServiceRequest) ProtoMessage()    {}
func (*ListServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{4}
}
func (m *ListServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRequest.Merge(m, src)
}
func (m *ListServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRequest proto.InternalMessageInfo

type isListServiceRequest_Query interface {
	isListServiceRequest_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListServiceRequest_PrefixQuery struct {
	PrefixQuery *ListServiceRequest_IndexKey `protobuf:"bytes,1,opt,name=prefix_query,json=prefixQuery,proto3,oneof" json:"prefix_query,omitempty"`
}
type ListServiceRequest_RangeQuery_ struct {
	RangeQuery *ListServiceRequest_RangeQuery `protobuf:"bytes,2,opt,name=range_query,json=rangeQuery,proto3,oneof" json:"range_query,omitempty"`
}

func (*ListServiceRequest_PrefixQuery) isListServiceRequest_Query() {}
func (*ListServiceRequest_RangeQuery_) isListServiceRequest_Query() {}

func (m *ListServiceRequest) GetQuery() isListServiceRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListServiceRequest) GetPrefixQuery() *ListServiceRequest_IndexKey {
	if x, ok := m.GetQuery().(*ListServiceRequest_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (m *ListServiceRequest) GetRangeQuery() *ListServiceRequest_RangeQuery {
	if x, ok := m.GetQuery().(*ListServiceRequest_RangeQuery_); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *ListServiceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListServiceRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListServiceRequest_PrefixQuery)(nil),
		(*ListServiceRequest_RangeQuery_)(nil),
	}
}

// IndexKey specifies the value of an index key to use in prefix and range queries.
type ListServiceRequest_IndexKey struct {
	// key specifies the index key value.
	//
	// Types that are valid to be assigned to Key:
	//	*ListServiceRequest_IndexKey_Id_
	//	*ListServiceRequest_IndexKey_Origin_
	//	*ListServiceRequest_IndexKey_Authority_
	Key isListServiceRequest_IndexKey_Key `protobuf_oneof:"key"`
}

func (m *ListServiceRequest_IndexKey) Reset()         { *m = ListServiceRequest_IndexKey{} }
func (m *ListServiceRequest_IndexKey) String() string { return proto.CompactTextString(m) }
func (*ListServiceRequest_IndexKey) ProtoMessage()    {}
func (*ListServiceRequest_IndexKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{4, 0}
}
func (m *ListServiceRequest_IndexKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRequest_IndexKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRequest_IndexKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRequest_IndexKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRequest_IndexKey.Merge(m, src)
}
func (m *ListServiceRequest_IndexKey) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRequest_IndexKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRequest_IndexKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRequest_IndexKey proto.InternalMessageInfo

type isListServiceRequest_IndexKey_Key interface {
	isListServiceRequest_IndexKey_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListServiceRequest_IndexKey_Id_ struct {
	Id *ListServiceRequest_IndexKey_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}
type ListServiceRequest_IndexKey_Origin_ struct {
	Origin *ListServiceRequest_IndexKey_Origin `protobuf:"bytes,2,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
}
type ListServiceRequest_IndexKey_Authority_ struct {
	Authority *ListServiceRequest_IndexKey_Authority `protobuf:"bytes,3,opt,name=authority,proto3,oneof" json:"authority,omitempty"`
}

func (*ListServiceRequest_IndexKey_Id_) isListServiceRequest_IndexKey_Key()        {}
func (*ListServiceRequest_IndexKey_Origin_) isListServiceRequest_IndexKey_Key()    {}
func (*ListServiceRequest_IndexKey_Authority_) isListServiceRequest_IndexKey_Key() {}

func (m *ListServiceRequest_IndexKey) GetKey() isListServiceRequest_IndexKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListServiceRequest_IndexKey) GetId() *ListServiceRequest_IndexKey_Id {
	if x, ok := m.GetKey().(*ListServiceRequest_IndexKey_Id_); ok {
		return x.Id
	}
	return nil
}

func (m *ListServiceRequest_IndexKey) GetOrigin() *ListServiceRequest_IndexKey_Origin {
	if x, ok := m.GetKey().(*ListServiceRequest_IndexKey_Origin_); ok {
		return x.Origin
	}
	return nil
}

func (m *ListServiceRequest_IndexKey) GetAuthority() *ListServiceRequest_IndexKey_Authority {
	if x, ok := m.GetKey().(*ListServiceRequest_IndexKey_Authority_); ok {
		return x.Authority
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListServiceRequest_IndexKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListServiceRequest_IndexKey_Id_)(nil),
		(*ListServiceRequest_IndexKey_Origin_)(nil),
		(*ListServiceRequest_IndexKey_Authority_)(nil),
	}
}

type ListServiceRequest_IndexKey_Id struct {
	// Types that are valid to be assigned to XId:
	//	*ListServiceRequest_IndexKey_Id_Id
	XId isListServiceRequest_IndexKey_Id_XId `protobuf_oneof:"_id"`
}

func (m *ListServiceRequest_IndexKey_Id) Reset()         { *m = ListServiceRequest_IndexKey_Id{} }
func (m *ListServiceRequest_IndexKey_Id) String() string { return proto.CompactTextString(m) }
func (*ListServiceRequest_IndexKey_Id) ProtoMessage()    {}
func (*ListServiceRequest_IndexKey_Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{4, 0, 0}
}
func (m *ListServiceRequest_IndexKey_Id) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRequest_IndexKey_Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRequest_IndexKey_Id.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRequest_IndexKey_Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRequest_IndexKey_Id.Merge(m, src)
}
func (m *ListServiceRequest_IndexKey_Id) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRequest_IndexKey_Id) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRequest_IndexKey_Id.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRequest_IndexKey_Id proto.InternalMessageInfo

type isListServiceRequest_IndexKey_Id_XId interface {
	isListServiceRequest_IndexKey_Id_XId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListServiceRequest_IndexKey_Id_Id struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (*ListServiceRequest_IndexKey_Id_Id) isListServiceRequest_IndexKey_Id_XId() {}

func (m *ListServiceRequest_IndexKey_Id) GetXId() isListServiceRequest_IndexKey_Id_XId {
	if m != nil {
		return m.XId
	}
	return nil
}

func (m *ListServiceRequest_IndexKey_Id) GetId() uint64 {
	if x, ok := m.GetXId().(*ListServiceRequest_IndexKey_Id_Id); ok {
		return x.Id
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListServiceRequest_IndexKey_Id) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListServiceRequest_IndexKey_Id_Id)(nil),
	}
}

type ListServiceRequest_IndexKey_Origin struct {
	// Types that are valid to be assigned to XOrigin:
	//	*ListServiceRequest_IndexKey_Origin_Origin
	XOrigin isListServiceRequest_IndexKey_Origin_XOrigin `protobuf_oneof:"_origin"`
}

func (m *ListServiceRequest_IndexKey_Origin) Reset()         { *m = ListServiceRequest_IndexKey_Origin{} }
func (m *ListServiceRequest_IndexKey_Origin) String() string { return proto.CompactTextString(m) }
func (*ListServiceRequest_IndexKey_Origin) ProtoMessage()    {}
func (*ListServiceRequest_IndexKey_Origin) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{4, 0, 1}
}
func (m *ListServiceRequest_IndexKey_Origin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRequest_IndexKey_Origin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRequest_IndexKey_Origin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRequest_IndexKey_Origin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRequest_IndexKey_Origin.Merge(m, src)
}
func (m *ListServiceRequest_IndexKey_Origin) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRequest_IndexKey_Origin) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRequest_IndexKey_Origin.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRequest_IndexKey_Origin proto.InternalMessageInfo

type isListServiceRequest_IndexKey_Origin_XOrigin interface {
	isListServiceRequest_IndexKey_Origin_XOrigin()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListServiceRequest_IndexKey_Origin_Origin struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
}

func (*ListServiceRequest_IndexKey_Origin_Origin) isListServiceRequest_IndexKey_Origin_XOrigin() {}

func (m *ListServiceRequest_IndexKey_Origin) GetXOrigin() isListServiceRequest_IndexKey_Origin_XOrigin {
	if m != nil {
		return m.XOrigin
	}
	return nil
}

func (m *ListServiceRequest_IndexKey_Origin) GetOrigin() string {
	if x, ok := m.GetXOrigin().(*ListServiceRequest_IndexKey_Origin_Origin); ok {
		return x.Origin
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListServiceRequest_IndexKey_Origin) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListServiceRequest_IndexKey_Origin_Origin)(nil),
	}
}

type ListServiceRequest_IndexKey_Authority struct {
	// Types that are valid to be assigned to XAuthority:
	//	*ListServiceRequest_IndexKey_Authority_Authority
	XAuthority isListServiceRequest_IndexKey_Authority_XAuthority `protobuf_oneof:"_authority"`
}

func (m *ListServiceRequest_IndexKey_Authority) Reset()         { *m = ListServiceRequest_IndexKey_Authority{} }
func (m *ListServiceRequest_IndexKey_Authority) String() string { return proto.CompactTextString(m) }
func (*ListServiceRequest_IndexKey_Authority) ProtoMessage()    {}
func (*ListServiceRequest_IndexKey_Authority) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{4, 0, 2}
}
func (m *ListServiceRequest_IndexKey_Authority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRequest_IndexKey_Authority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRequest_IndexKey_Authority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRequest_IndexKey_Authority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRequest_IndexKey_Authority.Merge(m, src)
}
func (m *ListServiceRequest_IndexKey_Authority) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRequest_IndexKey_Authority) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRequest_IndexKey_Authority.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRequest_IndexKey_Authority proto.InternalMessageInfo

type isListServiceRequest_IndexKey_Authority_XAuthority interface {
	isListServiceRequest_IndexKey_Authority_XAuthority()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListServiceRequest_IndexKey_Authority_Authority struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3,oneof" json:"authority,omitempty"`
}

func (*ListServiceRequest_IndexKey_Authority_Authority) isListServiceRequest_IndexKey_Authority_XAuthority() {
}

func (m *ListServiceRequest_IndexKey_Authority) GetXAuthority() isListServiceRequest_IndexKey_Authority_XAuthority {
	if m != nil {
		return m.XAuthority
	}
	return nil
}

func (m *ListServiceRequest_IndexKey_Authority) GetAuthority() string {
	if x, ok := m.GetXAuthority().(*ListServiceRequest_IndexKey_Authority_Authority); ok {
		return x.Authority
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListServiceRequest_IndexKey_Authority) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListServiceRequest_IndexKey_Authority_Authority)(nil),
	}
}

// RangeQuery specifies the from/to index keys for a range query.
type ListServiceRequest_RangeQuery struct {
	// from is the index key to use for the start of the range query.
	// To query from the start of an index, specify an index key for that index with empty values.
	From *ListServiceRequest_IndexKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the index key to use for the end of the range query.
	// The index key type MUST be the same as the index key type used for from.
	// To query from to the end of an index it can be omitted.
	To *ListServiceRequest_IndexKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ListServiceRequest_RangeQuery) Reset()         { *m = ListServiceRequest_RangeQuery{} }
func (m *ListServiceRequest_RangeQuery) String() string { return proto.CompactTextString(m) }
func (*ListServiceRequest_RangeQuery) ProtoMessage()    {}
func (*ListServiceRequest_RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{4, 1}
}
func (m *ListServiceRequest_RangeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRequest_RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRequest_RangeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRequest_RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRequest_RangeQuery.Merge(m, src)
}
func (m *ListServiceRequest_RangeQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceRequest_RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRequest_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRequest_RangeQuery proto.InternalMessageInfo

func (m *ListServiceRequest_RangeQuery) GetFrom() *ListServiceRequest_IndexKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListServiceRequest_RangeQuery) GetTo() *ListServiceRequest_IndexKey {
	if m != nil {
		return m.To
	}
	return nil
}

// ListServiceResponse is the StateQuery/ListServiceResponse response type.
type ListServiceResponse struct {
	// values are the results of the query.
	Values []*Service `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// pagination is the pagination response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListServiceResponse) Reset()         { *m = ListServiceResponse{} }
func (m *ListServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ListServiceResponse) ProtoMessage()    {}
func (*ListServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{5}
}
func (m *ListServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceResponse.Merge(m, src)
}
func (m *ListServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceResponse proto.InternalMessageInfo

func (m *ListServiceResponse) GetValues() []*Service {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListServiceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetCredentialRequest is the StateQuery/GetCredentialRequest request type.
type GetCredentialRequest struct {
	// sequence specifies the value of the sequence field in the primary key.
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *GetCredentialRequest) Reset()         { *m = GetCredentialRequest{} }
func (m *GetCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*GetCredentialRequest) ProtoMessage()    {}
func (*GetCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{6}
}
func (m *GetCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialRequest.Merge(m, src)
}
func (m *GetCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialRequest proto.InternalMessageInfo

func (m *GetCredentialRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// GetCredentialResponse is the StateQuery/GetCredentialResponse response type.
type GetCredentialResponse struct {
	// value is the response value.
	Value *Credential `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetCredentialResponse) Reset()         { *m = GetCredentialResponse{} }
func (m *GetCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*GetCredentialResponse) ProtoMessage()    {}
func (*GetCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{7}
}
func (m *GetCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialResponse.Merge(m, src)
}
func (m *GetCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialResponse proto.InternalMessageInfo

func (m *GetCredentialResponse) GetValue() *Credential {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetCredentialByOriginHandleRequest is the StateQuery/GetCredentialByOriginHandleRequest request type.
type GetCredentialByOriginHandleRequest struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Handle string `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *GetCredentialByOriginHandleRequest) Reset()         { *m = GetCredentialByOriginHandleRequest{} }
func (m *GetCredentialByOriginHandleRequest) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByOriginHandleRequest) ProtoMessage()    {}
func (*GetCredentialByOriginHandleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{8}
}
func (m *GetCredentialByOriginHandleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByOriginHandleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByOriginHandleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByOriginHandleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByOriginHandleRequest.Merge(m, src)
}
func (m *GetCredentialByOriginHandleRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByOriginHandleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByOriginHandleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByOriginHandleRequest proto.InternalMessageInfo

func (m *GetCredentialByOriginHandleRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *GetCredentialByOriginHandleRequest) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

// GetCredentialByOriginHandleResponse is the StateQuery/GetCredentialByOriginHandleResponse response type.
type GetCredentialByOriginHandleResponse struct {
	Value *Credential `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetCredentialByOriginHandleResponse) Reset()         { *m = GetCredentialByOriginHandleResponse{} }
func (m *GetCredentialByOriginHandleResponse) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByOriginHandleResponse) ProtoMessage()    {}
func (*GetCredentialByOriginHandleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{9}
}
func (m *GetCredentialByOriginHandleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByOriginHandleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByOriginHandleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByOriginHandleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByOriginHandleResponse.Merge(m, src)
}
func (m *GetCredentialByOriginHandleResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByOriginHandleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByOriginHandleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByOriginHandleResponse proto.InternalMessageInfo

func (m *GetCredentialByOriginHandleResponse) GetValue() *Credential {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetCredentialByIdRequest is the StateQuery/GetCredentialByIdRequest request type.
type GetCredentialByIdRequest struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetCredentialByIdRequest) Reset()         { *m = GetCredentialByIdRequest{} }
func (m *GetCredentialByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByIdRequest) ProtoMessage()    {}
func (*GetCredentialByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{10}
}
func (m *GetCredentialByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByIdRequest.Merge(m, src)
}
func (m *GetCredentialByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByIdRequest proto.InternalMessageInfo

func (m *GetCredentialByIdRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// GetCredentialByIdResponse is the StateQuery/GetCredentialByIdResponse response type.
type GetCredentialByIdResponse struct {
	Value *Credential `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetCredentialByIdResponse) Reset()         { *m = GetCredentialByIdResponse{} }
func (m *GetCredentialByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByIdResponse) ProtoMessage()    {}
func (*GetCredentialByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{11}
}
func (m *GetCredentialByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByIdResponse.Merge(m, src)
}
func (m *GetCredentialByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByIdResponse proto.InternalMessageInfo

func (m *GetCredentialByIdResponse) GetValue() *Credential {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetCredentialByOriginAuthorityRequest is the StateQuery/GetCredentialByOriginAuthorityRequest request type.
type GetCredentialByOriginAuthorityRequest struct {
	Origin    string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *GetCredentialByOriginAuthorityRequest) Reset()         { *m = GetCredentialByOriginAuthorityRequest{} }
func (m *GetCredentialByOriginAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByOriginAuthorityRequest) ProtoMessage()    {}
func (*GetCredentialByOriginAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{12}
}
func (m *GetCredentialByOriginAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByOriginAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByOriginAuthorityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByOriginAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByOriginAuthorityRequest.Merge(m, src)
}
func (m *GetCredentialByOriginAuthorityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByOriginAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByOriginAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByOriginAuthorityRequest proto.InternalMessageInfo

func (m *GetCredentialByOriginAuthorityRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *GetCredentialByOriginAuthorityRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// GetCredentialByOriginAuthorityResponse is the StateQuery/GetCredentialByOriginAuthorityResponse response type.
type GetCredentialByOriginAuthorityResponse struct {
	Value *Credential `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetCredentialByOriginAuthorityResponse) Reset() {
	*m = GetCredentialByOriginAuthorityResponse{}
}
func (m *GetCredentialByOriginAuthorityResponse) String() string { return proto.CompactTextString(m) }
func (*GetCredentialByOriginAuthorityResponse) ProtoMessage()    {}
func (*GetCredentialByOriginAuthorityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{13}
}
func (m *GetCredentialByOriginAuthorityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCredentialByOriginAuthorityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCredentialByOriginAuthorityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCredentialByOriginAuthorityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialByOriginAuthorityResponse.Merge(m, src)
}
func (m *GetCredentialByOriginAuthorityResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCredentialByOriginAuthorityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialByOriginAuthorityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialByOriginAuthorityResponse proto.InternalMessageInfo

func (m *GetCredentialByOriginAuthorityResponse) GetValue() *Credential {
	if m != nil {
		return m.Value
	}
	return nil
}

// ListCredentialRequest is the StateQuery/ListCredentialRequest request type.
type ListCredentialRequest struct {
	// query specifies the type of query - either a prefix or range query.
	//
	// Types that are valid to be assigned to Query:
	//
	//	*ListCredentialRequest_PrefixQuery
	//	*ListCredentialRequest_RangeQuery_
	Query isListCredentialRequest_Query `protobuf_oneof:"query"`
	// pagination specifies optional pagination parameters.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListCredentialRequest) Reset()         { *m = ListCredentialRequest{} }
func (m *ListCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest) ProtoMessage()    {}
func (*ListCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{14}
}
func (m *ListCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest.Merge(m, src)
}
func (m *ListCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest proto.InternalMessageInfo

type isListCredentialRequest_Query interface {
	isListCredentialRequest_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_PrefixQuery struct {
	PrefixQuery *ListCredentialRequest_IndexKey `protobuf:"bytes,1,opt,name=prefix_query,json=prefixQuery,proto3,oneof" json:"prefix_query,omitempty"`
}
type ListCredentialRequest_RangeQuery_ struct {
	RangeQuery *ListCredentialRequest_RangeQuery `protobuf:"bytes,2,opt,name=range_query,json=rangeQuery,proto3,oneof" json:"range_query,omitempty"`
}

func (*ListCredentialRequest_PrefixQuery) isListCredentialRequest_Query() {}
func (*ListCredentialRequest_RangeQuery_) isListCredentialRequest_Query() {}

func (m *ListCredentialRequest) GetQuery() isListCredentialRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListCredentialRequest) GetPrefixQuery() *ListCredentialRequest_IndexKey {
	if x, ok := m.GetQuery().(*ListCredentialRequest_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (m *ListCredentialRequest) GetRangeQuery() *ListCredentialRequest_RangeQuery {
	if x, ok := m.GetQuery().(*ListCredentialRequest_RangeQuery_); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *ListCredentialRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_PrefixQuery)(nil),
		(*ListCredentialRequest_RangeQuery_)(nil),
	}
}

// IndexKey specifies the value of an index key to use in prefix and range queries.
type ListCredentialRequest_IndexKey struct {
	// key specifies the index key value.
	//
	// Types that are valid to be assigned to Key:
	//
	//	*ListCredentialRequest_IndexKey_Sequence_
	//	*ListCredentialRequest_IndexKey_Handle_
	//	*ListCredentialRequest_IndexKey_OriginHandle_
	//	*ListCredentialRequest_IndexKey_Id_
	//	*ListCredentialRequest_IndexKey_OriginAuthority_
	Key isListCredentialRequest_IndexKey_Key `protobuf_oneof:"key"`
}

func (m *ListCredentialRequest_IndexKey) Reset()         { *m = ListCredentialRequest_IndexKey{} }
func (m *ListCredentialRequest_IndexKey) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest_IndexKey) ProtoMessage()    {}
func (*ListCredentialRequest_IndexKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{14, 0}
}
func (m *ListCredentialRequest_IndexKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_Key interface {
	isListCredentialRequest_IndexKey_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_Sequence_ struct {
	Sequence *ListCredentialRequest_IndexKey_Sequence `protobuf:"bytes,1,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
}
type ListCredentialRequest_IndexKey_Handle_ struct {
	Handle *ListCredentialRequest_IndexKey_Handle `protobuf:"bytes,2,opt,name=handle,proto3,oneof" json:"handle,omitempty"`
}
type ListCredentialRequest_IndexKey_OriginHandle_ struct {
	OriginHandle *ListCredentialRequest_IndexKey_OriginHandle `protobuf:"bytes,3,opt,name=origin_handle,json=originHandle,proto3,oneof" json:"origin_handle,omitempty"`
}
type ListCredentialRequest_IndexKey_Id_ struct {
	Id *ListCredentialRequest_IndexKey_Id `protobuf:"bytes,4,opt,name=id,proto3,oneof" json:"id,omitempty"`
}
type ListCredentialRequest_IndexKey_OriginAuthority_ struct {
	OriginAuthority *ListCredentialRequest_IndexKey_OriginAuthority `protobuf:"bytes,5,opt,name=origin_authority,json=originAuthority,proto3,oneof" json:"origin_authority,omitempty"`
}

func (*ListCredentialRequest_IndexKey_Sequence_) isListCredentialRequest_IndexKey_Key()        {}
func (*ListCredentialRequest_IndexKey_Handle_) isListCredentialRequest_IndexKey_Key()          {}
func (*ListCredentialRequest_IndexKey_OriginHandle_) isListCredentialRequest_IndexKey_Key()    {}
func (*ListCredentialRequest_IndexKey_Id_) isListCredentialRequest_IndexKey_Key()              {}
func (*ListCredentialRequest_IndexKey_OriginAuthority_) isListCredentialRequest_IndexKey_Key() {}

func (m *ListCredentialRequest_IndexKey) GetKey() isListCredentialRequest_IndexKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey) GetSequence() *ListCredentialRequest_IndexKey_Sequence {
	if x, ok := m.GetKey().(*ListCredentialRequest_IndexKey_Sequence_); ok {
		return x.Sequence
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey) GetHandle() *ListCredentialRequest_IndexKey_Handle {
	if x, ok := m.GetKey().(*ListCredentialRequest_IndexKey_Handle_); ok {
		return x.Handle
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey) GetOriginHandle() *ListCredentialRequest_IndexKey_OriginHandle {
	if x, ok := m.GetKey().(*ListCredentialRequest_IndexKey_OriginHandle_); ok {
		return x.OriginHandle
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey) GetId() *ListCredentialRequest_IndexKey_Id {
	if x, ok := m.GetKey().(*ListCredentialRequest_IndexKey_Id_); ok {
		return x.Id
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey) GetOriginAuthority() *ListCredentialRequest_IndexKey_OriginAuthority {
	if x, ok := m.GetKey().(*ListCredentialRequest_IndexKey_OriginAuthority_); ok {
		return x.OriginAuthority
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_Sequence_)(nil),
		(*ListCredentialRequest_IndexKey_Handle_)(nil),
		(*ListCredentialRequest_IndexKey_OriginHandle_)(nil),
		(*ListCredentialRequest_IndexKey_Id_)(nil),
		(*ListCredentialRequest_IndexKey_OriginAuthority_)(nil),
	}
}

type ListCredentialRequest_IndexKey_Sequence struct {
	// Types that are valid to be assigned to XSequence:
	//
	//	*ListCredentialRequest_IndexKey_Sequence_Sequence
	XSequence isListCredentialRequest_IndexKey_Sequence_XSequence `protobuf_oneof:"_sequence"`
}

func (m *ListCredentialRequest_IndexKey_Sequence) Reset() {
	*m = ListCredentialRequest_IndexKey_Sequence{}
}
func (m *ListCredentialRequest_IndexKey_Sequence) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest_IndexKey_Sequence) ProtoMessage()    {}
func (*ListCredentialRequest_IndexKey_Sequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{14, 0, 0}
}
func (m *ListCredentialRequest_IndexKey_Sequence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey_Sequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey_Sequence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey_Sequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey_Sequence.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey_Sequence) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey_Sequence) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey_Sequence.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey_Sequence proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_Sequence_XSequence interface {
	isListCredentialRequest_IndexKey_Sequence_XSequence()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_Sequence_Sequence struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
}

func (*ListCredentialRequest_IndexKey_Sequence_Sequence) isListCredentialRequest_IndexKey_Sequence_XSequence() {
}

func (m *ListCredentialRequest_IndexKey_Sequence) GetXSequence() isListCredentialRequest_IndexKey_Sequence_XSequence {
	if m != nil {
		return m.XSequence
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey_Sequence) GetSequence() uint64 {
	if x, ok := m.GetXSequence().(*ListCredentialRequest_IndexKey_Sequence_Sequence); ok {
		return x.Sequence
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey_Sequence) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_Sequence_Sequence)(nil),
	}
}

type ListCredentialRequest_IndexKey_Handle struct {
	// Types that are valid to be assigned to XHandle:
	//
	//	*ListCredentialRequest_IndexKey_Handle_Handle
	XHandle isListCredentialRequest_IndexKey_Handle_XHandle `protobuf_oneof:"_handle"`
}

func (m *ListCredentialRequest_IndexKey_Handle) Reset()         { *m = ListCredentialRequest_IndexKey_Handle{} }
func (m *ListCredentialRequest_IndexKey_Handle) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest_IndexKey_Handle) ProtoMessage()    {}
func (*ListCredentialRequest_IndexKey_Handle) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{14, 0, 1}
}
func (m *ListCredentialRequest_IndexKey_Handle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey_Handle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey_Handle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey_Handle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey_Handle.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey_Handle) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey_Handle) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey_Handle.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey_Handle proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_Handle_XHandle interface {
	isListCredentialRequest_IndexKey_Handle_XHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_Handle_Handle struct {
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3,oneof" json:"handle,omitempty"`
}

func (*ListCredentialRequest_IndexKey_Handle_Handle) isListCredentialRequest_IndexKey_Handle_XHandle() {
}

func (m *ListCredentialRequest_IndexKey_Handle) GetXHandle() isListCredentialRequest_IndexKey_Handle_XHandle {
	if m != nil {
		return m.XHandle
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey_Handle) GetHandle() string {
	if x, ok := m.GetXHandle().(*ListCredentialRequest_IndexKey_Handle_Handle); ok {
		return x.Handle
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey_Handle) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_Handle_Handle)(nil),
	}
}

type ListCredentialRequest_IndexKey_OriginHandle struct {
	// Types that are valid to be assigned to XOrigin:
	//
	//	*ListCredentialRequest_IndexKey_OriginHandle_Origin
	XOrigin isListCredentialRequest_IndexKey_OriginHandle_XOrigin `protobuf_oneof:"_origin"`
	// Types that are valid to be assigned to XHandle:
	//
	//	*ListCredentialRequest_IndexKey_OriginHandle_Handle
	XHandle isListCredentialRequest_IndexKey_OriginHandle_XHandle `protobuf_oneof:"_handle"`
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) Reset() {
	*m = ListCredentialRequest_IndexKey_OriginHandle{}
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) String() string {
	return proto.CompactTextString(m)
}
func (*ListCredentialRequest_IndexKey_OriginHandle) ProtoMessage() {}
func (*ListCredentialRequest_IndexKey_OriginHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{14, 0, 2}
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey_OriginHandle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey_OriginHandle.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey_OriginHandle.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey_OriginHandle proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_OriginHandle_XOrigin interface {
	isListCredentialRequest_IndexKey_OriginHandle_XOrigin()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isListCredentialRequest_IndexKey_OriginHandle_XHandle interface {
	isListCredentialRequest_IndexKey_OriginHandle_XHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_OriginHandle_Origin struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
}
type ListCredentialRequest_IndexKey_OriginHandle_Handle struct {
	Handle string `protobuf:"bytes,2,opt,name=handle,proto3,oneof" json:"handle,omitempty"`
}

func (*ListCredentialRequest_IndexKey_OriginHandle_Origin) isListCredentialRequest_IndexKey_OriginHandle_XOrigin() {
}
func (*ListCredentialRequest_IndexKey_OriginHandle_Handle) isListCredentialRequest_IndexKey_OriginHandle_XHandle() {
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) GetXOrigin() isListCredentialRequest_IndexKey_OriginHandle_XOrigin {
	if m != nil {
		return m.XOrigin
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) GetXHandle() isListCredentialRequest_IndexKey_OriginHandle_XHandle {
	if m != nil {
		return m.XHandle
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) GetOrigin() string {
	if x, ok := m.GetXOrigin().(*ListCredentialRequest_IndexKey_OriginHandle_Origin); ok {
		return x.Origin
	}
	return ""
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) GetHandle() string {
	if x, ok := m.GetXHandle().(*ListCredentialRequest_IndexKey_OriginHandle_Handle); ok {
		return x.Handle
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey_OriginHandle) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_OriginHandle_Origin)(nil),
		(*ListCredentialRequest_IndexKey_OriginHandle_Handle)(nil),
	}
}

type ListCredentialRequest_IndexKey_Id struct {
	// Types that are valid to be assigned to XId:
	//
	//	*ListCredentialRequest_IndexKey_Id_Id
	XId isListCredentialRequest_IndexKey_Id_XId `protobuf_oneof:"_id"`
}

func (m *ListCredentialRequest_IndexKey_Id) Reset()         { *m = ListCredentialRequest_IndexKey_Id{} }
func (m *ListCredentialRequest_IndexKey_Id) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest_IndexKey_Id) ProtoMessage()    {}
func (*ListCredentialRequest_IndexKey_Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{14, 0, 3}
}
func (m *ListCredentialRequest_IndexKey_Id) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey_Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey_Id.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey_Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey_Id.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey_Id) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey_Id) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey_Id.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey_Id proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_Id_XId interface {
	isListCredentialRequest_IndexKey_Id_XId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_Id_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (*ListCredentialRequest_IndexKey_Id_Id) isListCredentialRequest_IndexKey_Id_XId() {}

func (m *ListCredentialRequest_IndexKey_Id) GetXId() isListCredentialRequest_IndexKey_Id_XId {
	if m != nil {
		return m.XId
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey_Id) GetId() []byte {
	if x, ok := m.GetXId().(*ListCredentialRequest_IndexKey_Id_Id); ok {
		return x.Id
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey_Id) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_Id_Id)(nil),
	}
}

type ListCredentialRequest_IndexKey_OriginAuthority struct {
	// Types that are valid to be assigned to XOrigin:
	//
	//	*ListCredentialRequest_IndexKey_OriginAuthority_Origin
	XOrigin isListCredentialRequest_IndexKey_OriginAuthority_XOrigin `protobuf_oneof:"_origin"`
	// Types that are valid to be assigned to XAuthority:
	//
	//	*ListCredentialRequest_IndexKey_OriginAuthority_Authority
	XAuthority isListCredentialRequest_IndexKey_OriginAuthority_XAuthority `protobuf_oneof:"_authority"`
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority) Reset() {
	*m = ListCredentialRequest_IndexKey_OriginAuthority{}
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority) String() string {
	return proto.CompactTextString(m)
}
func (*ListCredentialRequest_IndexKey_OriginAuthority) ProtoMessage() {}
func (*ListCredentialRequest_IndexKey_OriginAuthority) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{14, 0, 4}
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_IndexKey_OriginAuthority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_IndexKey_OriginAuthority.Merge(m, src)
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_IndexKey_OriginAuthority.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_IndexKey_OriginAuthority proto.InternalMessageInfo

type isListCredentialRequest_IndexKey_OriginAuthority_XOrigin interface {
	isListCredentialRequest_IndexKey_OriginAuthority_XOrigin()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isListCredentialRequest_IndexKey_OriginAuthority_XAuthority interface {
	isListCredentialRequest_IndexKey_OriginAuthority_XAuthority()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListCredentialRequest_IndexKey_OriginAuthority_Origin struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
}
type ListCredentialRequest_IndexKey_OriginAuthority_Authority struct {
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3,oneof" json:"authority,omitempty"`
}

func (*ListCredentialRequest_IndexKey_OriginAuthority_Origin) isListCredentialRequest_IndexKey_OriginAuthority_XOrigin() {
}
func (*ListCredentialRequest_IndexKey_OriginAuthority_Authority) isListCredentialRequest_IndexKey_OriginAuthority_XAuthority() {
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority) GetXOrigin() isListCredentialRequest_IndexKey_OriginAuthority_XOrigin {
	if m != nil {
		return m.XOrigin
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority) GetXAuthority() isListCredentialRequest_IndexKey_OriginAuthority_XAuthority {
	if m != nil {
		return m.XAuthority
	}
	return nil
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority) GetOrigin() string {
	if x, ok := m.GetXOrigin().(*ListCredentialRequest_IndexKey_OriginAuthority_Origin); ok {
		return x.Origin
	}
	return ""
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority) GetAuthority() string {
	if x, ok := m.GetXAuthority().(*ListCredentialRequest_IndexKey_OriginAuthority_Authority); ok {
		return x.Authority
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListCredentialRequest_IndexKey_OriginAuthority) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListCredentialRequest_IndexKey_OriginAuthority_Origin)(nil),
		(*ListCredentialRequest_IndexKey_OriginAuthority_Authority)(nil),
	}
}

// RangeQuery specifies the from/to index keys for a range query.
type ListCredentialRequest_RangeQuery struct {
	// from is the index key to use for the start of the range query.
	// To query from the start of an index, specify an index key for that index with empty values.
	From *ListCredentialRequest_IndexKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the index key to use for the end of the range query.
	// The index key type MUST be the same as the index key type used for from.
	// To query from to the end of an index it can be omitted.
	To *ListCredentialRequest_IndexKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ListCredentialRequest_RangeQuery) Reset()         { *m = ListCredentialRequest_RangeQuery{} }
func (m *ListCredentialRequest_RangeQuery) String() string { return proto.CompactTextString(m) }
func (*ListCredentialRequest_RangeQuery) ProtoMessage()    {}
func (*ListCredentialRequest_RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{14, 1}
}
func (m *ListCredentialRequest_RangeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialRequest_RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialRequest_RangeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialRequest_RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialRequest_RangeQuery.Merge(m, src)
}
func (m *ListCredentialRequest_RangeQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialRequest_RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialRequest_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialRequest_RangeQuery proto.InternalMessageInfo

func (m *ListCredentialRequest_RangeQuery) GetFrom() *ListCredentialRequest_IndexKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListCredentialRequest_RangeQuery) GetTo() *ListCredentialRequest_IndexKey {
	if m != nil {
		return m.To
	}
	return nil
}

// ListCredentialResponse is the StateQuery/ListCredentialResponse response type.
type ListCredentialResponse struct {
	// values are the results of the query.
	Values []*Credential `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// pagination is the pagination response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListCredentialResponse) Reset()         { *m = ListCredentialResponse{} }
func (m *ListCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*ListCredentialResponse) ProtoMessage()    {}
func (*ListCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{15}
}
func (m *ListCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCredentialResponse.Merge(m, src)
}
func (m *ListCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCredentialResponse proto.InternalMessageInfo

func (m *ListCredentialResponse) GetValues() []*Credential {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListCredentialResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetUserRequest is the StateQuery/GetUserRequest request type.
type GetUserRequest struct {
	// index specifies the value of the index field in the primary key.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *GetUserRequest) Reset()         { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()    {}
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{16}
}
func (m *GetUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserRequest.Merge(m, src)
}
func (m *GetUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserRequest proto.InternalMessageInfo

func (m *GetUserRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// GetUserResponse is the StateQuery/GetUserResponse response type.
type GetUserResponse struct {
	// value is the response value.
	Value *User `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetUserResponse) Reset()         { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()    {}
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{17}
}
func (m *GetUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserResponse.Merge(m, src)
}
func (m *GetUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserResponse proto.InternalMessageInfo

func (m *GetUserResponse) GetValue() *User {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetUserByOriginAuthorityRequest is the StateQuery/GetUserByOriginAuthorityRequest request type.
type GetUserByOriginAuthorityRequest struct {
	Origin    string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *GetUserByOriginAuthorityRequest) Reset()         { *m = GetUserByOriginAuthorityRequest{} }
func (m *GetUserByOriginAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserByOriginAuthorityRequest) ProtoMessage()    {}
func (*GetUserByOriginAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{18}
}
func (m *GetUserByOriginAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserByOriginAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserByOriginAuthorityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserByOriginAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserByOriginAuthorityRequest.Merge(m, src)
}
func (m *GetUserByOriginAuthorityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserByOriginAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserByOriginAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserByOriginAuthorityRequest proto.InternalMessageInfo

func (m *GetUserByOriginAuthorityRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *GetUserByOriginAuthorityRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// GetUserByOriginAuthorityResponse is the StateQuery/GetUserByOriginAuthorityResponse response type.
type GetUserByOriginAuthorityResponse struct {
	Value *User `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetUserByOriginAuthorityResponse) Reset()         { *m = GetUserByOriginAuthorityResponse{} }
func (m *GetUserByOriginAuthorityResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserByOriginAuthorityResponse) ProtoMessage()    {}
func (*GetUserByOriginAuthorityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{19}
}
func (m *GetUserByOriginAuthorityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserByOriginAuthorityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserByOriginAuthorityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserByOriginAuthorityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserByOriginAuthorityResponse.Merge(m, src)
}
func (m *GetUserByOriginAuthorityResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserByOriginAuthorityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserByOriginAuthorityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserByOriginAuthorityResponse proto.InternalMessageInfo

func (m *GetUserByOriginAuthorityResponse) GetValue() *User {
	if m != nil {
		return m.Value
	}
	return nil
}

// ListUserRequest is the StateQuery/ListUserRequest request type.
type ListUserRequest struct {
	// query specifies the type of query - either a prefix or range query.
	//
	// Types that are valid to be assigned to Query:
	//
	//	*ListUserRequest_PrefixQuery
	//	*ListUserRequest_RangeQuery_
	Query isListUserRequest_Query `protobuf_oneof:"query"`
	// pagination specifies optional pagination parameters.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListUserRequest) Reset()         { *m = ListUserRequest{} }
func (m *ListUserRequest) String() string { return proto.CompactTextString(m) }
func (*ListUserRequest) ProtoMessage()    {}
func (*ListUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{20}
}
func (m *ListUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserRequest.Merge(m, src)
}
func (m *ListUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserRequest proto.InternalMessageInfo

type isListUserRequest_Query interface {
	isListUserRequest_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListUserRequest_PrefixQuery struct {
	PrefixQuery *ListUserRequest_IndexKey `protobuf:"bytes,1,opt,name=prefix_query,json=prefixQuery,proto3,oneof" json:"prefix_query,omitempty"`
}
type ListUserRequest_RangeQuery_ struct {
	RangeQuery *ListUserRequest_RangeQuery `protobuf:"bytes,2,opt,name=range_query,json=rangeQuery,proto3,oneof" json:"range_query,omitempty"`
}

func (*ListUserRequest_PrefixQuery) isListUserRequest_Query() {}
func (*ListUserRequest_RangeQuery_) isListUserRequest_Query() {}

func (m *ListUserRequest) GetQuery() isListUserRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListUserRequest) GetPrefixQuery() *ListUserRequest_IndexKey {
	if x, ok := m.GetQuery().(*ListUserRequest_PrefixQuery); ok {
		return x.PrefixQuery
	}
	return nil
}

func (m *ListUserRequest) GetRangeQuery() *ListUserRequest_RangeQuery {
	if x, ok := m.GetQuery().(*ListUserRequest_RangeQuery_); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *ListUserRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListUserRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListUserRequest_PrefixQuery)(nil),
		(*ListUserRequest_RangeQuery_)(nil),
	}
}

// IndexKey specifies the value of an index key to use in prefix and range queries.
type ListUserRequest_IndexKey struct {
	// key specifies the index key value.
	//
	// Types that are valid to be assigned to Key:
	//
	//	*ListUserRequest_IndexKey_Index_
	//	*ListUserRequest_IndexKey_OriginAuthority_
	Key isListUserRequest_IndexKey_Key `protobuf_oneof:"key"`
}

func (m *ListUserRequest_IndexKey) Reset()         { *m = ListUserRequest_IndexKey{} }
func (m *ListUserRequest_IndexKey) String() string { return proto.CompactTextString(m) }
func (*ListUserRequest_IndexKey) ProtoMessage()    {}
func (*ListUserRequest_IndexKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{20, 0}
}
func (m *ListUserRequest_IndexKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserRequest_IndexKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserRequest_IndexKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUserRequest_IndexKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserRequest_IndexKey.Merge(m, src)
}
func (m *ListUserRequest_IndexKey) XXX_Size() int {
	return m.Size()
}
func (m *ListUserRequest_IndexKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserRequest_IndexKey.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserRequest_IndexKey proto.InternalMessageInfo

type isListUserRequest_IndexKey_Key interface {
	isListUserRequest_IndexKey_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListUserRequest_IndexKey_Index_ struct {
	Index *ListUserRequest_IndexKey_Index `protobuf:"bytes,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
}
type ListUserRequest_IndexKey_OriginAuthority_ struct {
	OriginAuthority *ListUserRequest_IndexKey_OriginAuthority `protobuf:"bytes,2,opt,name=origin_authority,json=originAuthority,proto3,oneof" json:"origin_authority,omitempty"`
}

func (*ListUserRequest_IndexKey_Index_) isListUserRequest_IndexKey_Key()           {}
func (*ListUserRequest_IndexKey_OriginAuthority_) isListUserRequest_IndexKey_Key() {}

func (m *ListUserRequest_IndexKey) GetKey() isListUserRequest_IndexKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ListUserRequest_IndexKey) GetIndex() *ListUserRequest_IndexKey_Index {
	if x, ok := m.GetKey().(*ListUserRequest_IndexKey_Index_); ok {
		return x.Index
	}
	return nil
}

func (m *ListUserRequest_IndexKey) GetOriginAuthority() *ListUserRequest_IndexKey_OriginAuthority {
	if x, ok := m.GetKey().(*ListUserRequest_IndexKey_OriginAuthority_); ok {
		return x.OriginAuthority
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListUserRequest_IndexKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListUserRequest_IndexKey_Index_)(nil),
		(*ListUserRequest_IndexKey_OriginAuthority_)(nil),
	}
}

type ListUserRequest_IndexKey_Index struct {
	// Types that are valid to be assigned to XIndex:
	//
	//	*ListUserRequest_IndexKey_Index_Index
	XIndex isListUserRequest_IndexKey_Index_XIndex `protobuf_oneof:"_index"`
}

func (m *ListUserRequest_IndexKey_Index) Reset()         { *m = ListUserRequest_IndexKey_Index{} }
func (m *ListUserRequest_IndexKey_Index) String() string { return proto.CompactTextString(m) }
func (*ListUserRequest_IndexKey_Index) ProtoMessage()    {}
func (*ListUserRequest_IndexKey_Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{20, 0, 0}
}
func (m *ListUserRequest_IndexKey_Index) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserRequest_IndexKey_Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserRequest_IndexKey_Index.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUserRequest_IndexKey_Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserRequest_IndexKey_Index.Merge(m, src)
}
func (m *ListUserRequest_IndexKey_Index) XXX_Size() int {
	return m.Size()
}
func (m *ListUserRequest_IndexKey_Index) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserRequest_IndexKey_Index.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserRequest_IndexKey_Index proto.InternalMessageInfo

type isListUserRequest_IndexKey_Index_XIndex interface {
	isListUserRequest_IndexKey_Index_XIndex()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListUserRequest_IndexKey_Index_Index struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
}

func (*ListUserRequest_IndexKey_Index_Index) isListUserRequest_IndexKey_Index_XIndex() {}

func (m *ListUserRequest_IndexKey_Index) GetXIndex() isListUserRequest_IndexKey_Index_XIndex {
	if m != nil {
		return m.XIndex
	}
	return nil
}

func (m *ListUserRequest_IndexKey_Index) GetIndex() uint64 {
	if x, ok := m.GetXIndex().(*ListUserRequest_IndexKey_Index_Index); ok {
		return x.Index
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListUserRequest_IndexKey_Index) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListUserRequest_IndexKey_Index_Index)(nil),
	}
}

type ListUserRequest_IndexKey_OriginAuthority struct {
	// Types that are valid to be assigned to XOrigin:
	//
	//	*ListUserRequest_IndexKey_OriginAuthority_Origin
	XOrigin isListUserRequest_IndexKey_OriginAuthority_XOrigin `protobuf_oneof:"_origin"`
	// Types that are valid to be assigned to XAuthority:
	//
	//	*ListUserRequest_IndexKey_OriginAuthority_Authority
	XAuthority isListUserRequest_IndexKey_OriginAuthority_XAuthority `protobuf_oneof:"_authority"`
}

func (m *ListUserRequest_IndexKey_OriginAuthority) Reset() {
	*m = ListUserRequest_IndexKey_OriginAuthority{}
}
func (m *ListUserRequest_IndexKey_OriginAuthority) String() string { return proto.CompactTextString(m) }
func (*ListUserRequest_IndexKey_OriginAuthority) ProtoMessage()    {}
func (*ListUserRequest_IndexKey_OriginAuthority) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{20, 0, 1}
}
func (m *ListUserRequest_IndexKey_OriginAuthority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserRequest_IndexKey_OriginAuthority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserRequest_IndexKey_OriginAuthority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUserRequest_IndexKey_OriginAuthority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserRequest_IndexKey_OriginAuthority.Merge(m, src)
}
func (m *ListUserRequest_IndexKey_OriginAuthority) XXX_Size() int {
	return m.Size()
}
func (m *ListUserRequest_IndexKey_OriginAuthority) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserRequest_IndexKey_OriginAuthority.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserRequest_IndexKey_OriginAuthority proto.InternalMessageInfo

type isListUserRequest_IndexKey_OriginAuthority_XOrigin interface {
	isListUserRequest_IndexKey_OriginAuthority_XOrigin()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isListUserRequest_IndexKey_OriginAuthority_XAuthority interface {
	isListUserRequest_IndexKey_OriginAuthority_XAuthority()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListUserRequest_IndexKey_OriginAuthority_Origin struct {
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
}
type ListUserRequest_IndexKey_OriginAuthority_Authority struct {
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3,oneof" json:"authority,omitempty"`
}

func (*ListUserRequest_IndexKey_OriginAuthority_Origin) isListUserRequest_IndexKey_OriginAuthority_XOrigin() {
}
func (*ListUserRequest_IndexKey_OriginAuthority_Authority) isListUserRequest_IndexKey_OriginAuthority_XAuthority() {
}

func (m *ListUserRequest_IndexKey_OriginAuthority) GetXOrigin() isListUserRequest_IndexKey_OriginAuthority_XOrigin {
	if m != nil {
		return m.XOrigin
	}
	return nil
}
func (m *ListUserRequest_IndexKey_OriginAuthority) GetXAuthority() isListUserRequest_IndexKey_OriginAuthority_XAuthority {
	if m != nil {
		return m.XAuthority
	}
	return nil
}

func (m *ListUserRequest_IndexKey_OriginAuthority) GetOrigin() string {
	if x, ok := m.GetXOrigin().(*ListUserRequest_IndexKey_OriginAuthority_Origin); ok {
		return x.Origin
	}
	return ""
}

func (m *ListUserRequest_IndexKey_OriginAuthority) GetAuthority() string {
	if x, ok := m.GetXAuthority().(*ListUserRequest_IndexKey_OriginAuthority_Authority); ok {
		return x.Authority
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListUserRequest_IndexKey_OriginAuthority) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListUserRequest_IndexKey_OriginAuthority_Origin)(nil),
		(*ListUserRequest_IndexKey_OriginAuthority_Authority)(nil),
	}
}

// RangeQuery specifies the from/to index keys for a range query.
type ListUserRequest_RangeQuery struct {
	// from is the index key to use for the start of the range query.
	// To query from the start of an index, specify an index key for that index with empty values.
	From *ListUserRequest_IndexKey `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the index key to use for the end of the range query.
	// The index key type MUST be the same as the index key type used for from.
	// To query from to the end of an index it can be omitted.
	To *ListUserRequest_IndexKey `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ListUserRequest_RangeQuery) Reset()         { *m = ListUserRequest_RangeQuery{} }
func (m *ListUserRequest_RangeQuery) String() string { return proto.CompactTextString(m) }
func (*ListUserRequest_RangeQuery) ProtoMessage()    {}
func (*ListUserRequest_RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{20, 1}
}
func (m *ListUserRequest_RangeQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserRequest_RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserRequest_RangeQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUserRequest_RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserRequest_RangeQuery.Merge(m, src)
}
func (m *ListUserRequest_RangeQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListUserRequest_RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserRequest_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserRequest_RangeQuery proto.InternalMessageInfo

func (m *ListUserRequest_RangeQuery) GetFrom() *ListUserRequest_IndexKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListUserRequest_RangeQuery) GetTo() *ListUserRequest_IndexKey {
	if m != nil {
		return m.To
	}
	return nil
}

// ListUserResponse is the StateQuery/ListUserResponse response type.
type ListUserResponse struct {
	// values are the results of the query.
	Values []*User `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// pagination is the pagination response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListUserResponse) Reset()         { *m = ListUserResponse{} }
func (m *ListUserResponse) String() string { return proto.CompactTextString(m) }
func (*ListUserResponse) ProtoMessage()    {}
func (*ListUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{21}
}
func (m *ListUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserResponse.Merge(m, src)
}
func (m *ListUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserResponse proto.InternalMessageInfo

func (m *ListUserResponse) GetValues() []*User {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListUserResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetBaseParamsRequest is the StateQuery/GetBaseParamsRequest request type.
type GetBaseParamsRequest struct {
}

func (m *GetBaseParamsRequest) Reset()         { *m = GetBaseParamsRequest{} }
func (m *GetBaseParamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetBaseParamsRequest) ProtoMessage()    {}
func (*GetBaseParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{22}
}
func (m *GetBaseParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBaseParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBaseParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBaseParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBaseParamsRequest.Merge(m, src)
}
func (m *GetBaseParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBaseParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBaseParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBaseParamsRequest proto.InternalMessageInfo

// GetBaseParamsResponse is the StateQuery/GetBaseParamsResponse request type.
type GetBaseParamsResponse struct {
	Value *BaseParams `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetBaseParamsResponse) Reset()         { *m = GetBaseParamsResponse{} }
func (m *GetBaseParamsResponse) String() string { return proto.CompactTextString(m) }
func (*GetBaseParamsResponse) ProtoMessage()    {}
func (*GetBaseParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{23}
}
func (m *GetBaseParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBaseParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBaseParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBaseParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBaseParamsResponse.Merge(m, src)
}
func (m *GetBaseParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBaseParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBaseParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBaseParamsResponse proto.InternalMessageInfo

func (m *GetBaseParamsResponse) GetValue() *BaseParams {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetReadParamsRequest is the StateQuery/GetReadParamsRequest request type.
type GetReadParamsRequest struct {
}

func (m *GetReadParamsRequest) Reset()         { *m = GetReadParamsRequest{} }
func (m *GetReadParamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetReadParamsRequest) ProtoMessage()    {}
func (*GetReadParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{24}
}
func (m *GetReadParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReadParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReadParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReadParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReadParamsRequest.Merge(m, src)
}
func (m *GetReadParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReadParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReadParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReadParamsRequest proto.InternalMessageInfo

// GetReadParamsResponse is the StateQuery/GetReadParamsResponse request type.
type GetReadParamsResponse struct {
	Value *ReadParams `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetReadParamsResponse) Reset()         { *m = GetReadParamsResponse{} }
func (m *GetReadParamsResponse) String() string { return proto.CompactTextString(m) }
func (*GetReadParamsResponse) ProtoMessage()    {}
func (*GetReadParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{25}
}
func (m *GetReadParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReadParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReadParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReadParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReadParamsResponse.Merge(m, src)
}
func (m *GetReadParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReadParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReadParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReadParamsResponse proto.InternalMessageInfo

func (m *GetReadParamsResponse) GetValue() *ReadParams {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetWriteParamsRequest is the StateQuery/GetWriteParamsRequest request type.
type GetWriteParamsRequest struct {
}

func (m *GetWriteParamsRequest) Reset()         { *m = GetWriteParamsRequest{} }
func (m *GetWriteParamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetWriteParamsRequest) ProtoMessage()    {}
func (*GetWriteParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{26}
}
func (m *GetWriteParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWriteParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWriteParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWriteParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWriteParamsRequest.Merge(m, src)
}
func (m *GetWriteParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWriteParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWriteParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWriteParamsRequest proto.InternalMessageInfo

// GetWriteParamsResponse is the StateQuery/GetWriteParamsResponse request type.
type GetWriteParamsResponse struct {
	Value *WriteParams `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetWriteParamsResponse) Reset()         { *m = GetWriteParamsResponse{} }
func (m *GetWriteParamsResponse) String() string { return proto.CompactTextString(m) }
func (*GetWriteParamsResponse) ProtoMessage()    {}
func (*GetWriteParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{27}
}
func (m *GetWriteParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWriteParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWriteParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWriteParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWriteParamsResponse.Merge(m, src)
}
func (m *GetWriteParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWriteParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWriteParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWriteParamsResponse proto.InternalMessageInfo

func (m *GetWriteParamsResponse) GetValue() *WriteParams {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetOwnParamsRequest is the StateQuery/GetOwnParamsRequest request type.
type GetOwnParamsRequest struct {
}

func (m *GetOwnParamsRequest) Reset()         { *m = GetOwnParamsRequest{} }
func (m *GetOwnParamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetOwnParamsRequest) ProtoMessage()    {}
func (*GetOwnParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{28}
}
func (m *GetOwnParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOwnParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOwnParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOwnParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOwnParamsRequest.Merge(m, src)
}
func (m *GetOwnParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOwnParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOwnParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOwnParamsRequest proto.InternalMessageInfo

// GetOwnParamsResponse is the StateQuery/GetOwnParamsResponse request type.
type GetOwnParamsResponse struct {
	Value *OwnParams `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetOwnParamsResponse) Reset()         { *m = GetOwnParamsResponse{} }
func (m *GetOwnParamsResponse) String() string { return proto.CompactTextString(m) }
func (*GetOwnParamsResponse) ProtoMessage()    {}
func (*GetOwnParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd66349cf3c9e5a, []int{29}
}
func (m *GetOwnParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOwnParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOwnParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOwnParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOwnParamsResponse.Merge(m, src)
}
func (m *GetOwnParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOwnParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOwnParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOwnParamsResponse proto.InternalMessageInfo

func (m *GetOwnParamsResponse) GetValue() *OwnParams {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*GetServiceRequest)(nil), "sonr.service.module.v1.GetServiceRequest")
	proto.RegisterType((*GetServiceResponse)(nil), "sonr.service.module.v1.GetServiceResponse")
	proto.RegisterType((*GetServiceByOriginRequest)(nil), "sonr.service.module.v1.GetServiceByOriginRequest")
	proto.RegisterType((*GetServiceByOriginResponse)(nil), "sonr.service.module.v1.GetServiceByOriginResponse")
	proto.RegisterType((*ListServiceRequest)(nil), "sonr.service.module.v1.ListServiceRequest")
	proto.RegisterType((*ListServiceRequest_IndexKey)(nil), "sonr.service.module.v1.ListServiceRequest.IndexKey")
	proto.RegisterType((*ListServiceRequest_IndexKey_Id)(nil), "sonr.service.module.v1.ListServiceRequest.IndexKey.Id")
	proto.RegisterType((*ListServiceRequest_IndexKey_Origin)(nil), "sonr.service.module.v1.ListServiceRequest.IndexKey.Origin")
	proto.RegisterType((*ListServiceRequest_IndexKey_Authority)(nil), "sonr.service.module.v1.ListServiceRequest.IndexKey.Authority")
	proto.RegisterType((*ListServiceRequest_RangeQuery)(nil), "sonr.service.module.v1.ListServiceRequest.RangeQuery")
	proto.RegisterType((*ListServiceResponse)(nil), "sonr.service.module.v1.ListServiceResponse")
	proto.RegisterType((*GetCredentialRequest)(nil), "sonr.service.module.v1.GetCredentialRequest")
	proto.RegisterType((*GetCredentialResponse)(nil), "sonr.service.module.v1.GetCredentialResponse")
	proto.RegisterType((*GetCredentialByOriginHandleRequest)(nil), "sonr.service.module.v1.GetCredentialByOriginHandleRequest")
	proto.RegisterType((*GetCredentialByOriginHandleResponse)(nil), "sonr.service.module.v1.GetCredentialByOriginHandleResponse")
	proto.RegisterType((*GetCredentialByIdRequest)(nil), "sonr.service.module.v1.GetCredentialByIdRequest")
	proto.RegisterType((*GetCredentialByIdResponse)(nil), "sonr.service.module.v1.GetCredentialByIdResponse")
	proto.RegisterType((*GetCredentialByOriginAuthorityRequest)(nil), "sonr.service.module.v1.GetCredentialByOriginAuthorityRequest")
	proto.RegisterType((*GetCredentialByOriginAuthorityResponse)(nil), "sonr.service.module.v1.GetCredentialByOriginAuthorityResponse")
	proto.RegisterType((*ListCredentialRequest)(nil), "sonr.service.module.v1.ListCredentialRequest")
	proto.RegisterType((*ListCredentialRequest_IndexKey)(nil), "sonr.service.module.v1.ListCredentialRequest.IndexKey")
	proto.RegisterType((*ListCredentialRequest_IndexKey_Sequence)(nil), "sonr.service.module.v1.ListCredentialRequest.IndexKey.Sequence")
	proto.RegisterType((*ListCredentialRequest_IndexKey_Handle)(nil), "sonr.service.module.v1.ListCredentialRequest.IndexKey.Handle")
	proto.RegisterType((*ListCredentialRequest_IndexKey_OriginHandle)(nil), "sonr.service.module.v1.ListCredentialRequest.IndexKey.OriginHandle")
	proto.RegisterType((*ListCredentialRequest_IndexKey_Id)(nil), "sonr.service.module.v1.ListCredentialRequest.IndexKey.Id")
	proto.RegisterType((*ListCredentialRequest_IndexKey_OriginAuthority)(nil), "sonr.service.module.v1.ListCredentialRequest.IndexKey.OriginAuthority")
	proto.RegisterType((*ListCredentialRequest_RangeQuery)(nil), "sonr.service.module.v1.ListCredentialRequest.RangeQuery")
	proto.RegisterType((*ListCredentialResponse)(nil), "sonr.service.module.v1.ListCredentialResponse")
	proto.RegisterType((*GetUserRequest)(nil), "sonr.service.module.v1.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "sonr.service.module.v1.GetUserResponse")
	proto.RegisterType((*GetUserByOriginAuthorityRequest)(nil), "sonr.service.module.v1.GetUserByOriginAuthorityRequest")
	proto.RegisterType((*GetUserByOriginAuthorityResponse)(nil), "sonr.service.module.v1.GetUserByOriginAuthorityResponse")
	proto.RegisterType((*ListUserRequest)(nil), "sonr.service.module.v1.ListUserRequest")
	proto.RegisterType((*ListUserRequest_IndexKey)(nil), "sonr.service.module.v1.ListUserRequest.IndexKey")
	proto.RegisterType((*ListUserRequest_IndexKey_Index)(nil), "sonr.service.module.v1.ListUserRequest.IndexKey.Index")
	proto.RegisterType((*ListUserRequest_IndexKey_OriginAuthority)(nil), "sonr.service.module.v1.ListUserRequest.IndexKey.OriginAuthority")
	proto.RegisterType((*ListUserRequest_RangeQuery)(nil), "sonr.service.module.v1.ListUserRequest.RangeQuery")
	proto.RegisterType((*ListUserResponse)(nil), "sonr.service.module.v1.ListUserResponse")
	proto.RegisterType((*GetBaseParamsRequest)(nil), "sonr.service.module.v1.GetBaseParamsRequest")
	proto.RegisterType((*GetBaseParamsResponse)(nil), "sonr.service.module.v1.GetBaseParamsResponse")
	proto.RegisterType((*GetReadParamsRequest)(nil), "sonr.service.module.v1.GetReadParamsRequest")
	proto.RegisterType((*GetReadParamsResponse)(nil), "sonr.service.module.v1.GetReadParamsResponse")
	proto.RegisterType((*GetWriteParamsRequest)(nil), "sonr.service.module.v1.GetWriteParamsRequest")
	proto.RegisterType((*GetWriteParamsResponse)(nil), "sonr.service.module.v1.GetWriteParamsResponse")
	proto.RegisterType((*GetOwnParamsRequest)(nil), "sonr.service.module.v1.GetOwnParamsRequest")
	proto.RegisterType((*GetOwnParamsResponse)(nil), "sonr.service.module.v1.GetOwnParamsResponse")
}

func init() {
	proto.RegisterFile("sonr/service/module/v1/state_query.proto", fileDescriptor_8dd66349cf3c9e5a)
}

var fileDescriptor_8dd66349cf3c9e5a = []byte{
	// 1486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xdd, 0x6f, 0xd4, 0x46,
	0x10, 0xb7, 0x2f, 0xe4, 0x48, 0xe6, 0x8e, 0x04, 0x16, 0x48, 0x83, 0x41, 0x47, 0x30, 0x6a, 0xa0,
	0x01, 0x7c, 0xe4, 0x28, 0x25, 0xd0, 0xd2, 0xd2, 0xd0, 0x12, 0xa7, 0x54, 0x05, 0x1c, 0x52, 0x90,
	0x28, 0x3d, 0x39, 0xdc, 0x12, 0x0c, 0x89, 0x1d, 0x6c, 0x27, 0x25, 0x95, 0xfa, 0xde, 0xb7, 0x7e,
	0x08, 0xa9, 0x1f, 0x52, 0xa5, 0xb6, 0x7f, 0x4d, 0x1f, 0xe9, 0x5b, 0xa5, 0xbe, 0x54, 0xf0, 0xd6,
	0xbf, 0xa2, 0xf2, 0xee, 0x7a, 0xbd, 0xfe, 0x38, 0x9f, 0x7d, 0x07, 0xea, 0xdb, 0xed, 0x66, 0xe6,
	0x37, 0x33, 0xbb, 0x33, 0xf3, 0x1b, 0x6f, 0xe0, 0xb8, 0xe7, 0xd8, 0x6e, 0xd3, 0xc3, 0xee, 0x96,
	0x75, 0x0f, 0x37, 0xd7, 0x9d, 0xce, 0xe6, 0x1a, 0x6e, 0x6e, 0xcd, 0x36, 0x3d, 0xdf, 0xf4, 0x71,
	0xfb, 0xf1, 0x26, 0x76, 0xb7, 0xb5, 0x0d, 0xd7, 0xf1, 0x1d, 0x34, 0x11, 0x48, 0x6a, 0x4c, 0x52,
	0xa3, 0x92, 0xda, 0xd6, 0xac, 0x32, 0x73, 0xcf, 0xf1, 0xd6, 0x1d, 0xaf, 0xb9, 0x62, 0x7a, 0xb8,
	0x49, 0x14, 0x9a, 0x5b, 0xb3, 0x2b, 0xd8, 0x37, 0x67, 0x9b, 0x1b, 0xe6, 0xaa, 0x65, 0x9b, 0xbe,
	0xe5, 0xd8, 0x14, 0x43, 0x51, 0xf3, 0xac, 0x51, 0x19, 0xf5, 0x28, 0xec, 0x59, 0xc0, 0xfe, 0x12,
	0x95, 0x31, 0xf0, 0xe3, 0x4d, 0xec, 0xf9, 0x68, 0x0c, 0x2a, 0x56, 0x67, 0x52, 0x9e, 0x92, 0x8f,
	0xef, 0x30, 0x2a, 0x56, 0x47, 0xbd, 0x0a, 0x48, 0x14, 0xf2, 0x36, 0x1c, 0xdb, 0xc3, 0xe8, 0x2c,
	0x0c, 0x6f, 0x99, 0x6b, 0x9b, 0x98, 0x08, 0xd6, 0x5a, 0x87, 0xb5, 0x6c, 0x97, 0xb5, 0x50, 0x8f,
	0x4a, 0xab, 0x67, 0xe0, 0x40, 0x04, 0x36, 0xbf, 0x7d, 0xcd, 0xb5, 0x56, 0x2d, 0x3b, 0xb4, 0x3c,
	0x01, 0x55, 0x87, 0x6c, 0x10, 0xd0, 0x51, 0x83, 0xad, 0xd4, 0x25, 0x50, 0xb2, 0x94, 0x06, 0xf3,
	0xe4, 0xef, 0x2a, 0xa0, 0x8f, 0x2d, 0x2f, 0x19, 0xfd, 0x6d, 0xa8, 0x6f, 0xb8, 0xf8, 0xbe, 0xf5,
	0x84, 0x5e, 0x08, 0x03, 0x3d, 0xd3, 0x0d, 0x34, 0x8d, 0xa0, 0x2d, 0xda, 0x1d, 0xfc, 0xe4, 0x2a,
	0xde, 0xd6, 0x25, 0xa3, 0x46, 0xa1, 0x6e, 0x04, 0x48, 0xe8, 0x36, 0xd4, 0x5c, 0xd3, 0x5e, 0x65,
	0x37, 0x3d, 0x59, 0x21, 0xc0, 0x67, 0x4b, 0x00, 0x1b, 0x81, 0x36, 0xc1, 0xd2, 0x25, 0x03, 0x5c,
	0xbe, 0x42, 0x57, 0x00, 0xa2, 0xeb, 0x9f, 0x1c, 0x22, 0xc0, 0xd3, 0x1a, 0xcd, 0x15, 0x2d, 0xc8,
	0x15, 0x8d, 0x26, 0x17, 0xcb, 0x15, 0xed, 0xba, 0xb9, 0x1a, 0x82, 0x1a, 0x82, 0xa6, 0xf2, 0xfb,
	0x10, 0x8c, 0x84, 0xde, 0x23, 0x9d, 0xa7, 0x41, 0xad, 0xf5, 0x56, 0x1f, 0xe1, 0x6b, 0x8b, 0x1d,
	0x5d, 0x0a, 0x12, 0x08, 0xdd, 0xe4, 0xd7, 0x4a, 0x63, 0xbe, 0xd0, 0x0f, 0x1a, 0xbd, 0x74, 0x5d,
	0x0a, 0x93, 0x02, 0xdd, 0x85, 0x51, 0x73, 0xd3, 0x7f, 0xe0, 0xb8, 0x96, 0xbf, 0xcd, 0x62, 0xbe,
	0xd8, 0x0f, 0xf0, 0xfb, 0x21, 0x88, 0x2e, 0x19, 0x11, 0xa2, 0x32, 0x05, 0x95, 0xc5, 0x0e, 0xda,
	0x1b, 0xd5, 0x02, 0x0d, 0xe6, 0x6b, 0x59, 0x9e, 0x1f, 0x86, 0xa1, 0xb6, 0xd5, 0x51, 0x4e, 0x43,
	0x95, 0x3a, 0x85, 0x0e, 0xc6, 0xf3, 0x36, 0x72, 0x32, 0x90, 0x1e, 0x85, 0x9d, 0x6d, 0xba, 0x52,
	0xde, 0x81, 0x51, 0x6e, 0x0d, 0x1d, 0x11, 0xfd, 0x0f, 0xf5, 0xa2, 0xad, 0x40, 0xb5, 0x0e, 0xd0,
	0xe6, 0x1b, 0x81, 0xd9, 0x47, 0x78, 0x5b, 0xf9, 0x59, 0x06, 0x88, 0x32, 0x01, 0x2d, 0xc0, 0x8e,
	0xfb, 0xae, 0xb3, 0x3e, 0x40, 0x9e, 0x1a, 0x04, 0x00, 0x5d, 0x86, 0x8a, 0xef, 0xb0, 0x1b, 0xea,
	0x0b, 0xa6, 0xe2, 0x3b, 0xf3, 0x3b, 0x61, 0x98, 0xa4, 0x9a, 0xfa, 0x83, 0x0c, 0x7b, 0x63, 0xc2,
	0xac, 0x58, 0xcf, 0x41, 0x95, 0x94, 0x9f, 0x37, 0x29, 0x4f, 0x0d, 0x15, 0xa9, 0x56, 0x26, 0x8e,
	0x16, 0x62, 0x39, 0x4e, 0xdd, 0x3c, 0xd6, 0x33, 0xc7, 0xa9, 0x55, 0x31, 0xc9, 0xd5, 0x16, 0xec,
	0x5b, 0xc0, 0xfe, 0x65, 0x17, 0x77, 0xb0, 0xed, 0x5b, 0xe6, 0x5a, 0x58, 0xf8, 0x0a, 0x8c, 0x78,
	0xc1, 0x4f, 0xfb, 0x1e, 0x66, 0xcd, 0x8f, 0xaf, 0xd5, 0x1b, 0xb0, 0x3f, 0xa1, 0xc3, 0xc2, 0x99,
	0x8b, 0xf7, 0x1e, 0xb5, 0x5b, 0x34, 0x82, 0x2a, 0x6b, 0x3f, 0x37, 0x41, 0x8d, 0x41, 0x86, 0x6d,
	0x4d, 0x37, 0xed, 0xce, 0x1a, 0xee, 0xd1, 0x11, 0x83, 0xfd, 0x07, 0x44, 0x90, 0x9c, 0xc4, 0xa8,
	0xc1, 0x56, 0x6a, 0x1b, 0x8e, 0xe6, 0xa2, 0x0e, 0xec, 0xf6, 0x0c, 0x4c, 0x26, 0x0c, 0x2c, 0x76,
	0xd2, 0xc4, 0x51, 0x27, 0xc4, 0xb1, 0x4c, 0x7a, 0x7d, 0x52, 0x76, 0x60, 0x17, 0xee, 0xc2, 0xeb,
	0x99, 0x31, 0xf2, 0xd2, 0xea, 0x75, 0x78, 0x87, 0xc4, 0xca, 0xa3, 0xe7, 0x17, 0x6d, 0xa8, 0x2b,
	0x30, 0xdd, 0x0b, 0x7e, 0xe0, 0x10, 0x7e, 0x02, 0xd8, 0x1f, 0x54, 0x47, 0x3a, 0x0b, 0xef, 0x64,
	0xd2, 0x4f, 0x6e, 0xff, 0x4d, 0x81, 0x74, 0x65, 0xa0, 0x3b, 0x59, 0x0c, 0x34, 0x57, 0x0e, 0xfb,
	0x95, 0x93, 0xd0, 0x9f, 0x55, 0x81, 0x84, 0xee, 0x26, 0x8a, 0xb2, 0xd6, 0x7a, 0xaf, 0xbf, 0xa3,
	0xd0, 0x96, 0x18, 0x8c, 0x2e, 0x45, 0x75, 0x8d, 0x6e, 0xc5, 0xca, 0xa8, 0x07, 0x81, 0xe4, 0x80,
	0xd3, 0xf2, 0x0a, 0xfa, 0x3e, 0x85, 0x43, 0x0f, 0x61, 0x17, 0x4d, 0xb6, 0x36, 0xc3, 0xa7, 0xe7,
	0x71, 0xb9, 0x4f, 0x7c, 0xb1, 0x88, 0x75, 0xc9, 0xa8, 0x3b, 0xc2, 0x1a, 0x5d, 0x25, 0x65, 0xb7,
	0x83, 0x18, 0x38, 0xdf, 0xa7, 0x01, 0xce, 0xd5, 0x1e, 0xec, 0x66, 0x8e, 0x47, 0x25, 0x32, 0x4c,
	0xa0, 0xaf, 0x0c, 0xe4, 0xbb, 0xc8, 0xb2, 0xe3, 0x4e, 0x7c, 0x4b, 0x99, 0x83, 0x91, 0xf0, 0x7a,
	0xd0, 0xe1, 0x64, 0x1b, 0x16, 0x2f, 0x2c, 0x20, 0xc5, 0x1a, 0x8c, 0xb6, 0xc3, 0x75, 0xc0, 0xc1,
	0xec, 0x14, 0x0e, 0xf2, 0xab, 0xe4, 0x1c, 0x4c, 0xd7, 0x21, 0x07, 0xd3, 0x95, 0xf2, 0x39, 0xd4,
	0xc5, 0xd3, 0xcc, 0xe5, 0x6e, 0x01, 0x94, 0xb4, 0x09, 0x5d, 0x4e, 0x82, 0x52, 0x51, 0x11, 0x3f,
	0x39, 0x37, 0xd4, 0x53, 0x73, 0xc3, 0x43, 0x18, 0x4f, 0x9c, 0x49, 0xbe, 0x13, 0x47, 0x52, 0xed,
	0x4a, 0x97, 0x13, 0x83, 0x82, 0xe0, 0x4a, 0xe6, 0xcc, 0xf0, 0x6b, 0x7c, 0x66, 0xf8, 0x28, 0x36,
	0x33, 0xf4, 0xd9, 0x5c, 0xd8, 0xd8, 0x70, 0x45, 0x18, 0x1b, 0xfa, 0x45, 0x8a, 0x4d, 0x0e, 0xbf,
	0xc8, 0x30, 0x91, 0x94, 0x67, 0x0d, 0xf7, 0x42, 0x62, 0x78, 0x28, 0xd2, 0x71, 0x5f, 0xfa, 0xfc,
	0x30, 0x0d, 0x63, 0x0b, 0xd8, 0x5f, 0xf6, 0xb0, 0x1b, 0xf6, 0xec, 0x7d, 0x30, 0x6c, 0x05, 0xa1,
	0xb0, 0xb1, 0x81, 0x2e, 0xd4, 0x0f, 0x61, 0x9c, 0xcb, 0x31, 0xff, 0x5b, 0x71, 0xc2, 0x38, 0xd4,
	0xcd, 0x7d, 0xa2, 0xc4, 0xa8, 0xe2, 0x16, 0x1c, 0x66, 0x30, 0x2f, 0x99, 0xe7, 0x3e, 0x85, 0xa9,
	0xee, 0xc0, 0x03, 0x38, 0xfc, 0xb4, 0x0a, 0xe3, 0xc1, 0xfd, 0x89, 0x27, 0xb4, 0x9c, 0xc9, 0x6a,
	0xa7, 0xf3, 0xd2, 0x45, 0x50, 0xef, 0xca, 0x67, 0xcb, 0x59, 0x7c, 0xd6, 0x2a, 0x8a, 0xfa, 0xca,
	0x99, 0xec, 0xdf, 0x8a, 0xc0, 0x64, 0x9f, 0x88, 0x49, 0xd2, 0xa3, 0x54, 0xb2, 0x62, 0xa7, 0x3f,
	0x74, 0x89, 0xa5, 0x17, 0x5a, 0xcf, 0x68, 0xd4, 0xf4, 0x00, 0x2e, 0x95, 0x86, 0x2e, 0xd0, 0xa2,
	0x4f, 0xc2, 0x30, 0x11, 0x47, 0x07, 0x62, 0xc9, 0xce, 0xfd, 0x09, 0xba, 0xd0, 0x08, 0x54, 0xdb,
	0x64, 0xf1, 0x7f, 0xb4, 0xb8, 0xa7, 0xf1, 0x16, 0xf7, 0x41, 0xac, 0xc5, 0x95, 0xce, 0x34, 0xd6,
	0xdc, 0x2e, 0x09, 0xcd, 0xad, 0x3c, 0x46, 0xac, 0xad, 0x7d, 0x27, 0xc3, 0xee, 0x48, 0x92, 0xd5,
	0xd7, 0x9b, 0x89, 0x86, 0x96, 0x5f, 0x60, 0x2f, 0xbd, 0x95, 0x4d, 0x90, 0x4f, 0xa1, 0x79, 0xd3,
	0xc3, 0xd7, 0x4d, 0xd7, 0x5c, 0xf7, 0x58, 0x04, 0xec, 0x73, 0x47, 0xdc, 0x2f, 0x39, 0xf1, 0x0a,
	0xaa, 0xac, 0x2b, 0x50, 0x53, 0x06, 0x36, 0x3b, 0x59, 0xa6, 0xc4, 0xfd, 0x92, 0xa6, 0x04, 0x55,
	0x66, 0xea, 0x35, 0x02, 0x79, 0xcb, 0xb5, 0xfc, 0x44, 0x58, 0x4b, 0x30, 0x91, 0xfc, 0x03, 0x33,
	0x76, 0x3e, 0x6e, 0xec, 0x68, 0x37, 0x63, 0xa2, 0x2e, 0xb3, 0xb6, 0x1f, 0xf6, 0x2e, 0x60, 0xff,
	0xda, 0x17, 0x76, 0xdc, 0xd6, 0x35, 0x12, 0xaf, 0xb0, 0xcd, 0xbf, 0x7f, 0x63, 0x96, 0x8e, 0x74,
	0xb3, 0x14, 0x69, 0x52, 0xf9, 0xd6, 0xf7, 0x63, 0xb0, 0x67, 0xc9, 0x37, 0x7d, 0x9a, 0xdf, 0xec,
	0xeb, 0x18, 0x61, 0x80, 0xe8, 0x65, 0x0c, 0xbd, 0xd1, 0x0d, 0x2d, 0xf5, 0xc8, 0xa7, 0xcc, 0x14,
	0x11, 0xa5, 0x3e, 0xab, 0x12, 0xfa, 0x4a, 0x7c, 0x02, 0x0c, 0xe9, 0x02, 0xcd, 0xf6, 0xc6, 0x48,
	0xbc, 0xf0, 0x29, 0xad, 0x32, 0x2a, 0xdc, 0xfc, 0x03, 0xa8, 0x09, 0x6f, 0x09, 0x68, 0xa6, 0xf8,
	0xeb, 0x84, 0x72, 0xa2, 0x90, 0x2c, 0xb7, 0x64, 0xc3, 0xae, 0xd8, 0xc7, 0x1f, 0x3a, 0x99, 0xe3,
	0x70, 0x6a, 0xa2, 0x51, 0x4e, 0x15, 0x94, 0xe6, 0xf6, 0x7e, 0x94, 0xe1, 0x60, 0xce, 0x07, 0x3b,
	0xba, 0x50, 0x08, 0x30, 0xf3, 0xed, 0x40, 0x79, 0xbb, 0x2f, 0x5d, 0xee, 0xda, 0x97, 0xe4, 0x6d,
	0x38, 0xfe, 0xf5, 0x8e, 0x4e, 0x17, 0xc4, 0xe4, 0x8f, 0x02, 0xca, 0x6c, 0x09, 0x0d, 0x6e, 0xfb,
	0x37, 0x19, 0x1a, 0xf9, 0x1f, 0xe1, 0xe8, 0x62, 0xa9, 0xe8, 0x92, 0x33, 0x93, 0xf2, 0x6e, 0xbf,
	0xea, 0xdc, 0xc7, 0xc7, 0x30, 0x16, 0x1f, 0x53, 0xd1, 0xa9, 0x52, 0xe3, 0xaf, 0xa2, 0x15, 0x15,
	0xe7, 0x26, 0x3f, 0x83, 0x9d, 0x6c, 0x64, 0x43, 0xd3, 0x39, 0xfe, 0x0b, 0x64, 0xa4, 0x1c, 0xeb,
	0x29, 0xc7, 0xd1, 0xbf, 0x91, 0xc9, 0xdb, 0x4e, 0xe6, 0x44, 0x88, 0xce, 0xf5, 0xc0, 0xe9, 0x7a,
	0xd0, 0x73, 0xe5, 0x15, 0xb9, 0x47, 0x6d, 0x18, 0x09, 0x29, 0x13, 0x1d, 0x2b, 0x48, 0xbf, 0xca,
	0xf1, 0xde, 0x82, 0x89, 0x72, 0x8f, 0xd8, 0x2a, 0xb7, 0xdc, 0x53, 0x3c, 0x99, 0x5b, 0xee, 0x69,
	0xf6, 0xe4, 0xf6, 0x22, 0xca, 0xca, 0xb5, 0x97, 0x22, 0xcb, 0x5c, 0x7b, 0x69, 0x0a, 0xa5, 0x39,
	0x1a, 0x67, 0x3c, 0x94, 0x07, 0x91, 0xa6, 0xcc, 0xee, 0x39, 0x9a, 0x4d, 0xa4, 0xaa, 0x84, 0x1e,
	0x41, 0x5d, 0x24, 0x3e, 0x74, 0x22, 0x07, 0x21, 0xc9, 0x9a, 0xca, 0xc9, 0x62, 0xc2, 0xa1, 0xb1,
	0xf9, 0xc9, 0x3f, 0x9e, 0x37, 0xe4, 0x67, 0xcf, 0x1b, 0xf2, 0x3f, 0xcf, 0x1b, 0xf2, 0xb7, 0x2f,
	0x1a, 0xd2, 0xb3, 0x17, 0x0d, 0xe9, 0xaf, 0x17, 0x0d, 0x69, 0xa5, 0x4a, 0xfe, 0xc1, 0x75, 0xe6,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x50, 0xe5, 0x1b, 0x74, 0x1b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StateQueryServiceClient is the client API for StateQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateQueryServiceClient interface {
	// Get queries the Service table by its primary key.
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	// GetServiceByOrigin queries the Service table by its Origin index
	GetServiceByOrigin(ctx context.Context, in *GetServiceByOriginRequest, opts ...grpc.CallOption) (*GetServiceByOriginResponse, error)
	// ListService queries the Service table using prefix and range queries against defined indexes.
	ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error)
	// Get queries the Credential table by its primary key.
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	// GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
	GetCredentialByOriginHandle(ctx context.Context, in *GetCredentialByOriginHandleRequest, opts ...grpc.CallOption) (*GetCredentialByOriginHandleResponse, error)
	// GetCredentialById queries the Credential table by its Id index
	GetCredentialById(ctx context.Context, in *GetCredentialByIdRequest, opts ...grpc.CallOption) (*GetCredentialByIdResponse, error)
	// GetCredentialByOriginAuthority queries the Credential table by its OriginAuthority index
	GetCredentialByOriginAuthority(ctx context.Context, in *GetCredentialByOriginAuthorityRequest, opts ...grpc.CallOption) (*GetCredentialByOriginAuthorityResponse, error)
	// ListCredential queries the Credential table using prefix and range queries against defined indexes.
	ListCredential(ctx context.Context, in *ListCredentialRequest, opts ...grpc.CallOption) (*ListCredentialResponse, error)
	// Get queries the User table by its primary key.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// GetUserByOriginAuthority queries the User table by its OriginAuthority index
	GetUserByOriginAuthority(ctx context.Context, in *GetUserByOriginAuthorityRequest, opts ...grpc.CallOption) (*GetUserByOriginAuthorityResponse, error)
	// ListUser queries the User table using prefix and range queries against defined indexes.
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	// GetBaseParams queries the BaseParams singleton.
	GetBaseParams(ctx context.Context, in *GetBaseParamsRequest, opts ...grpc.CallOption) (*GetBaseParamsResponse, error)
	// GetReadParams queries the ReadParams singleton.
	GetReadParams(ctx context.Context, in *GetReadParamsRequest, opts ...grpc.CallOption) (*GetReadParamsResponse, error)
	// GetWriteParams queries the WriteParams singleton.
	GetWriteParams(ctx context.Context, in *GetWriteParamsRequest, opts ...grpc.CallOption) (*GetWriteParamsResponse, error)
	// GetOwnParams queries the OwnParams singleton.
	GetOwnParams(ctx context.Context, in *GetOwnParamsRequest, opts ...grpc.CallOption) (*GetOwnParamsResponse, error)
}

type stateQueryServiceClient struct {
	cc grpc1.ClientConn
}

func NewStateQueryServiceClient(cc grpc1.ClientConn) StateQueryServiceClient {
	return &stateQueryServiceClient{cc}
}

func (c *stateQueryServiceClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetServiceByOrigin(ctx context.Context, in *GetServiceByOriginRequest, opts ...grpc.CallOption) (*GetServiceByOriginResponse, error) {
	out := new(GetServiceByOriginResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetServiceByOrigin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error) {
	out := new(ListServiceResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/ListService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialByOriginHandle(ctx context.Context, in *GetCredentialByOriginHandleRequest, opts ...grpc.CallOption) (*GetCredentialByOriginHandleResponse, error) {
	out := new(GetCredentialByOriginHandleResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetCredentialByOriginHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialById(ctx context.Context, in *GetCredentialByIdRequest, opts ...grpc.CallOption) (*GetCredentialByIdResponse, error) {
	out := new(GetCredentialByIdResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetCredentialById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialByOriginAuthority(ctx context.Context, in *GetCredentialByOriginAuthorityRequest, opts ...grpc.CallOption) (*GetCredentialByOriginAuthorityResponse, error) {
	out := new(GetCredentialByOriginAuthorityResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetCredentialByOriginAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListCredential(ctx context.Context, in *ListCredentialRequest, opts ...grpc.CallOption) (*ListCredentialResponse, error) {
	out := new(ListCredentialResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/ListCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetUserByOriginAuthority(ctx context.Context, in *GetUserByOriginAuthorityRequest, opts ...grpc.CallOption) (*GetUserByOriginAuthorityResponse, error) {
	out := new(GetUserByOriginAuthorityResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetUserByOriginAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetBaseParams(ctx context.Context, in *GetBaseParamsRequest, opts ...grpc.CallOption) (*GetBaseParamsResponse, error) {
	out := new(GetBaseParamsResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetBaseParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetReadParams(ctx context.Context, in *GetReadParamsRequest, opts ...grpc.CallOption) (*GetReadParamsResponse, error) {
	out := new(GetReadParamsResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetReadParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetWriteParams(ctx context.Context, in *GetWriteParamsRequest, opts ...grpc.CallOption) (*GetWriteParamsResponse, error) {
	out := new(GetWriteParamsResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetWriteParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetOwnParams(ctx context.Context, in *GetOwnParamsRequest, opts ...grpc.CallOption) (*GetOwnParamsResponse, error) {
	out := new(GetOwnParamsResponse)
	err := c.cc.Invoke(ctx, "/sonr.service.module.v1.StateQueryService/GetOwnParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateQueryServiceServer is the server API for StateQueryService service.
type StateQueryServiceServer interface {
	// Get queries the Service table by its primary key.
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	// GetServiceByOrigin queries the Service table by its Origin index
	GetServiceByOrigin(context.Context, *GetServiceByOriginRequest) (*GetServiceByOriginResponse, error)
	// ListService queries the Service table using prefix and range queries against defined indexes.
	ListService(context.Context, *ListServiceRequest) (*ListServiceResponse, error)
	// Get queries the Credential table by its primary key.
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	// GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
	GetCredentialByOriginHandle(context.Context, *GetCredentialByOriginHandleRequest) (*GetCredentialByOriginHandleResponse, error)
	// GetCredentialById queries the Credential table by its Id index
	GetCredentialById(context.Context, *GetCredentialByIdRequest) (*GetCredentialByIdResponse, error)
	// GetCredentialByOriginAuthority queries the Credential table by its OriginAuthority index
	GetCredentialByOriginAuthority(context.Context, *GetCredentialByOriginAuthorityRequest) (*GetCredentialByOriginAuthorityResponse, error)
	// ListCredential queries the Credential table using prefix and range queries against defined indexes.
	ListCredential(context.Context, *ListCredentialRequest) (*ListCredentialResponse, error)
	// Get queries the User table by its primary key.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// GetUserByOriginAuthority queries the User table by its OriginAuthority index
	GetUserByOriginAuthority(context.Context, *GetUserByOriginAuthorityRequest) (*GetUserByOriginAuthorityResponse, error)
	// ListUser queries the User table using prefix and range queries against defined indexes.
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	// GetBaseParams queries the BaseParams singleton.
	GetBaseParams(context.Context, *GetBaseParamsRequest) (*GetBaseParamsResponse, error)
	// GetReadParams queries the ReadParams singleton.
	GetReadParams(context.Context, *GetReadParamsRequest) (*GetReadParamsResponse, error)
	// GetWriteParams queries the WriteParams singleton.
	GetWriteParams(context.Context, *GetWriteParamsRequest) (*GetWriteParamsResponse, error)
	// GetOwnParams queries the OwnParams singleton.
	GetOwnParams(context.Context, *GetOwnParamsRequest) (*GetOwnParamsResponse, error)
}

// UnimplementedStateQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStateQueryServiceServer struct {
}

func (*UnimplementedStateQueryServiceServer) GetService(ctx context.Context, req *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetServiceByOrigin(ctx context.Context, req *GetServiceByOriginRequest) (*GetServiceByOriginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceByOrigin not implemented")
}
func (*UnimplementedStateQueryServiceServer) ListService(ctx context.Context, req *ListServiceRequest) (*ListServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetCredential(ctx context.Context, req *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetCredentialByOriginHandle(ctx context.Context, req *GetCredentialByOriginHandleRequest) (*GetCredentialByOriginHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByOriginHandle not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetCredentialById(ctx context.Context, req *GetCredentialByIdRequest) (*GetCredentialByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialById not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetCredentialByOriginAuthority(ctx context.Context, req *GetCredentialByOriginAuthorityRequest) (*GetCredentialByOriginAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByOriginAuthority not implemented")
}
func (*UnimplementedStateQueryServiceServer) ListCredential(ctx context.Context, req *ListCredentialRequest) (*ListCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredential not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetUserByOriginAuthority(ctx context.Context, req *GetUserByOriginAuthorityRequest) (*GetUserByOriginAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByOriginAuthority not implemented")
}
func (*UnimplementedStateQueryServiceServer) ListUser(ctx context.Context, req *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetBaseParams(ctx context.Context, req *GetBaseParamsRequest) (*GetBaseParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseParams not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetReadParams(ctx context.Context, req *GetReadParamsRequest) (*GetReadParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadParams not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetWriteParams(ctx context.Context, req *GetWriteParamsRequest) (*GetWriteParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteParams not implemented")
}
func (*UnimplementedStateQueryServiceServer) GetOwnParams(ctx context.Context, req *GetOwnParamsRequest) (*GetOwnParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnParams not implemented")
}

func RegisterStateQueryServiceServer(s grpc1.Server, srv StateQueryServiceServer) {
	s.RegisterService(&_StateQueryService_serviceDesc, srv)
}

func _StateQueryService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetServiceByOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceByOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceByOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetServiceByOrigin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceByOrigin(ctx, req.(*GetServiceByOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/ListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListService(ctx, req.(*ListServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialByOriginHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByOriginHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialByOriginHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetCredentialByOriginHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialByOriginHandle(ctx, req.(*GetCredentialByOriginHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetCredentialById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialById(ctx, req.(*GetCredentialByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialByOriginAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByOriginAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialByOriginAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetCredentialByOriginAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialByOriginAuthority(ctx, req.(*GetCredentialByOriginAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/ListCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListCredential(ctx, req.(*ListCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetUserByOriginAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByOriginAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetUserByOriginAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetUserByOriginAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetUserByOriginAuthority(ctx, req.(*GetUserByOriginAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetBaseParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetBaseParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetBaseParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetBaseParams(ctx, req.(*GetBaseParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetReadParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetReadParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetReadParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetReadParams(ctx, req.(*GetReadParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetWriteParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetWriteParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetWriteParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetWriteParams(ctx, req.(*GetWriteParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetOwnParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetOwnParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.service.module.v1.StateQueryService/GetOwnParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetOwnParams(ctx, req.(*GetOwnParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StateQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonr.service.module.v1.StateQueryService",
	HandlerType: (*StateQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetService",
			Handler:    _StateQueryService_GetService_Handler,
		},
		{
			MethodName: "GetServiceByOrigin",
			Handler:    _StateQueryService_GetServiceByOrigin_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _StateQueryService_ListService_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _StateQueryService_GetCredential_Handler,
		},
		{
			MethodName: "GetCredentialByOriginHandle",
			Handler:    _StateQueryService_GetCredentialByOriginHandle_Handler,
		},
		{
			MethodName: "GetCredentialById",
			Handler:    _StateQueryService_GetCredentialById_Handler,
		},
		{
			MethodName: "GetCredentialByOriginAuthority",
			Handler:    _StateQueryService_GetCredentialByOriginAuthority_Handler,
		},
		{
			MethodName: "ListCredential",
			Handler:    _StateQueryService_ListCredential_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _StateQueryService_GetUser_Handler,
		},
		{
			MethodName: "GetUserByOriginAuthority",
			Handler:    _StateQueryService_GetUserByOriginAuthority_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _StateQueryService_ListUser_Handler,
		},
		{
			MethodName: "GetBaseParams",
			Handler:    _StateQueryService_GetBaseParams_Handler,
		},
		{
			MethodName: "GetReadParams",
			Handler:    _StateQueryService_GetReadParams_Handler,
		},
		{
			MethodName: "GetWriteParams",
			Handler:    _StateQueryService_GetWriteParams_Handler,
		},
		{
			MethodName: "GetOwnParams",
			Handler:    _StateQueryService_GetOwnParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonr/service/module/v1/state_query.proto",
}

func (m *GetServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintStateQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetServiceByOriginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceByOriginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceByOriginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetServiceByOriginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceByOriginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceByOriginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRequest_PrefixQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_PrefixQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixQuery != nil {
		{
			size, err := m.PrefixQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListServiceRequest_RangeQuery_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_RangeQuery_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeQuery != nil {
		{
			size, err := m.RangeQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListServiceRequest_IndexKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRequest_IndexKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_IndexKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size := m.Key.Size()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRequest_IndexKey_Id_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_IndexKey_Id_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListServiceRequest_IndexKey_Origin_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_IndexKey_Origin_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListServiceRequest_IndexKey_Authority_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_IndexKey_Authority_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Authority != nil {
		{
			size, err := m.Authority.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ListServiceRequest_IndexKey_Id) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRequest_IndexKey_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_IndexKey_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XId != nil {
		{
			size := m.XId.Size()
			i -= size
			if _, err := m.XId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRequest_IndexKey_Id_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_IndexKey_Id_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStateQuery(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListServiceRequest_IndexKey_Origin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRequest_IndexKey_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_IndexKey_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XOrigin != nil {
		{
			size := m.XOrigin.Size()
			i -= size
			if _, err := m.XOrigin.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRequest_IndexKey_Origin_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_IndexKey_Origin_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Origin)
	copy(dAtA[i:], m.Origin)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListServiceRequest_IndexKey_Authority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRequest_IndexKey_Authority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_IndexKey_Authority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XAuthority != nil {
		{
			size := m.XAuthority.Size()
			i -= size
			if _, err := m.XAuthority.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceRequest_IndexKey_Authority_Authority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_IndexKey_Authority_Authority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Authority)
	copy(dAtA[i:], m.Authority)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Authority)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListServiceRequest_RangeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRequest_RangeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRequest_RangeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintStateQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByOriginHandleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByOriginHandleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByOriginHandleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByOriginHandleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByOriginHandleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByOriginHandleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByOriginAuthorityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByOriginAuthorityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByOriginAuthorityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCredentialByOriginAuthorityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCredentialByOriginAuthorityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCredentialByOriginAuthorityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_PrefixQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_PrefixQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixQuery != nil {
		{
			size, err := m.PrefixQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_RangeQuery_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_RangeQuery_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeQuery != nil {
		{
			size, err := m.RangeQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size := m.Key.Size()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_Sequence_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Sequence_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sequence != nil {
		{
			size, err := m.Sequence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_Handle_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Handle_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Handle != nil {
		{
			size, err := m.Handle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_OriginHandle_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginHandle_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OriginHandle != nil {
		{
			size, err := m.OriginHandle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_Id_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Id_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OriginAuthority != nil {
		{
			size, err := m.OriginAuthority.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_Sequence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey_Sequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Sequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XSequence != nil {
		{
			size := m.XSequence.Size()
			i -= size
			if _, err := m.XSequence.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_Sequence_Sequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Sequence_Sequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStateQuery(dAtA, i, uint64(m.Sequence))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_Handle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey_Handle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Handle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XHandle != nil {
		{
			size := m.XHandle.Size()
			i -= size
			if _, err := m.XHandle.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_Handle_Handle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Handle_Handle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Handle)
	copy(dAtA[i:], m.Handle)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Handle)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginHandle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XHandle != nil {
		{
			size := m.XHandle.Size()
			i -= size
			if _, err := m.XHandle.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XOrigin != nil {
		{
			size := m.XOrigin.Size()
			i -= size
			if _, err := m.XOrigin.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_OriginHandle_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginHandle_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Origin)
	copy(dAtA[i:], m.Origin)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_OriginHandle_Handle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginHandle_Handle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Handle)
	copy(dAtA[i:], m.Handle)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Handle)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_Id) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XId != nil {
		{
			size := m.XId.Size()
			i -= size
			if _, err := m.XId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_Id_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_Id_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Id != nil {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XAuthority != nil {
		{
			size := m.XAuthority.Size()
			i -= size
			if _, err := m.XAuthority.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XOrigin != nil {
		{
			size := m.XOrigin.Size()
			i -= size
			if _, err := m.XOrigin.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Origin)
	copy(dAtA[i:], m.Origin)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority_Authority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority_Authority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Authority)
	copy(dAtA[i:], m.Authority)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Authority)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ListCredentialRequest_RangeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialRequest_RangeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialRequest_RangeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintStateQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserByOriginAuthorityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByOriginAuthorityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserByOriginAuthorityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserByOriginAuthorityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserByOriginAuthorityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserByOriginAuthorityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListUserRequest_PrefixQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_PrefixQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixQuery != nil {
		{
			size, err := m.PrefixQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListUserRequest_RangeQuery_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_RangeQuery_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RangeQuery != nil {
		{
			size, err := m.RangeQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListUserRequest_IndexKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserRequest_IndexKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_IndexKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size := m.Key.Size()
			i -= size
			if _, err := m.Key.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListUserRequest_IndexKey_Index_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_IndexKey_Index_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Index != nil {
		{
			size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListUserRequest_IndexKey_OriginAuthority_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_IndexKey_OriginAuthority_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OriginAuthority != nil {
		{
			size, err := m.OriginAuthority.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListUserRequest_IndexKey_Index) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserRequest_IndexKey_Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_IndexKey_Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XIndex != nil {
		{
			size := m.XIndex.Size()
			i -= size
			if _, err := m.XIndex.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListUserRequest_IndexKey_Index_Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_IndexKey_Index_Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStateQuery(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListUserRequest_IndexKey_OriginAuthority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserRequest_IndexKey_OriginAuthority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_IndexKey_OriginAuthority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XAuthority != nil {
		{
			size := m.XAuthority.Size()
			i -= size
			if _, err := m.XAuthority.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XOrigin != nil {
		{
			size := m.XOrigin.Size()
			i -= size
			if _, err := m.XOrigin.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListUserRequest_IndexKey_OriginAuthority_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_IndexKey_OriginAuthority_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Origin)
	copy(dAtA[i:], m.Origin)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Origin)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ListUserRequest_IndexKey_OriginAuthority_Authority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_IndexKey_OriginAuthority_Authority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Authority)
	copy(dAtA[i:], m.Authority)
	i = encodeVarintStateQuery(dAtA, i, uint64(len(m.Authority)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ListUserRequest_RangeQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserRequest_RangeQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest_RangeQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStateQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBaseParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBaseParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBaseParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetBaseParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBaseParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBaseParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReadParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReadParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReadParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetReadParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReadParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReadParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWriteParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWriteParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWriteParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetWriteParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWriteParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWriteParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOwnParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOwnParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOwnParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetOwnParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOwnParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOwnParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStateQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStateQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovStateQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStateQuery(uint64(m.Id))
	}
	return n
}

func (m *GetServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetServiceByOriginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetServiceByOriginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListServiceRequest_PrefixQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixQuery != nil {
		l = m.PrefixQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListServiceRequest_RangeQuery_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeQuery != nil {
		l = m.RangeQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListServiceRequest_IndexKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *ListServiceRequest_IndexKey_Id_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListServiceRequest_IndexKey_Origin_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListServiceRequest_IndexKey_Authority_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authority != nil {
		l = m.Authority.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListServiceRequest_IndexKey_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XId != nil {
		n += m.XId.Size()
	}
	return n
}

func (m *ListServiceRequest_IndexKey_Id_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStateQuery(uint64(m.Id))
	return n
}
func (m *ListServiceRequest_IndexKey_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XOrigin != nil {
		n += m.XOrigin.Size()
	}
	return n
}

func (m *ListServiceRequest_IndexKey_Origin_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListServiceRequest_IndexKey_Authority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XAuthority != nil {
		n += m.XAuthority.Size()
	}
	return n
}

func (m *ListServiceRequest_IndexKey_Authority_Authority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListServiceRequest_RangeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStateQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovStateQuery(uint64(m.Sequence))
	}
	return n
}

func (m *GetCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByOriginHandleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByOriginHandleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByOriginAuthorityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetCredentialByOriginAuthorityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListCredentialRequest_PrefixQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixQuery != nil {
		l = m.PrefixQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_RangeQuery_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeQuery != nil {
		l = m.RangeQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_Sequence_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != nil {
		l = m.Sequence.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_Handle_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Handle != nil {
		l = m.Handle.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_OriginHandle_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginHandle != nil {
		l = m.OriginHandle.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_Id_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginAuthority != nil {
		l = m.OriginAuthority.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_Sequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XSequence != nil {
		n += m.XSequence.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_Sequence_Sequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStateQuery(uint64(m.Sequence))
	return n
}
func (m *ListCredentialRequest_IndexKey_Handle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XHandle != nil {
		n += m.XHandle.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_Handle_Handle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handle)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XOrigin != nil {
		n += m.XOrigin.Size()
	}
	if m.XHandle != nil {
		n += m.XHandle.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_OriginHandle_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListCredentialRequest_IndexKey_OriginHandle_Handle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handle)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListCredentialRequest_IndexKey_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XId != nil {
		n += m.XId.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_Id_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(m.Id)
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XOrigin != nil {
		n += m.XOrigin.Size()
	}
	if m.XAuthority != nil {
		n += m.XAuthority.Size()
	}
	return n
}

func (m *ListCredentialRequest_IndexKey_OriginAuthority_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority_Authority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListCredentialRequest_RangeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStateQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovStateQuery(uint64(m.Index))
	}
	return n
}

func (m *GetUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetUserByOriginAuthorityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetUserByOriginAuthorityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListUserRequest_PrefixQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixQuery != nil {
		l = m.PrefixQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListUserRequest_RangeQuery_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeQuery != nil {
		l = m.RangeQuery.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListUserRequest_IndexKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *ListUserRequest_IndexKey_Index_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListUserRequest_IndexKey_OriginAuthority_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginAuthority != nil {
		l = m.OriginAuthority.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}
func (m *ListUserRequest_IndexKey_Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XIndex != nil {
		n += m.XIndex.Size()
	}
	return n
}

func (m *ListUserRequest_IndexKey_Index_Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStateQuery(uint64(m.Index))
	return n
}
func (m *ListUserRequest_IndexKey_OriginAuthority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XOrigin != nil {
		n += m.XOrigin.Size()
	}
	if m.XAuthority != nil {
		n += m.XAuthority.Size()
	}
	return n
}

func (m *ListUserRequest_IndexKey_OriginAuthority_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListUserRequest_IndexKey_OriginAuthority_Authority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	n += 1 + l + sovStateQuery(uint64(l))
	return n
}
func (m *ListUserRequest_RangeQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *ListUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStateQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetBaseParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetBaseParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetReadParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetReadParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetWriteParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetWriteParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func (m *GetOwnParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetOwnParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovStateQuery(uint64(l))
	}
	return n
}

func sovStateQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStateQuery(x uint64) (n int) {
	return sovStateQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Service{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceByOriginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceByOriginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceByOriginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceByOriginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceByOriginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceByOriginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Service{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceRequest_IndexKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListServiceRequest_PrefixQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceRequest_RangeQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListServiceRequest_RangeQuery_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRequest_IndexKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceRequest_IndexKey_Id{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListServiceRequest_IndexKey_Id_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceRequest_IndexKey_Origin{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListServiceRequest_IndexKey_Origin_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceRequest_IndexKey_Authority{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListServiceRequest_IndexKey_Authority_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRequest_IndexKey_Id) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Id: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Id: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XId = &ListServiceRequest_IndexKey_Id_Id{v}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRequest_IndexKey_Origin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Origin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Origin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XOrigin = &ListServiceRequest_IndexKey_Origin_Origin{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRequest_IndexKey_Authority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAuthority = &ListServiceRequest_IndexKey_Authority_Authority{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRequest_RangeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &ListServiceRequest_IndexKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &ListServiceRequest_IndexKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Service{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Credential{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByOriginHandleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByOriginHandleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByOriginHandleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByOriginHandleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByOriginHandleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByOriginHandleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Credential{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Credential{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByOriginAuthorityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByOriginAuthorityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByOriginAuthorityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCredentialByOriginAuthorityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCredentialByOriginAuthorityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCredentialByOriginAuthorityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Credential{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListCredentialRequest_PrefixQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_RangeQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListCredentialRequest_RangeQuery_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey_Sequence{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListCredentialRequest_IndexKey_Sequence_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey_Handle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListCredentialRequest_IndexKey_Handle_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey_OriginHandle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListCredentialRequest_IndexKey_OriginHandle_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey_Id{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListCredentialRequest_IndexKey_Id_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginAuthority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListCredentialRequest_IndexKey_OriginAuthority{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListCredentialRequest_IndexKey_OriginAuthority_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_Sequence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sequence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sequence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XSequence = &ListCredentialRequest_IndexKey_Sequence_Sequence{v}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_Handle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Handle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Handle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XHandle = &ListCredentialRequest_IndexKey_Handle_Handle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_OriginHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XOrigin = &ListCredentialRequest_IndexKey_OriginHandle_Origin{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XHandle = &ListCredentialRequest_IndexKey_OriginHandle_Handle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_Id) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Id: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Id: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.XId = &ListCredentialRequest_IndexKey_Id_Id{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_IndexKey_OriginAuthority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginAuthority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginAuthority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XOrigin = &ListCredentialRequest_IndexKey_OriginAuthority_Origin{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAuthority = &ListCredentialRequest_IndexKey_OriginAuthority_Authority{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialRequest_RangeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &ListCredentialRequest_IndexKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &ListCredentialRequest_IndexKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Credential{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &User{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByOriginAuthorityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByOriginAuthorityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByOriginAuthorityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserByOriginAuthorityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserByOriginAuthorityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserByOriginAuthorityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &User{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListUserRequest_IndexKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListUserRequest_PrefixQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListUserRequest_RangeQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &ListUserRequest_RangeQuery_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserRequest_IndexKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListUserRequest_IndexKey_Index{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListUserRequest_IndexKey_Index_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginAuthority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListUserRequest_IndexKey_OriginAuthority{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &ListUserRequest_IndexKey_OriginAuthority_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserRequest_IndexKey_Index) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Index: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Index: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XIndex = &ListUserRequest_IndexKey_Index_Index{v}
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserRequest_IndexKey_OriginAuthority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginAuthority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginAuthority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XOrigin = &ListUserRequest_IndexKey_OriginAuthority_Origin{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAuthority = &ListUserRequest_IndexKey_OriginAuthority_Authority{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserRequest_RangeQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &ListUserRequest_IndexKey{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &ListUserRequest_IndexKey{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &User{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBaseParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBaseParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBaseParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBaseParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBaseParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBaseParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &BaseParams{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReadParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReadParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReadParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReadParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReadParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReadParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &ReadParams{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWriteParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWriteParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWriteParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWriteParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWriteParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWriteParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &WriteParams{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOwnParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOwnParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOwnParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOwnParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOwnParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOwnParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &OwnParams{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStateQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStateQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStateQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStateQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStateQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStateQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStateQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStateQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStateQuery = fmt.Errorf("proto: unexpected end of group")
)
