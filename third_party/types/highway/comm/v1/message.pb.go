// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: highway/comm/v1/message.proto

// Package Discover is used to find other Peers in the sonr network.

package v1

import (
	common "github.com/sonr-hq/sonr/pkg/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DIDMessageHeader is the type of message that is being sent.
type DIDMessageHeader int32

const (
	// DIDMessageHeader_UNKNOWN is the default value for DIDMessageHeader.
	DIDMessageHeader_DIDMessageHeader_UNKNOWN DIDMessageHeader = 0 // [json_name="application/json"];
	// DIDMessageHeader_PING is a message that is used to test the liveness of a peer.
	DIDMessageHeader_DIDMessageHeader_PING DIDMessageHeader = 1 // [json_name="application/didcomm-ping+json"];
	// DIDMessageHeader_PLAINTEXT is a message that is used to send plaintext data.
	DIDMessageHeader_DIDMessageHeader_PLAINTEXT DIDMessageHeader = 2 // [json_name="application/didcomm-plain+json"];
	// DIDMessageHeader_SIGNED is a message that is used to send signed data.
	DIDMessageHeader_DIDMessageHeader_SIGNED DIDMessageHeader = 3 // [json_name="application/didcomm-signed+json"];
	// DIDMessageHeader_ANONCRYPT is a message that is used to send encrypted data anonymously.
	DIDMessageHeader_DIDMessageHeader_ANONCRYPT DIDMessageHeader = 4 // [json_name="application/didcomm-encrypted+json"];
	// DIDMessageHeader_AUTHCRYPT is a message that is used to send encrypted data with identity.
	DIDMessageHeader_DIDMessageHeader_AUTHCRYPT DIDMessageHeader = 5 // [json_name="application/didcomm-encrypted+json"];
)

// Enum value maps for DIDMessageHeader.
var (
	DIDMessageHeader_name = map[int32]string{
		0: "DIDMessageHeader_UNKNOWN",
		1: "DIDMessageHeader_PING",
		2: "DIDMessageHeader_PLAINTEXT",
		3: "DIDMessageHeader_SIGNED",
		4: "DIDMessageHeader_ANONCRYPT",
		5: "DIDMessageHeader_AUTHCRYPT",
	}
	DIDMessageHeader_value = map[string]int32{
		"DIDMessageHeader_UNKNOWN":   0,
		"DIDMessageHeader_PING":      1,
		"DIDMessageHeader_PLAINTEXT": 2,
		"DIDMessageHeader_SIGNED":    3,
		"DIDMessageHeader_ANONCRYPT": 4,
		"DIDMessageHeader_AUTHCRYPT": 5,
	}
)

func (x DIDMessageHeader) Enum() *DIDMessageHeader {
	p := new(DIDMessageHeader)
	*p = x
	return p
}

func (x DIDMessageHeader) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DIDMessageHeader) Descriptor() protoreflect.EnumDescriptor {
	return file_highway_comm_v1_message_proto_enumTypes[0].Descriptor()
}

func (DIDMessageHeader) Type() protoreflect.EnumType {
	return &file_highway_comm_v1_message_proto_enumTypes[0]
}

func (x DIDMessageHeader) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DIDMessageHeader.Descriptor instead.
func (DIDMessageHeader) EnumDescriptor() ([]byte, []int) {
	return file_highway_comm_v1_message_proto_rawDescGZIP(), []int{0}
}

// CommMessage is a message that can be sent over the wire between two libp2p nodes.
type CommMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier for this message.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type is the DIDMessageHeader of message.
	Type DIDMessageHeader `protobuf:"varint,2,opt,name=type,proto3,enum=sonrhq.highway.discovery.v1.DIDMessageHeader" json:"type,omitempty"`
	// body is the body of the message.
	Body map[string]string `protobuf:"bytes,3,rep,name=body,proto3" json:"body,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// to is the peer that this message is being sent to.
	To *common.NodeInfo `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	// from is the peer that this message is being sent from.
	From *common.NodeInfo `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	// thread_id is the thread id for this message.
	ThreadId string `protobuf:"bytes,6,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	// created_time is the time that this message was created.
	CreatedTime int64 `protobuf:"varint,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// expires_time is the time that this message expires.
	ExpiresTime int64 `protobuf:"varint,8,opt,name=expires_time,json=expiresTime,proto3" json:"expires_time,omitempty"`
	// reply_to is the message that this message is replying to.
	ReplyTo string `protobuf:"bytes,9,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	// attachments is a list of attachments that are sent with this message.
	Attachments []*Attachment `protobuf:"bytes,10,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *CommMessage) Reset() {
	*x = CommMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_highway_comm_v1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommMessage) ProtoMessage() {}

func (x *CommMessage) ProtoReflect() protoreflect.Message {
	mi := &file_highway_comm_v1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommMessage.ProtoReflect.Descriptor instead.
func (*CommMessage) Descriptor() ([]byte, []int) {
	return file_highway_comm_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *CommMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommMessage) GetType() DIDMessageHeader {
	if x != nil {
		return x.Type
	}
	return DIDMessageHeader_DIDMessageHeader_UNKNOWN
}

func (x *CommMessage) GetBody() map[string]string {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CommMessage) GetTo() *common.NodeInfo {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CommMessage) GetFrom() *common.NodeInfo {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CommMessage) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *CommMessage) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *CommMessage) GetExpiresTime() int64 {
	if x != nil {
		return x.ExpiresTime
	}
	return 0
}

func (x *CommMessage) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *CommMessage) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// Attachment is an attachment that can be sent with a CommMessage.
type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier for this attachment.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// description is the description of the attachment.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// data is the data of the attachment.
	Data map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_highway_comm_v1_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_highway_comm_v1_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_highway_comm_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *Attachment) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Attachment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Attachment) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_highway_comm_v1_message_proto protoreflect.FileDescriptor

var file_highway_comm_v1_message_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x73, 0x6f, 0x6e, 0x72, 0x68, 0x71, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x86, 0x04, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x68, 0x71, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61,
	0x79, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x68, 0x71, 0x2e, 0x68, 0x69, 0x67,
	0x68, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f,
	0x64, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6e, 0x72,
	0x68, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x68, 0x71,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x6f, 0x6e, 0x72, 0x68, 0x71, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x0a,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6f, 0x6e,
	0x72, 0x68, 0x71, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xc8, 0x01, 0x0a,
	0x10, 0x44, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49,
	0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x50,
	0x4c, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49,
	0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x44, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x41, 0x4e, 0x4f, 0x4e,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x44, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x05, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2d, 0x68, 0x71, 0x2f, 0x73, 0x6f,
	0x6e, 0x72, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_highway_comm_v1_message_proto_rawDescOnce sync.Once
	file_highway_comm_v1_message_proto_rawDescData = file_highway_comm_v1_message_proto_rawDesc
)

func file_highway_comm_v1_message_proto_rawDescGZIP() []byte {
	file_highway_comm_v1_message_proto_rawDescOnce.Do(func() {
		file_highway_comm_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_highway_comm_v1_message_proto_rawDescData)
	})
	return file_highway_comm_v1_message_proto_rawDescData
}

var file_highway_comm_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_highway_comm_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_highway_comm_v1_message_proto_goTypes = []interface{}{
	(DIDMessageHeader)(0),   // 0: sonrhq.highway.discovery.v1.DIDMessageHeader
	(*CommMessage)(nil),     // 1: sonrhq.highway.discovery.v1.CommMessage
	(*Attachment)(nil),      // 2: sonrhq.highway.discovery.v1.Attachment
	nil,                     // 3: sonrhq.highway.discovery.v1.CommMessage.BodyEntry
	nil,                     // 4: sonrhq.highway.discovery.v1.Attachment.DataEntry
	(*common.NodeInfo)(nil), // 5: sonrhq.common.v1.NodeInfo
}
var file_highway_comm_v1_message_proto_depIdxs = []int32{
	0, // 0: sonrhq.highway.discovery.v1.CommMessage.type:type_name -> sonrhq.highway.discovery.v1.DIDMessageHeader
	3, // 1: sonrhq.highway.discovery.v1.CommMessage.body:type_name -> sonrhq.highway.discovery.v1.CommMessage.BodyEntry
	5, // 2: sonrhq.highway.discovery.v1.CommMessage.to:type_name -> sonrhq.common.v1.NodeInfo
	5, // 3: sonrhq.highway.discovery.v1.CommMessage.from:type_name -> sonrhq.common.v1.NodeInfo
	2, // 4: sonrhq.highway.discovery.v1.CommMessage.attachments:type_name -> sonrhq.highway.discovery.v1.Attachment
	4, // 5: sonrhq.highway.discovery.v1.Attachment.data:type_name -> sonrhq.highway.discovery.v1.Attachment.DataEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_highway_comm_v1_message_proto_init() }
func file_highway_comm_v1_message_proto_init() {
	if File_highway_comm_v1_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_highway_comm_v1_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_highway_comm_v1_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_highway_comm_v1_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_highway_comm_v1_message_proto_goTypes,
		DependencyIndexes: file_highway_comm_v1_message_proto_depIdxs,
		EnumInfos:         file_highway_comm_v1_message_proto_enumTypes,
		MessageInfos:      file_highway_comm_v1_message_proto_msgTypes,
	}.Build()
	File_highway_comm_v1_message_proto = out.File
	file_highway_comm_v1_message_proto_rawDesc = nil
	file_highway_comm_v1_message_proto_goTypes = nil
	file_highway_comm_v1_message_proto_depIdxs = nil
}
