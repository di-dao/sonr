// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/motor/v1/response.proto

#include "node/motor/v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace node {
namespace motor {
namespace v1 {
constexpr ShareResponse::ShareResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ShareResponseDefaultTypeInternal {
  constexpr ShareResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShareResponseDefaultTypeInternal() {}
  union {
    ShareResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShareResponseDefaultTypeInternal _ShareResponse_default_instance_;
constexpr DecideResponse::DecideResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct DecideResponseDefaultTypeInternal {
  constexpr DecideResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecideResponseDefaultTypeInternal() {}
  union {
    DecideResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecideResponseDefaultTypeInternal _DecideResponse_default_instance_;
constexpr SearchResponse::SearchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_(nullptr)
  , success_(false){}
struct SearchResponseDefaultTypeInternal {
  constexpr SearchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchResponseDefaultTypeInternal() {}
  union {
    SearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
constexpr OnTransmitDecisionResponse::OnTransmitDecisionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(nullptr)
  , received_(int64_t{0})
  , decision_(false){}
struct OnTransmitDecisionResponseDefaultTypeInternal {
  constexpr OnTransmitDecisionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnTransmitDecisionResponseDefaultTypeInternal() {}
  union {
    OnTransmitDecisionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnTransmitDecisionResponseDefaultTypeInternal _OnTransmitDecisionResponse_default_instance_;
constexpr OnLobbyRefreshResponse::OnLobbyRefreshResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peers_()
  , olc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , received_(int64_t{0}){}
struct OnLobbyRefreshResponseDefaultTypeInternal {
  constexpr OnLobbyRefreshResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnLobbyRefreshResponseDefaultTypeInternal() {}
  union {
    OnLobbyRefreshResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnLobbyRefreshResponseDefaultTypeInternal _OnLobbyRefreshResponse_default_instance_;
constexpr OnTransmitInviteResponse::OnTransmitInviteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(nullptr)
  , payload_(nullptr)
  , received_(int64_t{0}){}
struct OnTransmitInviteResponseDefaultTypeInternal {
  constexpr OnTransmitInviteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnTransmitInviteResponseDefaultTypeInternal() {}
  union {
    OnTransmitInviteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnTransmitInviteResponseDefaultTypeInternal _OnTransmitInviteResponse_default_instance_;
constexpr OnMailboxMessageResponse::OnMailboxMessageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(nullptr)
  , to_(nullptr)
  , metadata_(nullptr){}
struct OnMailboxMessageResponseDefaultTypeInternal {
  constexpr OnMailboxMessageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnMailboxMessageResponseDefaultTypeInternal() {}
  union {
    OnMailboxMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnMailboxMessageResponseDefaultTypeInternal _OnMailboxMessageResponse_default_instance_;
constexpr OnTransmitProgressResponse::OnTransmitProgressResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : progress_(0)
  , received_(int64_t{0})
  , current_(0)
  , total_(0)
  , direction_(0)
{}
struct OnTransmitProgressResponseDefaultTypeInternal {
  constexpr OnTransmitProgressResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnTransmitProgressResponseDefaultTypeInternal() {}
  union {
    OnTransmitProgressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnTransmitProgressResponseDefaultTypeInternal _OnTransmitProgressResponse_default_instance_;
constexpr OnTransmitCompleteResponse_ResultsEntry_DoNotUse::OnTransmitCompleteResponse_ResultsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OnTransmitCompleteResponse_ResultsEntry_DoNotUseDefaultTypeInternal {
  constexpr OnTransmitCompleteResponse_ResultsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnTransmitCompleteResponse_ResultsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OnTransmitCompleteResponse_ResultsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnTransmitCompleteResponse_ResultsEntry_DoNotUseDefaultTypeInternal _OnTransmitCompleteResponse_ResultsEntry_DoNotUse_default_instance_;
constexpr OnTransmitCompleteResponse::OnTransmitCompleteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , payload_(nullptr)
  , from_(nullptr)
  , to_(nullptr)
  , created_at_(int64_t{0})
  , received_at_(int64_t{0})
  , direction_(0)
{}
struct OnTransmitCompleteResponseDefaultTypeInternal {
  constexpr OnTransmitCompleteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnTransmitCompleteResponseDefaultTypeInternal() {}
  union {
    OnTransmitCompleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnTransmitCompleteResponseDefaultTypeInternal _OnTransmitCompleteResponse_default_instance_;
}  // namespace v1
}  // namespace motor
}  // namespace node
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_node_2fmotor_2fv1_2fresponse_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fmotor_2fv1_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_node_2fmotor_2fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::ShareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::ShareResponse, success_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::ShareResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::DecideResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::DecideResponse, success_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::DecideResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::SearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::SearchResponse, success_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::SearchResponse, error_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::SearchResponse, peer_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::SearchResponse, peer_id_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::SearchResponse, s_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitDecisionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitDecisionResponse, decision_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitDecisionResponse, from_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitDecisionResponse, received_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnLobbyRefreshResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnLobbyRefreshResponse, olc_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnLobbyRefreshResponse, peers_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnLobbyRefreshResponse, received_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitInviteResponse, received_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitInviteResponse, from_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitInviteResponse, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnMailboxMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnMailboxMessageResponse, id_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnMailboxMessageResponse, buffer_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnMailboxMessageResponse, from_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnMailboxMessageResponse, to_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnMailboxMessageResponse, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitProgressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitProgressResponse, progress_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitProgressResponse, received_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitProgressResponse, current_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitProgressResponse, total_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitProgressResponse, direction_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse_ResultsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse_ResultsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse_ResultsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse_ResultsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse, direction_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse, payload_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse, from_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse, to_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse, created_at_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse, received_at_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteResponse, results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::node::motor::v1::ShareResponse)},
  { 8, -1, -1, sizeof(::node::motor::v1::DecideResponse)},
  { 16, -1, -1, sizeof(::node::motor::v1::SearchResponse)},
  { 27, -1, -1, sizeof(::node::motor::v1::OnTransmitDecisionResponse)},
  { 36, -1, -1, sizeof(::node::motor::v1::OnLobbyRefreshResponse)},
  { 45, -1, -1, sizeof(::node::motor::v1::OnTransmitInviteResponse)},
  { 54, -1, -1, sizeof(::node::motor::v1::OnMailboxMessageResponse)},
  { 65, -1, -1, sizeof(::node::motor::v1::OnTransmitProgressResponse)},
  { 76, 84, -1, sizeof(::node::motor::v1::OnTransmitCompleteResponse_ResultsEntry_DoNotUse)},
  { 86, -1, -1, sizeof(::node::motor::v1::OnTransmitCompleteResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_ShareResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_DecideResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_SearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnTransmitDecisionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnLobbyRefreshResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnTransmitInviteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnMailboxMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnTransmitProgressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnTransmitCompleteResponse_ResultsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnTransmitCompleteResponse_default_instance_),
};

const char descriptor_table_protodef_node_2fmotor_2fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034node/motor/v1/response.proto\022\rnode.mot"
  "or.v1\032\024common/v1/core.proto\032\024common/v1/d"
  "ata.proto\"\?\n\rShareResponse\022\030\n\007success\030\001 "
  "\001(\010R\007success\022\024\n\005error\030\002 \001(\tR\005error\"@\n\016De"
  "cideResponse\022\030\n\007success\030\001 \001(\010R\007success\022\024"
  "\n\005error\030\002 \001(\tR\005error\"\225\001\n\016SearchResponse\022"
  "\030\n\007success\030\001 \001(\010R\007success\022\024\n\005error\030\002 \001(\t"
  "R\005error\022#\n\004peer\030\003 \001(\0132\017.common.v1.PeerR\004"
  "peer\022\027\n\007peer_id\030\004 \001(\tR\006peerId\022\025\n\006s_name\030"
  "\005 \001(\tR\005sName\"y\n\032OnTransmitDecisionRespon"
  "se\022\032\n\010decision\030\001 \001(\010R\010decision\022#\n\004from\030\002"
  " \001(\0132\017.common.v1.PeerR\004from\022\032\n\010received\030"
  "\003 \001(\003R\010received\"m\n\026OnLobbyRefreshRespons"
  "e\022\020\n\003olc\030\001 \001(\tR\003olc\022%\n\005peers\030\002 \003(\0132\017.com"
  "mon.v1.PeerR\005peers\022\032\n\010received\030\003 \001(\003R\010re"
  "ceived\"\211\001\n\030OnTransmitInviteResponse\022\032\n\010r"
  "eceived\030\001 \001(\003R\010received\022#\n\004from\030\002 \001(\0132\017."
  "common.v1.PeerR\004from\022,\n\007payload\030\003 \001(\0132\022."
  "common.v1.PayloadR\007payload\"\277\001\n\030OnMailbox"
  "MessageResponse\022\016\n\002id\030\001 \001(\tR\002id\022\026\n\006buffe"
  "r\030\002 \001(\014R\006buffer\022&\n\004from\030\003 \001(\0132\022.common.v"
  "1.ProfileR\004from\022\"\n\002to\030\004 \001(\0132\022.common.v1."
  "ProfileR\002to\022/\n\010metadata\030\005 \001(\0132\023.common.v"
  "1.MetadataR\010metadata\"\270\001\n\032OnTransmitProgr"
  "essResponse\022\032\n\010progress\030\001 \001(\001R\010progress\022"
  "\032\n\010received\030\002 \001(\003R\010received\022\030\n\007current\030\003"
  " \001(\005R\007current\022\024\n\005total\030\004 \001(\005R\005total\0222\n\td"
  "irection\030\005 \001(\0162\024.common.v1.DirectionR\tdi"
  "rection\"\222\003\n\032OnTransmitCompleteResponse\0222"
  "\n\tdirection\030\001 \001(\0162\024.common.v1.DirectionR"
  "\tdirection\022,\n\007payload\030\002 \001(\0132\022.common.v1."
  "PayloadR\007payload\022#\n\004from\030\003 \001(\0132\017.common."
  "v1.PeerR\004from\022\037\n\002to\030\004 \001(\0132\017.common.v1.Pe"
  "erR\002to\022\035\n\ncreated_at\030\005 \001(\003R\tcreatedAt\022\037\n"
  "\013received_at\030\006 \001(\003R\nreceivedAt\022P\n\007result"
  "s\030\007 \003(\01326.node.motor.v1.OnTransmitComple"
  "teResponse.ResultsEntryR\007results\032:\n\014Resu"
  "ltsEntry\022\020\n\003key\030\001 \001(\005R\003key\022\024\n\005value\030\002 \001("
  "\010R\005value:\0028\001B$Z\"github.com/sonr-io/core/"
  "node/motorb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_deps[2] = {
  &::descriptor_table_common_2fv1_2fcore_2eproto,
  &::descriptor_table_common_2fv1_2fdata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto = {
  false, false, 1578, descriptor_table_protodef_node_2fmotor_2fv1_2fresponse_2eproto, "node/motor/v1/response.proto", 
  &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once, descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_deps, 2, 10,
  schemas, file_default_instances, TableStruct_node_2fmotor_2fv1_2fresponse_2eproto::offsets,
  file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto, file_level_enum_descriptors_node_2fmotor_2fv1_2fresponse_2eproto, file_level_service_descriptors_node_2fmotor_2fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fmotor_2fv1_2fresponse_2eproto(&descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto);
namespace node {
namespace motor {
namespace v1 {

// ===================================================================

class ShareResponse::_Internal {
 public:
};

ShareResponse::ShareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.ShareResponse)
}
ShareResponse::ShareResponse(const ShareResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.ShareResponse)
}

inline void ShareResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

ShareResponse::~ShareResponse() {
  // @@protoc_insertion_point(destructor:node.motor.v1.ShareResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShareResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShareResponse::ArenaDtor(void* object) {
  ShareResponse* _this = reinterpret_cast< ShareResponse* >(object);
  (void)_this;
}
void ShareResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShareResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.ShareResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShareResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.ShareResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShareResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.ShareResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.ShareResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.ShareResponse)
  return target;
}

size_t ShareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.ShareResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShareResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShareResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShareResponse::GetClassData() const { return &_class_data_; }

void ShareResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShareResponse *>(to)->MergeFrom(
      static_cast<const ShareResponse &>(from));
}


void ShareResponse::MergeFrom(const ShareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.ShareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShareResponse::CopyFrom(const ShareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.ShareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareResponse::IsInitialized() const {
  return true;
}

void ShareResponse::InternalSwap(ShareResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShareResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[0]);
}

// ===================================================================

class DecideResponse::_Internal {
 public:
};

DecideResponse::DecideResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.DecideResponse)
}
DecideResponse::DecideResponse(const DecideResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.DecideResponse)
}

inline void DecideResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

DecideResponse::~DecideResponse() {
  // @@protoc_insertion_point(destructor:node.motor.v1.DecideResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecideResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecideResponse::ArenaDtor(void* object) {
  DecideResponse* _this = reinterpret_cast< DecideResponse* >(object);
  (void)_this;
}
void DecideResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecideResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecideResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.DecideResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecideResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.DecideResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DecideResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.DecideResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.DecideResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.DecideResponse)
  return target;
}

size_t DecideResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.DecideResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecideResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecideResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecideResponse::GetClassData() const { return &_class_data_; }

void DecideResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DecideResponse *>(to)->MergeFrom(
      static_cast<const DecideResponse &>(from));
}


void DecideResponse::MergeFrom(const DecideResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.DecideResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecideResponse::CopyFrom(const DecideResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.DecideResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecideResponse::IsInitialized() const {
  return true;
}

void DecideResponse::InternalSwap(DecideResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecideResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[1]);
}

// ===================================================================

class SearchResponse::_Internal {
 public:
  static const ::common::v1::Peer& peer(const SearchResponse* msg);
};

const ::common::v1::Peer&
SearchResponse::_Internal::peer(const SearchResponse* msg) {
  return *msg->peer_;
}
void SearchResponse::clear_peer() {
  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
SearchResponse::SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.SearchResponse)
}
SearchResponse::SearchResponse(const SearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_peer_id().empty()) {
    peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peer_id(), 
      GetArenaForAllocation());
  }
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_peer()) {
    peer_ = new ::common::v1::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.SearchResponse)
}

inline void SearchResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
peer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&peer_)) + sizeof(success_));
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:node.motor.v1.SearchResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_;
}

void SearchResponse::ArenaDtor(void* object) {
  SearchResponse* _this = reinterpret_cast< SearchResponse* >(object);
  (void)_this;
}
void SearchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.SearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  peer_id_.ClearToEmpty();
  s_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.SearchResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer peer = 3 [json_name = "peer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string peer_id = 4 [json_name = "peerId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_peer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.SearchResponse.peer_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string s_name = 5 [json_name = "sName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.SearchResponse.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.SearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.SearchResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // .common.v1.Peer peer = 3 [json_name = "peer"];
  if (this->_internal_has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::peer(this), target, stream);
  }

  // string peer_id = 4 [json_name = "peerId"];
  if (!this->_internal_peer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_id().data(), static_cast<int>(this->_internal_peer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.SearchResponse.peer_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_peer_id(), target);
  }

  // string s_name = 5 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.SearchResponse.s_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_s_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.SearchResponse)
  return target;
}

size_t SearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.SearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // string peer_id = 4 [json_name = "peerId"];
  if (!this->_internal_peer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_id());
  }

  // string s_name = 5 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // .common.v1.Peer peer = 3 [json_name = "peer"];
  if (this->_internal_has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchResponse::GetClassData() const { return &_class_data_; }

void SearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SearchResponse *>(to)->MergeFrom(
      static_cast<const SearchResponse &>(from));
}


void SearchResponse::MergeFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.SearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (!from._internal_peer_id().empty()) {
    _internal_set_peer_id(from._internal_peer_id());
  }
  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (from._internal_has_peer()) {
    _internal_mutable_peer()->::common::v1::Peer::MergeFrom(from._internal_peer());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  return true;
}

void SearchResponse::InternalSwap(SearchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &peer_id_, lhs_arena,
      &other->peer_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchResponse, success_)
      + sizeof(SearchResponse::success_)
      - PROTOBUF_FIELD_OFFSET(SearchResponse, peer_)>(
          reinterpret_cast<char*>(&peer_),
          reinterpret_cast<char*>(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[2]);
}

// ===================================================================

class OnTransmitDecisionResponse::_Internal {
 public:
  static const ::common::v1::Peer& from(const OnTransmitDecisionResponse* msg);
};

const ::common::v1::Peer&
OnTransmitDecisionResponse::_Internal::from(const OnTransmitDecisionResponse* msg) {
  return *msg->from_;
}
void OnTransmitDecisionResponse::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
OnTransmitDecisionResponse::OnTransmitDecisionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnTransmitDecisionResponse)
}
OnTransmitDecisionResponse::OnTransmitDecisionResponse(const OnTransmitDecisionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from()) {
    from_ = new ::common::v1::Peer(*from.from_);
  } else {
    from_ = nullptr;
  }
  ::memcpy(&received_, &from.received_,
    static_cast<size_t>(reinterpret_cast<char*>(&decision_) -
    reinterpret_cast<char*>(&received_)) + sizeof(decision_));
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnTransmitDecisionResponse)
}

inline void OnTransmitDecisionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decision_) -
    reinterpret_cast<char*>(&from_)) + sizeof(decision_));
}

OnTransmitDecisionResponse::~OnTransmitDecisionResponse() {
  // @@protoc_insertion_point(destructor:node.motor.v1.OnTransmitDecisionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OnTransmitDecisionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete from_;
}

void OnTransmitDecisionResponse::ArenaDtor(void* object) {
  OnTransmitDecisionResponse* _this = reinterpret_cast< OnTransmitDecisionResponse* >(object);
  (void)_this;
}
void OnTransmitDecisionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnTransmitDecisionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnTransmitDecisionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.OnTransmitDecisionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  ::memset(&received_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decision_) -
      reinterpret_cast<char*>(&received_)) + sizeof(decision_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnTransmitDecisionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool decision = 1 [json_name = "decision"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          decision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer from = 2 [json_name = "from"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 received = 3 [json_name = "received"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnTransmitDecisionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.OnTransmitDecisionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool decision = 1 [json_name = "decision"];
  if (this->_internal_decision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_decision(), target);
  }

  // .common.v1.Peer from = 2 [json_name = "from"];
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from(this), target, stream);
  }

  // int64 received = 3 [json_name = "received"];
  if (this->_internal_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_received(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.OnTransmitDecisionResponse)
  return target;
}

size_t OnTransmitDecisionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.OnTransmitDecisionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.v1.Peer from = 2 [json_name = "from"];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // int64 received = 3 [json_name = "received"];
  if (this->_internal_received() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_received());
  }

  // bool decision = 1 [json_name = "decision"];
  if (this->_internal_decision() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnTransmitDecisionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OnTransmitDecisionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnTransmitDecisionResponse::GetClassData() const { return &_class_data_; }

void OnTransmitDecisionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OnTransmitDecisionResponse *>(to)->MergeFrom(
      static_cast<const OnTransmitDecisionResponse &>(from));
}


void OnTransmitDecisionResponse::MergeFrom(const OnTransmitDecisionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.OnTransmitDecisionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_from()) {
    _internal_mutable_from()->::common::v1::Peer::MergeFrom(from._internal_from());
  }
  if (from._internal_received() != 0) {
    _internal_set_received(from._internal_received());
  }
  if (from._internal_decision() != 0) {
    _internal_set_decision(from._internal_decision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnTransmitDecisionResponse::CopyFrom(const OnTransmitDecisionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.OnTransmitDecisionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnTransmitDecisionResponse::IsInitialized() const {
  return true;
}

void OnTransmitDecisionResponse::InternalSwap(OnTransmitDecisionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnTransmitDecisionResponse, decision_)
      + sizeof(OnTransmitDecisionResponse::decision_)
      - PROTOBUF_FIELD_OFFSET(OnTransmitDecisionResponse, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnTransmitDecisionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[3]);
}

// ===================================================================

class OnLobbyRefreshResponse::_Internal {
 public:
};

void OnLobbyRefreshResponse::clear_peers() {
  peers_.Clear();
}
OnLobbyRefreshResponse::OnLobbyRefreshResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  peers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnLobbyRefreshResponse)
}
OnLobbyRefreshResponse::OnLobbyRefreshResponse(const OnLobbyRefreshResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  olc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    olc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_olc().empty()) {
    olc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_olc(), 
      GetArenaForAllocation());
  }
  received_ = from.received_;
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnLobbyRefreshResponse)
}

inline void OnLobbyRefreshResponse::SharedCtor() {
olc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  olc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
received_ = int64_t{0};
}

OnLobbyRefreshResponse::~OnLobbyRefreshResponse() {
  // @@protoc_insertion_point(destructor:node.motor.v1.OnLobbyRefreshResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OnLobbyRefreshResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  olc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OnLobbyRefreshResponse::ArenaDtor(void* object) {
  OnLobbyRefreshResponse* _this = reinterpret_cast< OnLobbyRefreshResponse* >(object);
  (void)_this;
}
void OnLobbyRefreshResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnLobbyRefreshResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnLobbyRefreshResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.OnLobbyRefreshResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  olc_.ClearToEmpty();
  received_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnLobbyRefreshResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string olc = 1 [json_name = "olc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_olc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.OnLobbyRefreshResponse.olc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.v1.Peer peers = 2 [json_name = "peers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 received = 3 [json_name = "received"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnLobbyRefreshResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.OnLobbyRefreshResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string olc = 1 [json_name = "olc"];
  if (!this->_internal_olc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_olc().data(), static_cast<int>(this->_internal_olc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.OnLobbyRefreshResponse.olc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_olc(), target);
  }

  // repeated .common.v1.Peer peers = 2 [json_name = "peers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_peers(i), target, stream);
  }

  // int64 received = 3 [json_name = "received"];
  if (this->_internal_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_received(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.OnLobbyRefreshResponse)
  return target;
}

size_t OnLobbyRefreshResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.OnLobbyRefreshResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.v1.Peer peers = 2 [json_name = "peers"];
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string olc = 1 [json_name = "olc"];
  if (!this->_internal_olc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_olc());
  }

  // int64 received = 3 [json_name = "received"];
  if (this->_internal_received() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_received());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnLobbyRefreshResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OnLobbyRefreshResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnLobbyRefreshResponse::GetClassData() const { return &_class_data_; }

void OnLobbyRefreshResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OnLobbyRefreshResponse *>(to)->MergeFrom(
      static_cast<const OnLobbyRefreshResponse &>(from));
}


void OnLobbyRefreshResponse::MergeFrom(const OnLobbyRefreshResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.OnLobbyRefreshResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
  if (!from._internal_olc().empty()) {
    _internal_set_olc(from._internal_olc());
  }
  if (from._internal_received() != 0) {
    _internal_set_received(from._internal_received());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnLobbyRefreshResponse::CopyFrom(const OnLobbyRefreshResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.OnLobbyRefreshResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnLobbyRefreshResponse::IsInitialized() const {
  return true;
}

void OnLobbyRefreshResponse::InternalSwap(OnLobbyRefreshResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  peers_.InternalSwap(&other->peers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &olc_, lhs_arena,
      &other->olc_, rhs_arena
  );
  swap(received_, other->received_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnLobbyRefreshResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[4]);
}

// ===================================================================

class OnTransmitInviteResponse::_Internal {
 public:
  static const ::common::v1::Peer& from(const OnTransmitInviteResponse* msg);
  static const ::common::v1::Payload& payload(const OnTransmitInviteResponse* msg);
};

const ::common::v1::Peer&
OnTransmitInviteResponse::_Internal::from(const OnTransmitInviteResponse* msg) {
  return *msg->from_;
}
const ::common::v1::Payload&
OnTransmitInviteResponse::_Internal::payload(const OnTransmitInviteResponse* msg) {
  return *msg->payload_;
}
void OnTransmitInviteResponse::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void OnTransmitInviteResponse::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
OnTransmitInviteResponse::OnTransmitInviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnTransmitInviteResponse)
}
OnTransmitInviteResponse::OnTransmitInviteResponse(const OnTransmitInviteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from()) {
    from_ = new ::common::v1::Peer(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_payload()) {
    payload_ = new ::common::v1::Payload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  received_ = from.received_;
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnTransmitInviteResponse)
}

inline void OnTransmitInviteResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&received_) -
    reinterpret_cast<char*>(&from_)) + sizeof(received_));
}

OnTransmitInviteResponse::~OnTransmitInviteResponse() {
  // @@protoc_insertion_point(destructor:node.motor.v1.OnTransmitInviteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OnTransmitInviteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete payload_;
}

void OnTransmitInviteResponse::ArenaDtor(void* object) {
  OnTransmitInviteResponse* _this = reinterpret_cast< OnTransmitInviteResponse* >(object);
  (void)_this;
}
void OnTransmitInviteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnTransmitInviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnTransmitInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.OnTransmitInviteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  received_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnTransmitInviteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 received = 1 [json_name = "received"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer from = 2 [json_name = "from"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Payload payload = 3 [json_name = "payload"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnTransmitInviteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.OnTransmitInviteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 received = 1 [json_name = "received"];
  if (this->_internal_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_received(), target);
  }

  // .common.v1.Peer from = 2 [json_name = "from"];
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from(this), target, stream);
  }

  // .common.v1.Payload payload = 3 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.OnTransmitInviteResponse)
  return target;
}

size_t OnTransmitInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.OnTransmitInviteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.v1.Peer from = 2 [json_name = "from"];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .common.v1.Payload payload = 3 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // int64 received = 1 [json_name = "received"];
  if (this->_internal_received() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_received());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnTransmitInviteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OnTransmitInviteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnTransmitInviteResponse::GetClassData() const { return &_class_data_; }

void OnTransmitInviteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OnTransmitInviteResponse *>(to)->MergeFrom(
      static_cast<const OnTransmitInviteResponse &>(from));
}


void OnTransmitInviteResponse::MergeFrom(const OnTransmitInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.OnTransmitInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_from()) {
    _internal_mutable_from()->::common::v1::Peer::MergeFrom(from._internal_from());
  }
  if (from._internal_has_payload()) {
    _internal_mutable_payload()->::common::v1::Payload::MergeFrom(from._internal_payload());
  }
  if (from._internal_received() != 0) {
    _internal_set_received(from._internal_received());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnTransmitInviteResponse::CopyFrom(const OnTransmitInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.OnTransmitInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnTransmitInviteResponse::IsInitialized() const {
  return true;
}

void OnTransmitInviteResponse::InternalSwap(OnTransmitInviteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnTransmitInviteResponse, received_)
      + sizeof(OnTransmitInviteResponse::received_)
      - PROTOBUF_FIELD_OFFSET(OnTransmitInviteResponse, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnTransmitInviteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[5]);
}

// ===================================================================

class OnMailboxMessageResponse::_Internal {
 public:
  static const ::common::v1::Profile& from(const OnMailboxMessageResponse* msg);
  static const ::common::v1::Profile& to(const OnMailboxMessageResponse* msg);
  static const ::common::v1::Metadata& metadata(const OnMailboxMessageResponse* msg);
};

const ::common::v1::Profile&
OnMailboxMessageResponse::_Internal::from(const OnMailboxMessageResponse* msg) {
  return *msg->from_;
}
const ::common::v1::Profile&
OnMailboxMessageResponse::_Internal::to(const OnMailboxMessageResponse* msg) {
  return *msg->to_;
}
const ::common::v1::Metadata&
OnMailboxMessageResponse::_Internal::metadata(const OnMailboxMessageResponse* msg) {
  return *msg->metadata_;
}
void OnMailboxMessageResponse::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void OnMailboxMessageResponse::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
void OnMailboxMessageResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
OnMailboxMessageResponse::OnMailboxMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnMailboxMessageResponse)
}
OnMailboxMessageResponse::OnMailboxMessageResponse(const OnMailboxMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    from_ = new ::common::v1::Profile(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::common::v1::Profile(*from.to_);
  } else {
    to_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::common::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnMailboxMessageResponse)
}

inline void OnMailboxMessageResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&from_)) + sizeof(metadata_));
}

OnMailboxMessageResponse::~OnMailboxMessageResponse() {
  // @@protoc_insertion_point(destructor:node.motor.v1.OnMailboxMessageResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OnMailboxMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
  if (this != internal_default_instance()) delete metadata_;
}

void OnMailboxMessageResponse::ArenaDtor(void* object) {
  OnMailboxMessageResponse* _this = reinterpret_cast< OnMailboxMessageResponse* >(object);
  (void)_this;
}
void OnMailboxMessageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnMailboxMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnMailboxMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.OnMailboxMessageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  buffer_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnMailboxMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.OnMailboxMessageResponse.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buffer = 2 [json_name = "buffer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Profile from = 3 [json_name = "from"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Profile to = 4 [json_name = "to"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnMailboxMessageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.OnMailboxMessageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.OnMailboxMessageResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes buffer = 2 [json_name = "buffer"];
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_buffer(), target);
  }

  // .common.v1.Profile from = 3 [json_name = "from"];
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::from(this), target, stream);
  }

  // .common.v1.Profile to = 4 [json_name = "to"];
  if (this->_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::to(this), target, stream);
  }

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.OnMailboxMessageResponse)
  return target;
}

size_t OnMailboxMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.OnMailboxMessageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes buffer = 2 [json_name = "buffer"];
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // .common.v1.Profile from = 3 [json_name = "from"];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .common.v1.Profile to = 4 [json_name = "to"];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnMailboxMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OnMailboxMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnMailboxMessageResponse::GetClassData() const { return &_class_data_; }

void OnMailboxMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OnMailboxMessageResponse *>(to)->MergeFrom(
      static_cast<const OnMailboxMessageResponse &>(from));
}


void OnMailboxMessageResponse::MergeFrom(const OnMailboxMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.OnMailboxMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_has_from()) {
    _internal_mutable_from()->::common::v1::Profile::MergeFrom(from._internal_from());
  }
  if (from._internal_has_to()) {
    _internal_mutable_to()->::common::v1::Profile::MergeFrom(from._internal_to());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::common::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnMailboxMessageResponse::CopyFrom(const OnMailboxMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.OnMailboxMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnMailboxMessageResponse::IsInitialized() const {
  return true;
}

void OnMailboxMessageResponse::InternalSwap(OnMailboxMessageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnMailboxMessageResponse, metadata_)
      + sizeof(OnMailboxMessageResponse::metadata_)
      - PROTOBUF_FIELD_OFFSET(OnMailboxMessageResponse, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnMailboxMessageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[6]);
}

// ===================================================================

class OnTransmitProgressResponse::_Internal {
 public:
};

OnTransmitProgressResponse::OnTransmitProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnTransmitProgressResponse)
}
OnTransmitProgressResponse::OnTransmitProgressResponse(const OnTransmitProgressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnTransmitProgressResponse)
}

inline void OnTransmitProgressResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&progress_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(direction_));
}

OnTransmitProgressResponse::~OnTransmitProgressResponse() {
  // @@protoc_insertion_point(destructor:node.motor.v1.OnTransmitProgressResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OnTransmitProgressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OnTransmitProgressResponse::ArenaDtor(void* object) {
  OnTransmitProgressResponse* _this = reinterpret_cast< OnTransmitProgressResponse* >(object);
  (void)_this;
}
void OnTransmitProgressResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnTransmitProgressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnTransmitProgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.OnTransmitProgressResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnTransmitProgressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double progress = 1 [json_name = "progress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 received = 2 [json_name = "received"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 current = 3 [json_name = "current"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total = 4 [json_name = "total"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Direction direction = 5 [json_name = "direction"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::common::v1::Direction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnTransmitProgressResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.OnTransmitProgressResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double progress = 1 [json_name = "progress"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_progress = this->_internal_progress();
  uint64_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_progress(), target);
  }

  // int64 received = 2 [json_name = "received"];
  if (this->_internal_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_received(), target);
  }

  // int32 current = 3 [json_name = "current"];
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_current(), target);
  }

  // int32 total = 4 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total(), target);
  }

  // .common.v1.Direction direction = 5 [json_name = "direction"];
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.OnTransmitProgressResponse)
  return target;
}

size_t OnTransmitProgressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.OnTransmitProgressResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double progress = 1 [json_name = "progress"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_progress = this->_internal_progress();
  uint64_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    total_size += 1 + 8;
  }

  // int64 received = 2 [json_name = "received"];
  if (this->_internal_received() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_received());
  }

  // int32 current = 3 [json_name = "current"];
  if (this->_internal_current() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_current());
  }

  // int32 total = 4 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_total());
  }

  // .common.v1.Direction direction = 5 [json_name = "direction"];
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnTransmitProgressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OnTransmitProgressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnTransmitProgressResponse::GetClassData() const { return &_class_data_; }

void OnTransmitProgressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OnTransmitProgressResponse *>(to)->MergeFrom(
      static_cast<const OnTransmitProgressResponse &>(from));
}


void OnTransmitProgressResponse::MergeFrom(const OnTransmitProgressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.OnTransmitProgressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_progress = from._internal_progress();
  uint64_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    _internal_set_progress(from._internal_progress());
  }
  if (from._internal_received() != 0) {
    _internal_set_received(from._internal_received());
  }
  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from._internal_direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnTransmitProgressResponse::CopyFrom(const OnTransmitProgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.OnTransmitProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnTransmitProgressResponse::IsInitialized() const {
  return true;
}

void OnTransmitProgressResponse::InternalSwap(OnTransmitProgressResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnTransmitProgressResponse, direction_)
      + sizeof(OnTransmitProgressResponse::direction_)
      - PROTOBUF_FIELD_OFFSET(OnTransmitProgressResponse, progress_)>(
          reinterpret_cast<char*>(&progress_),
          reinterpret_cast<char*>(&other->progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnTransmitProgressResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[7]);
}

// ===================================================================

OnTransmitCompleteResponse_ResultsEntry_DoNotUse::OnTransmitCompleteResponse_ResultsEntry_DoNotUse() {}
OnTransmitCompleteResponse_ResultsEntry_DoNotUse::OnTransmitCompleteResponse_ResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OnTransmitCompleteResponse_ResultsEntry_DoNotUse::MergeFrom(const OnTransmitCompleteResponse_ResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OnTransmitCompleteResponse_ResultsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[8]);
}

// ===================================================================

class OnTransmitCompleteResponse::_Internal {
 public:
  static const ::common::v1::Payload& payload(const OnTransmitCompleteResponse* msg);
  static const ::common::v1::Peer& from(const OnTransmitCompleteResponse* msg);
  static const ::common::v1::Peer& to(const OnTransmitCompleteResponse* msg);
};

const ::common::v1::Payload&
OnTransmitCompleteResponse::_Internal::payload(const OnTransmitCompleteResponse* msg) {
  return *msg->payload_;
}
const ::common::v1::Peer&
OnTransmitCompleteResponse::_Internal::from(const OnTransmitCompleteResponse* msg) {
  return *msg->from_;
}
const ::common::v1::Peer&
OnTransmitCompleteResponse::_Internal::to(const OnTransmitCompleteResponse* msg) {
  return *msg->to_;
}
void OnTransmitCompleteResponse::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
void OnTransmitCompleteResponse::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void OnTransmitCompleteResponse::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
OnTransmitCompleteResponse::OnTransmitCompleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnTransmitCompleteResponse)
}
OnTransmitCompleteResponse::OnTransmitCompleteResponse(const OnTransmitCompleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  results_.MergeFrom(from.results_);
  if (from._internal_has_payload()) {
    payload_ = new ::common::v1::Payload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  if (from._internal_has_from()) {
    from_ = new ::common::v1::Peer(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::common::v1::Peer(*from.to_);
  } else {
    to_ = nullptr;
  }
  ::memcpy(&created_at_, &from.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnTransmitCompleteResponse)
}

inline void OnTransmitCompleteResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&payload_)) + sizeof(direction_));
}

OnTransmitCompleteResponse::~OnTransmitCompleteResponse() {
  // @@protoc_insertion_point(destructor:node.motor.v1.OnTransmitCompleteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OnTransmitCompleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete payload_;
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void OnTransmitCompleteResponse::ArenaDtor(void* object) {
  OnTransmitCompleteResponse* _this = reinterpret_cast< OnTransmitCompleteResponse* >(object);
  (void)_this;
  _this->results_. ~MapField();
}
inline void OnTransmitCompleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &OnTransmitCompleteResponse::ArenaDtor);
  }
}
void OnTransmitCompleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnTransmitCompleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.OnTransmitCompleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  ::memset(&created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnTransmitCompleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Direction direction = 1 [json_name = "direction"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::common::v1::Direction>(val));
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Payload payload = 2 [json_name = "payload"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer from = 3 [json_name = "from"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer to = 4 [json_name = "to"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 5 [json_name = "createdAt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 received_at = 6 [json_name = "receivedAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          received_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, bool> results = 7 [json_name = "results"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnTransmitCompleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.OnTransmitCompleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Direction direction = 1 [json_name = "direction"];
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_direction(), target);
  }

  // .common.v1.Payload payload = 2 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::payload(this), target, stream);
  }

  // .common.v1.Peer from = 3 [json_name = "from"];
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::from(this), target, stream);
  }

  // .common.v1.Peer to = 4 [json_name = "to"];
  if (this->_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::to(this), target, stream);
  }

  // int64 created_at = 5 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_created_at(), target);
  }

  // int64 received_at = 6 [json_name = "receivedAt"];
  if (this->_internal_received_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_received_at(), target);
  }

  // map<int32, bool> results = 7 [json_name = "results"];
  if (!this->_internal_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
          it = this->_internal_results().begin();
          it != this->_internal_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OnTransmitCompleteResponse_ResultsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
          it = this->_internal_results().begin();
          it != this->_internal_results().end(); ++it) {
        target = OnTransmitCompleteResponse_ResultsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.OnTransmitCompleteResponse)
  return target;
}

size_t OnTransmitCompleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.OnTransmitCompleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> results = 7 [json_name = "results"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
      it = this->_internal_results().begin();
      it != this->_internal_results().end(); ++it) {
    total_size += OnTransmitCompleteResponse_ResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .common.v1.Payload payload = 2 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // .common.v1.Peer from = 3 [json_name = "from"];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .common.v1.Peer to = 4 [json_name = "to"];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  // int64 created_at = 5 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  // int64 received_at = 6 [json_name = "receivedAt"];
  if (this->_internal_received_at() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_received_at());
  }

  // .common.v1.Direction direction = 1 [json_name = "direction"];
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnTransmitCompleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OnTransmitCompleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnTransmitCompleteResponse::GetClassData() const { return &_class_data_; }

void OnTransmitCompleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OnTransmitCompleteResponse *>(to)->MergeFrom(
      static_cast<const OnTransmitCompleteResponse &>(from));
}


void OnTransmitCompleteResponse::MergeFrom(const OnTransmitCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.OnTransmitCompleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_has_payload()) {
    _internal_mutable_payload()->::common::v1::Payload::MergeFrom(from._internal_payload());
  }
  if (from._internal_has_from()) {
    _internal_mutable_from()->::common::v1::Peer::MergeFrom(from._internal_from());
  }
  if (from._internal_has_to()) {
    _internal_mutable_to()->::common::v1::Peer::MergeFrom(from._internal_to());
  }
  if (from._internal_created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_received_at() != 0) {
    _internal_set_received_at(from._internal_received_at());
  }
  if (from._internal_direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnTransmitCompleteResponse::CopyFrom(const OnTransmitCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.OnTransmitCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnTransmitCompleteResponse::IsInitialized() const {
  return true;
}

void OnTransmitCompleteResponse::InternalSwap(OnTransmitCompleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnTransmitCompleteResponse, direction_)
      + sizeof(OnTransmitCompleteResponse::direction_)
      - PROTOBUF_FIELD_OFFSET(OnTransmitCompleteResponse, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnTransmitCompleteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2fresponse_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace motor
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::node::motor::v1::ShareResponse* Arena::CreateMaybeMessage< ::node::motor::v1::ShareResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::ShareResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::DecideResponse* Arena::CreateMaybeMessage< ::node::motor::v1::DecideResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::DecideResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::SearchResponse* Arena::CreateMaybeMessage< ::node::motor::v1::SearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::SearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnTransmitDecisionResponse* Arena::CreateMaybeMessage< ::node::motor::v1::OnTransmitDecisionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnTransmitDecisionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnLobbyRefreshResponse* Arena::CreateMaybeMessage< ::node::motor::v1::OnLobbyRefreshResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnLobbyRefreshResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnTransmitInviteResponse* Arena::CreateMaybeMessage< ::node::motor::v1::OnTransmitInviteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnTransmitInviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnMailboxMessageResponse* Arena::CreateMaybeMessage< ::node::motor::v1::OnMailboxMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnMailboxMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnTransmitProgressResponse* Arena::CreateMaybeMessage< ::node::motor::v1::OnTransmitProgressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnTransmitProgressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnTransmitCompleteResponse_ResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::node::motor::v1::OnTransmitCompleteResponse_ResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnTransmitCompleteResponse_ResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnTransmitCompleteResponse* Arena::CreateMaybeMessage< ::node::motor::v1::OnTransmitCompleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnTransmitCompleteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
