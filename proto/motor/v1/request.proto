syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrio.motor.api.v1;

import "bucket/where_is.proto";
import "common/v1/info.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "schema/v1/document.proto";
import "schema/v1/schema.proto";
import "schema/v1/what_is.proto";

option go_package = "github.com/sonr-io/sonr/third_party/types/motor/api/v1";
option java_multiple_files = true;
option java_package = "io.sonr.types.motor";

// -----------------------------------------------------------------------------
// Motor Node API
// -----------------------------------------------------------------------------
enum ClientMode {
  ENDPOINT_BETA = 0;
  ENDPOINT_DEV = 1;
  ENDPOINT_LOCAL = 2;
}

// (Client) InitializeRequest Message to Establish Sonr Host/API/Room
message InitializeRequest {
  // Identifier of this Device
  string device_id = 1;

  // Device Home Directory
  string home_dir = 2;

  // Device Library Support Directory
  string support_dir = 3;

  // Device Temporary Storage Directory
  string temp_dir = 4;

  // Logging level for the session, can be configured after setting
  // (info|debug|warn|error|fatal)
  string log_level = 5;

  // Public Key used for Device Authentication as DID Controller
  common.v1.AuthInfo auth_info = 11; // optional

  // Application DID
  string app_did = 12; // optional

  // Client Mode
  ClientMode client_mode = 13; // Default: ENDPOINT_BETA
}

// ConnectRequest initializes the libp2p host and connects to the Sonr network.
message ConnectRequest {
  // Enable Discovery Service
  bool enable_discovery = 1;

  // Enable Transmit Protocol
  bool enable_transmit = 2;

  // Enable Linking Protocol
  bool enable_linking = 3;

  // Discovery Latitude
  double discovery_latitude = 4; //optional - Default: 40.673010 (Sonr HQ)

  // Discovery Longitude
  double discovery_longitude = 5; //optional - Default: -73.994450 (Sonr HQ)
}

// CreateAccount Request contains the three keys needed to create an account on Sonr
message CreateAccountRequest {
  string password = 1;
  map<string, string> metadata = 2;
}

// CreateAccountWithKeyRequest allows the DSC to be specified manually when creating a request.
// Necessary for android (for now)
message CreateAccountWithKeysRequest {
  string password = 1;
  bytes aes_dsc_key = 2;
  bytes aes_psk_key = 3;
  map<string, string> metadata = 4;
}

// LinkingRequest opens a pubsub topic session in order to pair the current device with an existing Sonr Account.
message LinkingRequest {
  // Device ID of the requesting device. This is the only required field.
  string device_id = 1;

  // Filename is an optional field that can be used to specify the name of the output QR code file.
  string filename = 2; // optional
}

// PairingRequest attempts to join a pubsub topic session in order to pair the current device with an existing Sonr Account.
message PairingRequest {
  // The Peer AddrInfo
  common.v1.AddrInfo addr_info = 1;

  // The Peer AddrInfo as Base64 Encoded String
  string addr_info_base64 = 2;

  // Device Shared Cred
  repeated bytes p2p_addrs = 3;

  // Password Secure Key
  bytes aes_psk_key = 4;
}

// Login requires the DID of the account being logged into, and optionally a password if the vault pw is being used
// The PSK and DSC will be fetched from the keychain
message LoginRequest {
  // Either the DID or an alias of the account
  string account_id = 1;

  // The account password
  string password = 2;
}

message LoginWithKeysRequest {
  // Either the DID or an alias of the account
  string account_id = 1;

  // The account password
  string password = 2;

  // The device-specific credential, known only to the logging in device
  bytes aes_dsc_key = 3;

  // The preshared key, known to all devices of the account
  bytes aes_psk_key = 4;
}

message QueryRequest {
  string query = 1;
  common.v1.EntityKind kind = 2;
  common.v1.BlockchainModule module = 3;
}

message PaymentRequest {
  string to = 1;
  string from = 2;
  int64 amount = 3;
  string memo = 4;
}

// Registry Models
message QueryWhoIsRequest {
  string did = 1;
}

message QueryWhoIsByAliasRequest {
  string alias = 1;
}

// -----------------------------------------------------------------------------
// Schema Models
// -----------------------------------------------------------------------------

// Create Schema (`WhatIs`) recorded on chain
message CreateSchemaRequest {
  // human readable name of the schema
  string label = 1;

  // Definition of the schema provided as a map
  map<string, sonrio.sonr.schema.SchemaFieldKind> fields = 2;
  
  // custom metadata for the definition. will be recorded on chain
  map<string, string> metadata = 3;
}

// Query for a `WhatIs` instance on chain
message QueryWhatIsRequest {
  // Creator's address (snr address)
  string creator = 1;
  // did (identifier) of the specific schema
  string did = 2;
}

// Query for all WhatIs instances for a single creator address (snr address)
message QueryWhatIsByCreatorRequest {
  // Creator's address (snr address)
  string creator = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// Abstraction for querying a `Schema` without having a `WhatIs` instance returned
message QuerySchemaRequest {
  // Creator's address (snr address)
  string creator = 1;

  // DID (identifer) of the specific schema
  string did = 2;
}

// -----------------------------------------------------------------------------
// Document Models
// -----------------------------------------------------------------------------

message UploadDocumentRequest {
  // DID of the schema being used for the document
  string schema_did = 1;

  // the label of the document
  string label = 2;

  // JSON encoded document map
  bytes document = 3;

  // Schema reference
  sonrio.sonr.schema.WhatIs what_is_reference = 4; //optional
}

message GetDocumentRequest {
  string cid = 1;
}

// -----------------------------------------------------------------------------
// Bucket Models
// -----------------------------------------------------------------------------
message QueryWhereIsRequest {
  string creator = 1;
  string did = 2;
}

message QueryWhereIsByCreatorRequest {
  string creator = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message CreateBucketRequest {
  string creator = 1;
  string label = 2;
  sonrio.sonr.bucket.BucketVisibility visibility = 3;
  sonrio.sonr.bucket.BucketRole role = 4;
  repeated sonrio.sonr.bucket.BucketItem content = 5;
}

message UpdateBucketRequest {
  string creator = 1;
  string did = 2;
  string label = 3;
  sonrio.sonr.bucket.BucketVisibility visibility = 4;
  sonrio.sonr.bucket.BucketRole role = 5;
  repeated sonrio.sonr.bucket.BucketItem content = 6;
}

message SeachBucketContentBySchemaRequest {
  // Address of bucket owner
  string creator = 1;
  // bucket identifier
  string bucket_did = 2;
  // schema identifier
  string schema_did = 3;
}

message StatRequest {}
