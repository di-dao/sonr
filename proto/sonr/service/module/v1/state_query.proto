// Code generated by protoc-gen-go-cosmos-orm-proto. DO NOT EDIT.
syntax = "proto3";
package sonr.service.module.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "sonr/service/module/v1/state.proto";

// StateQueryService queries the state of the tables specified by sonr/service/module/v1/state.proto.
service StateQueryService {
  // Get queries the ServiceRecord table by its primary key.
  rpc GetServiceRecord(GetServiceRecordRequest) returns (GetServiceRecordResponse) {}
  // GetServiceRecordByOrigin queries the ServiceRecord table by its Origin index
  rpc GetServiceRecordByOrigin(GetServiceRecordByOriginRequest) returns (GetServiceRecordByOriginResponse) {}
  // ListServiceRecord queries the ServiceRecord table using prefix and range queries against defined indexes.
  rpc ListServiceRecord(ListServiceRecordRequest) returns (ListServiceRecordResponse) {}
  // Get queries the Credential table by its primary key.
  rpc GetCredential(GetCredentialRequest) returns (GetCredentialResponse) {}
  // GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
  rpc GetCredentialByOriginHandle(GetCredentialByOriginHandleRequest) returns (GetCredentialByOriginHandleResponse) {}
  // GetCredentialByCredentialId queries the Credential table by its CredentialId index
  rpc GetCredentialByCredentialId(GetCredentialByCredentialIdRequest) returns (GetCredentialByCredentialIdResponse) {}
  // GetCredentialByPublicKey queries the Credential table by its PublicKey index
  rpc GetCredentialByPublicKey(GetCredentialByPublicKeyRequest) returns (GetCredentialByPublicKeyResponse) {}
  // ListCredential queries the Credential table using prefix and range queries against defined indexes.
  rpc ListCredential(ListCredentialRequest) returns (ListCredentialResponse) {}
  // Get queries the Witness table by its primary key.
  rpc GetWitness(GetWitnessRequest) returns (GetWitnessResponse) {}
  // GetWitnessByOriginKey queries the Witness table by its OriginKey index
  rpc GetWitnessByOriginKey(GetWitnessByOriginKeyRequest) returns (GetWitnessByOriginKeyResponse) {}
  // ListWitness queries the Witness table using prefix and range queries against defined indexes.
  rpc ListWitness(ListWitnessRequest) returns (ListWitnessResponse) {}
  // GetBaseParams queries the BaseParams singleton.
  rpc GetBaseParams(GetBaseParamsRequest) returns (GetBaseParamsResponse) {}
  // GetReadParams queries the ReadParams singleton.
  rpc GetReadParams(GetReadParamsRequest) returns (GetReadParamsResponse) {}
  // GetWriteParams queries the WriteParams singleton.
  rpc GetWriteParams(GetWriteParamsRequest) returns (GetWriteParamsResponse) {}
  // GetOwnParams queries the OwnParams singleton.
  rpc GetOwnParams(GetOwnParamsRequest) returns (GetOwnParamsResponse) {}
}

// GetServiceRecordRequest is the StateQuery/GetServiceRecordRequest request type.
message GetServiceRecordRequest {
  // id specifies the value of the id field in the primary key.
  uint64 id = 1;
}

// GetServiceRecordResponse is the StateQuery/GetServiceRecordResponse response type.
message GetServiceRecordResponse {
  // value is the response value.
  ServiceRecord value = 1;
}

// GetServiceRecordByOriginRequest is the StateQuery/GetServiceRecordByOriginRequest request type.
message GetServiceRecordByOriginRequest {
  string origin = 1;
}

// GetServiceRecordByOriginResponse is the StateQuery/GetServiceRecordByOriginResponse response type.
message GetServiceRecordByOriginResponse {
  ServiceRecord value = 1;
}

// ListServiceRecordRequest is the StateQuery/ListServiceRecordRequest request type.
message ListServiceRecordRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // id specifies the value of the Id index key to use in the query.
      Id id = 1;
      // origin specifies the value of the Origin index key to use in the query.
      Origin origin = 2;
      // controller specifies the value of the Controller index key to use in the query.
      Controller controller = 3;
    }
    
    message Id {
      // id is the value of the id field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 id = 1;
    }
    
    message Origin {
      // origin is the value of the origin field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string origin = 1;
    }
    
    message Controller {
      // controller is the value of the controller field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string controller = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListServiceRecordResponse is the StateQuery/ListServiceRecordResponse response type.
message ListServiceRecordResponse {
  // values are the results of the query.
  repeated ServiceRecord values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetCredentialRequest is the StateQuery/GetCredentialRequest request type.
message GetCredentialRequest {
  // id specifies the value of the id field in the primary key.
  uint64 id = 1;
}

// GetCredentialResponse is the StateQuery/GetCredentialResponse response type.
message GetCredentialResponse {
  // value is the response value.
  Credential value = 1;
}

// GetCredentialByOriginHandleRequest is the StateQuery/GetCredentialByOriginHandleRequest request type.
message GetCredentialByOriginHandleRequest {
  string origin = 1;
  string handle = 2;
}

// GetCredentialByOriginHandleResponse is the StateQuery/GetCredentialByOriginHandleResponse response type.
message GetCredentialByOriginHandleResponse {
  Credential value = 1;
}

// GetCredentialByCredentialIdRequest is the StateQuery/GetCredentialByCredentialIdRequest request type.
message GetCredentialByCredentialIdRequest {
  bytes credential_id = 1;
}

// GetCredentialByCredentialIdResponse is the StateQuery/GetCredentialByCredentialIdResponse response type.
message GetCredentialByCredentialIdResponse {
  Credential value = 1;
}

// GetCredentialByPublicKeyRequest is the StateQuery/GetCredentialByPublicKeyRequest request type.
message GetCredentialByPublicKeyRequest {
  bytes public_key = 1;
}

// GetCredentialByPublicKeyResponse is the StateQuery/GetCredentialByPublicKeyResponse response type.
message GetCredentialByPublicKeyResponse {
  Credential value = 1;
}

// ListCredentialRequest is the StateQuery/ListCredentialRequest request type.
message ListCredentialRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // id specifies the value of the Id index key to use in the query.
      Id id = 1;
      // handle specifies the value of the Handle index key to use in the query.
      Handle handle = 2;
      // origin_handle specifies the value of the OriginHandle index key to use in the query.
      OriginHandle origin_handle = 3;
      // credential_id specifies the value of the CredentialId index key to use in the query.
      CredentialId credential_id = 4;
      // public_key specifies the value of the PublicKey index key to use in the query.
      PublicKey public_key = 5;
    }
    
    message Id {
      // id is the value of the id field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 id = 1;
    }
    
    message Handle {
      // handle is the value of the handle field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string handle = 1;
    }
    
    message OriginHandle {
      // origin is the value of the origin field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string origin = 1;
      // handle is the value of the handle field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string handle = 2;
    }
    
    message CredentialId {
      // credential_id is the value of the credential_id field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional bytes credential_id = 1;
    }
    
    message PublicKey {
      // public_key is the value of the public_key field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional bytes public_key = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListCredentialResponse is the StateQuery/ListCredentialResponse response type.
message ListCredentialResponse {
  // values are the results of the query.
  repeated Credential values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetWitnessRequest is the StateQuery/GetWitnessRequest request type.
message GetWitnessRequest {
  // index specifies the value of the index field in the primary key.
  uint64 index = 1;
}

// GetWitnessResponse is the StateQuery/GetWitnessResponse response type.
message GetWitnessResponse {
  // value is the response value.
  Witness value = 1;
}

// GetWitnessByOriginKeyRequest is the StateQuery/GetWitnessByOriginKeyRequest request type.
message GetWitnessByOriginKeyRequest {
  string origin = 1;
  string key = 2;
}

// GetWitnessByOriginKeyResponse is the StateQuery/GetWitnessByOriginKeyResponse response type.
message GetWitnessByOriginKeyResponse {
  Witness value = 1;
}

// ListWitnessRequest is the StateQuery/ListWitnessRequest request type.
message ListWitnessRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // index specifies the value of the Index index key to use in the query.
      Index index = 1;
      // origin_key specifies the value of the OriginKey index key to use in the query.
      OriginKey origin_key = 2;
    }
    
    message Index {
      // index is the value of the index field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 index = 1;
    }
    
    message OriginKey {
      // origin is the value of the origin field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string origin = 1;
      // key is the value of the key field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string key = 2;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListWitnessResponse is the StateQuery/ListWitnessResponse response type.
message ListWitnessResponse {
  // values are the results of the query.
  repeated Witness values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetBaseParamsRequest is the StateQuery/GetBaseParamsRequest request type.
message GetBaseParamsRequest {
}

// GetBaseParamsResponse is the StateQuery/GetBaseParamsResponse request type.
message GetBaseParamsResponse {
  BaseParams value = 1;
}

// GetReadParamsRequest is the StateQuery/GetReadParamsRequest request type.
message GetReadParamsRequest {
}

// GetReadParamsResponse is the StateQuery/GetReadParamsResponse request type.
message GetReadParamsResponse {
  ReadParams value = 1;
}

// GetWriteParamsRequest is the StateQuery/GetWriteParamsRequest request type.
message GetWriteParamsRequest {
}

// GetWriteParamsResponse is the StateQuery/GetWriteParamsResponse request type.
message GetWriteParamsResponse {
  WriteParams value = 1;
}

// GetOwnParamsRequest is the StateQuery/GetOwnParamsRequest request type.
message GetOwnParamsRequest {
}

// GetOwnParamsResponse is the StateQuery/GetOwnParamsResponse request type.
message GetOwnParamsResponse {
  OwnParams value = 1;
}

