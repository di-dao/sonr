syntax = "proto3";

package sonr.core;
import "proto/common/core.proto";
import "proto/common/data.proto";
option go_package = "github.com/sonr-io/core/internal/common";

// Status Event based on Lib Functions
message StatusEvent {
  bool isOk = 1;
  string message = 2;
}

// Direction of a transfer (incoming or outgoing).
enum Direction {
  INBOUND = 0;
  OUTBOUND = 1;
}

// DecisionEvent is emitted when a decision is made by Peer.
message DecisionEvent {
  bool decision = 1;
  sonr.core.Peer from = 2;
  string inviteId = 3;
}

// Message Sent when peer messages Lobby
message RefreshEvent {
  string olc = 1;                    // OLC Code of Topic
  repeated sonr.core.Peer peers = 2; // User Information
}

// InviteReach is Distance for an Invite
enum InviteReach {
  NONE = 0;   // No Reach
  LOCAL = 1;  // Local Reach
  REMOTE = 2; // Remote Reach
  DIRECT = 3; // Direct Reach
}

// InviteEvent notifies Peer that an Invite has been received
message InviteEvent {
  string inviteId = 1;
  sonr.core.Peer from = 2;
  sonr.core.Transfer transfer = 3; // Attached Data
  InviteReach reach = 4;           // Reach of Invite
}

// Transfer Progress Event
message ProgressEvent {
  int32 current = 1;   // Current Transfer Item
  int32 total = 2;     // Total Transfer Progress
  double progress = 3; // Current Transfer Progress
}

// Message Sent after Completed Transfer
message CompleteEvent {
  Direction direction = 1; // Transfer Direction
  Transfer transfer = 2;   // Transfer Data

  // Traffic Direction of Session
  enum Direction {
    DEFAULT = 0;  // From Memory/Viewing
    INCOMING = 1; // Incoming Transfer
    OUTGOING = 2; // Outgoing Transfer
  }
}
