// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: error.proto

package data

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Error Type from Enum
type ErrorEvent_Type int32

const (
	// General
	ErrorEvent_MARSHAL    ErrorEvent_Type = 0  // Error occurred during marshalling
	ErrorEvent_UNMARSHAL  ErrorEvent_Type = 1  // Error occurred during unmarshalling
	ErrorEvent_IP_RESOLVE ErrorEvent_Type = 2  // Error occurred during IP Address Resolution
	ErrorEvent_IP_LOCATE  ErrorEvent_Type = 3  // Error occurred during IP Address Location
	ErrorEvent_BOOTSTRAP  ErrorEvent_Type = 4  // Error occurred during Bootstrapping
	ErrorEvent_DEVICE_ID  ErrorEvent_Type = 60 // Error occurred during Device ID Generation
	// Room
	ErrorEvent_ROOM_JOIN    ErrorEvent_Type = 5  // Error occurred during Room Join
	ErrorEvent_ROOM_CREATE  ErrorEvent_Type = 6  // Error occurred during Room Creation
	ErrorEvent_ROOM_INVALID ErrorEvent_Type = 7  // Error occurred during Room Invalid
	ErrorEvent_ROOM_RPC     ErrorEvent_Type = 8  // Error occurred during Room RPC
	ErrorEvent_ROOM_SUB     ErrorEvent_Type = 9  // Error occurred during Room Subscription
	ErrorEvent_ROOM_HANDLER ErrorEvent_Type = 10 // Error occurred during Room Handler
	ErrorEvent_ROOM_LEAVE   ErrorEvent_Type = 11 // Error occurred during Room Leave
	ErrorEvent_ROOM_MESSAGE ErrorEvent_Type = 12 // Error occurred during Room Message
	ErrorEvent_ROOM_UPDATE  ErrorEvent_Type = 13 // Error occurred during Room Update
	// User
	ErrorEvent_USER_CREATE ErrorEvent_Type = 17 // Error occurred during User Creation
	ErrorEvent_USER_SAVE   ErrorEvent_Type = 18 // Error occurred during User Save
	ErrorEvent_USER_LOAD   ErrorEvent_Type = 19 // Error occurred during User Load
	ErrorEvent_USER_FS     ErrorEvent_Type = 20 // Error occurred during User File System
	ErrorEvent_USER_UPDATE ErrorEvent_Type = 21 // Error occurred during User Update
	// Transfer
	ErrorEvent_TRANSFER_START ErrorEvent_Type = 14 // Error occurred during Transfer Start
	ErrorEvent_TRANSFER_CHUNK ErrorEvent_Type = 15 // Error occurred during Transfer Chunk
	ErrorEvent_TRANSFER_END   ErrorEvent_Type = 16 // Error occurred during Transfer End
	ErrorEvent_INCOMING       ErrorEvent_Type = 22 // Error occurred during Incoming Transfer
	ErrorEvent_OUTGOING       ErrorEvent_Type = 23 // Error occurred during Outgoing Transfer
	ErrorEvent_SESSION        ErrorEvent_Type = 24 // Error occurred during Session Transfer
	// Host
	ErrorEvent_HOST_DHT    ErrorEvent_Type = 25 // Error occurred during DHT Host
	ErrorEvent_HOST_KEY    ErrorEvent_Type = 26 // Error occurred during Host Key Generation
	ErrorEvent_HOST_STREAM ErrorEvent_Type = 27 // Error occurred during Host Stream
	ErrorEvent_HOST_START  ErrorEvent_Type = 28 // Error occurred during Host Start
	ErrorEvent_HOST_PUBSUB ErrorEvent_Type = 29 // Error occurred during Host PubSub
	ErrorEvent_HOST_INFO   ErrorEvent_Type = 37 // Error occurred during Host Info
	ErrorEvent_HOST_MDNS   ErrorEvent_Type = 57 // Error occurred during Host MDNS
	ErrorEvent_CRYPTO_GEN  ErrorEvent_Type = 30 // Error occurred during Crypto Generation
	// Peer
	ErrorEvent_PEER_NOT_FOUND_INVITE   ErrorEvent_Type = 31 // Error occurred during Peer Invitation
	ErrorEvent_PEER_NOT_FOUND_REPLY    ErrorEvent_Type = 32 // Error occurred during Peer Reply
	ErrorEvent_PEER_NOT_FOUND_TRANSFER ErrorEvent_Type = 33 // Error occurred during Peer Transfer
	ErrorEvent_PEER_PUBKEY_DECODE      ErrorEvent_Type = 58 // Error occurred during Peer Public Key Decode
	ErrorEvent_PEER_PUBKEY_UNMARSHAL   ErrorEvent_Type = 59 // Error occurred during Peer Public Key Unmarshal
	ErrorEvent_URL_HTTP_GET            ErrorEvent_Type = 34 // Error occurred during URL HTTP GET
	ErrorEvent_URL_INFO_RESP           ErrorEvent_Type = 35 // Error occurred during URL Info Response
	ErrorEvent_FAILED_CONNECTION       ErrorEvent_Type = 36 // Error occurred during Failed Connection
	// Key Pair
	ErrorEvent_KEY_SET     ErrorEvent_Type = 38 // Error occurred during Key Pair Set
	ErrorEvent_KEY_INVALID ErrorEvent_Type = 39 // Error occurred during Key Pair Invalid
	ErrorEvent_KEY_ID      ErrorEvent_Type = 40 // Error occurred during Key Pair ID
	// Memory Store
	ErrorEvent_STORE_PUT  ErrorEvent_Type = 41 // Error occurred during Memory Store Put
	ErrorEvent_STORE_GET  ErrorEvent_Type = 42 // Error occurred during Memory Store Get
	ErrorEvent_STORE_FIND ErrorEvent_Type = 43 // Error occurred during Memory Store Find
	ErrorEvent_STORE_INIT ErrorEvent_Type = 44 // Error occurred during Memory Store Init
	// Textile Client
	ErrorEvent_TEXTILE_START_CLIENT ErrorEvent_Type = 45 // Error occurred during Textile Client Start
	ErrorEvent_TEXTILE_USER_CTX     ErrorEvent_Type = 46 // Error occurred during Textile User Context
	ErrorEvent_TEXTILE_TOKEN_CTX    ErrorEvent_Type = 47 // Error occurred during Textile Token Context
	// Threads Service
	ErrorEvent_THREADS_START_NEW      ErrorEvent_Type = 48 // Error occurred during Threads Service Start New
	ErrorEvent_THREADS_START_EXISTING ErrorEvent_Type = 49 // Error occurred during Threads Service Start Existing
	ErrorEvent_THREADS_LIST_ALL       ErrorEvent_Type = 50 // Error occurred during Threads Service List All
	// Mailbox Service
	ErrorEvent_MAILBOX_START_NEW           ErrorEvent_Type = 51 // Error occurred during Mailbox Service Start New
	ErrorEvent_MAILBOX_START_EXISTING      ErrorEvent_Type = 52 // Error occurred during Mailbox Service Start Existing
	ErrorEvent_MAILBOX_LIST_ALL            ErrorEvent_Type = 53 // Error occurred during Mailbox Service List All
	ErrorEvent_MAILBOX_MESSAGE_OPEN        ErrorEvent_Type = 54 // Error occurred during Mailbox Service Message Open
	ErrorEvent_MAILBOX_MESSAGE_SEND        ErrorEvent_Type = 55 // Error occurred during Mailbox Service Message Send
	ErrorEvent_MAILBOX_MESSAGE_PEER_PUBKEY ErrorEvent_Type = 56 // Error occurred during Mailbox Service Message Peer Public Key
	ErrorEvent_MAILBOX_EVENT_STATE         ErrorEvent_Type = 61 // Error occurred during Mailbox Service Event State
	ErrorEvent_MAILBOX_MESSAGE_READ        ErrorEvent_Type = 66 // Error occurred during Mailbox Service Message Read
	ErrorEvent_MAILBOX_MESSAGE_UNMARSHAL   ErrorEvent_Type = 67 // Error occurred during Mailbox Service Message Unmarshal
	ErrorEvent_MAILBOX_MESSAGE_DELETE      ErrorEvent_Type = 68 // Error occurred during Mailbox Service Message Delete
	ErrorEvent_MAILBOX_ACTION_INVALID      ErrorEvent_Type = 69 // Error occurred during Mailbox Service Action Invalid
	// Push Notifications
	ErrorEvent_PUSH_SINGLE           ErrorEvent_Type = 62 // Error occurred during Push Notifications Single
	ErrorEvent_PUSH_MULTIPLE         ErrorEvent_Type = 63 // Error occurred during Push Notifications Multiple
	ErrorEvent_PUSH_START_APP        ErrorEvent_Type = 64 // Error occurred during Push Notifications Start App
	ErrorEvent_PUSH_START_MESSAGING  ErrorEvent_Type = 65 // Error occurred during Push Notifications Start Messaging
	ErrorEvent_PEER_PUSH_TOKEN_EMPTY ErrorEvent_Type = 70 // Error occurred during Peer Push Token Empty
	// Device Linking
	ErrorEvent_LINK_GENERATE   ErrorEvent_Type = 71 // Error occurred Generating Shared Key Func
	ErrorEvent_LINK_SHARED_KEY ErrorEvent_Type = 72 // Error occurred retreiving Shared Key
	// Account Management
	ErrorEvent_ACCOUNT_CREATE ErrorEvent_Type = 73 // Error occurred during Account Creation
	ErrorEvent_ACCOUNT_LOAD   ErrorEvent_Type = 74 // Error occurred during Account Deletion
	ErrorEvent_ACCOUNT_SAVE   ErrorEvent_Type = 75 // Error occurred during Account Deletion
)

// Enum value maps for ErrorEvent_Type.
var (
	ErrorEvent_Type_name = map[int32]string{
		0:  "MARSHAL",
		1:  "UNMARSHAL",
		2:  "IP_RESOLVE",
		3:  "IP_LOCATE",
		4:  "BOOTSTRAP",
		60: "DEVICE_ID",
		5:  "ROOM_JOIN",
		6:  "ROOM_CREATE",
		7:  "ROOM_INVALID",
		8:  "ROOM_RPC",
		9:  "ROOM_SUB",
		10: "ROOM_HANDLER",
		11: "ROOM_LEAVE",
		12: "ROOM_MESSAGE",
		13: "ROOM_UPDATE",
		17: "USER_CREATE",
		18: "USER_SAVE",
		19: "USER_LOAD",
		20: "USER_FS",
		21: "USER_UPDATE",
		14: "TRANSFER_START",
		15: "TRANSFER_CHUNK",
		16: "TRANSFER_END",
		22: "INCOMING",
		23: "OUTGOING",
		24: "SESSION",
		25: "HOST_DHT",
		26: "HOST_KEY",
		27: "HOST_STREAM",
		28: "HOST_START",
		29: "HOST_PUBSUB",
		37: "HOST_INFO",
		57: "HOST_MDNS",
		30: "CRYPTO_GEN",
		31: "PEER_NOT_FOUND_INVITE",
		32: "PEER_NOT_FOUND_REPLY",
		33: "PEER_NOT_FOUND_TRANSFER",
		58: "PEER_PUBKEY_DECODE",
		59: "PEER_PUBKEY_UNMARSHAL",
		34: "URL_HTTP_GET",
		35: "URL_INFO_RESP",
		36: "FAILED_CONNECTION",
		38: "KEY_SET",
		39: "KEY_INVALID",
		40: "KEY_ID",
		41: "STORE_PUT",
		42: "STORE_GET",
		43: "STORE_FIND",
		44: "STORE_INIT",
		45: "TEXTILE_START_CLIENT",
		46: "TEXTILE_USER_CTX",
		47: "TEXTILE_TOKEN_CTX",
		48: "THREADS_START_NEW",
		49: "THREADS_START_EXISTING",
		50: "THREADS_LIST_ALL",
		51: "MAILBOX_START_NEW",
		52: "MAILBOX_START_EXISTING",
		53: "MAILBOX_LIST_ALL",
		54: "MAILBOX_MESSAGE_OPEN",
		55: "MAILBOX_MESSAGE_SEND",
		56: "MAILBOX_MESSAGE_PEER_PUBKEY",
		61: "MAILBOX_EVENT_STATE",
		66: "MAILBOX_MESSAGE_READ",
		67: "MAILBOX_MESSAGE_UNMARSHAL",
		68: "MAILBOX_MESSAGE_DELETE",
		69: "MAILBOX_ACTION_INVALID",
		62: "PUSH_SINGLE",
		63: "PUSH_MULTIPLE",
		64: "PUSH_START_APP",
		65: "PUSH_START_MESSAGING",
		70: "PEER_PUSH_TOKEN_EMPTY",
		71: "LINK_GENERATE",
		72: "LINK_SHARED_KEY",
		73: "ACCOUNT_CREATE",
		74: "ACCOUNT_LOAD",
		75: "ACCOUNT_SAVE",
	}
	ErrorEvent_Type_value = map[string]int32{
		"MARSHAL":                     0,
		"UNMARSHAL":                   1,
		"IP_RESOLVE":                  2,
		"IP_LOCATE":                   3,
		"BOOTSTRAP":                   4,
		"DEVICE_ID":                   60,
		"ROOM_JOIN":                   5,
		"ROOM_CREATE":                 6,
		"ROOM_INVALID":                7,
		"ROOM_RPC":                    8,
		"ROOM_SUB":                    9,
		"ROOM_HANDLER":                10,
		"ROOM_LEAVE":                  11,
		"ROOM_MESSAGE":                12,
		"ROOM_UPDATE":                 13,
		"USER_CREATE":                 17,
		"USER_SAVE":                   18,
		"USER_LOAD":                   19,
		"USER_FS":                     20,
		"USER_UPDATE":                 21,
		"TRANSFER_START":              14,
		"TRANSFER_CHUNK":              15,
		"TRANSFER_END":                16,
		"INCOMING":                    22,
		"OUTGOING":                    23,
		"SESSION":                     24,
		"HOST_DHT":                    25,
		"HOST_KEY":                    26,
		"HOST_STREAM":                 27,
		"HOST_START":                  28,
		"HOST_PUBSUB":                 29,
		"HOST_INFO":                   37,
		"HOST_MDNS":                   57,
		"CRYPTO_GEN":                  30,
		"PEER_NOT_FOUND_INVITE":       31,
		"PEER_NOT_FOUND_REPLY":        32,
		"PEER_NOT_FOUND_TRANSFER":     33,
		"PEER_PUBKEY_DECODE":          58,
		"PEER_PUBKEY_UNMARSHAL":       59,
		"URL_HTTP_GET":                34,
		"URL_INFO_RESP":               35,
		"FAILED_CONNECTION":           36,
		"KEY_SET":                     38,
		"KEY_INVALID":                 39,
		"KEY_ID":                      40,
		"STORE_PUT":                   41,
		"STORE_GET":                   42,
		"STORE_FIND":                  43,
		"STORE_INIT":                  44,
		"TEXTILE_START_CLIENT":        45,
		"TEXTILE_USER_CTX":            46,
		"TEXTILE_TOKEN_CTX":           47,
		"THREADS_START_NEW":           48,
		"THREADS_START_EXISTING":      49,
		"THREADS_LIST_ALL":            50,
		"MAILBOX_START_NEW":           51,
		"MAILBOX_START_EXISTING":      52,
		"MAILBOX_LIST_ALL":            53,
		"MAILBOX_MESSAGE_OPEN":        54,
		"MAILBOX_MESSAGE_SEND":        55,
		"MAILBOX_MESSAGE_PEER_PUBKEY": 56,
		"MAILBOX_EVENT_STATE":         61,
		"MAILBOX_MESSAGE_READ":        66,
		"MAILBOX_MESSAGE_UNMARSHAL":   67,
		"MAILBOX_MESSAGE_DELETE":      68,
		"MAILBOX_ACTION_INVALID":      69,
		"PUSH_SINGLE":                 62,
		"PUSH_MULTIPLE":               63,
		"PUSH_START_APP":              64,
		"PUSH_START_MESSAGING":        65,
		"PEER_PUSH_TOKEN_EMPTY":       70,
		"LINK_GENERATE":               71,
		"LINK_SHARED_KEY":             72,
		"ACCOUNT_CREATE":              73,
		"ACCOUNT_LOAD":                74,
		"ACCOUNT_SAVE":                75,
	}
)

func (x ErrorEvent_Type) Enum() *ErrorEvent_Type {
	p := new(ErrorEvent_Type)
	*p = x
	return p
}

func (x ErrorEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_error_proto_enumTypes[0].Descriptor()
}

func (ErrorEvent_Type) Type() protoreflect.EnumType {
	return &file_error_proto_enumTypes[0]
}

func (x ErrorEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorEvent_Type.Descriptor instead.
func (ErrorEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{0, 0}
}

type ErrorEvent_Severity int32

const (
	ErrorEvent_LOG      ErrorEvent_Severity = 0 // Log Level Severity
	ErrorEvent_WARNING  ErrorEvent_Severity = 1 // Warning Level Severity
	ErrorEvent_CRITICAL ErrorEvent_Severity = 2 // Critical Level Severity
	ErrorEvent_FATAL    ErrorEvent_Severity = 3 // Fatal Level Severity
)

// Enum value maps for ErrorEvent_Severity.
var (
	ErrorEvent_Severity_name = map[int32]string{
		0: "LOG",
		1: "WARNING",
		2: "CRITICAL",
		3: "FATAL",
	}
	ErrorEvent_Severity_value = map[string]int32{
		"LOG":      0,
		"WARNING":  1,
		"CRITICAL": 2,
		"FATAL":    3,
	}
)

func (x ErrorEvent_Severity) Enum() *ErrorEvent_Severity {
	p := new(ErrorEvent_Severity)
	*p = x
	return p
}

func (x ErrorEvent_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorEvent_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_error_proto_enumTypes[1].Descriptor()
}

func (ErrorEvent_Severity) Type() protoreflect.EnumType {
	return &file_error_proto_enumTypes[1]
}

func (x ErrorEvent_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorEvent_Severity.Descriptor instead.
func (ErrorEvent_Severity) EnumDescriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{0, 1}
}

// Error Event returned from Core Library
type ErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     ErrorEvent_Type     `protobuf:"varint,1,opt,name=type,proto3,enum=data.ErrorEvent_Type" json:"type,omitempty"`             // Error Type Occurred
	Severity ErrorEvent_Severity `protobuf:"varint,2,opt,name=severity,proto3,enum=data.ErrorEvent_Severity" json:"severity,omitempty"` // 1-4 Scale of Error
	Message  string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                                  // Client Error Message
	Error    string              `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                      // Received Error
}

func (x *ErrorEvent) Reset() {
	*x = ErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_error_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorEvent) ProtoMessage() {}

func (x *ErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_error_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorEvent.ProtoReflect.Descriptor instead.
func (*ErrorEvent) Descriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorEvent) GetType() ErrorEvent_Type {
	if x != nil {
		return x.Type
	}
	return ErrorEvent_MARSHAL
}

func (x *ErrorEvent) GetSeverity() ErrorEvent_Severity {
	if x != nil {
		return x.Severity
	}
	return ErrorEvent_LOG
}

func (x *ErrorEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorEvent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_error_proto protoreflect.FileDescriptor

var file_error_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xa8, 0x0d, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xcc, 0x0b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x50, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x4f, 0x54,
	0x53, 0x54, 0x52, 0x41, 0x50, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x49, 0x44, 0x10, 0x3c, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x52, 0x50, 0x43, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53,
	0x55, 0x42, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x4c, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4c,
	0x45, 0x41, 0x56, 0x45, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x46, 0x53, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x10, 0x0f, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x10,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x55, 0x54, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x17, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x44, 0x48, 0x54, 0x10, 0x19, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x4b, 0x45, 0x59, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50,
	0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x25, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x4d,
	0x44, 0x4e, 0x53, 0x10, 0x39, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f,
	0x47, 0x45, 0x4e, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x1f,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x21, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x45, 0x45, 0x52, 0x5f,
	0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x3a, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x5f, 0x55,
	0x4e, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x10, 0x3b, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x52,
	0x4c, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x52, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x23, 0x12,
	0x15, 0x0a, 0x11, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x26, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x28,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x29, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x2a, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x10, 0x2b, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x2c, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x45, 0x58, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x2d, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x58, 0x54,
	0x49, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x54, 0x58, 0x10, 0x2e, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x45, 0x58, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x43, 0x54, 0x58, 0x10, 0x2f, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x30, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x31, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x48, 0x52, 0x45,
	0x41, 0x44, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x32, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x4e, 0x45, 0x57, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x34, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x35, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x49, 0x4c, 0x42,
	0x4f, 0x58, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10,
	0x36, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x37, 0x12, 0x1f, 0x0a, 0x1b, 0x4d,
	0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x10, 0x38, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x3d, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x42, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x10, 0x43, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x44, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41,
	0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x45, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x3e, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x55, 0x53, 0x48, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x3f, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x55,
	0x53, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x40, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x41, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x10, 0x46, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x47, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x48, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x49, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x4a, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x56,
	0x45, 0x10, 0x4b, 0x22, 0x39, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x03, 0x42, 0x07,
	0x5a, 0x05, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_error_proto_rawDescOnce sync.Once
	file_error_proto_rawDescData = file_error_proto_rawDesc
)

func file_error_proto_rawDescGZIP() []byte {
	file_error_proto_rawDescOnce.Do(func() {
		file_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_error_proto_rawDescData)
	})
	return file_error_proto_rawDescData
}

var file_error_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_error_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_error_proto_goTypes = []interface{}{
	(ErrorEvent_Type)(0),     // 0: data.ErrorEvent.Type
	(ErrorEvent_Severity)(0), // 1: data.ErrorEvent.Severity
	(*ErrorEvent)(nil),       // 2: data.ErrorEvent
}
var file_error_proto_depIdxs = []int32{
	0, // 0: data.ErrorEvent.type:type_name -> data.ErrorEvent.Type
	1, // 1: data.ErrorEvent.severity:type_name -> data.ErrorEvent.Severity
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_error_proto_init() }
func file_error_proto_init() {
	if File_error_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_error_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_error_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_error_proto_goTypes,
		DependencyIndexes: file_error_proto_depIdxs,
		EnumInfos:         file_error_proto_enumTypes,
		MessageInfos:      file_error_proto_msgTypes,
	}.Build()
	File_error_proto = out.File
	file_error_proto_rawDesc = nil
	file_error_proto_goTypes = nil
	file_error_proto_depIdxs = nil
}
