// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/identity/account.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EscrowAccount struct {
	Id               uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address          string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PublicKey        string `protobuf:"bytes,3,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	LockupUsdBalance string `protobuf:"bytes,4,opt,name=lockupUsdBalance,proto3" json:"lockupUsdBalance,omitempty"`
	Creator          string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *EscrowAccount) Reset()         { *m = EscrowAccount{} }
func (m *EscrowAccount) String() string { return proto.CompactTextString(m) }
func (*EscrowAccount) ProtoMessage()    {}
func (*EscrowAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_19070c8376816cff, []int{0}
}
func (m *EscrowAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EscrowAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EscrowAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EscrowAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EscrowAccount.Merge(m, src)
}
func (m *EscrowAccount) XXX_Size() int {
	return m.Size()
}
func (m *EscrowAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EscrowAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EscrowAccount proto.InternalMessageInfo

func (m *EscrowAccount) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EscrowAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EscrowAccount) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *EscrowAccount) GetLockupUsdBalance() string {
	if m != nil {
		return m.LockupUsdBalance
	}
	return ""
}

func (m *EscrowAccount) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type ControllerAccount struct {
	Address        string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PublicKey      string   `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Authenticators []string `protobuf:"bytes,3,rep,name=authenticators,proto3" json:"authenticators,omitempty"`
	Wallets        []string `protobuf:"bytes,4,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (m *ControllerAccount) Reset()         { *m = ControllerAccount{} }
func (m *ControllerAccount) String() string { return proto.CompactTextString(m) }
func (*ControllerAccount) ProtoMessage()    {}
func (*ControllerAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_19070c8376816cff, []int{1}
}
func (m *ControllerAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControllerAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControllerAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControllerAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerAccount.Merge(m, src)
}
func (m *ControllerAccount) XXX_Size() int {
	return m.Size()
}
func (m *ControllerAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerAccount proto.InternalMessageInfo

func (m *ControllerAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ControllerAccount) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *ControllerAccount) GetAuthenticators() []string {
	if m != nil {
		return m.Authenticators
	}
	return nil
}

func (m *ControllerAccount) GetWallets() []string {
	if m != nil {
		return m.Wallets
	}
	return nil
}

type SonrAccount struct {
}

func (m *SonrAccount) Reset()         { *m = SonrAccount{} }
func (m *SonrAccount) String() string { return proto.CompactTextString(m) }
func (*SonrAccount) ProtoMessage()    {}
func (*SonrAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_19070c8376816cff, []int{2}
}
func (m *SonrAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SonrAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SonrAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SonrAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SonrAccount.Merge(m, src)
}
func (m *SonrAccount) XXX_Size() int {
	return m.Size()
}
func (m *SonrAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_SonrAccount.DiscardUnknown(m)
}

var xxx_messageInfo_SonrAccount proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EscrowAccount)(nil), "core.identity.EscrowAccount")
	proto.RegisterType((*ControllerAccount)(nil), "core.identity.ControllerAccount")
	proto.RegisterType((*SonrAccount)(nil), "core.identity.SonrAccount")
}

func init() { proto.RegisterFile("core/identity/account.proto", fileDescriptor_19070c8376816cff) }

var fileDescriptor_19070c8376816cff = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4a, 0xc3, 0x30,
	0x1c, 0xc7, 0x97, 0x6e, 0x2a, 0x8b, 0x6c, 0x68, 0x4f, 0x01, 0x25, 0x8c, 0x1e, 0xa4, 0x08, 0xb6,
	0x07, 0x9f, 0xc0, 0x8a, 0x27, 0x6f, 0x15, 0x2f, 0xde, 0xd2, 0x24, 0xb8, 0x60, 0xcc, 0xaf, 0x24,
	0x29, 0xb3, 0x0f, 0x21, 0xf8, 0x02, 0xbe, 0x8f, 0xc7, 0x1d, 0x3d, 0x4a, 0xfb, 0x22, 0xd2, 0xce,
	0x32, 0x99, 0xe0, 0xf1, 0xfb, 0x87, 0xfc, 0x3e, 0xe1, 0x8b, 0x4f, 0x38, 0x58, 0x99, 0x2a, 0x21,
	0x8d, 0x57, 0xbe, 0x4e, 0x19, 0xe7, 0x50, 0x19, 0x9f, 0x94, 0x16, 0x3c, 0x84, 0xb3, 0x2e, 0x4c,
	0x86, 0x30, 0x7a, 0x47, 0x78, 0x76, 0xe3, 0xb8, 0x85, 0xd5, 0xd5, 0xa6, 0x16, 0xce, 0x71, 0xa0,
	0x04, 0x41, 0x0b, 0x14, 0x4f, 0xf2, 0x40, 0x89, 0x90, 0xe0, 0x03, 0x26, 0x84, 0x95, 0xce, 0x91,
	0x60, 0x81, 0xe2, 0x69, 0x3e, 0xc8, 0xf0, 0x14, 0x4f, 0xcb, 0xaa, 0xd0, 0x8a, 0xdf, 0xca, 0x9a,
	0x8c, 0xfb, 0x6c, 0x6b, 0x84, 0xe7, 0xf8, 0x48, 0x03, 0x7f, 0xaa, 0xca, 0x7b, 0x27, 0x32, 0xa6,
	0x99, 0xe1, 0x92, 0x4c, 0xfa, 0xd2, 0x1f, 0xbf, 0xbb, 0xc1, 0xad, 0x64, 0x1e, 0x2c, 0xd9, 0xdb,
	0xdc, 0xf8, 0x91, 0xd1, 0x2b, 0xc2, 0xc7, 0xd7, 0x60, 0xbc, 0x05, 0xad, 0xa5, 0x1d, 0x18, 0x7f,
	0x31, 0xa1, 0x7f, 0x98, 0x82, 0x5d, 0xa6, 0x33, 0x3c, 0x67, 0x95, 0x5f, 0x76, 0x7f, 0xe7, 0xdd,
	0xf3, 0x8e, 0x8c, 0x17, 0xe3, 0x78, 0x9a, 0xef, 0xb8, 0xdd, 0xfb, 0x2b, 0xa6, 0xb5, 0xf4, 0x8e,
	0x4c, 0xfa, 0xc2, 0x20, 0xa3, 0x19, 0x3e, 0xbc, 0x03, 0x33, 0x80, 0x64, 0xd9, 0x47, 0x43, 0xd1,
	0xba, 0xa1, 0xe8, 0xab, 0xa1, 0xe8, 0xad, 0xa5, 0xa3, 0x75, 0x4b, 0x47, 0x9f, 0x2d, 0x1d, 0x3d,
	0xc4, 0x8f, 0xca, 0x2f, 0xab, 0x22, 0xe1, 0xf0, 0x9c, 0x3a, 0x30, 0xf6, 0x42, 0x41, 0xda, 0xef,
	0xf2, 0xb2, 0x5d, 0xc6, 0xd7, 0xa5, 0x74, 0xc5, 0x7e, 0x3f, 0xcc, 0xe5, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x8d, 0x5e, 0x37, 0x17, 0xb7, 0x01, 0x00, 0x00,
}

func (m *EscrowAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscrowAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EscrowAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LockupUsdBalance) > 0 {
		i -= len(m.LockupUsdBalance)
		copy(dAtA[i:], m.LockupUsdBalance)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.LockupUsdBalance)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ControllerAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControllerAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wallets) > 0 {
		for iNdEx := len(m.Wallets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Wallets[iNdEx])
			copy(dAtA[i:], m.Wallets[iNdEx])
			i = encodeVarintAccount(dAtA, i, uint64(len(m.Wallets[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Authenticators) > 0 {
		for iNdEx := len(m.Authenticators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Authenticators[iNdEx])
			copy(dAtA[i:], m.Authenticators[iNdEx])
			i = encodeVarintAccount(dAtA, i, uint64(len(m.Authenticators[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SonrAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SonrAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SonrAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EscrowAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAccount(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.LockupUsdBalance)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	return n
}

func (m *ControllerAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if len(m.Authenticators) > 0 {
		for _, s := range m.Authenticators {
			l = len(s)
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if len(m.Wallets) > 0 {
		for _, s := range m.Wallets {
			l = len(s)
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	return n
}

func (m *SonrAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccount(x uint64) (n int) {
	return sovAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EscrowAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscrowAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscrowAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupUsdBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockupUsdBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControllerAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authenticators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authenticators = append(m.Authenticators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallets = append(m.Wallets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SonrAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SonrAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SonrAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccount = fmt.Errorf("proto: unexpected end of group")
)
