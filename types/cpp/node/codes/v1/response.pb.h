// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/codes/v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fcodes_2fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fcodes_2fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fcodes_2fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fcodes_2fv1_2fresponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fcodes_2fv1_2fresponse_2eproto;
namespace node {
namespace codes {
namespace v1 {
class ResponseInfo;
struct ResponseInfoDefaultTypeInternal;
extern ResponseInfoDefaultTypeInternal _ResponseInfo_default_instance_;
}  // namespace v1
}  // namespace codes
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> ::node::codes::v1::ResponseInfo* Arena::CreateMaybeMessage<::node::codes::v1::ResponseInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace node {
namespace codes {
namespace v1 {

enum ResponseType : int {
  StatusResponse_UNSPECIFIED = 0,
  StatusResponse_OK = 1,
  StatusResponse_ERROR = 2,
  StatusResponse_UNAUTHORIZED = 3,
  StatusResponse_INVALID_ARGUMENT = 4,
  StatusResponse_NOT_FOUND = 5,
  StatusResponse_ALREADY_EXISTS = 6,
  StatusResponse_PERMISSION_DENIED = 7,
  StatusResponse_RESOURCE_EXHAUSTED = 8,
  StatusResponse_FAILED_PRECONDITION = 9,
  StatusResponse_ABORTED = 10,
  StatusResponse_OUT_OF_RANGE = 11,
  StatusResponse_UNIMPLEMENTED = 12,
  ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResponseType_IsValid(int value);
constexpr ResponseType ResponseType_MIN = StatusResponse_UNSPECIFIED;
constexpr ResponseType ResponseType_MAX = StatusResponse_UNIMPLEMENTED;
constexpr int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseType_descriptor();
template<typename T>
inline const std::string& ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseType_descriptor(), enum_t_value);
}
inline bool ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
// ===================================================================

class ResponseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:node.codes.v1.ResponseInfo) */ {
 public:
  inline ResponseInfo() : ResponseInfo(nullptr) {}
  ~ResponseInfo() override;
  explicit constexpr ResponseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseInfo(const ResponseInfo& from);
  ResponseInfo(ResponseInfo&& from) noexcept
    : ResponseInfo() {
    *this = ::std::move(from);
  }

  inline ResponseInfo& operator=(const ResponseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseInfo& operator=(ResponseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseInfo* internal_default_instance() {
    return reinterpret_cast<const ResponseInfo*>(
               &_ResponseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResponseInfo& a, ResponseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "node.codes.v1.ResponseInfo";
  }
  protected:
  explicit ResponseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kOkFieldNumber = 1,
    kCodeFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string message = 4 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool ok = 1 [json_name = "ok"];
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // int32 code = 2 [json_name = "code"];
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // .node.codes.v1.ResponseType type = 3 [json_name = "type"];
  void clear_type();
  ::node::codes::v1::ResponseType type() const;
  void set_type(::node::codes::v1::ResponseType value);
  private:
  ::node::codes::v1::ResponseType _internal_type() const;
  void _internal_set_type(::node::codes::v1::ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:node.codes.v1.ResponseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool ok_;
  int32_t code_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fcodes_2fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResponseInfo

// bool ok = 1 [json_name = "ok"];
inline void ResponseInfo::clear_ok() {
  ok_ = false;
}
inline bool ResponseInfo::_internal_ok() const {
  return ok_;
}
inline bool ResponseInfo::ok() const {
  // @@protoc_insertion_point(field_get:node.codes.v1.ResponseInfo.ok)
  return _internal_ok();
}
inline void ResponseInfo::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void ResponseInfo::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:node.codes.v1.ResponseInfo.ok)
}

// int32 code = 2 [json_name = "code"];
inline void ResponseInfo::clear_code() {
  code_ = 0;
}
inline int32_t ResponseInfo::_internal_code() const {
  return code_;
}
inline int32_t ResponseInfo::code() const {
  // @@protoc_insertion_point(field_get:node.codes.v1.ResponseInfo.code)
  return _internal_code();
}
inline void ResponseInfo::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void ResponseInfo::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:node.codes.v1.ResponseInfo.code)
}

// .node.codes.v1.ResponseType type = 3 [json_name = "type"];
inline void ResponseInfo::clear_type() {
  type_ = 0;
}
inline ::node::codes::v1::ResponseType ResponseInfo::_internal_type() const {
  return static_cast< ::node::codes::v1::ResponseType >(type_);
}
inline ::node::codes::v1::ResponseType ResponseInfo::type() const {
  // @@protoc_insertion_point(field_get:node.codes.v1.ResponseInfo.type)
  return _internal_type();
}
inline void ResponseInfo::_internal_set_type(::node::codes::v1::ResponseType value) {
  
  type_ = value;
}
inline void ResponseInfo::set_type(::node::codes::v1::ResponseType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:node.codes.v1.ResponseInfo.type)
}

// string message = 4 [json_name = "message"];
inline void ResponseInfo::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ResponseInfo::message() const {
  // @@protoc_insertion_point(field_get:node.codes.v1.ResponseInfo.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseInfo::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:node.codes.v1.ResponseInfo.message)
}
inline std::string* ResponseInfo::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:node.codes.v1.ResponseInfo.message)
  return _s;
}
inline const std::string& ResponseInfo::_internal_message() const {
  return message_.Get();
}
inline void ResponseInfo::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseInfo::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseInfo::release_message() {
  // @@protoc_insertion_point(field_release:node.codes.v1.ResponseInfo.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseInfo::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:node.codes.v1.ResponseInfo.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace codes
}  // namespace node

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::node::codes::v1::ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::node::codes::v1::ResponseType>() {
  return ::node::codes::v1::ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fcodes_2fv1_2fresponse_2eproto
