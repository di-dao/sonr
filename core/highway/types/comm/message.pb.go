// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: highway/comm/message.proto

// Package Discover is used to find other Peers in the sonr network.

package comm

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DIDMessageHeader is the type of message that is being sent.
type DIDMessageHeader int32

const (
	// DIDMessageHeader_UNKNOWN is the default value for DIDMessageHeader.
	DIDMessageHeader_DIDMessageHeader_UNKNOWN DIDMessageHeader = 0
	// DIDMessageHeader_PING is a message that is used to test the liveness of a peer.
	DIDMessageHeader_DIDMessageHeader_PING DIDMessageHeader = 1
	// DIDMessageHeader_PLAINTEXT is a message that is used to send plaintext data.
	DIDMessageHeader_DIDMessageHeader_PLAINTEXT DIDMessageHeader = 2
	// DIDMessageHeader_SIGNED is a message that is used to send signed data.
	DIDMessageHeader_DIDMessageHeader_SIGNED DIDMessageHeader = 3
	// DIDMessageHeader_ANONCRYPT is a message that is used to send encrypted data anonymously.
	DIDMessageHeader_DIDMessageHeader_ANONCRYPT DIDMessageHeader = 4
	// DIDMessageHeader_AUTHCRYPT is a message that is used to send encrypted data with identity.
	DIDMessageHeader_DIDMessageHeader_AUTHCRYPT DIDMessageHeader = 5
)

var DIDMessageHeader_name = map[int32]string{
	0: "DIDMessageHeader_UNKNOWN",
	1: "DIDMessageHeader_PING",
	2: "DIDMessageHeader_PLAINTEXT",
	3: "DIDMessageHeader_SIGNED",
	4: "DIDMessageHeader_ANONCRYPT",
	5: "DIDMessageHeader_AUTHCRYPT",
}

var DIDMessageHeader_value = map[string]int32{
	"DIDMessageHeader_UNKNOWN":   0,
	"DIDMessageHeader_PING":      1,
	"DIDMessageHeader_PLAINTEXT": 2,
	"DIDMessageHeader_SIGNED":    3,
	"DIDMessageHeader_ANONCRYPT": 4,
	"DIDMessageHeader_AUTHCRYPT": 5,
}

func (x DIDMessageHeader) String() string {
	return proto.EnumName(DIDMessageHeader_name, int32(x))
}

func (DIDMessageHeader) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_17618658ad1bc8ce, []int{0}
}

// CommMessage is a message that can be sent over the wire between two libp2p nodes.
type CommMessage struct {
	// id is the unique identifier for this message.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type is the DIDMessageHeader of message.
	Type DIDMessageHeader `protobuf:"varint,2,opt,name=type,proto3,enum=sonrhq.highway.discovery.DIDMessageHeader" json:"type,omitempty"`
	// body is the body of the message.
	Body map[string]string `protobuf:"bytes,3,rep,name=body,proto3" json:"body,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// to is the peer that this message is being sent to.
	To string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	// from is the peer that this message is being sent from.
	From string `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	// thread_id is the thread id for this message.
	ThreadId string `protobuf:"bytes,6,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	// created_time is the time that this message was created.
	CreatedTime int64 `protobuf:"varint,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// expires_time is the time that this message expires.
	ExpiresTime int64 `protobuf:"varint,8,opt,name=expires_time,json=expiresTime,proto3" json:"expires_time,omitempty"`
	// reply_to is the message that this message is replying to.
	ReplyTo string `protobuf:"bytes,9,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	// attachments is a list of attachments that are sent with this message.
	Attachments []*Attachment `protobuf:"bytes,10,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// signature is the signature of this message.
	Signature []byte `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *CommMessage) Reset()         { *m = CommMessage{} }
func (m *CommMessage) String() string { return proto.CompactTextString(m) }
func (*CommMessage) ProtoMessage()    {}
func (*CommMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_17618658ad1bc8ce, []int{0}
}
func (m *CommMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommMessage.Merge(m, src)
}
func (m *CommMessage) XXX_Size() int {
	return m.Size()
}
func (m *CommMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CommMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CommMessage proto.InternalMessageInfo

func (m *CommMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CommMessage) GetType() DIDMessageHeader {
	if m != nil {
		return m.Type
	}
	return DIDMessageHeader_DIDMessageHeader_UNKNOWN
}

func (m *CommMessage) GetBody() map[string]string {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *CommMessage) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *CommMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CommMessage) GetThreadId() string {
	if m != nil {
		return m.ThreadId
	}
	return ""
}

func (m *CommMessage) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *CommMessage) GetExpiresTime() int64 {
	if m != nil {
		return m.ExpiresTime
	}
	return 0
}

func (m *CommMessage) GetReplyTo() string {
	if m != nil {
		return m.ReplyTo
	}
	return ""
}

func (m *CommMessage) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *CommMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Attachment is an attachment that can be sent with a CommMessage.
type Attachment struct {
	// id is the unique identifier for this attachment.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// description is the description of the attachment.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// data is the data of the attachment.
	Data map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Attachment) Reset()         { *m = Attachment{} }
func (m *Attachment) String() string { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()    {}
func (*Attachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_17618658ad1bc8ce, []int{1}
}
func (m *Attachment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attachment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attachment.Merge(m, src)
}
func (m *Attachment) XXX_Size() int {
	return m.Size()
}
func (m *Attachment) XXX_DiscardUnknown() {
	xxx_messageInfo_Attachment.DiscardUnknown(m)
}

var xxx_messageInfo_Attachment proto.InternalMessageInfo

func (m *Attachment) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Attachment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Attachment) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("sonrhq.highway.discovery.DIDMessageHeader", DIDMessageHeader_name, DIDMessageHeader_value)
	proto.RegisterType((*CommMessage)(nil), "sonrhq.highway.discovery.CommMessage")
	proto.RegisterMapType((map[string]string)(nil), "sonrhq.highway.discovery.CommMessage.BodyEntry")
	proto.RegisterType((*Attachment)(nil), "sonrhq.highway.discovery.Attachment")
	proto.RegisterMapType((map[string]string)(nil), "sonrhq.highway.discovery.Attachment.DataEntry")
}

func init() { proto.RegisterFile("highway/comm/message.proto", fileDescriptor_17618658ad1bc8ce) }

var fileDescriptor_17618658ad1bc8ce = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcb, 0x4e, 0xdc, 0x30,
	0x14, 0x1d, 0xcf, 0x03, 0x98, 0x1b, 0x84, 0x22, 0xab, 0x55, 0xcd, 0x43, 0x51, 0x8a, 0xba, 0x18,
	0x21, 0x35, 0x91, 0xe8, 0xa2, 0x55, 0x17, 0x95, 0x80, 0xa1, 0x10, 0xb5, 0x0d, 0x28, 0x0d, 0xea,
	0x63, 0x33, 0x32, 0xb1, 0x3b, 0xb1, 0x4a, 0xc6, 0x83, 0x63, 0x68, 0xf3, 0x17, 0xfd, 0x9f, 0xfe,
	0x00, 0x4b, 0x96, 0x5d, 0x56, 0xcc, 0x8f, 0x54, 0x71, 0x52, 0x18, 0x01, 0x23, 0xb5, 0xab, 0xd8,
	0xe7, 0x61, 0xdf, 0xeb, 0x93, 0x0b, 0x2b, 0xa9, 0x18, 0xa6, 0xdf, 0x68, 0xe1, 0x27, 0x32, 0xcb,
	0xfc, 0x8c, 0xe7, 0x39, 0x1d, 0x72, 0x6f, 0xac, 0xa4, 0x96, 0x98, 0xe4, 0x72, 0xa4, 0xd2, 0x53,
	0xaf, 0x96, 0x78, 0x4c, 0xe4, 0x89, 0x3c, 0xe7, 0xaa, 0x58, 0x9f, 0xb4, 0xc0, 0xda, 0x91, 0x59,
	0xf6, 0xae, 0xd2, 0xe3, 0x25, 0x68, 0x0a, 0x46, 0x90, 0x8b, 0x7a, 0xdd, 0xa8, 0x29, 0x18, 0x7e,
	0x05, 0x6d, 0x5d, 0x8c, 0x39, 0x69, 0xba, 0xa8, 0xb7, 0xb4, 0xb9, 0xe1, 0xcd, 0x3a, 0xc8, 0xeb,
	0x07, 0xfd, 0xfa, 0x8c, 0x7d, 0x4e, 0x19, 0x57, 0x91, 0xf1, 0xe1, 0x1d, 0x68, 0x1f, 0x4b, 0x56,
	0x90, 0x96, 0xdb, 0xea, 0x59, 0x9b, 0xfe, 0x6c, 0xff, 0x54, 0x11, 0xde, 0xb6, 0x64, 0xc5, 0xee,
	0x48, 0xab, 0x22, 0x32, 0xe6, 0xb2, 0x28, 0x2d, 0x49, 0xbb, 0x2a, 0x4a, 0x4b, 0x8c, 0xa1, 0xfd,
	0x45, 0xc9, 0x8c, 0x74, 0x0c, 0x62, 0xd6, 0x78, 0x15, 0xba, 0x3a, 0x55, 0x9c, 0xb2, 0x81, 0x60,
	0x64, 0xce, 0x10, 0x0b, 0x15, 0x10, 0x30, 0xfc, 0x18, 0x16, 0x13, 0xc5, 0xa9, 0xe6, 0x6c, 0xa0,
	0x45, 0xc6, 0xc9, 0xbc, 0x8b, 0x7a, 0xad, 0xc8, 0xaa, 0xb1, 0x58, 0x64, 0xbc, 0x94, 0xf0, 0xef,
	0x63, 0xa1, 0x78, 0x5e, 0x49, 0x16, 0x2a, 0x49, 0x8d, 0x19, 0xc9, 0x32, 0x2c, 0x28, 0x3e, 0x3e,
	0x29, 0x06, 0x5a, 0x92, 0xae, 0xb9, 0x61, 0xde, 0xec, 0x63, 0x89, 0x5f, 0x83, 0x45, 0xb5, 0xa6,
	0x49, 0x9a, 0xf1, 0x91, 0xce, 0x09, 0x98, 0x6e, 0x9f, 0xcc, 0xee, 0x76, 0xeb, 0x5a, 0x1c, 0x4d,
	0x1b, 0xf1, 0x1a, 0x74, 0x73, 0x31, 0x1c, 0x51, 0x7d, 0xa6, 0x38, 0xb1, 0x5c, 0xd4, 0x5b, 0x8c,
	0x6e, 0x80, 0x95, 0xe7, 0xd0, 0xbd, 0x7e, 0x1a, 0x6c, 0x43, 0xeb, 0x2b, 0x2f, 0xea, 0xa8, 0xca,
	0x25, 0x7e, 0x00, 0x9d, 0x73, 0x7a, 0x72, 0x56, 0x85, 0xd5, 0x8d, 0xaa, 0xcd, 0xcb, 0xe6, 0x0b,
	0xb4, 0xfe, 0x13, 0x01, 0xdc, 0x5c, 0x39, 0x15, 0x72, 0xc7, 0x84, 0xec, 0x82, 0xc5, 0x78, 0x9e,
	0x28, 0x31, 0xd6, 0x42, 0x8e, 0x6a, 0xfb, 0x34, 0x84, 0xb7, 0xa1, 0xcd, 0xa8, 0xa6, 0x75, 0x8c,
	0xde, 0xbf, 0x34, 0xe6, 0xf5, 0xa9, 0xa6, 0x75, 0x8a, 0xa5, 0xb7, 0xac, 0xfe, 0x1a, 0xfa, 0x9f,
	0xea, 0x37, 0x2e, 0x10, 0xd8, 0xb7, 0x7f, 0x2f, 0xbc, 0x06, 0xe4, 0x36, 0x36, 0x38, 0x0a, 0xdf,
	0x84, 0x07, 0x1f, 0x42, 0xbb, 0x81, 0x97, 0xe1, 0xe1, 0x1d, 0xf6, 0x30, 0x08, 0xf7, 0x6c, 0x84,
	0x1d, 0x58, 0xb9, 0x4b, 0xbd, 0xdd, 0x0a, 0xc2, 0x78, 0xf7, 0x63, 0x6c, 0x37, 0xf1, 0x2a, 0x3c,
	0xba, 0xc3, 0xbf, 0x0f, 0xf6, 0xc2, 0xdd, 0xbe, 0xdd, 0xba, 0xd7, 0xbc, 0x15, 0x1e, 0x84, 0x3b,
	0xd1, 0xa7, 0xc3, 0xd8, 0x6e, 0xdf, 0xcf, 0x1f, 0xc5, 0xfb, 0x15, 0xdf, 0xd9, 0x0e, 0x2e, 0xae,
	0x1c, 0x74, 0x79, 0xe5, 0xa0, 0xdf, 0x57, 0x0e, 0xfa, 0x31, 0x71, 0x1a, 0x97, 0x13, 0xa7, 0xf1,
	0x6b, 0xe2, 0x34, 0x3e, 0xfb, 0x43, 0xa1, 0xd3, 0xb3, 0x63, 0x2f, 0x91, 0x99, 0x5f, 0xbe, 0xee,
	0xd3, 0xf4, 0xd4, 0x7c, 0xfd, 0x44, 0x2a, 0xee, 0xff, 0x9d, 0xed, 0x72, 0xa6, 0x72, 0x33, 0xe1,
	0xc7, 0x73, 0x66, 0xb4, 0x9f, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xd3, 0x30, 0x92, 0xf8,
	0x03, 0x00, 0x00,
}

func (m *CommMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ReplyTo) > 0 {
		i -= len(m.ReplyTo)
		copy(dAtA[i:], m.ReplyTo)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ReplyTo)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ExpiresTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExpiresTime))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ThreadId) > 0 {
		i -= len(m.ThreadId)
		copy(dAtA[i:], m.ThreadId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ThreadId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Body) > 0 {
		for k := range m.Body {
			v := m.Body[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessage(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Attachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attachment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attachment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessage(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if len(m.Body) > 0 {
		for k, v := range m.Body {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + len(v) + sovMessage(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ThreadId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovMessage(uint64(m.CreatedTime))
	}
	if m.ExpiresTime != 0 {
		n += 1 + sovMessage(uint64(m.ExpiresTime))
	}
	l = len(m.ReplyTo)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Attachment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessage(uint64(m.Id))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + len(v) + sovMessage(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DIDMessageHeader(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Body[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresTime", wireType)
			}
			m.ExpiresTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
