// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: peer.proto

package data

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cardinal: Designation for the Compass Direction Value
type Cardinal int32

const (
	Cardinal_N    Cardinal = 0  // North
	Cardinal_NbE  Cardinal = 1  // North by East
	Cardinal_NNE  Cardinal = 2  // North North East
	Cardinal_NEbN Cardinal = 3  // NorthEast by North
	Cardinal_NE   Cardinal = 4  // North East
	Cardinal_NEbE Cardinal = 5  // NorthEast by East
	Cardinal_ENE  Cardinal = 6  // East North East
	Cardinal_EbN  Cardinal = 7  // East by North
	Cardinal_E    Cardinal = 8  // East
	Cardinal_EbS  Cardinal = 9  // East by South
	Cardinal_ESE  Cardinal = 10 // East South East
	Cardinal_SEbE Cardinal = 11 // SouthEast by East
	Cardinal_SE   Cardinal = 12 // South East
	Cardinal_SEbS Cardinal = 13 // SouthEast by South
	Cardinal_SSE  Cardinal = 14 // South South East
	Cardinal_SbE  Cardinal = 15 // South by East
	Cardinal_S    Cardinal = 16 // South
	Cardinal_SbW  Cardinal = 17 // South by West
	Cardinal_SSW  Cardinal = 18 // South South West
	Cardinal_SWbS Cardinal = 19 // SouthWest by South
	Cardinal_SW   Cardinal = 20 // South West
	Cardinal_SWbW Cardinal = 21 // SouthWest by West
	Cardinal_WSW  Cardinal = 22 // West South West
	Cardinal_WbS  Cardinal = 23 // West by South
	Cardinal_W    Cardinal = 24 // West
	Cardinal_WbN  Cardinal = 25 // West by North
	Cardinal_WNW  Cardinal = 26 // West North West
	Cardinal_NWbW Cardinal = 27 // North West by West
	Cardinal_NW   Cardinal = 28 // North West
	Cardinal_NWbN Cardinal = 29 // North West by North
	Cardinal_NNW  Cardinal = 30 // North North West
	Cardinal_NbW  Cardinal = 31 // North by West
)

// Enum value maps for Cardinal.
var (
	Cardinal_name = map[int32]string{
		0:  "N",
		1:  "NbE",
		2:  "NNE",
		3:  "NEbN",
		4:  "NE",
		5:  "NEbE",
		6:  "ENE",
		7:  "EbN",
		8:  "E",
		9:  "EbS",
		10: "ESE",
		11: "SEbE",
		12: "SE",
		13: "SEbS",
		14: "SSE",
		15: "SbE",
		16: "S",
		17: "SbW",
		18: "SSW",
		19: "SWbS",
		20: "SW",
		21: "SWbW",
		22: "WSW",
		23: "WbS",
		24: "W",
		25: "WbN",
		26: "WNW",
		27: "NWbW",
		28: "NW",
		29: "NWbN",
		30: "NNW",
		31: "NbW",
	}
	Cardinal_value = map[string]int32{
		"N":    0,
		"NbE":  1,
		"NNE":  2,
		"NEbN": 3,
		"NE":   4,
		"NEbE": 5,
		"ENE":  6,
		"EbN":  7,
		"E":    8,
		"EbS":  9,
		"ESE":  10,
		"SEbE": 11,
		"SE":   12,
		"SEbS": 13,
		"SSE":  14,
		"SbE":  15,
		"S":    16,
		"SbW":  17,
		"SSW":  18,
		"SWbS": 19,
		"SW":   20,
		"SWbW": 21,
		"WSW":  22,
		"WbS":  23,
		"W":    24,
		"WbN":  25,
		"WNW":  26,
		"NWbW": 27,
		"NW":   28,
		"NWbN": 29,
		"NNW":  30,
		"NbW":  31,
	}
)

func (x Cardinal) Enum() *Cardinal {
	p := new(Cardinal)
	*p = x
	return p
}

func (x Cardinal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cardinal) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[0].Descriptor()
}

func (Cardinal) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[0]
}

func (x Cardinal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cardinal.Descriptor instead.
func (Cardinal) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0}
}

// Platform is the Operating System of Device
type Platform int32

const (
	Platform_OTHER   Platform = 0 // Other/Unknown User Agent
	Platform_ANDROID Platform = 1 // Android Operating System
	Platform_IOS     Platform = 2 // iOS Operating System
	Platform_MACOS   Platform = 3 // Mac Operating System
	Platform_WINDOWS Platform = 4 // Windows Operating System
	Platform_LINUX   Platform = 5 // Linux Operating System
	Platform_WEB     Platform = 6 // Web Platform
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "OTHER",
		1: "ANDROID",
		2: "IOS",
		3: "MACOS",
		4: "WINDOWS",
		5: "LINUX",
		6: "WEB",
	}
	Platform_value = map[string]int32{
		"OTHER":   0,
		"ANDROID": 1,
		"IOS":     2,
		"MACOS":   3,
		"WINDOWS": 4,
		"LINUX":   5,
		"WEB":     6,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[1].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[1]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{1}
}

// Peers Device Role
type Role int32

const (
	Role_PRIMARY   Role = 0 // Primary Peer
	Role_SECONDARY Role = 1 // Linked Peer Desktop device
	Role_TERTIARY  Role = 2 // Linked Peer Peripheral device
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "PRIMARY",
		1: "SECONDARY",
		2: "TERTIARY",
	}
	Role_value = map[string]int32{
		"PRIMARY":   0,
		"SECONDARY": 1,
		"TERTIARY":  2,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[2].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[2]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{2}
}

type Lobby_Status int32

const (
	Lobby_EMPTY Lobby_Status = 0 // When there are No Peers in Local Room
	Lobby_FEW   Lobby_Status = 1 // When there are <= 5 Peers in Local Room
	Lobby_MANY  Lobby_Status = 2 // When there are > 5 Peers in Local Room
)

// Enum value maps for Lobby_Status.
var (
	Lobby_Status_name = map[int32]string{
		0: "EMPTY",
		1: "FEW",
		2: "MANY",
	}
	Lobby_Status_value = map[string]int32{
		"EMPTY": 0,
		"FEW":   1,
		"MANY":  2,
	}
)

func (x Lobby_Status) Enum() *Lobby_Status {
	p := new(Lobby_Status)
	*p = x
	return p
}

func (x Lobby_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lobby_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[3].Descriptor()
}

func (Lobby_Status) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[3]
}

func (x Lobby_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Lobby_Status.Descriptor instead.
func (Lobby_Status) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{1, 0}
}

// Status of Member
type Member_Reach int32

const (
	Member_ONLINE  Member_Reach = 0 // Member is Online
	Member_OFFLINE Member_Reach = 1 // Member is Offline
	Member_GHOST   Member_Reach = 2 // Member is Ghost Mode (Not Receiving)
)

// Enum value maps for Member_Reach.
var (
	Member_Reach_name = map[int32]string{
		0: "ONLINE",
		1: "OFFLINE",
		2: "GHOST",
	}
	Member_Reach_value = map[string]int32{
		"ONLINE":  0,
		"OFFLINE": 1,
		"GHOST":   2,
	}
)

func (x Member_Reach) Enum() *Member_Reach {
	p := new(Member_Reach)
	*p = x
	return p
}

func (x Member_Reach) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Member_Reach) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[4].Descriptor()
}

func (Member_Reach) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[4]
}

func (x Member_Reach) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Member_Reach.Descriptor instead.
func (Member_Reach) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{3, 0}
}

// Peers Active Status
type Peer_Status int32

const (
	Peer_OFFLINE Peer_Status = 0 // Offline - Not Online or Not a Full Node
	Peer_ONLINE  Peer_Status = 1 // Online - Full Node Available
	Peer_AWAY    Peer_Status = 2 // Away - Not Online, but has a full node
	Peer_BUSY    Peer_Status = 3 // Busy - Online, but busy with Transfer
	Peer_PAIRING Peer_Status = 4 // PAIRING - Online/Connected but only for Linking
	Peer_GHOST   Peer_Status = 5 // User is Ghost Mode (Not Receiving)
)

// Enum value maps for Peer_Status.
var (
	Peer_Status_name = map[int32]string{
		0: "OFFLINE",
		1: "ONLINE",
		2: "AWAY",
		3: "BUSY",
		4: "PAIRING",
		5: "GHOST",
	}
	Peer_Status_value = map[string]int32{
		"OFFLINE": 0,
		"ONLINE":  1,
		"AWAY":    2,
		"BUSY":    3,
		"PAIRING": 4,
		"GHOST":   5,
	}
)

func (x Peer_Status) Enum() *Peer_Status {
	p := new(Peer_Status)
	*p = x
	return p
}

func (x Peer_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Peer_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[5].Descriptor()
}

func (Peer_Status) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[5]
}

func (x Peer_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Peer_Status.Descriptor instead.
func (Peer_Status) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{4, 0}
}

// Proximity is the Distance between Peers, from Ultrasonic
type Position_Proximity int32

const (
	Position_NotFound  Position_Proximity = 0 // Unable to Calculate
	Position_Immediate Position_Proximity = 1 // Within 5 Meters
	Position_Near      Position_Proximity = 2 // Within 10 Meters
	Position_Distant   Position_Proximity = 3 // Within 15 Meters
)

// Enum value maps for Position_Proximity.
var (
	Position_Proximity_name = map[int32]string{
		0: "NotFound",
		1: "Immediate",
		2: "Near",
		3: "Distant",
	}
	Position_Proximity_value = map[string]int32{
		"NotFound":  0,
		"Immediate": 1,
		"Near":      2,
		"Distant":   3,
	}
)

func (x Position_Proximity) Enum() *Position_Proximity {
	p := new(Position_Proximity)
	*p = x
	return p
}

func (x Position_Proximity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Position_Proximity) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[6].Descriptor()
}

func (Position_Proximity) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[6]
}

func (x Position_Proximity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Position_Proximity.Descriptor instead.
func (Position_Proximity) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{5, 0}
}

// Room Type
type Room_Type int32

const (
	Room_LOCAL  Room_Type = 0 // Nearby Peers Room
	Room_DEVICE Room_Type = 1 // User Devices Room
	Room_GROUP  Room_Type = 2 // User Custom Group Room
)

// Enum value maps for Room_Type.
var (
	Room_Type_name = map[int32]string{
		0: "LOCAL",
		1: "DEVICE",
		2: "GROUP",
	}
	Room_Type_value = map[string]int32{
		"LOCAL":  0,
		"DEVICE": 1,
		"GROUP":  2,
	}
)

func (x Room_Type) Enum() *Room_Type {
	p := new(Room_Type)
	*p = x
	return p
}

func (x Room_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Room_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[7].Descriptor()
}

func (Room_Type) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[7]
}

func (x Room_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Room_Type.Descriptor instead.
func (Room_Type) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{7, 0}
}

// List of Linker Peers
type Linkers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Peer `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Linkers) Reset() {
	*x = Linkers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Linkers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Linkers) ProtoMessage() {}

func (x *Linkers) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Linkers.ProtoReflect.Descriptor instead.
func (*Linkers) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0}
}

func (x *Linkers) GetList() []*Peer {
	if x != nil {
		return x.List
	}
	return nil
}

// For Info about Lobby
type Lobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room    *Room              `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`                                                                                               // Type of Lobby
	Members map[string]*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Total Data of Peers
	Status  Lobby_Status       `protobuf:"varint,3,opt,name=status,proto3,enum=data.Lobby_Status" json:"status,omitempty"`
}

func (x *Lobby) Reset() {
	*x = Lobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lobby) ProtoMessage() {}

func (x *Lobby) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lobby.ProtoReflect.Descriptor instead.
func (*Lobby) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{1}
}

func (x *Lobby) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *Lobby) GetMembers() map[string]*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Lobby) GetStatus() Lobby_Status {
	if x != nil {
		return x.Status
	}
	return Lobby_EMPTY
}

// Location from GeoIP and OLC information
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location Latitude
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Location Longitude
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Location Placemark Information - Generated
	Placemark *Location_Placemark `protobuf:"bytes,3,opt,name=placemark,proto3" json:"placemark,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{2}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetPlacemark() *Location_Placemark {
	if x != nil {
		return x.Placemark
	}
	return nil
}

// Holistic Info with all Peer Data
type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName  string       `protobuf:"bytes,1,opt,name=sName,proto3" json:"sName,omitempty"`                         // Member Sonr Domain
	Reach  Member_Reach `protobuf:"varint,2,opt,name=reach,proto3,enum=data.Member_Reach" json:"reach,omitempty"` // Member Reach
	Active *Peer        `protobuf:"bytes,3,opt,name=active,proto3" json:"active,omitempty"`                       // Defaults to Primary Device if Online, otherwise uses the
	// most recent active device.
	Associated []*Peer `protobuf:"bytes,4,rep,name=associated,proto3" json:"associated,omitempty"` // If Primary Device is Online, additional
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{3}
}

func (x *Member) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *Member) GetReach() Member_Reach {
	if x != nil {
		return x.Reach
	}
	return Member_ONLINE
}

func (x *Member) GetActive() *Peer {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Member) GetAssociated() []*Peer {
	if x != nil {
		return x.Associated
	}
	return nil
}

// Basic Info Sent to Peers to Establish Connections
type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName      string           `protobuf:"bytes,1,opt,name=sName,proto3" json:"sName,omitempty"`                           // User Sonr Domain
	Id         *Peer_ID         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                                 // ID references
	Platform   Platform         `protobuf:"varint,3,opt,name=platform,proto3,enum=data.Platform" json:"platform,omitempty"` // Peers Device Platform
	Model      string           `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`                           // Peers Device Model
	Position   *Position        `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`                     // Peers Positional Information
	Profile    *Profile         `protobuf:"bytes,6,opt,name=profile,proto3" json:"profile,omitempty"`                       // Peers General Information
	Properties *Peer_Properties `protobuf:"bytes,7,opt,name=properties,proto3" json:"properties,omitempty"`                 // Peer specific options set
	Status     Peer_Status      `protobuf:"varint,8,opt,name=status,proto3,enum=data.Peer_Status" json:"status,omitempty"`  // Peer Status
	HostName   string           `protobuf:"bytes,9,opt,name=hostName,proto3" json:"hostName,omitempty"`                     // Peer Host Name
	Role       Role             `protobuf:"varint,10,opt,name=role,proto3,enum=data.Role" json:"role,omitempty"`            // Peer Role
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{4}
}

func (x *Peer) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *Peer) GetId() *Peer_ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Peer) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_OTHER
}

func (x *Peer) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Peer) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Peer) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Peer) GetProperties() *Peer_Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Peer) GetStatus() Peer_Status {
	if x != nil {
		return x.Status
	}
	return Peer_OFFLINE
}

func (x *Peer) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Peer) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_PRIMARY
}

// Position Includes All Directional Info of Peer
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facing        *Position_Compass       `protobuf:"bytes,1,opt,name=facing,proto3" json:"facing,omitempty"`                                     // Compass Direction of Peer on Z axis
	Heading       *Position_Compass       `protobuf:"bytes,2,opt,name=heading,proto3" json:"heading,omitempty"`                                   // Compass Direction of Peer on X axis
	Proximity     Position_Proximity      `protobuf:"varint,3,opt,name=proximity,proto3,enum=data.Position_Proximity" json:"proximity,omitempty"` // Proximity from the User - Calculated
	Accelerometer *Position_Accelerometer `protobuf:"bytes,4,opt,name=accelerometer,proto3" json:"accelerometer,omitempty"`                       // Accelerometer Values
	Orientation   *Position_Orientation   `protobuf:"bytes,5,opt,name=orientation,proto3" json:"orientation,omitempty"`                           // Orientation Values
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{5}
}

func (x *Position) GetFacing() *Position_Compass {
	if x != nil {
		return x.Facing
	}
	return nil
}

func (x *Position) GetHeading() *Position_Compass {
	if x != nil {
		return x.Heading
	}
	return nil
}

func (x *Position) GetProximity() Position_Proximity {
	if x != nil {
		return x.Proximity
	}
	return Position_NotFound
}

func (x *Position) GetAccelerometer() *Position_Accelerometer {
	if x != nil {
		return x.Accelerometer
	}
	return nil
}

func (x *Position) GetOrientation() *Position_Orientation {
	if x != nil {
		return x.Orientation
	}
	return nil
}

// General Information about Peer passed during Authentication
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName     string   `protobuf:"bytes,1,opt,name=sName,proto3" json:"sName,omitempty"`                           // Sonr Based Username
	FirstName string   `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`                   // General Info
	LastName  string   `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`                     // General Info
	Picture   []byte   `protobuf:"bytes,4,opt,name=picture,proto3,oneof" json:"picture,omitempty"`                 // Profile Picture
	Platform  Platform `protobuf:"varint,5,opt,name=platform,proto3,enum=data.Platform" json:"platform,omitempty"` // Peers Device Operating System
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{6}
}

func (x *Profile) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *Profile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Profile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Profile) GetPicture() []byte {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *Profile) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_OTHER
}

// Room Information
type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Room Type and Name
	Type Room_Type `protobuf:"varint,1,opt,name=type,proto3,enum=data.Room_Type" json:"type,omitempty"` // Type of Room
	Name string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                      // Room Name
}

func (x *Room) Reset() {
	*x = Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{7}
}

func (x *Room) GetType() Room_Type {
	if x != nil {
		return x.Type
	}
	return Room_LOCAL
}

func (x *Room) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains detailed placemark information.
type Location_Placemark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name associated with the placemark.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The street associated with the placemark.
	Street string `protobuf:"bytes,2,opt,name=street,proto3" json:"street,omitempty"`
	// The abbreviated country name, according to the two letter (alpha-2) [ISO
	// standard](https://www.iso.org/iso-3166-country-codes.html).
	IsoCountryCode string `protobuf:"bytes,3,opt,name=isoCountryCode,proto3" json:"isoCountryCode,omitempty"`
	// The name of the country associated with the placemark.
	Country string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	// The postal code associated with the placemark.
	PostalCode string `protobuf:"bytes,5,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	// The name of the state or province associated with the placemark.
	AdministrativeArea string `protobuf:"bytes,6,opt,name=administrativeArea,proto3" json:"administrativeArea,omitempty"`
	// Additional administrative area information for the placemark.
	SubAdministrativeArea string `protobuf:"bytes,7,opt,name=subAdministrativeArea,proto3" json:"subAdministrativeArea,omitempty"`
	// The name of the city associated with the placemark.
	Locality string `protobuf:"bytes,8,opt,name=locality,proto3" json:"locality,omitempty"`
	// Additional city-level information for the placemark.
	SubLocality string `protobuf:"bytes,9,opt,name=subLocality,proto3" json:"subLocality,omitempty"`
	// The street address associated with the placemark.
	Thoroughfare string `protobuf:"bytes,10,opt,name=thoroughfare,proto3" json:"thoroughfare,omitempty"`
	// Additional street address information for the placemark.
	SubThoroughfare string `protobuf:"bytes,11,opt,name=subThoroughfare,proto3" json:"subThoroughfare,omitempty"`
}

func (x *Location_Placemark) Reset() {
	*x = Location_Placemark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location_Placemark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location_Placemark) ProtoMessage() {}

func (x *Location_Placemark) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location_Placemark.ProtoReflect.Descriptor instead.
func (*Location_Placemark) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Location_Placemark) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Location_Placemark) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Location_Placemark) GetIsoCountryCode() string {
	if x != nil {
		return x.IsoCountryCode
	}
	return ""
}

func (x *Location_Placemark) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location_Placemark) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Location_Placemark) GetAdministrativeArea() string {
	if x != nil {
		return x.AdministrativeArea
	}
	return ""
}

func (x *Location_Placemark) GetSubAdministrativeArea() string {
	if x != nil {
		return x.SubAdministrativeArea
	}
	return ""
}

func (x *Location_Placemark) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *Location_Placemark) GetSubLocality() string {
	if x != nil {
		return x.SubLocality
	}
	return ""
}

func (x *Location_Placemark) GetThoroughfare() string {
	if x != nil {
		return x.Thoroughfare
	}
	return ""
}

func (x *Location_Placemark) GetSubThoroughfare() string {
	if x != nil {
		return x.SubThoroughfare
	}
	return ""
}

// ID References
type Peer_ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer      string `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`           // Host PeerID
	Device    string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`       // Device ID
	MultiAddr string `protobuf:"bytes,3,opt,name=multiAddr,proto3" json:"multiAddr,omitempty"` // Peer MultiAddr
	PublicKey string `protobuf:"bytes,4,opt,name=publicKey,proto3" json:"publicKey,omitempty"` // Public Key of Peer
}

func (x *Peer_ID) Reset() {
	*x = Peer_ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer_ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer_ID) ProtoMessage() {}

func (x *Peer_ID) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer_ID.ProtoReflect.Descriptor instead.
func (*Peer_ID) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Peer_ID) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *Peer_ID) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Peer_ID) GetMultiAddr() string {
	if x != nil {
		return x.MultiAddr
	}
	return ""
}

func (x *Peer_ID) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// Properties
type Peer_Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether Peer can use automatic point to Transfer
	EnabledPointShare bool `protobuf:"varint,1,opt,name=enabledPointShare,proto3" json:"enabledPointShare,omitempty"`
	IsFlatMode        bool `protobuf:"varint,2,opt,name=isFlatMode,proto3" json:"isFlatMode,omitempty"`
}

func (x *Peer_Properties) Reset() {
	*x = Peer_Properties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer_Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer_Properties) ProtoMessage() {}

func (x *Peer_Properties) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer_Properties.ProtoReflect.Descriptor instead.
func (*Peer_Properties) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Peer_Properties) GetEnabledPointShare() bool {
	if x != nil {
		return x.EnabledPointShare
	}
	return false
}

func (x *Peer_Properties) GetIsFlatMode() bool {
	if x != nil {
		return x.IsFlatMode
	}
	return false
}

// Accelerometer Sensor Values
type Position_Accelerometer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"` // X-Axis Value
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"` // Y-Axis Value
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"` // Z-Axis Value
}

func (x *Position_Accelerometer) Reset() {
	*x = Position_Accelerometer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position_Accelerometer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position_Accelerometer) ProtoMessage() {}

func (x *Position_Accelerometer) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position_Accelerometer.ProtoReflect.Descriptor instead.
func (*Position_Accelerometer) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Position_Accelerometer) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position_Accelerometer) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Position_Accelerometer) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Compass Direction Values
type Position_Compass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cardinal     Cardinal `protobuf:"varint,1,opt,name=cardinal,proto3,enum=data.Cardinal" json:"cardinal,omitempty"`         // Cardinal Designation of normal Value
	AntiCardinal Cardinal `protobuf:"varint,2,opt,name=antiCardinal,proto3,enum=data.Cardinal" json:"antiCardinal,omitempty"` // Cardinal Designation of Antipodal Value
	Direction    float64  `protobuf:"fixed64,3,opt,name=direction,proto3" json:"direction,omitempty"`                         // Normal Compass Value
	Antipodal    float64  `protobuf:"fixed64,4,opt,name=antipodal,proto3" json:"antipodal,omitempty"`                         // Inverse Compass Direction of Peer
}

func (x *Position_Compass) Reset() {
	*x = Position_Compass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position_Compass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position_Compass) ProtoMessage() {}

func (x *Position_Compass) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position_Compass.ProtoReflect.Descriptor instead.
func (*Position_Compass) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Position_Compass) GetCardinal() Cardinal {
	if x != nil {
		return x.Cardinal
	}
	return Cardinal_N
}

func (x *Position_Compass) GetAntiCardinal() Cardinal {
	if x != nil {
		return x.AntiCardinal
	}
	return Cardinal_N
}

func (x *Position_Compass) GetDirection() float64 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *Position_Compass) GetAntipodal() float64 {
	if x != nil {
		return x.Antipodal
	}
	return 0
}

// Euler Angle Orientation
type Position_Orientation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pitch float64 `protobuf:"fixed64,1,opt,name=pitch,proto3" json:"pitch,omitempty"` // Pitch Angle
	Roll  float64 `protobuf:"fixed64,2,opt,name=roll,proto3" json:"roll,omitempty"`   // Roll Angle
	Yaw   float64 `protobuf:"fixed64,3,opt,name=yaw,proto3" json:"yaw,omitempty"`     // Yaw Angle
}

func (x *Position_Orientation) Reset() {
	*x = Position_Orientation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position_Orientation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position_Orientation) ProtoMessage() {}

func (x *Position_Orientation) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position_Orientation.ProtoReflect.Descriptor instead.
func (*Position_Orientation) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Position_Orientation) GetPitch() float64 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *Position_Orientation) GetRoll() float64 {
	if x != nil {
		return x.Roll
	}
	return 0
}

func (x *Position_Orientation) GetYaw() float64 {
	if x != nil {
		return x.Yaw
	}
	return 0
}

var File_peer_proto protoreflect.FileDescriptor

var file_peer_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x29, 0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf9, 0x01,
	0x0a, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x48, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x26, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x45, 0x57, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x22, 0x8a, 0x04, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x8b, 0x03, 0x0a, 0x09, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x62, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x6f, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x68, 0x6f, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x54, 0x68, 0x6f, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x54, 0x68, 0x6f, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x68, 0x52, 0x05, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x2b, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x63, 0x68, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x22, 0x89,
	0x05, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x1a, 0x6c, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1a,
	0x5a, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x46, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x57, 0x41, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x22, 0x95, 0x05, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x52,
	0x06, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74,
	0x79, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x1a, 0xa5,
	0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0c, 0x61, 0x6e, 0x74, 0x69, 0x43, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x0c, 0x61, 0x6e,
	0x74, 0x69, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x74, 0x69,
	0x70, 0x6f, 0x64, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x6e, 0x74,
	0x69, 0x70, 0x6f, 0x64, 0x61, 0x6c, 0x1a, 0x49, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x79, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x79, 0x61,
	0x77, 0x22, 0x3f, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x65, 0x61, 0x72, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x10, 0x03, 0x22, 0xb0, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0x69, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x23, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02,
	0x2a, 0xa6, 0x02, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x05, 0x0a,
	0x01, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x62, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x62, 0x4e, 0x10, 0x03,
	0x12, 0x06, 0x0a, 0x02, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x62, 0x45,
	0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x62, 0x4e, 0x10, 0x07, 0x12, 0x05, 0x0a, 0x01, 0x45, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x62, 0x53, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x45, 0x62, 0x45, 0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x45, 0x10, 0x0c, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x45, 0x62, 0x53, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x53, 0x45,
	0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x62, 0x45, 0x10, 0x0f, 0x12, 0x05, 0x0a, 0x01, 0x53,
	0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x62, 0x57, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x53, 0x57, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x57, 0x62, 0x53, 0x10, 0x13, 0x12, 0x06,
	0x0a, 0x02, 0x53, 0x57, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x57, 0x62, 0x57, 0x10, 0x15,
	0x12, 0x07, 0x0a, 0x03, 0x57, 0x53, 0x57, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x62, 0x53,
	0x10, 0x17, 0x12, 0x05, 0x0a, 0x01, 0x57, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x62, 0x4e,
	0x10, 0x19, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4e, 0x57, 0x10, 0x1a, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x57, 0x62, 0x57, 0x10, 0x1b, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x57, 0x10, 0x1c, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x57, 0x62, 0x4e, 0x10, 0x1d, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4e, 0x57, 0x10, 0x1e,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x62, 0x57, 0x10, 0x1f, 0x2a, 0x57, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x43, 0x4f, 0x53, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42,
	0x10, 0x06, 0x2a, 0x30, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x52, 0x54, 0x49, 0x41,
	0x52, 0x59, 0x10, 0x02, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peer_proto_rawDescOnce sync.Once
	file_peer_proto_rawDescData = file_peer_proto_rawDesc
)

func file_peer_proto_rawDescGZIP() []byte {
	file_peer_proto_rawDescOnce.Do(func() {
		file_peer_proto_rawDescData = protoimpl.X.CompressGZIP(file_peer_proto_rawDescData)
	})
	return file_peer_proto_rawDescData
}

var file_peer_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_peer_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_peer_proto_goTypes = []interface{}{
	(Cardinal)(0),                  // 0: data.Cardinal
	(Platform)(0),                  // 1: data.Platform
	(Role)(0),                      // 2: data.Role
	(Lobby_Status)(0),              // 3: data.Lobby.Status
	(Member_Reach)(0),              // 4: data.Member.Reach
	(Peer_Status)(0),               // 5: data.Peer.Status
	(Position_Proximity)(0),        // 6: data.Position.Proximity
	(Room_Type)(0),                 // 7: data.Room.Type
	(*Linkers)(nil),                // 8: data.Linkers
	(*Lobby)(nil),                  // 9: data.Lobby
	(*Location)(nil),               // 10: data.Location
	(*Member)(nil),                 // 11: data.Member
	(*Peer)(nil),                   // 12: data.Peer
	(*Position)(nil),               // 13: data.Position
	(*Profile)(nil),                // 14: data.Profile
	(*Room)(nil),                   // 15: data.Room
	nil,                            // 16: data.Lobby.MembersEntry
	(*Location_Placemark)(nil),     // 17: data.Location.Placemark
	(*Peer_ID)(nil),                // 18: data.Peer.ID
	(*Peer_Properties)(nil),        // 19: data.Peer.Properties
	(*Position_Accelerometer)(nil), // 20: data.Position.Accelerometer
	(*Position_Compass)(nil),       // 21: data.Position.Compass
	(*Position_Orientation)(nil),   // 22: data.Position.Orientation
}
var file_peer_proto_depIdxs = []int32{
	12, // 0: data.Linkers.list:type_name -> data.Peer
	15, // 1: data.Lobby.room:type_name -> data.Room
	16, // 2: data.Lobby.members:type_name -> data.Lobby.MembersEntry
	3,  // 3: data.Lobby.status:type_name -> data.Lobby.Status
	17, // 4: data.Location.placemark:type_name -> data.Location.Placemark
	4,  // 5: data.Member.reach:type_name -> data.Member.Reach
	12, // 6: data.Member.active:type_name -> data.Peer
	12, // 7: data.Member.associated:type_name -> data.Peer
	18, // 8: data.Peer.id:type_name -> data.Peer.ID
	1,  // 9: data.Peer.platform:type_name -> data.Platform
	13, // 10: data.Peer.position:type_name -> data.Position
	14, // 11: data.Peer.profile:type_name -> data.Profile
	19, // 12: data.Peer.properties:type_name -> data.Peer.Properties
	5,  // 13: data.Peer.status:type_name -> data.Peer.Status
	2,  // 14: data.Peer.role:type_name -> data.Role
	21, // 15: data.Position.facing:type_name -> data.Position.Compass
	21, // 16: data.Position.heading:type_name -> data.Position.Compass
	6,  // 17: data.Position.proximity:type_name -> data.Position.Proximity
	20, // 18: data.Position.accelerometer:type_name -> data.Position.Accelerometer
	22, // 19: data.Position.orientation:type_name -> data.Position.Orientation
	1,  // 20: data.Profile.platform:type_name -> data.Platform
	7,  // 21: data.Room.type:type_name -> data.Room.Type
	11, // 22: data.Lobby.MembersEntry.value:type_name -> data.Member
	0,  // 23: data.Position.Compass.cardinal:type_name -> data.Cardinal
	0,  // 24: data.Position.Compass.antiCardinal:type_name -> data.Cardinal
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_peer_proto_init() }
func file_peer_proto_init() {
	if File_peer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_peer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Linkers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location_Placemark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer_ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer_Properties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position_Accelerometer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position_Compass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position_Orientation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_peer_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peer_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_peer_proto_goTypes,
		DependencyIndexes: file_peer_proto_depIdxs,
		EnumInfos:         file_peer_proto_enumTypes,
		MessageInfos:      file_peer_proto_msgTypes,
	}.Build()
	File_peer_proto = out.File
	file_peer_proto_rawDesc = nil
	file_peer_proto_goTypes = nil
	file_peer_proto_depIdxs = nil
}
