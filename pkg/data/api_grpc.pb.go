// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	// Initializes New Node
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*NoResponse, error)
	// Starts Method Host and Connects to Network
	Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*NoResponse, error)
	// Action method handles misceallaneous actions for node
	Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*NoResponse, error)
	// Link Method Request for Data
	Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*NoResponse, error)
	// Signing Method Request for Data
	Sign(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*NoResponse, error)
	// Verification Method Request for Signed Data
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*NoResponse, error)
	// Update Method proximity/direction and Notify Lobby
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*NoResponse, error)
	// Invite Method Processes Data and Sends Invite to Peer
	Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*NoResponse, error)
	// Respond Method to an Invite with Decision
	Respond(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*NoResponse, error)
	// Mail Method handles request for a message in Mailbox
	Mail(ctx context.Context, in *MailboxRequest, opts ...grpc.CallOption) (*NoResponse, error)
	// Response Streams
	CallAuthResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallAuthResponseClient, error)
	CallActionResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallActionResponseClient, error)
	CallLinkResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallLinkResponseClient, error)
	CallDecisionResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallDecisionResponseClient, error)
	CallInviteResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallInviteResponseClient, error)
	CallMailboxResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallMailboxResponseClient, error)
	CallVerifyResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallVerifyResponseClient, error)
	// Events Streams
	OnStatus(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnStatusClient, error)
	OnLink(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnLinkClient, error)
	OnRoom(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnRoomClient, error)
	OnInvite(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnInviteClient, error)
	OnReply(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnReplyClient, error)
	OnMail(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnMailClient, error)
	OnProgress(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnProgressClient, error)
	OnComplete(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnCompleteClient, error)
	OnError(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnErrorClient, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/data.NodeService/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/data.NodeService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/data.NodeService/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/data.NodeService/Link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Sign(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/data.NodeService/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/data.NodeService/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/data.NodeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/data.NodeService/Invite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Respond(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/data.NodeService/Respond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Mail(ctx context.Context, in *MailboxRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/data.NodeService/Mail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) CallAuthResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallAuthResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[0], "/data.NodeService/CallAuthResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceCallAuthResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_CallAuthResponseClient interface {
	Recv() (*AuthResponse, error)
	grpc.ClientStream
}

type nodeServiceCallAuthResponseClient struct {
	grpc.ClientStream
}

func (x *nodeServiceCallAuthResponseClient) Recv() (*AuthResponse, error) {
	m := new(AuthResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) CallActionResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallActionResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[1], "/data.NodeService/CallActionResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceCallActionResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_CallActionResponseClient interface {
	Recv() (*ActionResponse, error)
	grpc.ClientStream
}

type nodeServiceCallActionResponseClient struct {
	grpc.ClientStream
}

func (x *nodeServiceCallActionResponseClient) Recv() (*ActionResponse, error) {
	m := new(ActionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) CallLinkResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallLinkResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[2], "/data.NodeService/CallLinkResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceCallLinkResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_CallLinkResponseClient interface {
	Recv() (*LinkResponse, error)
	grpc.ClientStream
}

type nodeServiceCallLinkResponseClient struct {
	grpc.ClientStream
}

func (x *nodeServiceCallLinkResponseClient) Recv() (*LinkResponse, error) {
	m := new(LinkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) CallDecisionResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallDecisionResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[3], "/data.NodeService/CallDecisionResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceCallDecisionResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_CallDecisionResponseClient interface {
	Recv() (*DecisionResponse, error)
	grpc.ClientStream
}

type nodeServiceCallDecisionResponseClient struct {
	grpc.ClientStream
}

func (x *nodeServiceCallDecisionResponseClient) Recv() (*DecisionResponse, error) {
	m := new(DecisionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) CallInviteResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallInviteResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[4], "/data.NodeService/CallInviteResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceCallInviteResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_CallInviteResponseClient interface {
	Recv() (*InviteResponse, error)
	grpc.ClientStream
}

type nodeServiceCallInviteResponseClient struct {
	grpc.ClientStream
}

func (x *nodeServiceCallInviteResponseClient) Recv() (*InviteResponse, error) {
	m := new(InviteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) CallMailboxResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallMailboxResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[5], "/data.NodeService/CallMailboxResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceCallMailboxResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_CallMailboxResponseClient interface {
	Recv() (*MailboxResponse, error)
	grpc.ClientStream
}

type nodeServiceCallMailboxResponseClient struct {
	grpc.ClientStream
}

func (x *nodeServiceCallMailboxResponseClient) Recv() (*MailboxResponse, error) {
	m := new(MailboxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) CallVerifyResponse(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_CallVerifyResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[6], "/data.NodeService/CallVerifyResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceCallVerifyResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_CallVerifyResponseClient interface {
	Recv() (*VerifyResponse, error)
	grpc.ClientStream
}

type nodeServiceCallVerifyResponseClient struct {
	grpc.ClientStream
}

func (x *nodeServiceCallVerifyResponseClient) Recv() (*VerifyResponse, error) {
	m := new(VerifyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) OnStatus(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[7], "/data.NodeService/OnStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceOnStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_OnStatusClient interface {
	Recv() (*StatusEvent, error)
	grpc.ClientStream
}

type nodeServiceOnStatusClient struct {
	grpc.ClientStream
}

func (x *nodeServiceOnStatusClient) Recv() (*StatusEvent, error) {
	m := new(StatusEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) OnLink(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnLinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[8], "/data.NodeService/OnLink", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceOnLinkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_OnLinkClient interface {
	Recv() (*LinkEvent, error)
	grpc.ClientStream
}

type nodeServiceOnLinkClient struct {
	grpc.ClientStream
}

func (x *nodeServiceOnLinkClient) Recv() (*LinkEvent, error) {
	m := new(LinkEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) OnRoom(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[9], "/data.NodeService/OnRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceOnRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_OnRoomClient interface {
	Recv() (*RoomEvent, error)
	grpc.ClientStream
}

type nodeServiceOnRoomClient struct {
	grpc.ClientStream
}

func (x *nodeServiceOnRoomClient) Recv() (*RoomEvent, error) {
	m := new(RoomEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) OnInvite(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnInviteClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[10], "/data.NodeService/OnInvite", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceOnInviteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_OnInviteClient interface {
	Recv() (*InviteRequest, error)
	grpc.ClientStream
}

type nodeServiceOnInviteClient struct {
	grpc.ClientStream
}

func (x *nodeServiceOnInviteClient) Recv() (*InviteRequest, error) {
	m := new(InviteRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) OnReply(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnReplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[11], "/data.NodeService/OnReply", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceOnReplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_OnReplyClient interface {
	Recv() (*InviteResponse, error)
	grpc.ClientStream
}

type nodeServiceOnReplyClient struct {
	grpc.ClientStream
}

func (x *nodeServiceOnReplyClient) Recv() (*InviteResponse, error) {
	m := new(InviteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) OnMail(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnMailClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[12], "/data.NodeService/OnMail", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceOnMailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_OnMailClient interface {
	Recv() (*MailEvent, error)
	grpc.ClientStream
}

type nodeServiceOnMailClient struct {
	grpc.ClientStream
}

func (x *nodeServiceOnMailClient) Recv() (*MailEvent, error) {
	m := new(MailEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) OnProgress(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[13], "/data.NodeService/OnProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceOnProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_OnProgressClient interface {
	Recv() (*ProgressEvent, error)
	grpc.ClientStream
}

type nodeServiceOnProgressClient struct {
	grpc.ClientStream
}

func (x *nodeServiceOnProgressClient) Recv() (*ProgressEvent, error) {
	m := new(ProgressEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) OnComplete(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnCompleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[14], "/data.NodeService/OnComplete", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceOnCompleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_OnCompleteClient interface {
	Recv() (*CompleteEvent, error)
	grpc.ClientStream
}

type nodeServiceOnCompleteClient struct {
	grpc.ClientStream
}

func (x *nodeServiceOnCompleteClient) Recv() (*CompleteEvent, error) {
	m := new(CompleteEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) OnError(ctx context.Context, in *NoRequest, opts ...grpc.CallOption) (NodeService_OnErrorClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[15], "/data.NodeService/OnError", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceOnErrorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_OnErrorClient interface {
	Recv() (*ErrorEvent, error)
	grpc.ClientStream
}

type nodeServiceOnErrorClient struct {
	grpc.ClientStream
}

func (x *nodeServiceOnErrorClient) Recv() (*ErrorEvent, error) {
	m := new(ErrorEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	// Initializes New Node
	Initialize(context.Context, *InitializeRequest) (*NoResponse, error)
	// Starts Method Host and Connects to Network
	Connect(context.Context, *ConnectionRequest) (*NoResponse, error)
	// Action method handles misceallaneous actions for node
	Action(context.Context, *ActionRequest) (*NoResponse, error)
	// Link Method Request for Data
	Link(context.Context, *LinkRequest) (*NoResponse, error)
	// Signing Method Request for Data
	Sign(context.Context, *AuthRequest) (*NoResponse, error)
	// Verification Method Request for Signed Data
	Verify(context.Context, *VerifyRequest) (*NoResponse, error)
	// Update Method proximity/direction and Notify Lobby
	Update(context.Context, *UpdateRequest) (*NoResponse, error)
	// Invite Method Processes Data and Sends Invite to Peer
	Invite(context.Context, *InviteRequest) (*NoResponse, error)
	// Respond Method to an Invite with Decision
	Respond(context.Context, *DecisionRequest) (*NoResponse, error)
	// Mail Method handles request for a message in Mailbox
	Mail(context.Context, *MailboxRequest) (*NoResponse, error)
	// Response Streams
	CallAuthResponse(*NoRequest, NodeService_CallAuthResponseServer) error
	CallActionResponse(*NoRequest, NodeService_CallActionResponseServer) error
	CallLinkResponse(*NoRequest, NodeService_CallLinkResponseServer) error
	CallDecisionResponse(*NoRequest, NodeService_CallDecisionResponseServer) error
	CallInviteResponse(*NoRequest, NodeService_CallInviteResponseServer) error
	CallMailboxResponse(*NoRequest, NodeService_CallMailboxResponseServer) error
	CallVerifyResponse(*NoRequest, NodeService_CallVerifyResponseServer) error
	// Events Streams
	OnStatus(*NoRequest, NodeService_OnStatusServer) error
	OnLink(*NoRequest, NodeService_OnLinkServer) error
	OnRoom(*NoRequest, NodeService_OnRoomServer) error
	OnInvite(*NoRequest, NodeService_OnInviteServer) error
	OnReply(*NoRequest, NodeService_OnReplyServer) error
	OnMail(*NoRequest, NodeService_OnMailServer) error
	OnProgress(*NoRequest, NodeService_OnProgressServer) error
	OnComplete(*NoRequest, NodeService_OnCompleteServer) error
	OnError(*NoRequest, NodeService_OnErrorServer) error
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) Initialize(context.Context, *InitializeRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedNodeServiceServer) Connect(context.Context, *ConnectionRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedNodeServiceServer) Action(context.Context, *ActionRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedNodeServiceServer) Link(context.Context, *LinkRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedNodeServiceServer) Sign(context.Context, *AuthRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedNodeServiceServer) Verify(context.Context, *VerifyRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedNodeServiceServer) Update(context.Context, *UpdateRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNodeServiceServer) Invite(context.Context, *InviteRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedNodeServiceServer) Respond(context.Context, *DecisionRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Respond not implemented")
}
func (UnimplementedNodeServiceServer) Mail(context.Context, *MailboxRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mail not implemented")
}
func (UnimplementedNodeServiceServer) CallAuthResponse(*NoRequest, NodeService_CallAuthResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method CallAuthResponse not implemented")
}
func (UnimplementedNodeServiceServer) CallActionResponse(*NoRequest, NodeService_CallActionResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method CallActionResponse not implemented")
}
func (UnimplementedNodeServiceServer) CallLinkResponse(*NoRequest, NodeService_CallLinkResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method CallLinkResponse not implemented")
}
func (UnimplementedNodeServiceServer) CallDecisionResponse(*NoRequest, NodeService_CallDecisionResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method CallDecisionResponse not implemented")
}
func (UnimplementedNodeServiceServer) CallInviteResponse(*NoRequest, NodeService_CallInviteResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method CallInviteResponse not implemented")
}
func (UnimplementedNodeServiceServer) CallMailboxResponse(*NoRequest, NodeService_CallMailboxResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method CallMailboxResponse not implemented")
}
func (UnimplementedNodeServiceServer) CallVerifyResponse(*NoRequest, NodeService_CallVerifyResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method CallVerifyResponse not implemented")
}
func (UnimplementedNodeServiceServer) OnStatus(*NoRequest, NodeService_OnStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method OnStatus not implemented")
}
func (UnimplementedNodeServiceServer) OnLink(*NoRequest, NodeService_OnLinkServer) error {
	return status.Errorf(codes.Unimplemented, "method OnLink not implemented")
}
func (UnimplementedNodeServiceServer) OnRoom(*NoRequest, NodeService_OnRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method OnRoom not implemented")
}
func (UnimplementedNodeServiceServer) OnInvite(*NoRequest, NodeService_OnInviteServer) error {
	return status.Errorf(codes.Unimplemented, "method OnInvite not implemented")
}
func (UnimplementedNodeServiceServer) OnReply(*NoRequest, NodeService_OnReplyServer) error {
	return status.Errorf(codes.Unimplemented, "method OnReply not implemented")
}
func (UnimplementedNodeServiceServer) OnMail(*NoRequest, NodeService_OnMailServer) error {
	return status.Errorf(codes.Unimplemented, "method OnMail not implemented")
}
func (UnimplementedNodeServiceServer) OnProgress(*NoRequest, NodeService_OnProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method OnProgress not implemented")
}
func (UnimplementedNodeServiceServer) OnComplete(*NoRequest, NodeService_OnCompleteServer) error {
	return status.Errorf(codes.Unimplemented, "method OnComplete not implemented")
}
func (UnimplementedNodeServiceServer) OnError(*NoRequest, NodeService_OnErrorServer) error {
	return status.Errorf(codes.Unimplemented, "method OnError not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.NodeService/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.NodeService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Connect(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.NodeService/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Action(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.NodeService/Link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Link(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.NodeService/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Sign(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.NodeService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.NodeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.NodeService/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Invite(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Respond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Respond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.NodeService/Respond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Respond(ctx, req.(*DecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Mail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Mail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.NodeService/Mail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Mail(ctx, req.(*MailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_CallAuthResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).CallAuthResponse(m, &nodeServiceCallAuthResponseServer{stream})
}

type NodeService_CallAuthResponseServer interface {
	Send(*AuthResponse) error
	grpc.ServerStream
}

type nodeServiceCallAuthResponseServer struct {
	grpc.ServerStream
}

func (x *nodeServiceCallAuthResponseServer) Send(m *AuthResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_CallActionResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).CallActionResponse(m, &nodeServiceCallActionResponseServer{stream})
}

type NodeService_CallActionResponseServer interface {
	Send(*ActionResponse) error
	grpc.ServerStream
}

type nodeServiceCallActionResponseServer struct {
	grpc.ServerStream
}

func (x *nodeServiceCallActionResponseServer) Send(m *ActionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_CallLinkResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).CallLinkResponse(m, &nodeServiceCallLinkResponseServer{stream})
}

type NodeService_CallLinkResponseServer interface {
	Send(*LinkResponse) error
	grpc.ServerStream
}

type nodeServiceCallLinkResponseServer struct {
	grpc.ServerStream
}

func (x *nodeServiceCallLinkResponseServer) Send(m *LinkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_CallDecisionResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).CallDecisionResponse(m, &nodeServiceCallDecisionResponseServer{stream})
}

type NodeService_CallDecisionResponseServer interface {
	Send(*DecisionResponse) error
	grpc.ServerStream
}

type nodeServiceCallDecisionResponseServer struct {
	grpc.ServerStream
}

func (x *nodeServiceCallDecisionResponseServer) Send(m *DecisionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_CallInviteResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).CallInviteResponse(m, &nodeServiceCallInviteResponseServer{stream})
}

type NodeService_CallInviteResponseServer interface {
	Send(*InviteResponse) error
	grpc.ServerStream
}

type nodeServiceCallInviteResponseServer struct {
	grpc.ServerStream
}

func (x *nodeServiceCallInviteResponseServer) Send(m *InviteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_CallMailboxResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).CallMailboxResponse(m, &nodeServiceCallMailboxResponseServer{stream})
}

type NodeService_CallMailboxResponseServer interface {
	Send(*MailboxResponse) error
	grpc.ServerStream
}

type nodeServiceCallMailboxResponseServer struct {
	grpc.ServerStream
}

func (x *nodeServiceCallMailboxResponseServer) Send(m *MailboxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_CallVerifyResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).CallVerifyResponse(m, &nodeServiceCallVerifyResponseServer{stream})
}

type NodeService_CallVerifyResponseServer interface {
	Send(*VerifyResponse) error
	grpc.ServerStream
}

type nodeServiceCallVerifyResponseServer struct {
	grpc.ServerStream
}

func (x *nodeServiceCallVerifyResponseServer) Send(m *VerifyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_OnStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).OnStatus(m, &nodeServiceOnStatusServer{stream})
}

type NodeService_OnStatusServer interface {
	Send(*StatusEvent) error
	grpc.ServerStream
}

type nodeServiceOnStatusServer struct {
	grpc.ServerStream
}

func (x *nodeServiceOnStatusServer) Send(m *StatusEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_OnLink_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).OnLink(m, &nodeServiceOnLinkServer{stream})
}

type NodeService_OnLinkServer interface {
	Send(*LinkEvent) error
	grpc.ServerStream
}

type nodeServiceOnLinkServer struct {
	grpc.ServerStream
}

func (x *nodeServiceOnLinkServer) Send(m *LinkEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_OnRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).OnRoom(m, &nodeServiceOnRoomServer{stream})
}

type NodeService_OnRoomServer interface {
	Send(*RoomEvent) error
	grpc.ServerStream
}

type nodeServiceOnRoomServer struct {
	grpc.ServerStream
}

func (x *nodeServiceOnRoomServer) Send(m *RoomEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_OnInvite_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).OnInvite(m, &nodeServiceOnInviteServer{stream})
}

type NodeService_OnInviteServer interface {
	Send(*InviteRequest) error
	grpc.ServerStream
}

type nodeServiceOnInviteServer struct {
	grpc.ServerStream
}

func (x *nodeServiceOnInviteServer) Send(m *InviteRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_OnReply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).OnReply(m, &nodeServiceOnReplyServer{stream})
}

type NodeService_OnReplyServer interface {
	Send(*InviteResponse) error
	grpc.ServerStream
}

type nodeServiceOnReplyServer struct {
	grpc.ServerStream
}

func (x *nodeServiceOnReplyServer) Send(m *InviteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_OnMail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).OnMail(m, &nodeServiceOnMailServer{stream})
}

type NodeService_OnMailServer interface {
	Send(*MailEvent) error
	grpc.ServerStream
}

type nodeServiceOnMailServer struct {
	grpc.ServerStream
}

func (x *nodeServiceOnMailServer) Send(m *MailEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_OnProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).OnProgress(m, &nodeServiceOnProgressServer{stream})
}

type NodeService_OnProgressServer interface {
	Send(*ProgressEvent) error
	grpc.ServerStream
}

type nodeServiceOnProgressServer struct {
	grpc.ServerStream
}

func (x *nodeServiceOnProgressServer) Send(m *ProgressEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_OnComplete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).OnComplete(m, &nodeServiceOnCompleteServer{stream})
}

type NodeService_OnCompleteServer interface {
	Send(*CompleteEvent) error
	grpc.ServerStream
}

type nodeServiceOnCompleteServer struct {
	grpc.ServerStream
}

func (x *nodeServiceOnCompleteServer) Send(m *CompleteEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_OnError_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).OnError(m, &nodeServiceOnErrorServer{stream})
}

type NodeService_OnErrorServer interface {
	Send(*ErrorEvent) error
	grpc.ServerStream
}

type nodeServiceOnErrorServer struct {
	grpc.ServerStream
}

func (x *nodeServiceOnErrorServer) Send(m *ErrorEvent) error {
	return x.ServerStream.SendMsg(m)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _NodeService_Initialize_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _NodeService_Connect_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _NodeService_Action_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _NodeService_Link_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _NodeService_Sign_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _NodeService_Verify_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NodeService_Update_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _NodeService_Invite_Handler,
		},
		{
			MethodName: "Respond",
			Handler:    _NodeService_Respond_Handler,
		},
		{
			MethodName: "Mail",
			Handler:    _NodeService_Mail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallAuthResponse",
			Handler:       _NodeService_CallAuthResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CallActionResponse",
			Handler:       _NodeService_CallActionResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CallLinkResponse",
			Handler:       _NodeService_CallLinkResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CallDecisionResponse",
			Handler:       _NodeService_CallDecisionResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CallInviteResponse",
			Handler:       _NodeService_CallInviteResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CallMailboxResponse",
			Handler:       _NodeService_CallMailboxResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CallVerifyResponse",
			Handler:       _NodeService_CallVerifyResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnStatus",
			Handler:       _NodeService_OnStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnLink",
			Handler:       _NodeService_OnLink_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnRoom",
			Handler:       _NodeService_OnRoom_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnInvite",
			Handler:       _NodeService_OnInvite_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnReply",
			Handler:       _NodeService_OnReply_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnMail",
			Handler:       _NodeService_OnMail_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnProgress",
			Handler:       _NodeService_OnProgress_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnComplete",
			Handler:       _NodeService_OnComplete_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnError",
			Handler:       _NodeService_OnError_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
