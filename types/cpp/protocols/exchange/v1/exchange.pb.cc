// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols/exchange/v1/exchange.proto

#include "protocols/exchange/v1/exchange.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocols {
namespace exchange {
namespace v1 {
constexpr MailboxMessage::MailboxMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(nullptr)
  , from_(nullptr)
  , to_(nullptr)
  , metadata_(nullptr)
  , created_at_(int64_t{0}){}
struct MailboxMessageDefaultTypeInternal {
  constexpr MailboxMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailboxMessageDefaultTypeInternal() {}
  union {
    MailboxMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailboxMessageDefaultTypeInternal _MailboxMessage_default_instance_;
constexpr InviteRequest::InviteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(nullptr)
  , from_(nullptr)
  , to_(nullptr)
  , metadata_(nullptr){}
struct InviteRequestDefaultTypeInternal {
  constexpr InviteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InviteRequestDefaultTypeInternal() {}
  union {
    InviteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InviteRequestDefaultTypeInternal _InviteRequest_default_instance_;
constexpr InviteResponse::InviteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(nullptr)
  , to_(nullptr)
  , metadata_(nullptr)
  , decision_(false){}
struct InviteResponseDefaultTypeInternal {
  constexpr InviteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InviteResponseDefaultTypeInternal() {}
  union {
    InviteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InviteResponseDefaultTypeInternal _InviteResponse_default_instance_;
}  // namespace v1
}  // namespace exchange
}  // namespace protocols
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocols_2fexchange_2fv1_2fexchange_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protocols_2fexchange_2fv1_2fexchange_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocols_2fexchange_2fv1_2fexchange_2eproto = nullptr;

const uint32_t TableStruct_protocols_2fexchange_2fv1_2fexchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::MailboxMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::MailboxMessage, id_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::MailboxMessage, payload_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::MailboxMessage, from_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::MailboxMessage, to_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::MailboxMessage, metadata_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::MailboxMessage, created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::InviteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::InviteRequest, payload_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::InviteRequest, from_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::InviteRequest, to_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::InviteRequest, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::InviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::InviteResponse, decision_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::InviteResponse, from_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::InviteResponse, to_),
  PROTOBUF_FIELD_OFFSET(::protocols::exchange::v1::InviteResponse, metadata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocols::exchange::v1::MailboxMessage)},
  { 12, -1, -1, sizeof(::protocols::exchange::v1::InviteRequest)},
  { 22, -1, -1, sizeof(::protocols::exchange::v1::InviteResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocols::exchange::v1::_MailboxMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocols::exchange::v1::_InviteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocols::exchange::v1::_InviteResponse_default_instance_),
};

const char descriptor_table_protodef_protocols_2fexchange_2fv1_2fexchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$protocols/exchange/v1/exchange.proto\022\025"
  "protocols.exchange.v1\032\024common/v1/core.pr"
  "oto\032\024common/v1/data.proto\"\352\001\n\016MailboxMes"
  "sage\022\016\n\002id\030\001 \001(\tR\002id\022,\n\007payload\030\002 \001(\0132\022."
  "common.v1.PayloadR\007payload\022&\n\004from\030\003 \001(\013"
  "2\022.common.v1.ProfileR\004from\022\"\n\002to\030\004 \001(\0132\022"
  ".common.v1.ProfileR\002to\022/\n\010metadata\030\005 \001(\013"
  "2\023.common.v1.MetadataR\010metadata\022\035\n\ncreat"
  "ed_at\030\006 \001(\003R\tcreatedAt\"\264\001\n\rInviteRequest"
  "\022,\n\007payload\030\001 \001(\0132\022.common.v1.PayloadR\007p"
  "ayload\022#\n\004from\030\003 \001(\0132\017.common.v1.PeerR\004f"
  "rom\022\037\n\002to\030\004 \001(\0132\017.common.v1.PeerR\002to\022/\n\010"
  "metadata\030\005 \001(\0132\023.common.v1.MetadataR\010met"
  "adata\"\243\001\n\016InviteResponse\022\032\n\010decision\030\001 \001"
  "(\010R\010decision\022#\n\004from\030\003 \001(\0132\017.common.v1.P"
  "eerR\004from\022\037\n\002to\030\004 \001(\0132\017.common.v1.PeerR\002"
  "to\022/\n\010metadata\030\005 \001(\0132\023.common.v1.Metadat"
  "aR\010metadataB\"Z github.com/sonr-io/core/e"
  "xchangeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_deps[2] = {
  &::descriptor_table_common_2fv1_2fcore_2eproto,
  &::descriptor_table_common_2fv1_2fdata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto = {
  false, false, 735, descriptor_table_protodef_protocols_2fexchange_2fv1_2fexchange_2eproto, "protocols/exchange/v1/exchange.proto", 
  &descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_once, descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_protocols_2fexchange_2fv1_2fexchange_2eproto::offsets,
  file_level_metadata_protocols_2fexchange_2fv1_2fexchange_2eproto, file_level_enum_descriptors_protocols_2fexchange_2fv1_2fexchange_2eproto, file_level_service_descriptors_protocols_2fexchange_2fv1_2fexchange_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_getter() {
  return &descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protocols_2fexchange_2fv1_2fexchange_2eproto(&descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto);
namespace protocols {
namespace exchange {
namespace v1 {

// ===================================================================

class MailboxMessage::_Internal {
 public:
  static const ::common::v1::Payload& payload(const MailboxMessage* msg);
  static const ::common::v1::Profile& from(const MailboxMessage* msg);
  static const ::common::v1::Profile& to(const MailboxMessage* msg);
  static const ::common::v1::Metadata& metadata(const MailboxMessage* msg);
};

const ::common::v1::Payload&
MailboxMessage::_Internal::payload(const MailboxMessage* msg) {
  return *msg->payload_;
}
const ::common::v1::Profile&
MailboxMessage::_Internal::from(const MailboxMessage* msg) {
  return *msg->from_;
}
const ::common::v1::Profile&
MailboxMessage::_Internal::to(const MailboxMessage* msg) {
  return *msg->to_;
}
const ::common::v1::Metadata&
MailboxMessage::_Internal::metadata(const MailboxMessage* msg) {
  return *msg->metadata_;
}
void MailboxMessage::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
void MailboxMessage::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void MailboxMessage::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
void MailboxMessage::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
MailboxMessage::MailboxMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocols.exchange.v1.MailboxMessage)
}
MailboxMessage::MailboxMessage(const MailboxMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_payload()) {
    payload_ = new ::common::v1::Payload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  if (from._internal_has_from()) {
    from_ = new ::common::v1::Profile(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::common::v1::Profile(*from.to_);
  } else {
    to_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::common::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  created_at_ = from.created_at_;
  // @@protoc_insertion_point(copy_constructor:protocols.exchange.v1.MailboxMessage)
}

inline void MailboxMessage::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&payload_)) + sizeof(created_at_));
}

MailboxMessage::~MailboxMessage() {
  // @@protoc_insertion_point(destructor:protocols.exchange.v1.MailboxMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MailboxMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete payload_;
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
  if (this != internal_default_instance()) delete metadata_;
}

void MailboxMessage::ArenaDtor(void* object) {
  MailboxMessage* _this = reinterpret_cast< MailboxMessage* >(object);
  (void)_this;
}
void MailboxMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailboxMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailboxMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.exchange.v1.MailboxMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  created_at_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailboxMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocols.exchange.v1.MailboxMessage.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Payload payload = 2 [json_name = "payload"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Profile from = 3 [json_name = "from"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Profile to = 4 [json_name = "to"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 6 [json_name = "createdAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailboxMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.exchange.v1.MailboxMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocols.exchange.v1.MailboxMessage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .common.v1.Payload payload = 2 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::payload(this), target, stream);
  }

  // .common.v1.Profile from = 3 [json_name = "from"];
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::from(this), target, stream);
  }

  // .common.v1.Profile to = 4 [json_name = "to"];
  if (this->_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::to(this), target, stream);
  }

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  // int64 created_at = 6 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_created_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.exchange.v1.MailboxMessage)
  return target;
}

size_t MailboxMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.exchange.v1.MailboxMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .common.v1.Payload payload = 2 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // .common.v1.Profile from = 3 [json_name = "from"];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .common.v1.Profile to = 4 [json_name = "to"];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // int64 created_at = 6 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailboxMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MailboxMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailboxMessage::GetClassData() const { return &_class_data_; }

void MailboxMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MailboxMessage *>(to)->MergeFrom(
      static_cast<const MailboxMessage &>(from));
}


void MailboxMessage::MergeFrom(const MailboxMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocols.exchange.v1.MailboxMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_payload()) {
    _internal_mutable_payload()->::common::v1::Payload::MergeFrom(from._internal_payload());
  }
  if (from._internal_has_from()) {
    _internal_mutable_from()->::common::v1::Profile::MergeFrom(from._internal_from());
  }
  if (from._internal_has_to()) {
    _internal_mutable_to()->::common::v1::Profile::MergeFrom(from._internal_to());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::common::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from._internal_created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailboxMessage::CopyFrom(const MailboxMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.exchange.v1.MailboxMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailboxMessage::IsInitialized() const {
  return true;
}

void MailboxMessage::InternalSwap(MailboxMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MailboxMessage, created_at_)
      + sizeof(MailboxMessage::created_at_)
      - PROTOBUF_FIELD_OFFSET(MailboxMessage, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MailboxMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_getter, &descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_once,
      file_level_metadata_protocols_2fexchange_2fv1_2fexchange_2eproto[0]);
}

// ===================================================================

class InviteRequest::_Internal {
 public:
  static const ::common::v1::Payload& payload(const InviteRequest* msg);
  static const ::common::v1::Peer& from(const InviteRequest* msg);
  static const ::common::v1::Peer& to(const InviteRequest* msg);
  static const ::common::v1::Metadata& metadata(const InviteRequest* msg);
};

const ::common::v1::Payload&
InviteRequest::_Internal::payload(const InviteRequest* msg) {
  return *msg->payload_;
}
const ::common::v1::Peer&
InviteRequest::_Internal::from(const InviteRequest* msg) {
  return *msg->from_;
}
const ::common::v1::Peer&
InviteRequest::_Internal::to(const InviteRequest* msg) {
  return *msg->to_;
}
const ::common::v1::Metadata&
InviteRequest::_Internal::metadata(const InviteRequest* msg) {
  return *msg->metadata_;
}
void InviteRequest::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
void InviteRequest::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void InviteRequest::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
void InviteRequest::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
InviteRequest::InviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocols.exchange.v1.InviteRequest)
}
InviteRequest::InviteRequest(const InviteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new ::common::v1::Payload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  if (from._internal_has_from()) {
    from_ = new ::common::v1::Peer(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::common::v1::Peer(*from.to_);
  } else {
    to_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::common::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocols.exchange.v1.InviteRequest)
}

inline void InviteRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&payload_)) + sizeof(metadata_));
}

InviteRequest::~InviteRequest() {
  // @@protoc_insertion_point(destructor:protocols.exchange.v1.InviteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InviteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete payload_;
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
  if (this != internal_default_instance()) delete metadata_;
}

void InviteRequest::ArenaDtor(void* object) {
  InviteRequest* _this = reinterpret_cast< InviteRequest* >(object);
  (void)_this;
}
void InviteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InviteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InviteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.exchange.v1.InviteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InviteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Payload payload = 1 [json_name = "payload"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer from = 3 [json_name = "from"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer to = 4 [json_name = "to"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InviteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.exchange.v1.InviteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Payload payload = 1 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payload(this), target, stream);
  }

  // .common.v1.Peer from = 3 [json_name = "from"];
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::from(this), target, stream);
  }

  // .common.v1.Peer to = 4 [json_name = "to"];
  if (this->_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::to(this), target, stream);
  }

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.exchange.v1.InviteRequest)
  return target;
}

size_t InviteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.exchange.v1.InviteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.v1.Payload payload = 1 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // .common.v1.Peer from = 3 [json_name = "from"];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .common.v1.Peer to = 4 [json_name = "to"];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InviteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InviteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InviteRequest::GetClassData() const { return &_class_data_; }

void InviteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InviteRequest *>(to)->MergeFrom(
      static_cast<const InviteRequest &>(from));
}


void InviteRequest::MergeFrom(const InviteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocols.exchange.v1.InviteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payload()) {
    _internal_mutable_payload()->::common::v1::Payload::MergeFrom(from._internal_payload());
  }
  if (from._internal_has_from()) {
    _internal_mutable_from()->::common::v1::Peer::MergeFrom(from._internal_from());
  }
  if (from._internal_has_to()) {
    _internal_mutable_to()->::common::v1::Peer::MergeFrom(from._internal_to());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::common::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InviteRequest::CopyFrom(const InviteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.exchange.v1.InviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteRequest::IsInitialized() const {
  return true;
}

void InviteRequest::InternalSwap(InviteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InviteRequest, metadata_)
      + sizeof(InviteRequest::metadata_)
      - PROTOBUF_FIELD_OFFSET(InviteRequest, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InviteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_getter, &descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_once,
      file_level_metadata_protocols_2fexchange_2fv1_2fexchange_2eproto[1]);
}

// ===================================================================

class InviteResponse::_Internal {
 public:
  static const ::common::v1::Peer& from(const InviteResponse* msg);
  static const ::common::v1::Peer& to(const InviteResponse* msg);
  static const ::common::v1::Metadata& metadata(const InviteResponse* msg);
};

const ::common::v1::Peer&
InviteResponse::_Internal::from(const InviteResponse* msg) {
  return *msg->from_;
}
const ::common::v1::Peer&
InviteResponse::_Internal::to(const InviteResponse* msg) {
  return *msg->to_;
}
const ::common::v1::Metadata&
InviteResponse::_Internal::metadata(const InviteResponse* msg) {
  return *msg->metadata_;
}
void InviteResponse::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void InviteResponse::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
void InviteResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
InviteResponse::InviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocols.exchange.v1.InviteResponse)
}
InviteResponse::InviteResponse(const InviteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from()) {
    from_ = new ::common::v1::Peer(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::common::v1::Peer(*from.to_);
  } else {
    to_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::common::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  decision_ = from.decision_;
  // @@protoc_insertion_point(copy_constructor:protocols.exchange.v1.InviteResponse)
}

inline void InviteResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decision_) -
    reinterpret_cast<char*>(&from_)) + sizeof(decision_));
}

InviteResponse::~InviteResponse() {
  // @@protoc_insertion_point(destructor:protocols.exchange.v1.InviteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InviteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
  if (this != internal_default_instance()) delete metadata_;
}

void InviteResponse::ArenaDtor(void* object) {
  InviteResponse* _this = reinterpret_cast< InviteResponse* >(object);
  (void)_this;
}
void InviteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.exchange.v1.InviteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  decision_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InviteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool decision = 1 [json_name = "decision"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          decision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer from = 3 [json_name = "from"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer to = 4 [json_name = "to"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InviteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.exchange.v1.InviteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool decision = 1 [json_name = "decision"];
  if (this->_internal_decision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_decision(), target);
  }

  // .common.v1.Peer from = 3 [json_name = "from"];
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::from(this), target, stream);
  }

  // .common.v1.Peer to = 4 [json_name = "to"];
  if (this->_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::to(this), target, stream);
  }

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.exchange.v1.InviteResponse)
  return target;
}

size_t InviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.exchange.v1.InviteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.v1.Peer from = 3 [json_name = "from"];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .common.v1.Peer to = 4 [json_name = "to"];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // bool decision = 1 [json_name = "decision"];
  if (this->_internal_decision() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InviteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InviteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InviteResponse::GetClassData() const { return &_class_data_; }

void InviteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InviteResponse *>(to)->MergeFrom(
      static_cast<const InviteResponse &>(from));
}


void InviteResponse::MergeFrom(const InviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocols.exchange.v1.InviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_from()) {
    _internal_mutable_from()->::common::v1::Peer::MergeFrom(from._internal_from());
  }
  if (from._internal_has_to()) {
    _internal_mutable_to()->::common::v1::Peer::MergeFrom(from._internal_to());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::common::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from._internal_decision() != 0) {
    _internal_set_decision(from._internal_decision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InviteResponse::CopyFrom(const InviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.exchange.v1.InviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteResponse::IsInitialized() const {
  return true;
}

void InviteResponse::InternalSwap(InviteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InviteResponse, decision_)
      + sizeof(InviteResponse::decision_)
      - PROTOBUF_FIELD_OFFSET(InviteResponse, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InviteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_getter, &descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto_once,
      file_level_metadata_protocols_2fexchange_2fv1_2fexchange_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace exchange
}  // namespace protocols
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocols::exchange::v1::MailboxMessage* Arena::CreateMaybeMessage< ::protocols::exchange::v1::MailboxMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::exchange::v1::MailboxMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::exchange::v1::InviteRequest* Arena::CreateMaybeMessage< ::protocols::exchange::v1::InviteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::exchange::v1::InviteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::exchange::v1::InviteResponse* Arena::CreateMaybeMessage< ::protocols::exchange::v1::InviteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::exchange::v1::InviteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
