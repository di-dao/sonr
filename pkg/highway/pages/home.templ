package pages

import ui "github.com/sonrhq/sonr/pkg/highway/components"

templ HomePage() {
	@ui.RootLayout() {
		<section class="w-full antialiased">
			<div class="mx-auto max-w-7xl max-h-screen no-scrollbar">
				@hero()
			</div>
		</section>
	}
}

templ hero() {
	<div class="container w-full h-full flex flex-col justify-center items-center">
		<div class="mx-auto items-center justify-between">
			@card()
		</div>
	</div>
}

templ features() {
	<div></div>
}

templ about() {
	<div></div>
}

templ faq() {
	<div></div>
}

templ cta() {
	<div></div>
}

templ card() {
  <div class="w-full h-full">
	<sl-card class="card-overview container px-4 py-6">
		<div class="flex flex-col w-full justify-center items-center space-y-2 gap-1 py-5 mx-auto text-center max-w-[25vw]">
			<div class="w-28 h-28 rounded-full bg-gradient-to-t from-teal-500 via-cyan-600 to-blue-700 border-2 border-stone-400/90 mt-3"></div>
			<sl-divider style="--spacing: 0.6rem;"></sl-divider>
			<h1 class="text-3xl font-semibold">Register</h1>
			<p class="text-stone-500 text-md">
				Start your blockchain journey by creating a Sonr identity to protect your account.
			</p>
		</div>
		<sl-divider class="bg-stone-500" style="--spacing: 1rem;"></sl-divider>
		<div class="max-w-[28vw] mx-auto">
			<form class="inline-validation justify-center items-center align-middle pb-2.5">
				<sl-input
					name="email"
					placeholder="sjobs@apple.com"
					size="large"
					autocomplete="username webauthn"
					pill
					required
				>
					<sl-icon class="text-stone-200" slot="prefix" name="envelope"></sl-icon>
					<sl-icon-button class="text-sky-400" name="lock" label="Create Credential" slot="suffix"></sl-icon-button>
				</sl-input>
				<div id="name-error" aria-live="polite" hidden></div>
			</form>
			<sl-divider class="bg-stone-500" style="--spacing: 0.2rem;"></sl-divider>
		</div>
		<script type="module">
  const form = document.querySelector('.inline-validation');
  const nameError = document.querySelector('#name-error');

  // Wait for controls to be defined before attaching form listeners
  await Promise.all([
    customElements.whenDefined('sl-button'),
    customElements.whenDefined('sl-input')
  ]).then(() => {
    // A form control is invalid
    form.addEventListener(
      'sl-invalid',
      event => {
        // Suppress the browser's constraint validation message
        event.preventDefault();

        nameError.textContent = `Error: ${event.target.validationMessage}`;
        nameError.hidden = false;

        event.target.focus();
      },
      { capture: true } // you must use capture since sl-invalid doesn't bubble!
    );

    // Handle form submit
    form.addEventListener('submit', event => {
      event.preventDefault();
      nameError.hidden = true;
      nameError.textContent = '';
      setTimeout(() => alert('All fields are valid'), 50);
    });

    // Handle form reset
    form.addEventListener('reset', event => {
      nameError.hidden = true;
      nameError.textContent = '';
    });
  });
</script>
		<style>
  #name-error {
    font-size: var(--sl-input-help-text-font-size-medium);
    color: var(--sl-color-danger-700);
  }

  #name-error ~ sl-button {
    margin-top: var(--sl-spacing-medium);
  }

  .inline-validation sl-input {
    display: block;
  }

  /* user invalid styles */
  .inline-validation sl-input[data-user-invalid]::part(base) {
    border-color: var(--sl-color-danger-600);
  }

  .inline-validation [data-user-invalid]::part(form-control-label),
  .inline-validation [data-user-invalid]::part(form-control-help-text) {
    color: var(--sl-color-danger-700);
  }

  .inline-validation sl-input:focus-within[data-user-invalid]::part(base) {
    border-color: var(--sl-color-danger-600);
    box-shadow: 0 0 0 var(--sl-focus-ring-width) var(--sl-color-danger-300);
  }

  /* User valid styles */
  .inline-validation sl-input[data-user-valid]::part(base) {
    border-color: var(--sl-color-success-600);
  }

  .inline-validation [data-user-valid]::part(form-control-label),
  .inline-validation [data-user-valid]::part(form-control-help-text) {
	paddingLeft: 0.5rem;
    color: var(--sl-color-success-700);
  }

  .inline-validation sl-input:focus-within[data-user-valid]::part(base) {
    border-color: var(--sl-color-success-600);
    box-shadow: 0 0 0 var(--sl-focus-ring-width) var(--sl-color-success-300);
  }
</style>
		<div slot="footer" class="justify-between items-center w-full max-w-[12vw] mx-auto opacity-75 py-1.5">
			<sl-tooltip content="Need Help?" placement="bottom">
				<sl-icon-button name="life-preserver" label="Settings"></sl-icon-button>
			</sl-tooltip>
			<sl-tooltip content="Documentation" placement="bottom">
				<sl-icon-button name="book-half" label="Settings"></sl-icon-button>
			</sl-tooltip>
			<sl-tooltip content="Start Recovery" placement="bottom">
				<sl-icon-button name="tools" label="Settings"></sl-icon-button>
			</sl-tooltip>
		</div>
	</sl-card>
  <div class="mt-4 text-xl mx-auto">
    <p class="text-stone-500 text-md">
      Secured by Sonr.
      </a>
  </div>
	<style>
  .card-overview {
    min-width: 24vw;
	min-height: 56vh;
	max-width: 36vw;
	max-height: 72vh;
  }

  .card-overview small {
    color: var(--sl-color-neutral-700);
  }

  .card-overview [slot='footer'] {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
</style>
  </div>
}
