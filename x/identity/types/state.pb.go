// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: identity/v1/state.proto

package types

import (
	_ "cosmossdk.io/orm"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	v1 "github.com/didao-org/sonr/api/common/v1"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BlockchainAccount is the root sonr account table which contains all sub-identities.
type BlockchainAccount struct {
	Sequence   uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Controller string `protobuf:"bytes,2,opt,name=controller,proto3" json:"controller,omitempty"`
	PublicKey  []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Network    string `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Address    string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	ChainId    string `protobuf:"bytes,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *BlockchainAccount) Reset()         { *m = BlockchainAccount{} }
func (m *BlockchainAccount) String() string { return proto.CompactTextString(m) }
func (*BlockchainAccount) ProtoMessage()    {}
func (*BlockchainAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cb822574b76328, []int{0}
}
func (m *BlockchainAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockchainAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockchainAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockchainAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockchainAccount.Merge(m, src)
}
func (m *BlockchainAccount) XXX_Size() int {
	return m.Size()
}
func (m *BlockchainAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockchainAccount.DiscardUnknown(m)
}

var xxx_messageInfo_BlockchainAccount proto.InternalMessageInfo

func (m *BlockchainAccount) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *BlockchainAccount) GetController() string {
	if m != nil {
		return m.Controller
	}
	return ""
}

func (m *BlockchainAccount) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *BlockchainAccount) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BlockchainAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BlockchainAccount) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// IdentityController is the root sonr controller table which contains all sub-identities.
type IdentityController struct {
	Sequence       uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	PeerId         string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Address        string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	PublicKey      []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Ipns           string `protobuf:"bytes,5,opt,name=ipns,proto3" json:"ipns,omitempty"`
	AccumulatorKey []byte `protobuf:"bytes,6,opt,name=accumulator_key,json=accumulatorKey,proto3" json:"accumulator_key,omitempty"`
	Network        string `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	ChainId        string `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *IdentityController) Reset()         { *m = IdentityController{} }
func (m *IdentityController) String() string { return proto.CompactTextString(m) }
func (*IdentityController) ProtoMessage()    {}
func (*IdentityController) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cb822574b76328, []int{1}
}
func (m *IdentityController) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentityController) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentityController.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdentityController) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityController.Merge(m, src)
}
func (m *IdentityController) XXX_Size() int {
	return m.Size()
}
func (m *IdentityController) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityController.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityController proto.InternalMessageInfo

func (m *IdentityController) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *IdentityController) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *IdentityController) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IdentityController) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *IdentityController) GetIpns() string {
	if m != nil {
		return m.Ipns
	}
	return ""
}

func (m *IdentityController) GetAccumulatorKey() []byte {
	if m != nil {
		return m.AccumulatorKey
	}
	return nil
}

func (m *IdentityController) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *IdentityController) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// TokenBalance is the root sonr token balance table which contains all sub-identities.
type TokenBalance struct {
	Address    string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount     uint64       `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom      string       `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Kind       v1.TokenKind `protobuf:"varint,4,opt,name=kind,proto3,enum=common.v1.TokenKind" json:"kind,omitempty"`
	Blockchain string       `protobuf:"bytes,5,opt,name=blockchain,proto3" json:"blockchain,omitempty"`
	ChainId    string       `protobuf:"bytes,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *TokenBalance) Reset()         { *m = TokenBalance{} }
func (m *TokenBalance) String() string { return proto.CompactTextString(m) }
func (*TokenBalance) ProtoMessage()    {}
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cb822574b76328, []int{2}
}
func (m *TokenBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenBalance.Merge(m, src)
}
func (m *TokenBalance) XXX_Size() int {
	return m.Size()
}
func (m *TokenBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenBalance.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBalance proto.InternalMessageInfo

func (m *TokenBalance) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TokenBalance) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TokenBalance) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TokenBalance) GetKind() v1.TokenKind {
	if m != nil {
		return m.Kind
	}
	return v1.TokenKind_TOKEN_KIND_UNSPECIFIED
}

func (m *TokenBalance) GetBlockchain() string {
	if m != nil {
		return m.Blockchain
	}
	return ""
}

func (m *TokenBalance) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// UserIdentifier is the root sonr user identifier table which contains all sub-identities.
type UserIdentifier struct {
	Sequence  uint64            `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	HashValue string            `protobuf:"bytes,2,opt,name=hash_value,json=hashValue,proto3" json:"hash_value,omitempty"`
	ZkWitness string            `protobuf:"bytes,3,opt,name=zk_witness,json=zkWitness,proto3" json:"zk_witness,omitempty"`
	Kind      v1.IdentifierKind `protobuf:"varint,4,opt,name=kind,proto3,enum=common.v1.IdentifierKind" json:"kind,omitempty"`
}

func (m *UserIdentifier) Reset()         { *m = UserIdentifier{} }
func (m *UserIdentifier) String() string { return proto.CompactTextString(m) }
func (*UserIdentifier) ProtoMessage()    {}
func (*UserIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6cb822574b76328, []int{3}
}
func (m *UserIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIdentifier.Merge(m, src)
}
func (m *UserIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *UserIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_UserIdentifier proto.InternalMessageInfo

func (m *UserIdentifier) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *UserIdentifier) GetHashValue() string {
	if m != nil {
		return m.HashValue
	}
	return ""
}

func (m *UserIdentifier) GetZkWitness() string {
	if m != nil {
		return m.ZkWitness
	}
	return ""
}

func (m *UserIdentifier) GetKind() v1.IdentifierKind {
	if m != nil {
		return m.Kind
	}
	return v1.IdentifierKind_IDENTIFIER_KIND_UNSPECIFIED
}

func init() {
	proto.RegisterType((*BlockchainAccount)(nil), "identity.v1.BlockchainAccount")
	proto.RegisterType((*IdentityController)(nil), "identity.v1.IdentityController")
	proto.RegisterType((*TokenBalance)(nil), "identity.v1.TokenBalance")
	proto.RegisterType((*UserIdentifier)(nil), "identity.v1.UserIdentifier")
}

func init() { proto.RegisterFile("identity/v1/state.proto", fileDescriptor_f6cb822574b76328) }

var fileDescriptor_f6cb822574b76328 = []byte{
	// 594 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0x3b, 0xa9, 0xeb, 0x34, 0xf3, 0xb5, 0xfd, 0xcc, 0x50, 0xda, 0x69, 0xa4, 0x5a, 0x51,
	0x36, 0x44, 0x48, 0x8d, 0x15, 0x58, 0x20, 0x75, 0x47, 0x60, 0x13, 0x95, 0x95, 0xc5, 0x1f, 0x89,
	0x4d, 0x34, 0xb1, 0x87, 0x66, 0x64, 0x7b, 0x26, 0x78, 0xc6, 0x29, 0xe9, 0x43, 0x20, 0x9e, 0x80,
	0x77, 0xe0, 0x2d, 0xba, 0x8c, 0xc4, 0x86, 0x25, 0x4a, 0xde, 0x80, 0x05, 0x6b, 0x34, 0x63, 0x37,
	0xb6, 0x59, 0x50, 0xb1, 0xf3, 0x3d, 0x77, 0xae, 0x7d, 0xee, 0xcf, 0x47, 0x03, 0x8f, 0x59, 0x48,
	0xb9, 0x62, 0x6a, 0xe1, 0xcd, 0x07, 0x9e, 0x54, 0x44, 0xd1, 0xfe, 0x2c, 0x15, 0x4a, 0xa0, 0xff,
	0x6e, 0x1b, 0xfd, 0xf9, 0xa0, 0x7d, 0x1c, 0x08, 0x99, 0x08, 0xe9, 0x89, 0x34, 0xd1, 0xe7, 0x44,
	0x9a, 0xe4, 0xa7, 0xda, 0x87, 0x81, 0x48, 0x12, 0xc1, 0xb5, 0x38, 0x21, 0xb2, 0x98, 0x6d, 0x3f,
	0x28, 0x55, 0xca, 0xb3, 0x44, 0xe6, 0x72, 0xf7, 0x17, 0x80, 0xf7, 0x86, 0xb1, 0x08, 0xa2, 0x60,
	0x4a, 0x18, 0x7f, 0x16, 0x04, 0x22, 0xe3, 0x0a, 0xb5, 0xe1, 0xae, 0xa4, 0x1f, 0x32, 0xca, 0x03,
	0x8a, 0x41, 0x07, 0xf4, 0x2c, 0x7f, 0x53, 0x23, 0x17, 0xc2, 0x40, 0x70, 0x95, 0x8a, 0x38, 0xa6,
	0x29, 0x6e, 0x74, 0x40, 0xaf, 0xe5, 0x57, 0x14, 0x74, 0x0a, 0xe1, 0x2c, 0x9b, 0xc4, 0x2c, 0x18,
	0x47, 0x74, 0x81, 0xad, 0x0e, 0xe8, 0xed, 0xf9, 0xad, 0x5c, 0xb9, 0xa0, 0x0b, 0x84, 0x61, 0x93,
	0x53, 0x75, 0x25, 0xd2, 0x08, 0xef, 0x98, 0xd9, 0xdb, 0x52, 0x77, 0x48, 0x18, 0xa6, 0x54, 0x4a,
	0x6c, 0xe7, 0x9d, 0xa2, 0x44, 0x27, 0x70, 0xd7, 0xd8, 0x1b, 0xb3, 0x10, 0x37, 0xf3, 0x96, 0xa9,
	0x47, 0xe1, 0xf9, 0xd3, 0x9f, 0x5f, 0xbe, 0x7d, 0xda, 0x1e, 0xc0, 0xbd, 0xd2, 0xb1, 0x03, 0xd0,
	0xfe, 0xe6, 0x55, 0x0e, 0xc0, 0x00, 0x39, 0x55, 0x4b, 0x4e, 0x03, 0x03, 0x0c, 0xba, 0x37, 0x0d,
	0x88, 0x46, 0x05, 0xce, 0xe7, 0xa5, 0xfb, 0xbf, 0x6d, 0x7e, 0x0c, 0x9b, 0x33, 0x4a, 0x53, 0xed,
	0x22, 0x5f, 0xdb, 0xd6, 0xe5, 0x28, 0xac, 0x3a, 0xdf, 0xae, 0x3b, 0xbf, 0x03, 0x06, 0x82, 0x16,
	0x9b, 0x71, 0x59, 0x90, 0x30, 0xcf, 0xe8, 0x21, 0xfc, 0x9f, 0x04, 0x41, 0x96, 0x64, 0x31, 0x51,
	0x22, 0x35, 0x73, 0xb6, 0x99, 0x3b, 0xa8, 0xc8, 0x7f, 0x90, 0x6c, 0xd6, 0x49, 0x56, 0x79, 0xed,
	0xd6, 0x79, 0xf9, 0x86, 0xd7, 0xcb, 0x7f, 0xe4, 0xa5, 0x0f, 0x14, 0xab, 0x3b, 0xdb, 0x18, 0x20,
	0x98, 0xfb, 0x76, 0x2c, 0x0c, 0x70, 0xa3, 0xbb, 0x04, 0x70, 0xef, 0x95, 0x88, 0x28, 0x1f, 0x92,
	0x98, 0x68, 0x50, 0x15, 0x1e, 0xa0, 0xce, 0xe3, 0x08, 0xda, 0x24, 0xd1, 0x11, 0x33, 0x04, 0x2d,
	0xbf, 0xa8, 0xd0, 0x21, 0xdc, 0x09, 0x29, 0x17, 0x49, 0xc1, 0x2f, 0x2f, 0x50, 0x0f, 0x5a, 0x11,
	0xe3, 0xa1, 0xe1, 0x76, 0xf0, 0xf8, 0xb0, 0x9f, 0x47, 0xb8, 0x3f, 0x1f, 0xf4, 0xcd, 0xe7, 0x2e,
	0x18, 0x0f, 0x7d, 0x73, 0x42, 0x87, 0x72, 0xb2, 0x49, 0x71, 0x81, 0xb3, 0xa2, 0xd4, 0x88, 0xd8,
	0x75, 0x22, 0xf7, 0x0d, 0x91, 0x7d, 0xd8, 0x2a, 0x4d, 0x5b, 0xdd, 0xaf, 0x00, 0x1e, 0xbc, 0x96,
	0xfa, 0xe7, 0xea, 0x84, 0xbc, 0x67, 0x77, 0x24, 0xe3, 0x14, 0xc2, 0x29, 0x91, 0xd3, 0xf1, 0x9c,
	0xc4, 0x19, 0x2d, 0xc2, 0xd1, 0xd2, 0xca, 0x1b, 0x2d, 0xe8, 0xf6, 0x75, 0x34, 0xbe, 0x62, 0x8a,
	0x97, 0x11, 0x69, 0x5d, 0x47, 0x6f, 0x73, 0x01, 0x9d, 0xd5, 0xd6, 0x3c, 0xa9, 0xac, 0x59, 0x7e,
	0xbe, 0xdc, 0xf5, 0xfc, 0xc8, 0x18, 0x76, 0xea, 0xbf, 0x10, 0x5b, 0xc3, 0x17, 0x37, 0x2b, 0x17,
	0x2c, 0x57, 0x2e, 0xf8, 0xb1, 0x72, 0xc1, 0xe7, 0xb5, 0xbb, 0xb5, 0x5c, 0xbb, 0x5b, 0xdf, 0xd7,
	0xee, 0xd6, 0xbb, 0x47, 0x97, 0x4c, 0x4d, 0xb3, 0x89, 0x7e, 0xb1, 0x17, 0xb2, 0x90, 0x88, 0x33,
	0x91, 0x5e, 0x7a, 0x52, 0xf0, 0xd4, 0xfb, 0xe8, 0x6d, 0x2e, 0x1b, 0xb5, 0x98, 0x51, 0x39, 0xb1,
	0xcd, 0xbd, 0xf0, 0xe4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xc2, 0x9e, 0x05, 0x85, 0x04,
	0x00, 0x00,
}

func (m *BlockchainAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockchainAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockchainAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintState(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintState(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintState(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintState(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sequence != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IdentityController) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityController) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityController) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintState(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintState(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AccumulatorKey) > 0 {
		i -= len(m.AccumulatorKey)
		copy(dAtA[i:], m.AccumulatorKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.AccumulatorKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Ipns) > 0 {
		i -= len(m.Ipns)
		copy(dAtA[i:], m.Ipns)
		i = encodeVarintState(dAtA, i, uint64(len(m.Ipns)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintState(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintState(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sequence != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintState(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Blockchain) > 0 {
		i -= len(m.Blockchain)
		copy(dAtA[i:], m.Blockchain)
		i = encodeVarintState(dAtA, i, uint64(len(m.Blockchain)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Kind != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintState(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintState(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ZkWitness) > 0 {
		i -= len(m.ZkWitness)
		copy(dAtA[i:], m.ZkWitness)
		i = encodeVarintState(dAtA, i, uint64(len(m.ZkWitness)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HashValue) > 0 {
		i -= len(m.HashValue)
		copy(dAtA[i:], m.HashValue)
		i = encodeVarintState(dAtA, i, uint64(len(m.HashValue)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sequence != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockchainAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovState(uint64(m.Sequence))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *IdentityController) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovState(uint64(m.Sequence))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Ipns)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.AccumulatorKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *TokenBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovState(uint64(m.Amount))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovState(uint64(m.Kind))
	}
	l = len(m.Blockchain)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *UserIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovState(uint64(m.Sequence))
	}
	l = len(m.HashValue)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.ZkWitness)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovState(uint64(m.Kind))
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockchainAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockchainAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockchainAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentityController) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityController: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityController: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatorKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatorKey = append(m.AccumulatorKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AccumulatorKey == nil {
				m.AccumulatorKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= v1.TokenKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockchain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockchain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkWitness", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZkWitness = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= v1.IdentifierKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
