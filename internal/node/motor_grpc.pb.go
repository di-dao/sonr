// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package node

import (
	context "context"
	api "github.com/sonr-io/core/internal/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MotorServiceClient is the client API for MotorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MotorServiceClient interface {
	// Node Methods
	// Signing Method Request for Data
	Supply(ctx context.Context, in *api.SupplyRequest, opts ...grpc.CallOption) (*api.SupplyResponse, error)
	// Verification Method Request for Signed Data
	Edit(ctx context.Context, in *api.EditRequest, opts ...grpc.CallOption) (*api.EditResponse, error)
	// Fetch method finds data from Key/Value store
	Fetch(ctx context.Context, in *api.FetchRequest, opts ...grpc.CallOption) (*api.FetchResponse, error)
	// Respond Method to an Invite with Decision
	Share(ctx context.Context, in *api.ShareRequest, opts ...grpc.CallOption) (*api.ShareResponse, error)
	// Respond Method to an Invite with Decision
	Respond(ctx context.Context, in *api.RespondRequest, opts ...grpc.CallOption) (*api.RespondResponse, error)
	// Search Method to find a Peer by SName or PeerID
	Search(ctx context.Context, in *api.SearchRequest, opts ...grpc.CallOption) (*api.SearchResponse, error)
	// Events Streams
	// Returns a stream of Lobby Refresh Events
	OnLobbyRefresh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnLobbyRefreshClient, error)
	// Returns a stream of Mailbox Message Events
	OnMailboxMessage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnMailboxMessageClient, error)
	// Returns a stream of DecisionEvent's for Accepted Invites
	OnTransmitAccepted(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnTransmitAcceptedClient, error)
	// Returns a stream of DecisionEvent's for Rejected Invites
	OnTransmitDeclined(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnTransmitDeclinedClient, error)
	// Returns a stream of DecisionEvent's for Invites
	OnTransmitInvite(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnTransmitInviteClient, error)
	// Returns a stream of ProgressEvent's for Sessions
	OnTransmitProgress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnTransmitProgressClient, error)
	// Returns a stream of Completed Transfers
	OnTransmitComplete(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnTransmitCompleteClient, error)
}

type motorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMotorServiceClient(cc grpc.ClientConnInterface) MotorServiceClient {
	return &motorServiceClient{cc}
}

func (c *motorServiceClient) Supply(ctx context.Context, in *api.SupplyRequest, opts ...grpc.CallOption) (*api.SupplyResponse, error) {
	out := new(api.SupplyResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.MotorService/Supply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Edit(ctx context.Context, in *api.EditRequest, opts ...grpc.CallOption) (*api.EditResponse, error) {
	out := new(api.EditResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.MotorService/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Fetch(ctx context.Context, in *api.FetchRequest, opts ...grpc.CallOption) (*api.FetchResponse, error) {
	out := new(api.FetchResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.MotorService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Share(ctx context.Context, in *api.ShareRequest, opts ...grpc.CallOption) (*api.ShareResponse, error) {
	out := new(api.ShareResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.MotorService/Share", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Respond(ctx context.Context, in *api.RespondRequest, opts ...grpc.CallOption) (*api.RespondResponse, error) {
	out := new(api.RespondResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.MotorService/Respond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Search(ctx context.Context, in *api.SearchRequest, opts ...grpc.CallOption) (*api.SearchResponse, error) {
	out := new(api.SearchResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.MotorService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) OnLobbyRefresh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnLobbyRefreshClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[0], "/sonr.node.MotorService/OnLobbyRefresh", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnLobbyRefreshClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnLobbyRefreshClient interface {
	Recv() (*api.RefreshEvent, error)
	grpc.ClientStream
}

type motorServiceOnLobbyRefreshClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnLobbyRefreshClient) Recv() (*api.RefreshEvent, error) {
	m := new(api.RefreshEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnMailboxMessage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnMailboxMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[1], "/sonr.node.MotorService/OnMailboxMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnMailboxMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnMailboxMessageClient interface {
	Recv() (*api.MailboxEvent, error)
	grpc.ClientStream
}

type motorServiceOnMailboxMessageClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnMailboxMessageClient) Recv() (*api.MailboxEvent, error) {
	m := new(api.MailboxEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnTransmitAccepted(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnTransmitAcceptedClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[2], "/sonr.node.MotorService/OnTransmitAccepted", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnTransmitAcceptedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnTransmitAcceptedClient interface {
	Recv() (*api.DecisionEvent, error)
	grpc.ClientStream
}

type motorServiceOnTransmitAcceptedClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnTransmitAcceptedClient) Recv() (*api.DecisionEvent, error) {
	m := new(api.DecisionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnTransmitDeclined(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnTransmitDeclinedClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[3], "/sonr.node.MotorService/OnTransmitDeclined", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnTransmitDeclinedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnTransmitDeclinedClient interface {
	Recv() (*api.DecisionEvent, error)
	grpc.ClientStream
}

type motorServiceOnTransmitDeclinedClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnTransmitDeclinedClient) Recv() (*api.DecisionEvent, error) {
	m := new(api.DecisionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnTransmitInvite(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnTransmitInviteClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[4], "/sonr.node.MotorService/OnTransmitInvite", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnTransmitInviteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnTransmitInviteClient interface {
	Recv() (*api.InviteEvent, error)
	grpc.ClientStream
}

type motorServiceOnTransmitInviteClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnTransmitInviteClient) Recv() (*api.InviteEvent, error) {
	m := new(api.InviteEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnTransmitProgress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnTransmitProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[5], "/sonr.node.MotorService/OnTransmitProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnTransmitProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnTransmitProgressClient interface {
	Recv() (*api.ProgressEvent, error)
	grpc.ClientStream
}

type motorServiceOnTransmitProgressClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnTransmitProgressClient) Recv() (*api.ProgressEvent, error) {
	m := new(api.ProgressEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorServiceClient) OnTransmitComplete(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MotorService_OnTransmitCompleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorService_ServiceDesc.Streams[6], "/sonr.node.MotorService/OnTransmitComplete", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorServiceOnTransmitCompleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotorService_OnTransmitCompleteClient interface {
	Recv() (*api.CompleteEvent, error)
	grpc.ClientStream
}

type motorServiceOnTransmitCompleteClient struct {
	grpc.ClientStream
}

func (x *motorServiceOnTransmitCompleteClient) Recv() (*api.CompleteEvent, error) {
	m := new(api.CompleteEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MotorServiceServer is the server API for MotorService service.
// All implementations must embed UnimplementedMotorServiceServer
// for forward compatibility
type MotorServiceServer interface {
	// Node Methods
	// Signing Method Request for Data
	Supply(context.Context, *api.SupplyRequest) (*api.SupplyResponse, error)
	// Verification Method Request for Signed Data
	Edit(context.Context, *api.EditRequest) (*api.EditResponse, error)
	// Fetch method finds data from Key/Value store
	Fetch(context.Context, *api.FetchRequest) (*api.FetchResponse, error)
	// Respond Method to an Invite with Decision
	Share(context.Context, *api.ShareRequest) (*api.ShareResponse, error)
	// Respond Method to an Invite with Decision
	Respond(context.Context, *api.RespondRequest) (*api.RespondResponse, error)
	// Search Method to find a Peer by SName or PeerID
	Search(context.Context, *api.SearchRequest) (*api.SearchResponse, error)
	// Events Streams
	// Returns a stream of Lobby Refresh Events
	OnLobbyRefresh(*Empty, MotorService_OnLobbyRefreshServer) error
	// Returns a stream of Mailbox Message Events
	OnMailboxMessage(*Empty, MotorService_OnMailboxMessageServer) error
	// Returns a stream of DecisionEvent's for Accepted Invites
	OnTransmitAccepted(*Empty, MotorService_OnTransmitAcceptedServer) error
	// Returns a stream of DecisionEvent's for Rejected Invites
	OnTransmitDeclined(*Empty, MotorService_OnTransmitDeclinedServer) error
	// Returns a stream of DecisionEvent's for Invites
	OnTransmitInvite(*Empty, MotorService_OnTransmitInviteServer) error
	// Returns a stream of ProgressEvent's for Sessions
	OnTransmitProgress(*Empty, MotorService_OnTransmitProgressServer) error
	// Returns a stream of Completed Transfers
	OnTransmitComplete(*Empty, MotorService_OnTransmitCompleteServer) error
	mustEmbedUnimplementedMotorServiceServer()
}

// UnimplementedMotorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMotorServiceServer struct {
}

func (UnimplementedMotorServiceServer) Supply(context.Context, *api.SupplyRequest) (*api.SupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Supply not implemented")
}
func (UnimplementedMotorServiceServer) Edit(context.Context, *api.EditRequest) (*api.EditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedMotorServiceServer) Fetch(context.Context, *api.FetchRequest) (*api.FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedMotorServiceServer) Share(context.Context, *api.ShareRequest) (*api.ShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Share not implemented")
}
func (UnimplementedMotorServiceServer) Respond(context.Context, *api.RespondRequest) (*api.RespondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Respond not implemented")
}
func (UnimplementedMotorServiceServer) Search(context.Context, *api.SearchRequest) (*api.SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMotorServiceServer) OnLobbyRefresh(*Empty, MotorService_OnLobbyRefreshServer) error {
	return status.Errorf(codes.Unimplemented, "method OnLobbyRefresh not implemented")
}
func (UnimplementedMotorServiceServer) OnMailboxMessage(*Empty, MotorService_OnMailboxMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method OnMailboxMessage not implemented")
}
func (UnimplementedMotorServiceServer) OnTransmitAccepted(*Empty, MotorService_OnTransmitAcceptedServer) error {
	return status.Errorf(codes.Unimplemented, "method OnTransmitAccepted not implemented")
}
func (UnimplementedMotorServiceServer) OnTransmitDeclined(*Empty, MotorService_OnTransmitDeclinedServer) error {
	return status.Errorf(codes.Unimplemented, "method OnTransmitDeclined not implemented")
}
func (UnimplementedMotorServiceServer) OnTransmitInvite(*Empty, MotorService_OnTransmitInviteServer) error {
	return status.Errorf(codes.Unimplemented, "method OnTransmitInvite not implemented")
}
func (UnimplementedMotorServiceServer) OnTransmitProgress(*Empty, MotorService_OnTransmitProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method OnTransmitProgress not implemented")
}
func (UnimplementedMotorServiceServer) OnTransmitComplete(*Empty, MotorService_OnTransmitCompleteServer) error {
	return status.Errorf(codes.Unimplemented, "method OnTransmitComplete not implemented")
}
func (UnimplementedMotorServiceServer) mustEmbedUnimplementedMotorServiceServer() {}

// UnsafeMotorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MotorServiceServer will
// result in compilation errors.
type UnsafeMotorServiceServer interface {
	mustEmbedUnimplementedMotorServiceServer()
}

func RegisterMotorServiceServer(s grpc.ServiceRegistrar, srv MotorServiceServer) {
	s.RegisterService(&MotorService_ServiceDesc, srv)
}

func _MotorService_Supply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.SupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Supply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.MotorService/Supply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Supply(ctx, req.(*api.SupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.MotorService/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Edit(ctx, req.(*api.EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.MotorService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Fetch(ctx, req.(*api.FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Share_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Share(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.MotorService/Share",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Share(ctx, req.(*api.ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Respond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RespondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Respond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.MotorService/Respond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Respond(ctx, req.(*api.RespondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.MotorService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Search(ctx, req.(*api.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_OnLobbyRefresh_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnLobbyRefresh(m, &motorServiceOnLobbyRefreshServer{stream})
}

type MotorService_OnLobbyRefreshServer interface {
	Send(*api.RefreshEvent) error
	grpc.ServerStream
}

type motorServiceOnLobbyRefreshServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnLobbyRefreshServer) Send(m *api.RefreshEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnMailboxMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnMailboxMessage(m, &motorServiceOnMailboxMessageServer{stream})
}

type MotorService_OnMailboxMessageServer interface {
	Send(*api.MailboxEvent) error
	grpc.ServerStream
}

type motorServiceOnMailboxMessageServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnMailboxMessageServer) Send(m *api.MailboxEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnTransmitAccepted_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnTransmitAccepted(m, &motorServiceOnTransmitAcceptedServer{stream})
}

type MotorService_OnTransmitAcceptedServer interface {
	Send(*api.DecisionEvent) error
	grpc.ServerStream
}

type motorServiceOnTransmitAcceptedServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnTransmitAcceptedServer) Send(m *api.DecisionEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnTransmitDeclined_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnTransmitDeclined(m, &motorServiceOnTransmitDeclinedServer{stream})
}

type MotorService_OnTransmitDeclinedServer interface {
	Send(*api.DecisionEvent) error
	grpc.ServerStream
}

type motorServiceOnTransmitDeclinedServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnTransmitDeclinedServer) Send(m *api.DecisionEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnTransmitInvite_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnTransmitInvite(m, &motorServiceOnTransmitInviteServer{stream})
}

type MotorService_OnTransmitInviteServer interface {
	Send(*api.InviteEvent) error
	grpc.ServerStream
}

type motorServiceOnTransmitInviteServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnTransmitInviteServer) Send(m *api.InviteEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnTransmitProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnTransmitProgress(m, &motorServiceOnTransmitProgressServer{stream})
}

type MotorService_OnTransmitProgressServer interface {
	Send(*api.ProgressEvent) error
	grpc.ServerStream
}

type motorServiceOnTransmitProgressServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnTransmitProgressServer) Send(m *api.ProgressEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MotorService_OnTransmitComplete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotorServiceServer).OnTransmitComplete(m, &motorServiceOnTransmitCompleteServer{stream})
}

type MotorService_OnTransmitCompleteServer interface {
	Send(*api.CompleteEvent) error
	grpc.ServerStream
}

type motorServiceOnTransmitCompleteServer struct {
	grpc.ServerStream
}

func (x *motorServiceOnTransmitCompleteServer) Send(m *api.CompleteEvent) error {
	return x.ServerStream.SendMsg(m)
}

// MotorService_ServiceDesc is the grpc.ServiceDesc for MotorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MotorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonr.node.MotorService",
	HandlerType: (*MotorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Supply",
			Handler:    _MotorService_Supply_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _MotorService_Edit_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _MotorService_Fetch_Handler,
		},
		{
			MethodName: "Share",
			Handler:    _MotorService_Share_Handler,
		},
		{
			MethodName: "Respond",
			Handler:    _MotorService_Respond_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MotorService_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnLobbyRefresh",
			Handler:       _MotorService_OnLobbyRefresh_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnMailboxMessage",
			Handler:       _MotorService_OnMailboxMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnTransmitAccepted",
			Handler:       _MotorService_OnTransmitAccepted_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnTransmitDeclined",
			Handler:       _MotorService_OnTransmitDeclined_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnTransmitInvite",
			Handler:       _MotorService_OnTransmitInvite_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnTransmitProgress",
			Handler:       _MotorService_OnTransmitProgress_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnTransmitComplete",
			Handler:       _MotorService_OnTransmitComplete_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/node/motor.proto",
}
