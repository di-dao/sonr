// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registry/who_is.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Type is the type of the registered name
type WhoIs_Type int32

const (
	// User is the type of the registered name
	WhoIs_User WhoIs_Type = 0
	// Application is the type of the registered name
	WhoIs_Application WhoIs_Type = 1
)

var WhoIs_Type_name = map[int32]string{
	0: "User",
	1: "Application",
}

var WhoIs_Type_value = map[string]int32{
	"User":        0,
	"Application": 1,
}

func (x WhoIs_Type) String() string {
	return proto.EnumName(WhoIs_Type_name, int32(x))
}

func (WhoIs_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9d9bdfc8d37d9424, []int{0, 0}
}

// WhoIs is the entry pointing a registered name to a user account address, Did Url string, and a DIDDocument.
type WhoIs struct {
	// Name is the registered name of the User or Application
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// DID is the DID of the account
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Document is the DID Document of the registered name and account encoded as JSON
	Document []byte `protobuf:"bytes,3,opt,name=document,proto3" json:"document,omitempty"`
	// Creator is the Account Address of the creator of the DID Document
	Creator string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	// Credentials are the biometric info of the registered name and account encoded with public key
	Credentials []*Credential `protobuf:"bytes,5,rep,name=credentials,proto3" json:"credentials,omitempty"`
	// Type is the type of the registered name
	Type WhoIs_Type `protobuf:"varint,6,opt,name=type,proto3,enum=sonrio.sonr.registry.WhoIs_Type" json:"type,omitempty"`
	// Additional Metadata for associated WhoIs
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Timestamp is the time of the last update of the DID Document
	Timestamp int64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// IsActive is the status of the DID Document
	IsActive bool `protobuf:"varint,9,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *WhoIs) Reset()         { *m = WhoIs{} }
func (m *WhoIs) String() string { return proto.CompactTextString(m) }
func (*WhoIs) ProtoMessage()    {}
func (*WhoIs) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d9bdfc8d37d9424, []int{0}
}
func (m *WhoIs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhoIs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhoIs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhoIs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoIs.Merge(m, src)
}
func (m *WhoIs) XXX_Size() int {
	return m.Size()
}
func (m *WhoIs) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoIs.DiscardUnknown(m)
}

var xxx_messageInfo_WhoIs proto.InternalMessageInfo

func (m *WhoIs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WhoIs) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *WhoIs) GetDocument() []byte {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *WhoIs) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *WhoIs) GetCredentials() []*Credential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *WhoIs) GetType() WhoIs_Type {
	if m != nil {
		return m.Type
	}
	return WhoIs_User
}

func (m *WhoIs) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *WhoIs) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *WhoIs) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

// Session is the metadata for current user or application
type Session struct {
	// Base DID is the current Account or Application whois DID url
	BaseDid string `protobuf:"bytes,1,opt,name=base_did,json=baseDid,proto3" json:"base_did,omitempty"`
	// WhoIs is the current Document for the DID
	Whois *WhoIs `protobuf:"bytes,2,opt,name=whois,proto3" json:"whois,omitempty"`
	// Credential is the current Credential for the DID
	Credential *Credential `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d9bdfc8d37d9424, []int{1}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetBaseDid() string {
	if m != nil {
		return m.BaseDid
	}
	return ""
}

func (m *Session) GetWhois() *WhoIs {
	if m != nil {
		return m.Whois
	}
	return nil
}

func (m *Session) GetCredential() *Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func init() {
	proto.RegisterEnum("sonrio.sonr.registry.WhoIs_Type", WhoIs_Type_name, WhoIs_Type_value)
	proto.RegisterType((*WhoIs)(nil), "sonrio.sonr.registry.WhoIs")
	proto.RegisterMapType((map[string]string)(nil), "sonrio.sonr.registry.WhoIs.MetadataEntry")
	proto.RegisterType((*Session)(nil), "sonrio.sonr.registry.Session")
}

func init() { proto.RegisterFile("registry/who_is.proto", fileDescriptor_9d9bdfc8d37d9424) }

var fileDescriptor_9d9bdfc8d37d9424 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0x36, 0x4e, 0xe3, 0x4c, 0xf8, 0x88, 0x56, 0x45, 0xda, 0xa6, 0xc8, 0x32, 0x39, 0x99,
	0x03, 0xb6, 0x28, 0x1c, 0x10, 0x5c, 0x68, 0xa1, 0x12, 0x1c, 0xb8, 0x18, 0x10, 0x12, 0x97, 0x68,
	0x63, 0xaf, 0xea, 0x51, 0x63, 0xaf, 0xb5, 0xbb, 0x69, 0xf1, 0xbf, 0xe0, 0xca, 0xaf, 0xe1, 0xca,
	0xb1, 0x47, 0x8e, 0x28, 0xf9, 0x23, 0x68, 0x37, 0xa9, 0x53, 0x24, 0xa8, 0x38, 0x79, 0xde, 0xea,
	0xbd, 0x19, 0xcf, 0x7b, 0x03, 0xf7, 0x94, 0x38, 0x45, 0x6d, 0x54, 0x93, 0x5c, 0x14, 0x72, 0x8a,
	0x3a, 0xae, 0x95, 0x34, 0x92, 0xee, 0x69, 0x59, 0x29, 0x94, 0xb1, 0xfd, 0xc4, 0x57, 0x94, 0xf1,
	0x7e, 0x4b, 0xce, 0x94, 0xc8, 0x45, 0x65, 0x90, 0xcf, 0xd7, 0x82, 0xc9, 0xf7, 0x2e, 0xf4, 0x3e,
	0x15, 0xf2, 0xad, 0xa6, 0x14, 0xbc, 0x8a, 0x97, 0x82, 0x91, 0x90, 0x44, 0x83, 0xd4, 0xd5, 0x74,
	0x04, 0xdd, 0x1c, 0x73, 0xb6, 0xe3, 0x9e, 0x6c, 0x49, 0xc7, 0xe0, 0xe7, 0x32, 0x5b, 0x94, 0xa2,
	0x32, 0xac, 0x1b, 0x92, 0xe8, 0x56, 0xda, 0x62, 0xca, 0xa0, 0x9f, 0x29, 0xc1, 0x8d, 0x54, 0xcc,
	0x73, 0x8a, 0x2b, 0x48, 0x8f, 0x61, 0xb8, 0x9d, 0xac, 0x59, 0x2f, 0xec, 0x46, 0xc3, 0xc3, 0x30,
	0xfe, 0xdb, 0xcf, 0xc6, 0xaf, 0x5a, 0x62, 0x7a, 0x5d, 0x44, 0x9f, 0x82, 0x67, 0x9a, 0x5a, 0xb0,
	0xdd, 0x90, 0x44, 0x77, 0xfe, 0x25, 0x76, 0xab, 0xc4, 0x1f, 0x9a, 0x5a, 0xa4, 0x8e, 0x4d, 0x4f,
	0xc0, 0x2f, 0x85, 0xe1, 0x39, 0x37, 0x9c, 0xf5, 0xdd, 0xd8, 0x87, 0x37, 0x29, 0xdf, 0x6d, 0xb8,
	0x27, 0x95, 0x51, 0x4d, 0xda, 0x4a, 0xe9, 0x7d, 0x18, 0x18, 0x2c, 0x85, 0x36, 0xbc, 0xac, 0x99,
	0x1f, 0x92, 0xa8, 0x9b, 0x6e, 0x1f, 0xe8, 0x01, 0x0c, 0x50, 0x4f, 0x79, 0x66, 0xf0, 0x5c, 0xb0,
	0x41, 0x48, 0x22, 0x3f, 0xf5, 0x51, 0x1f, 0x39, 0x3c, 0x7e, 0x01, 0xb7, 0xff, 0xe8, 0x6a, 0x4d,
	0x3d, 0x13, 0xcd, 0xc6, 0x67, 0x5b, 0xd2, 0x3d, 0xe8, 0x9d, 0xf3, 0xf9, 0x42, 0x6c, 0x8c, 0x5e,
	0x83, 0xe7, 0x3b, 0xcf, 0xc8, 0xe4, 0x01, 0x78, 0x76, 0x19, 0xea, 0x83, 0xf7, 0x51, 0x0b, 0x35,
	0xea, 0xd0, 0xbb, 0x30, 0x3c, 0xaa, 0xeb, 0x39, 0x66, 0xdc, 0xa0, 0xac, 0x46, 0x64, 0xf2, 0x8d,
	0x40, 0xff, 0xbd, 0xd0, 0x1a, 0x65, 0x45, 0xf7, 0xc1, 0x9f, 0x71, 0x2d, 0xa6, 0x36, 0xb4, 0x75,
	0xff, 0xbe, 0xc5, 0xaf, 0x31, 0xa7, 0x8f, 0xa1, 0x77, 0x51, 0x48, 0xd4, 0x6e, 0xc6, 0xf0, 0xf0,
	0xe0, 0x06, 0x17, 0xd2, 0x35, 0x93, 0xbe, 0x04, 0xd8, 0x06, 0xe0, 0xd2, 0xfe, 0x9f, 0xd0, 0xae,
	0x69, 0x8e, 0xdf, 0xfc, 0x58, 0x06, 0xe4, 0x72, 0x19, 0x90, 0x5f, 0xcb, 0x80, 0x7c, 0x5d, 0x05,
	0x9d, 0xcb, 0x55, 0xd0, 0xf9, 0xb9, 0x0a, 0x3a, 0x9f, 0xe3, 0x53, 0x34, 0xc5, 0x62, 0x16, 0x67,
	0xb2, 0x4c, 0x6c, 0xab, 0x47, 0x28, 0x93, 0xd9, 0x5c, 0x66, 0x67, 0x59, 0xc1, 0xb1, 0x4a, 0xbe,
	0x24, 0xed, 0xc9, 0xda, 0x18, 0xf5, 0x6c, 0xd7, 0x9d, 0xeb, 0x93, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x75, 0x98, 0x9f, 0xc7, 0xf8, 0x02, 0x00, 0x00,
}

func (m *WhoIs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhoIs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhoIs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Timestamp != 0 {
		i = encodeVarintWhoIs(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintWhoIs(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWhoIs(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWhoIs(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Type != 0 {
		i = encodeVarintWhoIs(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Credentials) > 0 {
		for iNdEx := len(m.Credentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Credentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWhoIs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Document) > 0 {
		i -= len(m.Document)
		copy(dAtA[i:], m.Document)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Document)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Session) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Credential != nil {
		{
			size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhoIs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Whois != nil {
		{
			size, err := m.Whois.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhoIs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDid) > 0 {
		i -= len(m.BaseDid)
		copy(dAtA[i:], m.BaseDid)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.BaseDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWhoIs(dAtA []byte, offset int, v uint64) int {
	offset -= sovWhoIs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WhoIs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	l = len(m.Document)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	if len(m.Credentials) > 0 {
		for _, e := range m.Credentials {
			l = e.Size()
			n += 1 + l + sovWhoIs(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovWhoIs(uint64(m.Type))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWhoIs(uint64(len(k))) + 1 + len(v) + sovWhoIs(uint64(len(v)))
			n += mapEntrySize + 1 + sovWhoIs(uint64(mapEntrySize))
		}
	}
	if m.Timestamp != 0 {
		n += 1 + sovWhoIs(uint64(m.Timestamp))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDid)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	if m.Whois != nil {
		l = m.Whois.Size()
		n += 1 + l + sovWhoIs(uint64(l))
	}
	if m.Credential != nil {
		l = m.Credential.Size()
		n += 1 + l + sovWhoIs(uint64(l))
	}
	return n
}

func sovWhoIs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWhoIs(x uint64) (n int) {
	return sovWhoIs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WhoIs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhoIs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhoIs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhoIs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Document = append(m.Document[:0], dAtA[iNdEx:postIndex]...)
			if m.Document == nil {
				m.Document = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = append(m.Credentials, &Credential{})
			if err := m.Credentials[len(m.Credentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= WhoIs_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhoIs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhoIs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWhoIs
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWhoIs
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhoIs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWhoIs
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWhoIs
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWhoIs(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWhoIs
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWhoIs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhoIs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhoIs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whois", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Whois == nil {
				m.Whois = &WhoIs{}
			}
			if err := m.Whois.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credential == nil {
				m.Credential = &Credential{}
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWhoIs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhoIs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWhoIs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWhoIs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWhoIs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWhoIs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWhoIs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWhoIs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWhoIs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWhoIs = fmt.Errorf("proto: unexpected end of group")
)
