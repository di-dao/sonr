syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrhq.highway.v1;

import "core/identity/did.proto";
import "google/api/annotations.proto";
import "sonr/common/info.proto";

option go_package = "github.com/sonrhq/core/types/highway/v1;highwayv1";

// KeygenRequest is the request to generate a keypair.
message KeygenRequest {
  // The Unique Identifier for the client device. Typically in a cookie.
  string uuid = 1;

  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 2;

  // The user defined name for the account.
  string username = 3;

  // The signed credential response from the user.
  string credential_response = 4;

  // The security threshold for the wallet account.
  int32 security_threshold = 5;
}

// KeygenResponse is the response to a Keygen request.
message KeygenResponse {
  // Success is true if the account was created.
  bool success = 1;

  // The address of the account.
  string address = 2;

  // The DID of the account.
  string did = 3;

  // The keyshares for the account. The keyshares are encoded as base64 strings.
  map<string, string> keyshares = 4;

  // The DID Document for the wallet.
  core.identity.DidDocument did_document = 5;
}

// LoginFinishRequest is the request to login to an account.
message LoginRequest {
  // Address of the account to login to.
  string account_address = 1;

  // The signed credential response from the user.
  string credential_response = 2;

  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 3;
}

// LoginFinishResponse is the response to a Login request.
message LoginResponse {
  // Success is true if the account was created.
  bool success = 1;

  // The address of the account.
  string address = 2;

  // The DID of the account.
  string did = 3;

  // The keyshares for the account.
  map<string, bytes> keyshares = 4;

  // The DID Document for the wallet.
  core.identity.DidDocument did_document = 5;
}

// RegisterFinishRequest is the request to CreateAccount a new key from the private key.
message QueryServiceRequest {
  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 1;
}

// RegisterFinishResponse is the response to a CreateAccount request.
message QueryServiceResponse {
  // The address of the account.
  string challenge = 1;

  // Relaying party id for the request.
  string rp_id = 2;

  // Relaying party name for the request.
  string rp_name = 3;

  // The DID Document for the wallet.
  core.identity.Service service = 4;
}

// LoginStartRequest is the request to login to an account.
message QueryDocumentRequest {
  // The DID of the account to login to.
  string did = 1;
}

// LoginStartResponse is the response to a Login request.
message QueryDocumentResponse {
  // Success is true if the account exists.
  bool success = 1;

  // The account address for the user.
  string account_address = 2;

  // The DID Document for the wallet.
  core.identity.DidDocument did_document = 3;
}

// ==================================================================
// GRPC/REST SERVICE
// ==================================================================

// Vault is the service used for managing a node's keypair.
service Authentication {
  // Keygen is a call with the method(s) POST within the "Mpc" service.
  // It takes in "KeygenRequest" and returns a "KeygenResponse".
  rpc Keygen(KeygenRequest) returns (KeygenResponse) {}

  // Login Finish
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  rpc Login(LoginRequest) returns (LoginResponse) {}

  // Find DID
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  rpc QueryDocument(QueryDocumentRequest) returns (QueryDocumentResponse) {}

  // Find Service
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  rpc QueryService(QueryServiceRequest) returns (QueryServiceResponse) {}
}
