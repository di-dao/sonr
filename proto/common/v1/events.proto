syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrio.common.v1;

option go_package = "github.com/sonr-io/sonr/third_party/types/common";

// defines actions performed during wallet creation
enum WALLET_EVENT_TYPE {
  UNKNOWN = 0;
  // triggered when did document is created for the new address.
  DID_DOCUMENT_CREATE_START = 1;
  // triggered when assertion method is created and the pk is associated with the document.
  DID_DOCUMENT_CREATE_END = 2;
  // triggered if did document creation has an error errorMessage will be populated
  DID_DOCUMENT_CREATE_ERROR = 3;
  // triggered when PSK and DSC keys are being created. Only fires for CreateAccount
  // fires on the the start of DSC creation
  KEY_CREATE_START = 4;
  // triggered when both the PSK and DSC keys are done generating.  Only fires for CreateAccount
  KEY_CREATE_END = 5;
  // triggered when key create has an error errorMessage will be populated
  KEY_CREATE_ERROR = 6;
  // triggered on start of PSK and DSC singing
  KEY_ENCRYPT_START = 7;
  // triggered on end of PSK and DSC singning
  KEY_ENCRYPT_END = 8;
  // triggered if key encrypt has an error.
  KEY_ENCRYPT_ERROR = 9;
  // triggered before intial token faucet occurs to the new address.
  FAUCET_REQUEST_START = 10;
  // triggered after a response from faucet request is recieved.
  FAUCET_REQUEST_END = 11;
  // triggered if fauceting has an error errorMessage will be populated
  FAUCET_REQUEST_ERROR = 12;
  // triggered on inital shard creation start
  SHARD_GENERATE_START = 13;
  // triggered on inital shard generation end.
  SHARD_GENERATE_END = 14;
  // triggered if shard generation has an error errorMessage will be populated
  SHARD_GENERATE_ERROR = 15;
  // triggered when the vault is being created.
  VAULT_CREATE_START = 16;
  // triggered after vault creation has returned.
  // if an error occurs it will be within the event
  VAULT_CREATE_END = 17;
  // triggered if vault create has an error populates errorMessage
  VAULT_CREATE_ERROR = 18;
}

message WalletEvent {
  // context on what part of the wallet creation process is occuring
  WALLET_EVENT_TYPE type = 1;
  // populated if an error has occured, type will denote an error
  string errorMessage = 2;
  // status message. does not have to be populated
  string message = 3;
}
