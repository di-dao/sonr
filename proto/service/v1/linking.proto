syntax = "proto3";

// Package exchange defines interfaces and types for exchange between two nodes in the network.
package sonrio.motor.service.v1;
import "common/v1/info.proto";

option go_package = "github.com/sonr-io/sonr/third_party/types/motor/api/v1/service/v1";

option java_package = "io.sonr.types.service";
option java_multiple_files = true;

message LinkingEvent {
    // The type of event which occurred.
    LinkingEventType type = 1;

    // A list of Peer IDs in the topic at the current state
    repeated string peer_ids = 2; //optional

    // The transmitted AuthInfo
    sonrio.common.v1.AuthInfo auth_info = 3; //optional
}

enum LinkingEventType {
    // Linking event type is unknown.
    LINKING_EVENT_TYPE_UNSPECIFIED = 0;

    // The linking process has started. Either the session was opened or successfully joined (ok)
    LINKING_EVENT_TYPE_LINKING_INITIALIZED = 1;

    // Returns when a new peer has joined the topic. (ok)
    LINKING_EVENT_TYPE_LINKING_PEER_FOUND = 2;

    // Returns if a Peer joins the topic for pairing and no peers are available. (error)
    LINKING_EVENT_TYPE_LINKING_TOPIC_INVALID = 3;

    // Happens when unexpected networking error occurs. (error)
    LINKING_EVENT_TYPE_LINKING_DISCONNECTED = 4;

    // Occurs when the session timeout is reached. (error)
    LINKING_EVENT_TYPE_LINKING_TIMEOUT = 5;

    // This event happens on invalid AuthInfo (error)
    LINKING_EVENT_TYPE_LINKING_FAILED = 6;

    // This event happens if Broadcasting updated DIDDocument fails (error)
    LINKING_EVENT_TYPE_LINKING_BROADCAST_FAILED = 7;

    // Occurs when the Key Exchange is completed successfully. (ok)
    LINKING_EVENT_TYPE_LINKING_COMPLETE = 8;
}
