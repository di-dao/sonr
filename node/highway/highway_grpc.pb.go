// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package highway

import (
	context "context"
	api "github.com/sonr-io/core/node/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HighwayStubClient is the client API for HighwayStub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HighwayStubClient interface {
	// Register creates new user in DNS Table
	ListPeers(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (HighwayStub_ListPeersClient, error)
	// Register creates new user in DNS Table
	DecideExchange(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error)
	// Register creates new user in DNS Table
	SendExchange(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error)
	// Register creates new user in DNS Table
	CacheRecord(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error)
	// Register creates new user in DNS Table
	GetRecord(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error)
	// Register creates new user in DNS Table
	PutRecord(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error)
	// Register creates new user in DNS Table
	RegisterName(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error)
	// Authorize Signing Method Request for Data
	VerifyName(ctx context.Context, in *api.AuthenticateRequest, opts ...grpc.CallOption) (*api.AuthenticateResponse, error)
}

type highwayStubClient struct {
	cc grpc.ClientConnInterface
}

func NewHighwayStubClient(cc grpc.ClientConnInterface) HighwayStubClient {
	return &highwayStubClient{cc}
}

func (c *highwayStubClient) ListPeers(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (HighwayStub_ListPeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &HighwayStub_ServiceDesc.Streams[0], "/sonr.node.HighwayStub/ListPeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &highwayStubListPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HighwayStub_ListPeersClient interface {
	Recv() (*api.RefreshEvent, error)
	grpc.ClientStream
}

type highwayStubListPeersClient struct {
	grpc.ClientStream
}

func (x *highwayStubListPeersClient) Recv() (*api.RefreshEvent, error) {
	m := new(api.RefreshEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *highwayStubClient) DecideExchange(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error) {
	out := new(api.RegisterResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.HighwayStub/DecideExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayStubClient) SendExchange(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error) {
	out := new(api.RegisterResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.HighwayStub/SendExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayStubClient) CacheRecord(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error) {
	out := new(api.RegisterResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.HighwayStub/CacheRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayStubClient) GetRecord(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error) {
	out := new(api.RegisterResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.HighwayStub/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayStubClient) PutRecord(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error) {
	out := new(api.RegisterResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.HighwayStub/PutRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayStubClient) RegisterName(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error) {
	out := new(api.RegisterResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.HighwayStub/RegisterName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayStubClient) VerifyName(ctx context.Context, in *api.AuthenticateRequest, opts ...grpc.CallOption) (*api.AuthenticateResponse, error) {
	out := new(api.AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.HighwayStub/VerifyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HighwayStubServer is the server API for HighwayStub service.
// All implementations must embed UnimplementedHighwayStubServer
// for forward compatibility
type HighwayStubServer interface {
	// Register creates new user in DNS Table
	ListPeers(*api.RegisterRequest, HighwayStub_ListPeersServer) error
	// Register creates new user in DNS Table
	DecideExchange(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error)
	// Register creates new user in DNS Table
	SendExchange(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error)
	// Register creates new user in DNS Table
	CacheRecord(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error)
	// Register creates new user in DNS Table
	GetRecord(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error)
	// Register creates new user in DNS Table
	PutRecord(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error)
	// Register creates new user in DNS Table
	RegisterName(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error)
	// Authorize Signing Method Request for Data
	VerifyName(context.Context, *api.AuthenticateRequest) (*api.AuthenticateResponse, error)
	mustEmbedUnimplementedHighwayStubServer()
}

// UnimplementedHighwayStubServer must be embedded to have forward compatible implementations.
type UnimplementedHighwayStubServer struct {
}

func (UnimplementedHighwayStubServer) ListPeers(*api.RegisterRequest, HighwayStub_ListPeersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedHighwayStubServer) DecideExchange(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideExchange not implemented")
}
func (UnimplementedHighwayStubServer) SendExchange(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendExchange not implemented")
}
func (UnimplementedHighwayStubServer) CacheRecord(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheRecord not implemented")
}
func (UnimplementedHighwayStubServer) GetRecord(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedHighwayStubServer) PutRecord(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRecord not implemented")
}
func (UnimplementedHighwayStubServer) RegisterName(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterName not implemented")
}
func (UnimplementedHighwayStubServer) VerifyName(context.Context, *api.AuthenticateRequest) (*api.AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyName not implemented")
}
func (UnimplementedHighwayStubServer) mustEmbedUnimplementedHighwayStubServer() {}

// UnsafeHighwayStubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HighwayStubServer will
// result in compilation errors.
type UnsafeHighwayStubServer interface {
	mustEmbedUnimplementedHighwayStubServer()
}

func RegisterHighwayStubServer(s grpc.ServiceRegistrar, srv HighwayStubServer) {
	s.RegisterService(&HighwayStub_ServiceDesc, srv)
}

func _HighwayStub_ListPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.RegisterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HighwayStubServer).ListPeers(m, &highwayStubListPeersServer{stream})
}

type HighwayStub_ListPeersServer interface {
	Send(*api.RefreshEvent) error
	grpc.ServerStream
}

type highwayStubListPeersServer struct {
	grpc.ServerStream
}

func (x *highwayStubListPeersServer) Send(m *api.RefreshEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _HighwayStub_DecideExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayStubServer).DecideExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.HighwayStub/DecideExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayStubServer).DecideExchange(ctx, req.(*api.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayStub_SendExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayStubServer).SendExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.HighwayStub/SendExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayStubServer).SendExchange(ctx, req.(*api.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayStub_CacheRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayStubServer).CacheRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.HighwayStub/CacheRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayStubServer).CacheRecord(ctx, req.(*api.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayStub_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayStubServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.HighwayStub/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayStubServer).GetRecord(ctx, req.(*api.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayStub_PutRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayStubServer).PutRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.HighwayStub/PutRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayStubServer).PutRecord(ctx, req.(*api.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayStub_RegisterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayStubServer).RegisterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.HighwayStub/RegisterName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayStubServer).RegisterName(ctx, req.(*api.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayStub_VerifyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayStubServer).VerifyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.HighwayStub/VerifyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayStubServer).VerifyName(ctx, req.(*api.AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HighwayStub_ServiceDesc is the grpc.ServiceDesc for HighwayStub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HighwayStub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonr.node.HighwayStub",
	HandlerType: (*HighwayStubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecideExchange",
			Handler:    _HighwayStub_DecideExchange_Handler,
		},
		{
			MethodName: "SendExchange",
			Handler:    _HighwayStub_SendExchange_Handler,
		},
		{
			MethodName: "CacheRecord",
			Handler:    _HighwayStub_CacheRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _HighwayStub_GetRecord_Handler,
		},
		{
			MethodName: "PutRecord",
			Handler:    _HighwayStub_PutRecord_Handler,
		},
		{
			MethodName: "RegisterName",
			Handler:    _HighwayStub_RegisterName_Handler,
		},
		{
			MethodName: "VerifyName",
			Handler:    _HighwayStub_VerifyName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPeers",
			Handler:       _HighwayStub_ListPeers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/node/highway.proto",
}
