syntax = "proto3";

// Sonr API
//
// Sonr is a peer-to-peer identity and asset management system that leverages DID documents, Webauthn, and IPFS â€” providing users with a secure, user-friendly way to manage their digital identity and assets.
package sonrhq.core.identity;

option go_package = "github.com/sonrhq/core/x/identity/types";
// DidDocument represents a Decentralized Identifier (DID) document that contains information about the DID subject, such as public keys, verification methods, and services.
message DidDocument {
  repeated string context = 1; // The JSON-LD context(s) used in the document
  string id = 2; // The identifier for the DID subject
  repeated string controller = 3; //optional, the entity/entities controlling the DID subject
  repeated VerificationMethod verification_method = 4; // optional, the set of verification methods associated with the DID subject
  repeated string authentication = 5; // optional, the set of authentication methods associated with the DID subject
  repeated string assertion_method = 6; // optional, the set of assertion methods associated with the DID subject
  repeated string capability_invocation = 7; // optional, the set of capability invocation methods associated with the DID subject
  repeated string capability_delegation = 8; // optional, the set of capability delegation methods associated with the DID subject
  repeated string key_agreement = 9; // optional, the set of key agreement methods associated with the DID subject
  repeated Service service = 10; // optional, the set of services associated with the DID subject
  repeated string also_known_as = 11; // optional, the set of identifiers for other personas or identities related to the DID subject
  repeated KeyValuePair metadata = 12; // optional, additional metadata related to the DID document
}

// VerificationMethod represents a verification method that can be used to authenticate the DID subject or perform other cryptographic operations.
message VerificationMethod {
  string id = 1; // The identifier for the verification method
  string type = 2; // The type of the verification method
  string controller = 3; // The entity controlling the verification method
  repeated KeyValuePair public_key_jwk = 4; // optional, the public key in JSON Web Key (JWK) format
  string public_key_multibase = 5; // optional, the public key in multibase-encoded format
  string blockchain_account_id = 6; // optional, the blockchain account identifier associated with the verification method
  repeated KeyValuePair metadata = 7; // additional metadata related to the verification method
}

// VerificationRelationship represents a relationship between a verification method and a specific verification purpose (e.g., authentication, assertion, etc.).
message VerificationRelationship {
  VerificationMethod verification_method = 1; // The verification method associated with the relationship
  string reference = 2; // The reference identifier for the relationship
  string type = 3; // The type of the verification relationship
}

// Service represents a service associated with the DID subject.
message Service {
  string id = 1; // The identifier for the service
  string controller = 2; // The entity controlling the service
  string type = 3; // The type of the service
  string origin = 4; // The origin of the service (e.g., a URL or other endpoint)
  string name = 5; // The name of the service
  repeated KeyValuePair service_endpoints = 6; // optional, the set of service endpoints associated with the service
  repeated KeyValuePair metadata = 7; // optional, additional metadata related to the Service
}

message KeyValuePair {
  string key = 1;
  string value = 2;
}

// DIDMethod is the DID method for each supported resolver.
enum DIDMethod {
  // DID method for the Sonr network
  DIDMethod_BLOCKCHAIN = 0;

  // DID method for the Ethereum network
  DIDMethod_WEB = 1;

  // DID method for the Cosmos network
  DIDMethod_KEY = 2;

  // DID method for the Filecoin network
  DIDMethod_IPFS = 3;

  // DID method for the Handshake network
  DIDMethod_PEER = 4;
}

// ResolvedDidDocument is a JSON-LD object that contains a set of public keys and verification methods that are used to authenticate the DID subject.
message ResolvedDidDocument {
  repeated string context = 1;
  string id = 2;
  repeated string controller = 3; //optional
  repeated VerificationMethod verification_method = 4; // optional
  repeated VerificationRelationship authentication = 5; // optional
  repeated VerificationRelationship assertion_method = 6; // optional
  repeated VerificationRelationship capability_invocation = 7; // optional
  repeated VerificationRelationship capability_delegation = 8; // optional
  repeated VerificationRelationship key_agreement = 9; // optional
  repeated Service service = 10; // optional
  repeated string also_known_as = 11; // optional
  repeated KeyValuePair metadata = 12; // optional
}
