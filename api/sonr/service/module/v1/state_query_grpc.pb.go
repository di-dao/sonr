// Code generated by protoc-gen-go-cosmos-orm-proto. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sonr/service/module/v1/state_query.proto

package modulev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StateQueryService_GetCredential_FullMethodName                  = "/sonr.service.module.v1.StateQueryService/GetCredential"
	StateQueryService_GetCredentialByOriginHandle_FullMethodName    = "/sonr.service.module.v1.StateQueryService/GetCredentialByOriginHandle"
	StateQueryService_GetCredentialById_FullMethodName              = "/sonr.service.module.v1.StateQueryService/GetCredentialById"
	StateQueryService_GetCredentialByOriginAuthority_FullMethodName = "/sonr.service.module.v1.StateQueryService/GetCredentialByOriginAuthority"
	StateQueryService_ListCredential_FullMethodName                 = "/sonr.service.module.v1.StateQueryService/ListCredential"
	StateQueryService_GetProfile_FullMethodName                     = "/sonr.service.module.v1.StateQueryService/GetProfile"
	StateQueryService_GetProfileByOriginAuthority_FullMethodName    = "/sonr.service.module.v1.StateQueryService/GetProfileByOriginAuthority"
	StateQueryService_ListProfile_FullMethodName                    = "/sonr.service.module.v1.StateQueryService/ListProfile"
)

// StateQueryServiceClient is the client API for StateQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateQueryServiceClient interface {
	// Get queries the Credential table by its primary key.
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	// GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
	GetCredentialByOriginHandle(ctx context.Context, in *GetCredentialByOriginHandleRequest, opts ...grpc.CallOption) (*GetCredentialByOriginHandleResponse, error)
	// GetCredentialById queries the Credential table by its Id index
	GetCredentialById(ctx context.Context, in *GetCredentialByIdRequest, opts ...grpc.CallOption) (*GetCredentialByIdResponse, error)
	// GetCredentialByOriginAuthority queries the Credential table by its OriginAuthority index
	GetCredentialByOriginAuthority(ctx context.Context, in *GetCredentialByOriginAuthorityRequest, opts ...grpc.CallOption) (*GetCredentialByOriginAuthorityResponse, error)
	// ListCredential queries the Credential table using prefix and range queries against defined indexes.
	ListCredential(ctx context.Context, in *ListCredentialRequest, opts ...grpc.CallOption) (*ListCredentialResponse, error)
	// Get queries the Profile table by its primary key.
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	// GetProfileByOriginAuthority queries the Profile table by its OriginAuthority index
	GetProfileByOriginAuthority(ctx context.Context, in *GetProfileByOriginAuthorityRequest, opts ...grpc.CallOption) (*GetProfileByOriginAuthorityResponse, error)
	// ListProfile queries the Profile table using prefix and range queries against defined indexes.
	ListProfile(ctx context.Context, in *ListProfileRequest, opts ...grpc.CallOption) (*ListProfileResponse, error)
}

type stateQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateQueryServiceClient(cc grpc.ClientConnInterface) StateQueryServiceClient {
	return &stateQueryServiceClient{cc}
}

func (c *stateQueryServiceClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialByOriginHandle(ctx context.Context, in *GetCredentialByOriginHandleRequest, opts ...grpc.CallOption) (*GetCredentialByOriginHandleResponse, error) {
	out := new(GetCredentialByOriginHandleResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetCredentialByOriginHandle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialById(ctx context.Context, in *GetCredentialByIdRequest, opts ...grpc.CallOption) (*GetCredentialByIdResponse, error) {
	out := new(GetCredentialByIdResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetCredentialById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialByOriginAuthority(ctx context.Context, in *GetCredentialByOriginAuthorityRequest, opts ...grpc.CallOption) (*GetCredentialByOriginAuthorityResponse, error) {
	out := new(GetCredentialByOriginAuthorityResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetCredentialByOriginAuthority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListCredential(ctx context.Context, in *ListCredentialRequest, opts ...grpc.CallOption) (*ListCredentialResponse, error) {
	out := new(ListCredentialResponse)
	err := c.cc.Invoke(ctx, StateQueryService_ListCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetProfileByOriginAuthority(ctx context.Context, in *GetProfileByOriginAuthorityRequest, opts ...grpc.CallOption) (*GetProfileByOriginAuthorityResponse, error) {
	out := new(GetProfileByOriginAuthorityResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetProfileByOriginAuthority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListProfile(ctx context.Context, in *ListProfileRequest, opts ...grpc.CallOption) (*ListProfileResponse, error) {
	out := new(ListProfileResponse)
	err := c.cc.Invoke(ctx, StateQueryService_ListProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateQueryServiceServer is the server API for StateQueryService service.
// All implementations must embed UnimplementedStateQueryServiceServer
// for forward compatibility
type StateQueryServiceServer interface {
	// Get queries the Credential table by its primary key.
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	// GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
	GetCredentialByOriginHandle(context.Context, *GetCredentialByOriginHandleRequest) (*GetCredentialByOriginHandleResponse, error)
	// GetCredentialById queries the Credential table by its Id index
	GetCredentialById(context.Context, *GetCredentialByIdRequest) (*GetCredentialByIdResponse, error)
	// GetCredentialByOriginAuthority queries the Credential table by its OriginAuthority index
	GetCredentialByOriginAuthority(context.Context, *GetCredentialByOriginAuthorityRequest) (*GetCredentialByOriginAuthorityResponse, error)
	// ListCredential queries the Credential table using prefix and range queries against defined indexes.
	ListCredential(context.Context, *ListCredentialRequest) (*ListCredentialResponse, error)
	// Get queries the Profile table by its primary key.
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	// GetProfileByOriginAuthority queries the Profile table by its OriginAuthority index
	GetProfileByOriginAuthority(context.Context, *GetProfileByOriginAuthorityRequest) (*GetProfileByOriginAuthorityResponse, error)
	// ListProfile queries the Profile table using prefix and range queries against defined indexes.
	ListProfile(context.Context, *ListProfileRequest) (*ListProfileResponse, error)
	mustEmbedUnimplementedStateQueryServiceServer()
}

// UnimplementedStateQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateQueryServiceServer struct {
}

func (UnimplementedStateQueryServiceServer) GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedStateQueryServiceServer) GetCredentialByOriginHandle(context.Context, *GetCredentialByOriginHandleRequest) (*GetCredentialByOriginHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByOriginHandle not implemented")
}
func (UnimplementedStateQueryServiceServer) GetCredentialById(context.Context, *GetCredentialByIdRequest) (*GetCredentialByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialById not implemented")
}
func (UnimplementedStateQueryServiceServer) GetCredentialByOriginAuthority(context.Context, *GetCredentialByOriginAuthorityRequest) (*GetCredentialByOriginAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByOriginAuthority not implemented")
}
func (UnimplementedStateQueryServiceServer) ListCredential(context.Context, *ListCredentialRequest) (*ListCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredential not implemented")
}
func (UnimplementedStateQueryServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedStateQueryServiceServer) GetProfileByOriginAuthority(context.Context, *GetProfileByOriginAuthorityRequest) (*GetProfileByOriginAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByOriginAuthority not implemented")
}
func (UnimplementedStateQueryServiceServer) ListProfile(context.Context, *ListProfileRequest) (*ListProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfile not implemented")
}
func (UnimplementedStateQueryServiceServer) mustEmbedUnimplementedStateQueryServiceServer() {}

// UnsafeStateQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateQueryServiceServer will
// result in compilation errors.
type UnsafeStateQueryServiceServer interface {
	mustEmbedUnimplementedStateQueryServiceServer()
}

func RegisterStateQueryServiceServer(s grpc.ServiceRegistrar, srv StateQueryServiceServer) {
	s.RegisterService(&StateQueryService_ServiceDesc, srv)
}

func _StateQueryService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialByOriginHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByOriginHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialByOriginHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetCredentialByOriginHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialByOriginHandle(ctx, req.(*GetCredentialByOriginHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetCredentialById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialById(ctx, req.(*GetCredentialByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialByOriginAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByOriginAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialByOriginAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetCredentialByOriginAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialByOriginAuthority(ctx, req.(*GetCredentialByOriginAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_ListCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListCredential(ctx, req.(*ListCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetProfileByOriginAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByOriginAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetProfileByOriginAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetProfileByOriginAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetProfileByOriginAuthority(ctx, req.(*GetProfileByOriginAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_ListProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListProfile(ctx, req.(*ListProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateQueryService_ServiceDesc is the grpc.ServiceDesc for StateQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonr.service.module.v1.StateQueryService",
	HandlerType: (*StateQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCredential",
			Handler:    _StateQueryService_GetCredential_Handler,
		},
		{
			MethodName: "GetCredentialByOriginHandle",
			Handler:    _StateQueryService_GetCredentialByOriginHandle_Handler,
		},
		{
			MethodName: "GetCredentialById",
			Handler:    _StateQueryService_GetCredentialById_Handler,
		},
		{
			MethodName: "GetCredentialByOriginAuthority",
			Handler:    _StateQueryService_GetCredentialByOriginAuthority_Handler,
		},
		{
			MethodName: "ListCredential",
			Handler:    _StateQueryService_ListCredential_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _StateQueryService_GetProfile_Handler,
		},
		{
			MethodName: "GetProfileByOriginAuthority",
			Handler:    _StateQueryService_GetProfileByOriginAuthority_Handler,
		},
		{
			MethodName: "ListProfile",
			Handler:    _StateQueryService_ListProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonr/service/module/v1/state_query.proto",
}
