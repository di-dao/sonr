// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols/transmit/v1/transmit.proto

#include "protocols/transmit/v1/transmit.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocols {
namespace transmit {
namespace v1 {
constexpr Session_ResultsEntry_DoNotUse::Session_ResultsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Session_ResultsEntry_DoNotUseDefaultTypeInternal {
  constexpr Session_ResultsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Session_ResultsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Session_ResultsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Session_ResultsEntry_DoNotUseDefaultTypeInternal _Session_ResultsEntry_DoNotUse_default_instance_;
constexpr Session::Session(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , results_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , from_(nullptr)
  , to_(nullptr)
  , payload_(nullptr)
  , direction_(0)

  , current_index_(0)
  , last_updated_(int64_t{0}){}
struct SessionDefaultTypeInternal {
  constexpr SessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionDefaultTypeInternal() {}
  union {
    Session _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionDefaultTypeInternal _Session_default_instance_;
constexpr SessionItem::SessionItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_(nullptr)
  , index_(0)
  , count_(0)
  , written_(int64_t{0})
  , size_(int64_t{0})
  , total_size_(int64_t{0})
  , direction_(0)
{}
struct SessionItemDefaultTypeInternal {
  constexpr SessionItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionItemDefaultTypeInternal() {}
  union {
    SessionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionItemDefaultTypeInternal _SessionItem_default_instance_;
constexpr SessionPayload::SessionPayload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(nullptr)
  , direction_(0)
{}
struct SessionPayloadDefaultTypeInternal {
  constexpr SessionPayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionPayloadDefaultTypeInternal() {}
  union {
    SessionPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionPayloadDefaultTypeInternal _SessionPayload_default_instance_;
}  // namespace v1
}  // namespace transmit
}  // namespace protocols
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocols_2ftransmit_2fv1_2ftransmit_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protocols_2ftransmit_2fv1_2ftransmit_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocols_2ftransmit_2fv1_2ftransmit_2eproto = nullptr;

const uint32_t TableStruct_protocols_2ftransmit_2fv1_2ftransmit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session_ResultsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session_ResultsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session_ResultsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session_ResultsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session, direction_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session, from_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session, to_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session, payload_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session, last_updated_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session, items_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session, current_index_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::Session, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionItem, index_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionItem, count_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionItem, item_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionItem, written_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionItem, size_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionItem, total_size_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionItem, direction_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionItem, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionPayload, payload_),
  PROTOBUF_FIELD_OFFSET(::protocols::transmit::v1::SessionPayload, direction_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::protocols::transmit::v1::Session_ResultsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::protocols::transmit::v1::Session)},
  { 24, -1, -1, sizeof(::protocols::transmit::v1::SessionItem)},
  { 38, -1, -1, sizeof(::protocols::transmit::v1::SessionPayload)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocols::transmit::v1::_Session_ResultsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocols::transmit::v1::_Session_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocols::transmit::v1::_SessionItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocols::transmit::v1::_SessionPayload_default_instance_),
};

const char descriptor_table_protodef_protocols_2ftransmit_2fv1_2ftransmit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$protocols/transmit/v1/transmit.proto\022\025"
  "protocols.transmit.v1\032\024common/v1/core.pr"
  "oto\032\024common/v1/data.proto\"\266\003\n\007Session\0222\n"
  "\tdirection\030\001 \001(\0162\024.common.v1.DirectionR\t"
  "direction\022#\n\004from\030\002 \001(\0132\017.common.v1.Peer"
  "R\004from\022\037\n\002to\030\003 \001(\0132\017.common.v1.PeerR\002to\022"
  ",\n\007payload\030\004 \001(\0132\022.common.v1.PayloadR\007pa"
  "yload\022!\n\014last_updated\030\005 \001(\003R\013lastUpdated"
  "\0228\n\005items\030\006 \003(\0132\".protocols.transmit.v1."
  "SessionItemR\005items\022#\n\rcurrent_index\030\007 \001("
  "\005R\014currentIndex\022E\n\007results\030\010 \003(\0132+.proto"
  "cols.transmit.v1.Session.ResultsEntryR\007r"
  "esults\032:\n\014ResultsEntry\022\020\n\003key\030\001 \001(\005R\003key"
  "\022\024\n\005value\030\002 \001(\010R\005value:\0028\001\"\367\001\n\013SessionIt"
  "em\022\024\n\005index\030\001 \001(\005R\005index\022\024\n\005count\030\002 \001(\005R"
  "\005count\022\'\n\004item\030\003 \001(\0132\023.common.v1.FileIte"
  "mR\004item\022\030\n\007written\030\004 \001(\003R\007written\022\022\n\004siz"
  "e\030\005 \001(\003R\004size\022\035\n\ntotal_size\030\006 \001(\003R\ttotal"
  "Size\0222\n\tdirection\030\007 \001(\0162\024.common.v1.Dire"
  "ctionR\tdirection\022\022\n\004path\030\010 \001(\tR\004path\"r\n\016"
  "SessionPayload\022,\n\007payload\030\001 \001(\0132\022.common"
  ".v1.PayloadR\007payload\0222\n\tdirection\030\002 \001(\0162"
  "\024.common.v1.DirectionR\tdirectionB\"Z gith"
  "ub.com/sonr-io/core/transmitb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_deps[2] = {
  &::descriptor_table_common_2fv1_2fcore_2eproto,
  &::descriptor_table_common_2fv1_2fdata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto = {
  false, false, 956, descriptor_table_protodef_protocols_2ftransmit_2fv1_2ftransmit_2eproto, "protocols/transmit/v1/transmit.proto", 
  &descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_once, descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_protocols_2ftransmit_2fv1_2ftransmit_2eproto::offsets,
  file_level_metadata_protocols_2ftransmit_2fv1_2ftransmit_2eproto, file_level_enum_descriptors_protocols_2ftransmit_2fv1_2ftransmit_2eproto, file_level_service_descriptors_protocols_2ftransmit_2fv1_2ftransmit_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_getter() {
  return &descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protocols_2ftransmit_2fv1_2ftransmit_2eproto(&descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto);
namespace protocols {
namespace transmit {
namespace v1 {

// ===================================================================

Session_ResultsEntry_DoNotUse::Session_ResultsEntry_DoNotUse() {}
Session_ResultsEntry_DoNotUse::Session_ResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Session_ResultsEntry_DoNotUse::MergeFrom(const Session_ResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Session_ResultsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_getter, &descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_once,
      file_level_metadata_protocols_2ftransmit_2fv1_2ftransmit_2eproto[0]);
}

// ===================================================================

class Session::_Internal {
 public:
  static const ::common::v1::Peer& from(const Session* msg);
  static const ::common::v1::Peer& to(const Session* msg);
  static const ::common::v1::Payload& payload(const Session* msg);
};

const ::common::v1::Peer&
Session::_Internal::from(const Session* msg) {
  return *msg->from_;
}
const ::common::v1::Peer&
Session::_Internal::to(const Session* msg) {
  return *msg->to_;
}
const ::common::v1::Payload&
Session::_Internal::payload(const Session* msg) {
  return *msg->payload_;
}
void Session::clear_from() {
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void Session::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
void Session::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
Session::Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocols.transmit.v1.Session)
}
Session::Session(const Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  results_.MergeFrom(from.results_);
  if (from._internal_has_from()) {
    from_ = new ::common::v1::Peer(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::common::v1::Peer(*from.to_);
  } else {
    to_ = nullptr;
  }
  if (from._internal_has_payload()) {
    payload_ = new ::common::v1::Payload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_updated_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(last_updated_));
  // @@protoc_insertion_point(copy_constructor:protocols.transmit.v1.Session)
}

inline void Session::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_updated_) -
    reinterpret_cast<char*>(&from_)) + sizeof(last_updated_));
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:protocols.transmit.v1.Session)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Session::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
  if (this != internal_default_instance()) delete payload_;
}

void Session::ArenaDtor(void* object) {
  Session* _this = reinterpret_cast< Session* >(object);
  (void)_this;
  _this->results_. ~MapField();
}
inline void Session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Session::ArenaDtor);
  }
}
void Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.transmit.v1.Session)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  results_.Clear();
  if (GetArenaForAllocation() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_updated_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(last_updated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Direction direction = 1 [json_name = "direction"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::common::v1::Direction>(val));
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer from = 2 [json_name = "from"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer to = 3 [json_name = "to"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Payload payload = 4 [json_name = "payload"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_updated = 5 [json_name = "lastUpdated"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          last_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protocols.transmit.v1.SessionItem items = 6 [json_name = "items"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 current_index = 7 [json_name = "currentIndex"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          current_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, bool> results = 8 [json_name = "results"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Session::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.transmit.v1.Session)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Direction direction = 1 [json_name = "direction"];
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_direction(), target);
  }

  // .common.v1.Peer from = 2 [json_name = "from"];
  if (this->_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from(this), target, stream);
  }

  // .common.v1.Peer to = 3 [json_name = "to"];
  if (this->_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::to(this), target, stream);
  }

  // .common.v1.Payload payload = 4 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::payload(this), target, stream);
  }

  // int64 last_updated = 5 [json_name = "lastUpdated"];
  if (this->_internal_last_updated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_updated(), target);
  }

  // repeated .protocols.transmit.v1.SessionItem items = 6 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_items(i), target, stream);
  }

  // int32 current_index = 7 [json_name = "currentIndex"];
  if (this->_internal_current_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_current_index(), target);
  }

  // map<int32, bool> results = 8 [json_name = "results"];
  if (!this->_internal_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
          it = this->_internal_results().begin();
          it != this->_internal_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Session_ResultsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
          it = this->_internal_results().begin();
          it != this->_internal_results().end(); ++it) {
        target = Session_ResultsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.transmit.v1.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.transmit.v1.Session)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocols.transmit.v1.SessionItem items = 6 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, bool> results = 8 [json_name = "results"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
      it = this->_internal_results().begin();
      it != this->_internal_results().end(); ++it) {
    total_size += Session_ResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .common.v1.Peer from = 2 [json_name = "from"];
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .common.v1.Peer to = 3 [json_name = "to"];
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  // .common.v1.Payload payload = 4 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // .common.v1.Direction direction = 1 [json_name = "direction"];
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // int32 current_index = 7 [json_name = "currentIndex"];
  if (this->_internal_current_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_current_index());
  }

  // int64 last_updated = 5 [json_name = "lastUpdated"];
  if (this->_internal_last_updated() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_updated());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Session::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Session::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Session::GetClassData() const { return &_class_data_; }

void Session::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Session *>(to)->MergeFrom(
      static_cast<const Session &>(from));
}


void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocols.transmit.v1.Session)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  results_.MergeFrom(from.results_);
  if (from._internal_has_from()) {
    _internal_mutable_from()->::common::v1::Peer::MergeFrom(from._internal_from());
  }
  if (from._internal_has_to()) {
    _internal_mutable_to()->::common::v1::Peer::MergeFrom(from._internal_to());
  }
  if (from._internal_has_payload()) {
    _internal_mutable_payload()->::common::v1::Payload::MergeFrom(from._internal_payload());
  }
  if (from._internal_direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from._internal_current_index() != 0) {
    _internal_set_current_index(from._internal_current_index());
  }
  if (from._internal_last_updated() != 0) {
    _internal_set_last_updated(from._internal_last_updated());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.transmit.v1.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Session, last_updated_)
      + sizeof(Session::last_updated_)
      - PROTOBUF_FIELD_OFFSET(Session, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Session::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_getter, &descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_once,
      file_level_metadata_protocols_2ftransmit_2fv1_2ftransmit_2eproto[1]);
}

// ===================================================================

class SessionItem::_Internal {
 public:
  static const ::common::v1::FileItem& item(const SessionItem* msg);
};

const ::common::v1::FileItem&
SessionItem::_Internal::item(const SessionItem* msg) {
  return *msg->item_;
}
void SessionItem::clear_item() {
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
SessionItem::SessionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocols.transmit.v1.SessionItem)
}
SessionItem::SessionItem(const SessionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_item()) {
    item_ = new ::common::v1::FileItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&index_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:protocols.transmit.v1.SessionItem)
}

inline void SessionItem::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&item_)) + sizeof(direction_));
}

SessionItem::~SessionItem() {
  // @@protoc_insertion_point(destructor:protocols.transmit.v1.SessionItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
}

void SessionItem::ArenaDtor(void* object) {
  SessionItem* _this = reinterpret_cast< SessionItem* >(object);
  (void)_this;
}
void SessionItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.transmit.v1.SessionItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&index_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 count = 2 [json_name = "count"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.FileItem item = 3 [json_name = "item"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 written = 4 [json_name = "written"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 5 [json_name = "size"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_size = 6 [json_name = "totalSize"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Direction direction = 7 [json_name = "direction"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::common::v1::Direction>(val));
        } else
          goto handle_unusual;
        continue;
      // string path = 8 [json_name = "path"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocols.transmit.v1.SessionItem.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.transmit.v1.SessionItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // .common.v1.FileItem item = 3 [json_name = "item"];
  if (this->_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::item(this), target, stream);
  }

  // int64 written = 4 [json_name = "written"];
  if (this->_internal_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_written(), target);
  }

  // int64 size = 5 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_size(), target);
  }

  // int64 total_size = 6 [json_name = "totalSize"];
  if (this->_internal_total_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_size(), target);
  }

  // .common.v1.Direction direction = 7 [json_name = "direction"];
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_direction(), target);
  }

  // string path = 8 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocols.transmit.v1.SessionItem.path");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.transmit.v1.SessionItem)
  return target;
}

size_t SessionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.transmit.v1.SessionItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 8 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .common.v1.FileItem item = 3 [json_name = "item"];
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // int32 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // int64 written = 4 [json_name = "written"];
  if (this->_internal_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_written());
  }

  // int64 size = 5 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 total_size = 6 [json_name = "totalSize"];
  if (this->_internal_total_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_total_size());
  }

  // .common.v1.Direction direction = 7 [json_name = "direction"];
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionItem::GetClassData() const { return &_class_data_; }

void SessionItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionItem *>(to)->MergeFrom(
      static_cast<const SessionItem &>(from));
}


void SessionItem::MergeFrom(const SessionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocols.transmit.v1.SessionItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_has_item()) {
    _internal_mutable_item()->::common::v1::FileItem::MergeFrom(from._internal_item());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_written() != 0) {
    _internal_set_written(from._internal_written());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_total_size() != 0) {
    _internal_set_total_size(from._internal_total_size());
  }
  if (from._internal_direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionItem::CopyFrom(const SessionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.transmit.v1.SessionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionItem::IsInitialized() const {
  return true;
}

void SessionItem::InternalSwap(SessionItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionItem, direction_)
      + sizeof(SessionItem::direction_)
      - PROTOBUF_FIELD_OFFSET(SessionItem, item_)>(
          reinterpret_cast<char*>(&item_),
          reinterpret_cast<char*>(&other->item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_getter, &descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_once,
      file_level_metadata_protocols_2ftransmit_2fv1_2ftransmit_2eproto[2]);
}

// ===================================================================

class SessionPayload::_Internal {
 public:
  static const ::common::v1::Payload& payload(const SessionPayload* msg);
};

const ::common::v1::Payload&
SessionPayload::_Internal::payload(const SessionPayload* msg) {
  return *msg->payload_;
}
void SessionPayload::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
SessionPayload::SessionPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocols.transmit.v1.SessionPayload)
}
SessionPayload::SessionPayload(const SessionPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new ::common::v1::Payload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:protocols.transmit.v1.SessionPayload)
}

inline void SessionPayload::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&payload_)) + sizeof(direction_));
}

SessionPayload::~SessionPayload() {
  // @@protoc_insertion_point(destructor:protocols.transmit.v1.SessionPayload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete payload_;
}

void SessionPayload::ArenaDtor(void* object) {
  SessionPayload* _this = reinterpret_cast< SessionPayload* >(object);
  (void)_this;
}
void SessionPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.transmit.v1.SessionPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  direction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Payload payload = 1 [json_name = "payload"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Direction direction = 2 [json_name = "direction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::common::v1::Direction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.transmit.v1.SessionPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Payload payload = 1 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payload(this), target, stream);
  }

  // .common.v1.Direction direction = 2 [json_name = "direction"];
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.transmit.v1.SessionPayload)
  return target;
}

size_t SessionPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.transmit.v1.SessionPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.v1.Payload payload = 1 [json_name = "payload"];
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // .common.v1.Direction direction = 2 [json_name = "direction"];
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionPayload::GetClassData() const { return &_class_data_; }

void SessionPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionPayload *>(to)->MergeFrom(
      static_cast<const SessionPayload &>(from));
}


void SessionPayload::MergeFrom(const SessionPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocols.transmit.v1.SessionPayload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payload()) {
    _internal_mutable_payload()->::common::v1::Payload::MergeFrom(from._internal_payload());
  }
  if (from._internal_direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionPayload::CopyFrom(const SessionPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.transmit.v1.SessionPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionPayload::IsInitialized() const {
  return true;
}

void SessionPayload::InternalSwap(SessionPayload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionPayload, direction_)
      + sizeof(SessionPayload::direction_)
      - PROTOBUF_FIELD_OFFSET(SessionPayload, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionPayload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_getter, &descriptor_table_protocols_2ftransmit_2fv1_2ftransmit_2eproto_once,
      file_level_metadata_protocols_2ftransmit_2fv1_2ftransmit_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace transmit
}  // namespace protocols
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocols::transmit::v1::Session_ResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocols::transmit::v1::Session_ResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::transmit::v1::Session_ResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::transmit::v1::Session* Arena::CreateMaybeMessage< ::protocols::transmit::v1::Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::transmit::v1::Session >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::transmit::v1::SessionItem* Arena::CreateMaybeMessage< ::protocols::transmit::v1::SessionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::transmit::v1::SessionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::transmit::v1::SessionPayload* Arena::CreateMaybeMessage< ::protocols::transmit::v1::SessionPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::transmit::v1::SessionPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
