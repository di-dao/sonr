syntax = "proto3";

package sonrio.sonr.bucket;

import "bucket/params.proto";
import "bucket/bucket.proto";
// this line is used by starport scaffolding # 1

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/sonr-io/sonr/x/bucket/types";

option java_package = "io.sonr.types.bucket";
option java_multiple_files = true;

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sonr-io/sonr/bucket/params";
  }
  // Queries a WhereIs by did and creator.
  rpc Bucket(QueryGetBucketRequest) returns (QueryGetBucketResponse) {
    option (google.api.http).get = "/sonr-io/sonr/bucket/{uuid}";
  }
  // Queries all WhereIs by creator.
  rpc BucketByCreator(QueryGetBucketByCreatorRequest) returns (QueryGetBucketByCreatorResponse) {
    option (google.api.http).get = "/sonr-io/sonr/bucket/{creator}";
  }

  // Queries a list of WhereIs items.
  rpc BucketsAll(QueryAllBucketsRequest) returns (QueryAllBucketsResponse) {
    option (google.api.http).get = "/sonr-io/sonr/bucket/all";
  }

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetBucketRequest {
  string uuid = 1;
}

message QueryGetBucketResponse {
  Bucket bucket = 1 [(gogoproto.nullable) = false];
}

message QueryGetBucketByCreatorRequest {
  string creator = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetBucketByCreatorResponse {
  repeated Bucket buckets = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllBucketsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBucketsResponse {
  repeated Bucket buckets = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
