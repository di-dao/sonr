// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/highway/v1/request.proto

#include "node/highway/v1/request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace node {
namespace highway {
namespace v1 {
constexpr ListPeersRequest::ListPeersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mnemonic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListPeersRequestDefaultTypeInternal {
  constexpr ListPeersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListPeersRequestDefaultTypeInternal() {}
  union {
    ListPeersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListPeersRequestDefaultTypeInternal _ListPeersRequest_default_instance_;
constexpr DecideExchangeRequest::DecideExchangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mnemonic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , method_(0)
{}
struct DecideExchangeRequestDefaultTypeInternal {
  constexpr DecideExchangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecideExchangeRequestDefaultTypeInternal() {}
  union {
    DecideExchangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecideExchangeRequestDefaultTypeInternal _DecideExchangeRequest_default_instance_;
constexpr SendExchangeRequest::SendExchangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , peer_(nullptr)
  , message_(nullptr){}
struct SendExchangeRequestDefaultTypeInternal {
  constexpr SendExchangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendExchangeRequestDefaultTypeInternal() {}
  union {
    SendExchangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendExchangeRequestDefaultTypeInternal _SendExchangeRequest_default_instance_;
constexpr CacheRecordRequest::CacheRecordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fingerprint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CacheRecordRequestDefaultTypeInternal {
  constexpr CacheRecordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CacheRecordRequestDefaultTypeInternal() {}
  union {
    CacheRecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CacheRecordRequestDefaultTypeInternal _CacheRecordRequest_default_instance_;
constexpr GetRecordRequest::GetRecordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fingerprint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetRecordRequestDefaultTypeInternal {
  constexpr GetRecordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRecordRequestDefaultTypeInternal() {}
  union {
    GetRecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRecordRequestDefaultTypeInternal _GetRecordRequest_default_instance_;
constexpr StoreRecordRequest::StoreRecordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fingerprint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StoreRecordRequestDefaultTypeInternal {
  constexpr StoreRecordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StoreRecordRequestDefaultTypeInternal() {}
  union {
    StoreRecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StoreRecordRequestDefaultTypeInternal _StoreRecordRequest_default_instance_;
constexpr RegisterNameRequest::RegisterNameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fingerprint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RegisterNameRequestDefaultTypeInternal {
  constexpr RegisterNameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterNameRequestDefaultTypeInternal() {}
  union {
    RegisterNameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterNameRequestDefaultTypeInternal _RegisterNameRequest_default_instance_;
constexpr VerifyNameRequest::VerifyNameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fingerprint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VerifyNameRequestDefaultTypeInternal {
  constexpr VerifyNameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VerifyNameRequestDefaultTypeInternal() {}
  union {
    VerifyNameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VerifyNameRequestDefaultTypeInternal _VerifyNameRequest_default_instance_;
}  // namespace v1
}  // namespace highway
}  // namespace node
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fhighway_2fv1_2frequest_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fhighway_2fv1_2frequest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fhighway_2fv1_2frequest_2eproto = nullptr;

const uint32_t TableStruct_node_2fhighway_2fv1_2frequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::ListPeersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::ListPeersRequest, s_name_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::ListPeersRequest, mnemonic_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::ListPeersRequest, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeRequest, s_name_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeRequest, mnemonic_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeRequest, method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::SendExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::SendExchangeRequest, peer_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::SendExchangeRequest, message_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::SendExchangeRequest, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordRequest, s_name_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordRequest, prefix_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordRequest, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordRequest, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordRequest, s_name_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordRequest, prefix_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordRequest, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordRequest, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordRequest, s_name_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordRequest, prefix_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordRequest, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordRequest, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameRequest, s_name_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameRequest, prefix_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameRequest, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameRequest, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameRequest, s_name_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameRequest, prefix_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameRequest, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameRequest, public_key_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::node::highway::v1::ListPeersRequest)},
  { 9, -1, -1, sizeof(::node::highway::v1::DecideExchangeRequest)},
  { 19, -1, -1, sizeof(::node::highway::v1::SendExchangeRequest)},
  { 28, -1, -1, sizeof(::node::highway::v1::CacheRecordRequest)},
  { 38, -1, -1, sizeof(::node::highway::v1::GetRecordRequest)},
  { 48, -1, -1, sizeof(::node::highway::v1::StoreRecordRequest)},
  { 58, -1, -1, sizeof(::node::highway::v1::RegisterNameRequest)},
  { 68, -1, -1, sizeof(::node::highway::v1::VerifyNameRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_ListPeersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_DecideExchangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_SendExchangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_CacheRecordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_GetRecordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_StoreRecordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_RegisterNameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_VerifyNameRequest_default_instance_),
};

const char descriptor_table_protodef_node_2fhighway_2fv1_2frequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035node/highway/v1/request.proto\022\017node.hi"
  "ghway.v1\032\024common/v1/core.proto\032\024common/v"
  "1/data.proto\"b\n\020ListPeersRequest\022\025\n\006s_na"
  "me\030\001 \001(\tR\005sName\022\032\n\010mnemonic\030\002 \001(\tR\010mnemo"
  "nic\022\033\n\tdevice_id\030\003 \001(\tR\010deviceId\"\363\001\n\025Dec"
  "ideExchangeRequest\022\025\n\006s_name\030\001 \001(\tR\005sNam"
  "e\022\032\n\010mnemonic\030\002 \001(\tR\010mnemonic\022\033\n\tdevice_"
  "id\030\003 \001(\tR\010deviceId\022E\n\006method\030\004 \001(\0162-.nod"
  "e.highway.v1.DecideExchangeRequest.Metho"
  "dR\006method\"C\n\006Method\022\026\n\022METHOD_UNSPECIFIE"
  "D\020\000\022\016\n\nMETHOD_ADD\020\001\022\021\n\rMETHOD_REMOVE\020\002\"\231"
  "\001\n\023SendExchangeRequest\022#\n\004peer\030\001 \001(\0132\017.c"
  "ommon.v1.PeerR\004peer\0220\n\007message\030\002 \001(\0132\026.c"
  "ommon.v1.MessageItemR\007message\022+\n\005items\030\003"
  " \003(\0132\025.common.v1.SupplyItemR\005items\"\204\001\n\022C"
  "acheRecordRequest\022\025\n\006s_name\030\001 \001(\tR\005sName"
  "\022\026\n\006prefix\030\002 \001(\tR\006prefix\022 \n\013fingerprint\030"
  "\003 \001(\tR\013fingerprint\022\035\n\npublic_key\030\004 \001(\tR\t"
  "publicKey\"\202\001\n\020GetRecordRequest\022\025\n\006s_name"
  "\030\001 \001(\tR\005sName\022\026\n\006prefix\030\002 \001(\tR\006prefix\022 \n"
  "\013fingerprint\030\003 \001(\tR\013fingerprint\022\035\n\npubli"
  "c_key\030\004 \001(\tR\tpublicKey\"\204\001\n\022StoreRecordRe"
  "quest\022\025\n\006s_name\030\001 \001(\tR\005sName\022\026\n\006prefix\030\002"
  " \001(\tR\006prefix\022 \n\013fingerprint\030\003 \001(\tR\013finge"
  "rprint\022\035\n\npublic_key\030\004 \001(\tR\tpublicKey\"\205\001"
  "\n\023RegisterNameRequest\022\025\n\006s_name\030\001 \001(\tR\005s"
  "Name\022\026\n\006prefix\030\002 \001(\tR\006prefix\022 \n\013fingerpr"
  "int\030\003 \001(\tR\013fingerprint\022\035\n\npublic_key\030\004 \001"
  "(\tR\tpublicKey\"\203\001\n\021VerifyNameRequest\022\025\n\006s"
  "_name\030\001 \001(\tR\005sName\022\026\n\006prefix\030\002 \001(\tR\006pref"
  "ix\022 \n\013fingerprint\030\003 \001(\tR\013fingerprint\022\035\n\n"
  "public_key\030\004 \001(\tR\tpublicKeyB&Z$github.co"
  "m/sonr-io/core/node/highwayb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_deps[2] = {
  &::descriptor_table_common_2fv1_2fcore_2eproto,
  &::descriptor_table_common_2fv1_2fdata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fhighway_2fv1_2frequest_2eproto = {
  false, false, 1315, descriptor_table_protodef_node_2fhighway_2fv1_2frequest_2eproto, "node/highway/v1/request.proto", 
  &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_once, descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_deps, 2, 8,
  schemas, file_default_instances, TableStruct_node_2fhighway_2fv1_2frequest_2eproto::offsets,
  file_level_metadata_node_2fhighway_2fv1_2frequest_2eproto, file_level_enum_descriptors_node_2fhighway_2fv1_2frequest_2eproto, file_level_service_descriptors_node_2fhighway_2fv1_2frequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_getter() {
  return &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fhighway_2fv1_2frequest_2eproto(&descriptor_table_node_2fhighway_2fv1_2frequest_2eproto);
namespace node {
namespace highway {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DecideExchangeRequest_Method_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fhighway_2fv1_2frequest_2eproto);
  return file_level_enum_descriptors_node_2fhighway_2fv1_2frequest_2eproto[0];
}
bool DecideExchangeRequest_Method_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DecideExchangeRequest_Method DecideExchangeRequest::METHOD_UNSPECIFIED;
constexpr DecideExchangeRequest_Method DecideExchangeRequest::METHOD_ADD;
constexpr DecideExchangeRequest_Method DecideExchangeRequest::METHOD_REMOVE;
constexpr DecideExchangeRequest_Method DecideExchangeRequest::Method_MIN;
constexpr DecideExchangeRequest_Method DecideExchangeRequest::Method_MAX;
constexpr int DecideExchangeRequest::Method_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ListPeersRequest::_Internal {
 public:
};

ListPeersRequest::ListPeersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.ListPeersRequest)
}
ListPeersRequest::ListPeersRequest(const ListPeersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  mnemonic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mnemonic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mnemonic().empty()) {
    mnemonic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mnemonic(), 
      GetArenaForAllocation());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.ListPeersRequest)
}

inline void ListPeersRequest::SharedCtor() {
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mnemonic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mnemonic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListPeersRequest::~ListPeersRequest() {
  // @@protoc_insertion_point(destructor:node.highway.v1.ListPeersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListPeersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnemonic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPeersRequest::ArenaDtor(void* object) {
  ListPeersRequest* _this = reinterpret_cast< ListPeersRequest* >(object);
  (void)_this;
}
void ListPeersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPeersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPeersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.ListPeersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_name_.ClearToEmpty();
  mnemonic_.ClearToEmpty();
  device_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPeersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.ListPeersRequest.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mnemonic = 2 [json_name = "mnemonic"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mnemonic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.ListPeersRequest.mnemonic"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 3 [json_name = "deviceId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.ListPeersRequest.device_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPeersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.ListPeersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.ListPeersRequest.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // string mnemonic = 2 [json_name = "mnemonic"];
  if (!this->_internal_mnemonic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mnemonic().data(), static_cast<int>(this->_internal_mnemonic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.ListPeersRequest.mnemonic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mnemonic(), target);
  }

  // string device_id = 3 [json_name = "deviceId"];
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.ListPeersRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.ListPeersRequest)
  return target;
}

size_t ListPeersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.ListPeersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // string mnemonic = 2 [json_name = "mnemonic"];
  if (!this->_internal_mnemonic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mnemonic());
  }

  // string device_id = 3 [json_name = "deviceId"];
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPeersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPeersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPeersRequest::GetClassData() const { return &_class_data_; }

void ListPeersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListPeersRequest *>(to)->MergeFrom(
      static_cast<const ListPeersRequest &>(from));
}


void ListPeersRequest::MergeFrom(const ListPeersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.ListPeersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (!from._internal_mnemonic().empty()) {
    _internal_set_mnemonic(from._internal_mnemonic());
  }
  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPeersRequest::CopyFrom(const ListPeersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.ListPeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPeersRequest::IsInitialized() const {
  return true;
}

void ListPeersRequest::InternalSwap(ListPeersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mnemonic_, lhs_arena,
      &other->mnemonic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPeersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2frequest_2eproto[0]);
}

// ===================================================================

class DecideExchangeRequest::_Internal {
 public:
};

DecideExchangeRequest::DecideExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.DecideExchangeRequest)
}
DecideExchangeRequest::DecideExchangeRequest(const DecideExchangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  mnemonic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mnemonic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mnemonic().empty()) {
    mnemonic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mnemonic(), 
      GetArenaForAllocation());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  method_ = from.method_;
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.DecideExchangeRequest)
}

inline void DecideExchangeRequest::SharedCtor() {
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mnemonic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mnemonic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
method_ = 0;
}

DecideExchangeRequest::~DecideExchangeRequest() {
  // @@protoc_insertion_point(destructor:node.highway.v1.DecideExchangeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecideExchangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mnemonic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecideExchangeRequest::ArenaDtor(void* object) {
  DecideExchangeRequest* _this = reinterpret_cast< DecideExchangeRequest* >(object);
  (void)_this;
}
void DecideExchangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecideExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecideExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.DecideExchangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_name_.ClearToEmpty();
  mnemonic_.ClearToEmpty();
  device_id_.ClearToEmpty();
  method_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecideExchangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.DecideExchangeRequest.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mnemonic = 2 [json_name = "mnemonic"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mnemonic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.DecideExchangeRequest.mnemonic"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 3 [json_name = "deviceId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.DecideExchangeRequest.device_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .node.highway.v1.DecideExchangeRequest.Method method = 4 [json_name = "method"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::node::highway::v1::DecideExchangeRequest_Method>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DecideExchangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.DecideExchangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.DecideExchangeRequest.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // string mnemonic = 2 [json_name = "mnemonic"];
  if (!this->_internal_mnemonic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mnemonic().data(), static_cast<int>(this->_internal_mnemonic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.DecideExchangeRequest.mnemonic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mnemonic(), target);
  }

  // string device_id = 3 [json_name = "deviceId"];
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.DecideExchangeRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_id(), target);
  }

  // .node.highway.v1.DecideExchangeRequest.Method method = 4 [json_name = "method"];
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.DecideExchangeRequest)
  return target;
}

size_t DecideExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.DecideExchangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // string mnemonic = 2 [json_name = "mnemonic"];
  if (!this->_internal_mnemonic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mnemonic());
  }

  // string device_id = 3 [json_name = "deviceId"];
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .node.highway.v1.DecideExchangeRequest.Method method = 4 [json_name = "method"];
  if (this->_internal_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecideExchangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecideExchangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecideExchangeRequest::GetClassData() const { return &_class_data_; }

void DecideExchangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DecideExchangeRequest *>(to)->MergeFrom(
      static_cast<const DecideExchangeRequest &>(from));
}


void DecideExchangeRequest::MergeFrom(const DecideExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.DecideExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (!from._internal_mnemonic().empty()) {
    _internal_set_mnemonic(from._internal_mnemonic());
  }
  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_method() != 0) {
    _internal_set_method(from._internal_method());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecideExchangeRequest::CopyFrom(const DecideExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.DecideExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecideExchangeRequest::IsInitialized() const {
  return true;
}

void DecideExchangeRequest::InternalSwap(DecideExchangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mnemonic_, lhs_arena,
      &other->mnemonic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecideExchangeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2frequest_2eproto[1]);
}

// ===================================================================

class SendExchangeRequest::_Internal {
 public:
  static const ::common::v1::Peer& peer(const SendExchangeRequest* msg);
  static const ::common::v1::MessageItem& message(const SendExchangeRequest* msg);
};

const ::common::v1::Peer&
SendExchangeRequest::_Internal::peer(const SendExchangeRequest* msg) {
  return *msg->peer_;
}
const ::common::v1::MessageItem&
SendExchangeRequest::_Internal::message(const SendExchangeRequest* msg) {
  return *msg->message_;
}
void SendExchangeRequest::clear_peer() {
  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
void SendExchangeRequest::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
void SendExchangeRequest::clear_items() {
  items_.Clear();
}
SendExchangeRequest::SendExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.SendExchangeRequest)
}
SendExchangeRequest::SendExchangeRequest(const SendExchangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::common::v1::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::common::v1::MessageItem(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.SendExchangeRequest)
}

inline void SendExchangeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
    reinterpret_cast<char*>(&peer_)) + sizeof(message_));
}

SendExchangeRequest::~SendExchangeRequest() {
  // @@protoc_insertion_point(destructor:node.highway.v1.SendExchangeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendExchangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete peer_;
  if (this != internal_default_instance()) delete message_;
}

void SendExchangeRequest::ArenaDtor(void* object) {
  SendExchangeRequest* _this = reinterpret_cast< SendExchangeRequest* >(object);
  (void)_this;
}
void SendExchangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.SendExchangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendExchangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Peer peer = 1 [json_name = "peer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.MessageItem message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.v1.SupplyItem items = 3 [json_name = "items"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendExchangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.SendExchangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Peer peer = 1 [json_name = "peer"];
  if (this->_internal_has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  // .common.v1.MessageItem message = 2 [json_name = "message"];
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  // repeated .common.v1.SupplyItem items = 3 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.SendExchangeRequest)
  return target;
}

size_t SendExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.SendExchangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.v1.SupplyItem items = 3 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .common.v1.Peer peer = 1 [json_name = "peer"];
  if (this->_internal_has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .common.v1.MessageItem message = 2 [json_name = "message"];
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendExchangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendExchangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendExchangeRequest::GetClassData() const { return &_class_data_; }

void SendExchangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendExchangeRequest *>(to)->MergeFrom(
      static_cast<const SendExchangeRequest &>(from));
}


void SendExchangeRequest::MergeFrom(const SendExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.SendExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_peer()) {
    _internal_mutable_peer()->::common::v1::Peer::MergeFrom(from._internal_peer());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::common::v1::MessageItem::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendExchangeRequest::CopyFrom(const SendExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.SendExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendExchangeRequest::IsInitialized() const {
  return true;
}

void SendExchangeRequest::InternalSwap(SendExchangeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendExchangeRequest, message_)
      + sizeof(SendExchangeRequest::message_)
      - PROTOBUF_FIELD_OFFSET(SendExchangeRequest, peer_)>(
          reinterpret_cast<char*>(&peer_),
          reinterpret_cast<char*>(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendExchangeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2frequest_2eproto[2]);
}

// ===================================================================

class CacheRecordRequest::_Internal {
 public:
};

CacheRecordRequest::CacheRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.CacheRecordRequest)
}
CacheRecordRequest::CacheRecordRequest(const CacheRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fingerprint().empty()) {
    fingerprint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fingerprint(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.CacheRecordRequest)
}

inline void CacheRecordRequest::SharedCtor() {
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CacheRecordRequest::~CacheRecordRequest() {
  // @@protoc_insertion_point(destructor:node.highway.v1.CacheRecordRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CacheRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fingerprint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacheRecordRequest::ArenaDtor(void* object) {
  CacheRecordRequest* _this = reinterpret_cast< CacheRecordRequest* >(object);
  (void)_this;
}
void CacheRecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CacheRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.CacheRecordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_name_.ClearToEmpty();
  prefix_.ClearToEmpty();
  fingerprint_.ClearToEmpty();
  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheRecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.CacheRecordRequest.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prefix = 2 [json_name = "prefix"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.CacheRecordRequest.prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fingerprint = 3 [json_name = "fingerprint"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.CacheRecordRequest.fingerprint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string public_key = 4 [json_name = "publicKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.CacheRecordRequest.public_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheRecordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.CacheRecordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.CacheRecordRequest.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // string prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.CacheRecordRequest.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  // string fingerprint = 3 [json_name = "fingerprint"];
  if (!this->_internal_fingerprint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fingerprint().data(), static_cast<int>(this->_internal_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.CacheRecordRequest.fingerprint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fingerprint(), target);
  }

  // string public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.CacheRecordRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.CacheRecordRequest)
  return target;
}

size_t CacheRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.CacheRecordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // string prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string fingerprint = 3 [json_name = "fingerprint"];
  if (!this->_internal_fingerprint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint());
  }

  // string public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CacheRecordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CacheRecordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CacheRecordRequest::GetClassData() const { return &_class_data_; }

void CacheRecordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CacheRecordRequest *>(to)->MergeFrom(
      static_cast<const CacheRecordRequest &>(from));
}


void CacheRecordRequest::MergeFrom(const CacheRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.CacheRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_fingerprint().empty()) {
    _internal_set_fingerprint(from._internal_fingerprint());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CacheRecordRequest::CopyFrom(const CacheRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.CacheRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheRecordRequest::IsInitialized() const {
  return true;
}

void CacheRecordRequest::InternalSwap(CacheRecordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fingerprint_, lhs_arena,
      &other->fingerprint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheRecordRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2frequest_2eproto[3]);
}

// ===================================================================

class GetRecordRequest::_Internal {
 public:
};

GetRecordRequest::GetRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.GetRecordRequest)
}
GetRecordRequest::GetRecordRequest(const GetRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fingerprint().empty()) {
    fingerprint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fingerprint(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.GetRecordRequest)
}

inline void GetRecordRequest::SharedCtor() {
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRecordRequest::~GetRecordRequest() {
  // @@protoc_insertion_point(destructor:node.highway.v1.GetRecordRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fingerprint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRecordRequest::ArenaDtor(void* object) {
  GetRecordRequest* _this = reinterpret_cast< GetRecordRequest* >(object);
  (void)_this;
}
void GetRecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.GetRecordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_name_.ClearToEmpty();
  prefix_.ClearToEmpty();
  fingerprint_.ClearToEmpty();
  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.GetRecordRequest.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prefix = 2 [json_name = "prefix"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.GetRecordRequest.prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fingerprint = 3 [json_name = "fingerprint"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.GetRecordRequest.fingerprint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string public_key = 4 [json_name = "publicKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.GetRecordRequest.public_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.GetRecordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.GetRecordRequest.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // string prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.GetRecordRequest.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  // string fingerprint = 3 [json_name = "fingerprint"];
  if (!this->_internal_fingerprint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fingerprint().data(), static_cast<int>(this->_internal_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.GetRecordRequest.fingerprint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fingerprint(), target);
  }

  // string public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.GetRecordRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.GetRecordRequest)
  return target;
}

size_t GetRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.GetRecordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // string prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string fingerprint = 3 [json_name = "fingerprint"];
  if (!this->_internal_fingerprint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint());
  }

  // string public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRecordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecordRequest::GetClassData() const { return &_class_data_; }

void GetRecordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRecordRequest *>(to)->MergeFrom(
      static_cast<const GetRecordRequest &>(from));
}


void GetRecordRequest::MergeFrom(const GetRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.GetRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_fingerprint().empty()) {
    _internal_set_fingerprint(from._internal_fingerprint());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecordRequest::CopyFrom(const GetRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.GetRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecordRequest::IsInitialized() const {
  return true;
}

void GetRecordRequest::InternalSwap(GetRecordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fingerprint_, lhs_arena,
      &other->fingerprint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecordRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2frequest_2eproto[4]);
}

// ===================================================================

class StoreRecordRequest::_Internal {
 public:
};

StoreRecordRequest::StoreRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.StoreRecordRequest)
}
StoreRecordRequest::StoreRecordRequest(const StoreRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fingerprint().empty()) {
    fingerprint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fingerprint(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.StoreRecordRequest)
}

inline void StoreRecordRequest::SharedCtor() {
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StoreRecordRequest::~StoreRecordRequest() {
  // @@protoc_insertion_point(destructor:node.highway.v1.StoreRecordRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StoreRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fingerprint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StoreRecordRequest::ArenaDtor(void* object) {
  StoreRecordRequest* _this = reinterpret_cast< StoreRecordRequest* >(object);
  (void)_this;
}
void StoreRecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoreRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoreRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.StoreRecordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_name_.ClearToEmpty();
  prefix_.ClearToEmpty();
  fingerprint_.ClearToEmpty();
  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreRecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.StoreRecordRequest.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prefix = 2 [json_name = "prefix"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.StoreRecordRequest.prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fingerprint = 3 [json_name = "fingerprint"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.StoreRecordRequest.fingerprint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string public_key = 4 [json_name = "publicKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.StoreRecordRequest.public_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoreRecordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.StoreRecordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.StoreRecordRequest.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // string prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.StoreRecordRequest.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  // string fingerprint = 3 [json_name = "fingerprint"];
  if (!this->_internal_fingerprint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fingerprint().data(), static_cast<int>(this->_internal_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.StoreRecordRequest.fingerprint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fingerprint(), target);
  }

  // string public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.StoreRecordRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.StoreRecordRequest)
  return target;
}

size_t StoreRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.StoreRecordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // string prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string fingerprint = 3 [json_name = "fingerprint"];
  if (!this->_internal_fingerprint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint());
  }

  // string public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreRecordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StoreRecordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreRecordRequest::GetClassData() const { return &_class_data_; }

void StoreRecordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StoreRecordRequest *>(to)->MergeFrom(
      static_cast<const StoreRecordRequest &>(from));
}


void StoreRecordRequest::MergeFrom(const StoreRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.StoreRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_fingerprint().empty()) {
    _internal_set_fingerprint(from._internal_fingerprint());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreRecordRequest::CopyFrom(const StoreRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.StoreRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRecordRequest::IsInitialized() const {
  return true;
}

void StoreRecordRequest::InternalSwap(StoreRecordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fingerprint_, lhs_arena,
      &other->fingerprint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreRecordRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2frequest_2eproto[5]);
}

// ===================================================================

class RegisterNameRequest::_Internal {
 public:
};

RegisterNameRequest::RegisterNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.RegisterNameRequest)
}
RegisterNameRequest::RegisterNameRequest(const RegisterNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fingerprint().empty()) {
    fingerprint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fingerprint(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.RegisterNameRequest)
}

inline void RegisterNameRequest::SharedCtor() {
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterNameRequest::~RegisterNameRequest() {
  // @@protoc_insertion_point(destructor:node.highway.v1.RegisterNameRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fingerprint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterNameRequest::ArenaDtor(void* object) {
  RegisterNameRequest* _this = reinterpret_cast< RegisterNameRequest* >(object);
  (void)_this;
}
void RegisterNameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.RegisterNameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_name_.ClearToEmpty();
  prefix_.ClearToEmpty();
  fingerprint_.ClearToEmpty();
  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.RegisterNameRequest.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prefix = 2 [json_name = "prefix"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.RegisterNameRequest.prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fingerprint = 3 [json_name = "fingerprint"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.RegisterNameRequest.fingerprint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string public_key = 4 [json_name = "publicKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.RegisterNameRequest.public_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.RegisterNameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.RegisterNameRequest.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // string prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.RegisterNameRequest.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  // string fingerprint = 3 [json_name = "fingerprint"];
  if (!this->_internal_fingerprint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fingerprint().data(), static_cast<int>(this->_internal_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.RegisterNameRequest.fingerprint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fingerprint(), target);
  }

  // string public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.RegisterNameRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.RegisterNameRequest)
  return target;
}

size_t RegisterNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.RegisterNameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // string prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string fingerprint = 3 [json_name = "fingerprint"];
  if (!this->_internal_fingerprint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint());
  }

  // string public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterNameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNameRequest::GetClassData() const { return &_class_data_; }

void RegisterNameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterNameRequest *>(to)->MergeFrom(
      static_cast<const RegisterNameRequest &>(from));
}


void RegisterNameRequest::MergeFrom(const RegisterNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.RegisterNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_fingerprint().empty()) {
    _internal_set_fingerprint(from._internal_fingerprint());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNameRequest::CopyFrom(const RegisterNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.RegisterNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNameRequest::IsInitialized() const {
  return true;
}

void RegisterNameRequest::InternalSwap(RegisterNameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fingerprint_, lhs_arena,
      &other->fingerprint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNameRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2frequest_2eproto[6]);
}

// ===================================================================

class VerifyNameRequest::_Internal {
 public:
};

VerifyNameRequest::VerifyNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.VerifyNameRequest)
}
VerifyNameRequest::VerifyNameRequest(const VerifyNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_name().empty()) {
    s_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s_name(), 
      GetArenaForAllocation());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fingerprint().empty()) {
    fingerprint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fingerprint(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.VerifyNameRequest)
}

inline void VerifyNameRequest::SharedCtor() {
s_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  s_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifyNameRequest::~VerifyNameRequest() {
  // @@protoc_insertion_point(destructor:node.highway.v1.VerifyNameRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VerifyNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fingerprint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerifyNameRequest::ArenaDtor(void* object) {
  VerifyNameRequest* _this = reinterpret_cast< VerifyNameRequest* >(object);
  (void)_this;
}
void VerifyNameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerifyNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VerifyNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.VerifyNameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_name_.ClearToEmpty();
  prefix_.ClearToEmpty();
  fingerprint_.ClearToEmpty();
  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyNameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.VerifyNameRequest.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prefix = 2 [json_name = "prefix"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.VerifyNameRequest.prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fingerprint = 3 [json_name = "fingerprint"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.VerifyNameRequest.fingerprint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string public_key = 4 [json_name = "publicKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.VerifyNameRequest.public_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyNameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.VerifyNameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.VerifyNameRequest.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // string prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.VerifyNameRequest.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  // string fingerprint = 3 [json_name = "fingerprint"];
  if (!this->_internal_fingerprint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fingerprint().data(), static_cast<int>(this->_internal_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.VerifyNameRequest.fingerprint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fingerprint(), target);
  }

  // string public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.VerifyNameRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.VerifyNameRequest)
  return target;
}

size_t VerifyNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.VerifyNameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (!this->_internal_s_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_name());
  }

  // string prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string fingerprint = 3 [json_name = "fingerprint"];
  if (!this->_internal_fingerprint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fingerprint());
  }

  // string public_key = 4 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyNameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VerifyNameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyNameRequest::GetClassData() const { return &_class_data_; }

void VerifyNameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VerifyNameRequest *>(to)->MergeFrom(
      static_cast<const VerifyNameRequest &>(from));
}


void VerifyNameRequest::MergeFrom(const VerifyNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.VerifyNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_name().empty()) {
    _internal_set_s_name(from._internal_s_name());
  }
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_fingerprint().empty()) {
    _internal_set_fingerprint(from._internal_fingerprint());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyNameRequest::CopyFrom(const VerifyNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.VerifyNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyNameRequest::IsInitialized() const {
  return true;
}

void VerifyNameRequest::InternalSwap(VerifyNameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_name_, lhs_arena,
      &other->s_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fingerprint_, lhs_arena,
      &other->fingerprint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, lhs_arena,
      &other->public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyNameRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2frequest_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace highway
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::node::highway::v1::ListPeersRequest* Arena::CreateMaybeMessage< ::node::highway::v1::ListPeersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::ListPeersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::DecideExchangeRequest* Arena::CreateMaybeMessage< ::node::highway::v1::DecideExchangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::DecideExchangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::SendExchangeRequest* Arena::CreateMaybeMessage< ::node::highway::v1::SendExchangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::SendExchangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::CacheRecordRequest* Arena::CreateMaybeMessage< ::node::highway::v1::CacheRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::CacheRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::GetRecordRequest* Arena::CreateMaybeMessage< ::node::highway::v1::GetRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::GetRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::StoreRecordRequest* Arena::CreateMaybeMessage< ::node::highway::v1::StoreRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::StoreRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::RegisterNameRequest* Arena::CreateMaybeMessage< ::node::highway::v1::RegisterNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::RegisterNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::VerifyNameRequest* Arena::CreateMaybeMessage< ::node::highway::v1::VerifyNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::VerifyNameRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
