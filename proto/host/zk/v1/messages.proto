/*
 * Copyright 2017 XLAB d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package host.zk.v1;

import "google/protobuf/empty.proto";

option go_package = "github.com/sonr-io/core/host/zk";

// A generic message
message ZkMessage {
	oneof content {
		BigInt bigint = 4;
		ECGroupElement ec_group_element = 5;
		Status status = 6;
		PedersenFirst pedersen_first = 7;
		PedersenDecommitment pedersen_decommitment = 8;
		SchnorrProofData schnorr_proof_data = 9;
		SchnorrProofRandomData schnorr_proof_random_data = 10;
		SchnorrECProofRandomData schnorr_ec_proof_random_data = 11;
		PseudonymsysCACertificate pseudonymsys_ca_certificate = 15;
		PseudonymsysNymGenProofRandomData pseudonymsys_nym_gen_proof_random_data = 16;
		PseudonymsysIssueProofRandomData pseudonymsys_issue_proof_random_data = 17;
		DoubleBigInt double_bigint = 18;
		PseudonymsysTransferCredentialData pseudonymsys_transfer_credential_data = 19;
		PseudonymsysCACertificateEC pseudonymsys_ca_certificate_ec = 20;
		PseudonymsysNymGenProofRandomDataEC pseudonymsys_nym_gen_proof_random_data_ec = 21;
		PseudonymsysIssueProofRandomDataEC pseudonymsys_issue_proof_random_data_ec = 22;
		PseudonymsysTransferCredentialDataEC pseudonymsys_transfer_credential_data_ec = 23;
		SessionKey SessionKey = 30;
		CLCredReq CLCredReq = 31;
		CLCredential CLCredential = 32;
		UpdateCLCredential update_cl_credential = 33;
		ProveCLCredential prove_cl_credential = 34;
		RegKey reg_key = 35;
	}
	int32 client_id = 28;
}

message ServiceInfo {
	string name = 1;
	string description = 2;
	string provider = 3;
}

message AcceptableCred {
	string org_name = 1;
	repeated string revealed_attrs = 2;
}

message AcceptableCreds {
	repeated AcceptableCred creds = 1;
}

message Attribute {
	int32 index = 1;
	string name = 2;
	bool known = 4;
}

message IntAttribute {
	Attribute attr = 1;
}

message StringAttribute {
	Attribute attr = 2;
}

message CredAttribute {
	oneof type {
		StringAttribute string_attr = 1;
		IntAttribute int_attr = 2;
	}
}

message CredStructure {
	int32 n_known = 1;
	int32 n_committed = 2;
	int32 n_hidden = 3;
	repeated CredAttribute attributes = 4;
}

message Status {
	bool success = 1;
}

message BigInt {
	bytes x1 = 1;
}

message DoubleBigInt {
	bytes x1 = 1;
	bytes x2 = 2;
}

message PedersenFirst {
	bytes h = 1;
}

message PedersenDecommitment {
	bytes x = 1;
 	bytes r = 2;
}

message ECGroupElement {
	bytes x = 1;
 	bytes y = 2;
}

message Pair {
	bytes a = 1;
 	bytes b = 2;
}

message SchnorrProofRandomData {
	bytes x = 1;
	bytes a = 2;
	bytes b = 3;
}

message SchnorrProofData {
	bytes z = 1;
}

message FiatShamir {
    // Used for example for SchnorrProof and RepresentationProof where challenge is constructed by prover
	// using hash function.
	// Note that here we don't have A and B as in SchnorrProofRandomData because usually when proving
	// the knowledge of X such that A^X = B, A is known beforehand (as part of public key).
	// So here ProofRandomData is actually only X.
	bytes proof_random_data = 1;
	bytes challenge = 2;
	repeated bytes proof_data = 3;
}

message FiatShamirAlsoNeg {
    // For proofs where proof data can be negative (see RepresentationProof).
	bytes proof_random_data = 1;
	bytes challenge = 2;
	repeated string proof_data = 3;
}

message SchnorrECProofRandomData {
	ECGroupElement x = 1;
	ECGroupElement a = 2;
	ECGroupElement b = 3;
}

message PseudonymsysNymGenProofRandomData {
	bytes x1 = 1;
	bytes a1 = 2;
	bytes b1 = 3;
	bytes x2 = 4;
	bytes a2 = 5;
	bytes b2 = 6;
	bytes r = 7;
	bytes s = 8;
	string reg_key = 9;
}

message PseudonymsysNymGenProofRandomDataEC {
	ECGroupElement x1 = 1;
	ECGroupElement a1 = 2;
	ECGroupElement b1 = 3;
	ECGroupElement x2 = 4;
	ECGroupElement a2 = 5;
	ECGroupElement b2 = 6;
	bytes r = 7;
	bytes s = 8;
	string reg_key = 9;
}

message PseudonymsysCACertificate {
	bytes blinded_a = 1;
	bytes blinded_b = 2;
	bytes r = 3;
	bytes s = 4;
}

message PseudonymsysCACertificateEC {
	ECGroupElement blinded_a = 1;
	ECGroupElement blinded_b = 2;
	bytes r = 3;
	bytes s = 4;
}

message PseudonymsysIssueProofRandomData {
	bytes x11 = 1;
	bytes x12 = 2;
	bytes x21 = 3;
	bytes x22 = 4;
	bytes a = 5;
	bytes b = 6;
}

message PseudonymsysIssueProofRandomDataEC {
	ECGroupElement x11 = 1;
	ECGroupElement x12 = 2;
	ECGroupElement x21 = 3;
	ECGroupElement x22 = 4;
	ECGroupElement a = 5;
	ECGroupElement b = 6;
}

message PseudonymsysTranscript {
	bytes a = 1;
	bytes b = 2;
	bytes hash = 3;
	bytes z_alpha = 4;
}

message PseudonymsysTranscriptEC {
	ECGroupElement a = 1;
	ECGroupElement b = 2;
	bytes hash = 3;
	bytes z_alpha = 4;
}

message PseudonymsysCredential {
	bytes small_a_to_gamma = 1;
	bytes small_b_to_gamma = 2;
	bytes a_to_gamma = 3;
	bytes b_to_gamma = 4;
    PseudonymsysTranscript t1 = 5;
	PseudonymsysTranscript t2 = 6;
}

message PseudonymsysCredentialEC {
	ECGroupElement small_a_to_gamma = 1;
	ECGroupElement small_b_to_gamma = 2;
	ECGroupElement a_to_gamma = 3;
	ECGroupElement b_to_gamma = 4;
    PseudonymsysTranscriptEC t1 = 5;
	PseudonymsysTranscriptEC t2 = 6;
}

message PseudonymsysTransferCredentialData {
	string OrgName = 1;
	bytes x1 = 2;
	bytes x2 = 3;
	bytes nym_a = 4;
	bytes nym_b = 5;
	PseudonymsysCredential credential = 6;
}

message PseudonymsysTransferCredentialDataEC {
	string org_name = 1;
	ECGroupElement x1 = 2;
	ECGroupElement x2 = 3;
	ECGroupElement nym_a = 4;
	ECGroupElement nym_b = 5;
	PseudonymsysCredentialEC credential = 6;
}

message CSPaillierSecretKey {
	bytes n = 1;
	bytes g = 2;
	bytes x1 = 3;
	bytes x2 = 4;
	bytes x3 = 5;
	bytes d_log_p = 6;
	bytes d_log_g = 7;
	bytes d_log_q = 8;
	bytes verifiable_enc_group_n = 9;
	bytes verifiable_enc_group_g1 = 10;
	bytes verifiable_enc_group_h1 = 11;
	int32 k = 12;
	int32 k1 = 13;
}

message CSPaillierPubKey {
	bytes n = 1;
	bytes g = 2;
	bytes y1 = 3;
	bytes y2 = 4;
	bytes y3 = 5;
	bytes d_log_p = 6;
	bytes d_log_g = 7;
	bytes d_log_q = 8;
	bytes verifiable_enc_group_n = 9;
	bytes verifiable_enc_group_g1 = 10;
	bytes verifiable_enc_group_h1 = 11;
	int32 k = 12;
	int32 k1 = 13;
}

message SessionKey {
	string value = 1;
}

message RegKey {
	string reg_key = 1;
}

message CLCredReq {
	bytes nym = 1;
	repeated bytes known_attrs = 2;
	repeated bytes commitments_of_attrs = 3;
	FiatShamir nym_proof = 4;
	bytes u = 5;
	FiatShamirAlsoNeg u_proof = 6;
	repeated FiatShamir commitments_of_attrs_proofs = 7;
	bytes nonce = 8;
}

message CLCredential {
	bytes a = 1;
	bytes e = 2;
	bytes v11 = 3;
	FiatShamirAlsoNeg a_proof = 4;
}

message UpdateCLCredential {
	bytes nym = 1;
	bytes nonce = 2;
	repeated bytes new_known_attrs = 3;
}

message ProveCLCredential {
	bytes a = 1;
	FiatShamirAlsoNeg proof = 2;
	repeated bytes known_attrs = 3;
	repeated bytes commitments_of_attrs = 4;
	repeated int32 revealed_known_attrs = 5;
	repeated int32 revealed_commitments_of_attrs = 6;
}
