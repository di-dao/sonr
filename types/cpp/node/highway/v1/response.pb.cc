// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/highway/v1/response.proto

#include "node/highway/v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace node {
namespace highway {
namespace v1 {
constexpr CreateChannelResponse::CreateChannelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct CreateChannelResponseDefaultTypeInternal {
  constexpr CreateChannelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateChannelResponseDefaultTypeInternal() {}
  union {
    CreateChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateChannelResponseDefaultTypeInternal _CreateChannelResponse_default_instance_;
constexpr SubscribeChannelResponse::SubscribeChannelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct SubscribeChannelResponseDefaultTypeInternal {
  constexpr SubscribeChannelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeChannelResponseDefaultTypeInternal() {}
  union {
    SubscribeChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeChannelResponseDefaultTypeInternal _SubscribeChannelResponse_default_instance_;
constexpr UnsubscribeChannelResponse::UnsubscribeChannelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct UnsubscribeChannelResponseDefaultTypeInternal {
  constexpr UnsubscribeChannelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnsubscribeChannelResponseDefaultTypeInternal() {}
  union {
    UnsubscribeChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnsubscribeChannelResponseDefaultTypeInternal _UnsubscribeChannelResponse_default_instance_;
constexpr UpdateChannelResponse::UpdateChannelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct UpdateChannelResponseDefaultTypeInternal {
  constexpr UpdateChannelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateChannelResponseDefaultTypeInternal() {}
  union {
    UpdateChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateChannelResponseDefaultTypeInternal _UpdateChannelResponse_default_instance_;
constexpr ListPeersResponse::ListPeersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peers_()
  , olc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , received_(int64_t{0}){}
struct ListPeersResponseDefaultTypeInternal {
  constexpr ListPeersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListPeersResponseDefaultTypeInternal() {}
  union {
    ListPeersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListPeersResponseDefaultTypeInternal _ListPeersResponse_default_instance_;
constexpr DecideExchangeResponse_RecordsEntry_DoNotUse::DecideExchangeResponse_RecordsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DecideExchangeResponse_RecordsEntry_DoNotUseDefaultTypeInternal {
  constexpr DecideExchangeResponse_RecordsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecideExchangeResponse_RecordsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DecideExchangeResponse_RecordsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecideExchangeResponse_RecordsEntry_DoNotUseDefaultTypeInternal _DecideExchangeResponse_RecordsEntry_DoNotUse_default_instance_;
constexpr DecideExchangeResponse::DecideExchangeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : records_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct DecideExchangeResponseDefaultTypeInternal {
  constexpr DecideExchangeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecideExchangeResponseDefaultTypeInternal() {}
  union {
    DecideExchangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecideExchangeResponseDefaultTypeInternal _DecideExchangeResponse_default_instance_;
constexpr SendExchangeResponse::SendExchangeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct SendExchangeResponseDefaultTypeInternal {
  constexpr SendExchangeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendExchangeResponseDefaultTypeInternal() {}
  union {
    SendExchangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendExchangeResponseDefaultTypeInternal _SendExchangeResponse_default_instance_;
constexpr CacheRecordResponse_RecordsEntry_DoNotUse::CacheRecordResponse_RecordsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CacheRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal {
  constexpr CacheRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CacheRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CacheRecordResponse_RecordsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CacheRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal _CacheRecordResponse_RecordsEntry_DoNotUse_default_instance_;
constexpr CacheRecordResponse::CacheRecordResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : records_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct CacheRecordResponseDefaultTypeInternal {
  constexpr CacheRecordResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CacheRecordResponseDefaultTypeInternal() {}
  union {
    CacheRecordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CacheRecordResponseDefaultTypeInternal _CacheRecordResponse_default_instance_;
constexpr GetRecordResponse_RecordsEntry_DoNotUse::GetRecordResponse_RecordsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal {
  constexpr GetRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetRecordResponse_RecordsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal _GetRecordResponse_RecordsEntry_DoNotUse_default_instance_;
constexpr GetRecordResponse::GetRecordResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : records_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct GetRecordResponseDefaultTypeInternal {
  constexpr GetRecordResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRecordResponseDefaultTypeInternal() {}
  union {
    GetRecordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRecordResponseDefaultTypeInternal _GetRecordResponse_default_instance_;
constexpr StoreRecordResponse_RecordsEntry_DoNotUse::StoreRecordResponse_RecordsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StoreRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal {
  constexpr StoreRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StoreRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StoreRecordResponse_RecordsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StoreRecordResponse_RecordsEntry_DoNotUseDefaultTypeInternal _StoreRecordResponse_RecordsEntry_DoNotUse_default_instance_;
constexpr StoreRecordResponse::StoreRecordResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : records_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct StoreRecordResponseDefaultTypeInternal {
  constexpr StoreRecordResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StoreRecordResponseDefaultTypeInternal() {}
  union {
    StoreRecordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StoreRecordResponseDefaultTypeInternal _StoreRecordResponse_default_instance_;
constexpr RegisterNameResponse_RecordsEntry_DoNotUse::RegisterNameResponse_RecordsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RegisterNameResponse_RecordsEntry_DoNotUseDefaultTypeInternal {
  constexpr RegisterNameResponse_RecordsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterNameResponse_RecordsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RegisterNameResponse_RecordsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterNameResponse_RecordsEntry_DoNotUseDefaultTypeInternal _RegisterNameResponse_RecordsEntry_DoNotUse_default_instance_;
constexpr RegisterNameResponse::RegisterNameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : records_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct RegisterNameResponseDefaultTypeInternal {
  constexpr RegisterNameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterNameResponseDefaultTypeInternal() {}
  union {
    RegisterNameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterNameResponseDefaultTypeInternal _RegisterNameResponse_default_instance_;
constexpr VerifyNameResponse_RecordsEntry_DoNotUse::VerifyNameResponse_RecordsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VerifyNameResponse_RecordsEntry_DoNotUseDefaultTypeInternal {
  constexpr VerifyNameResponse_RecordsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VerifyNameResponse_RecordsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    VerifyNameResponse_RecordsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VerifyNameResponse_RecordsEntry_DoNotUseDefaultTypeInternal _VerifyNameResponse_RecordsEntry_DoNotUse_default_instance_;
constexpr VerifyNameResponse::VerifyNameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : records_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct VerifyNameResponseDefaultTypeInternal {
  constexpr VerifyNameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VerifyNameResponseDefaultTypeInternal() {}
  union {
    VerifyNameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VerifyNameResponseDefaultTypeInternal _VerifyNameResponse_default_instance_;
}  // namespace v1
}  // namespace highway
}  // namespace node
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_node_2fhighway_2fv1_2fresponse_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fhighway_2fv1_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_node_2fhighway_2fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CreateChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CreateChannelResponse, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::SubscribeChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::SubscribeChannelResponse, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::UnsubscribeChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::UnsubscribeChannelResponse, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::UpdateChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::UpdateChannelResponse, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::ListPeersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::ListPeersResponse, olc_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::ListPeersResponse, peers_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::ListPeersResponse, received_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeResponse_RecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeResponse_RecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeResponse_RecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeResponse_RecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeResponse, success_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeResponse, error_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::DecideExchangeResponse, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::SendExchangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::SendExchangeResponse, success_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::SendExchangeResponse, error_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordResponse_RecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordResponse_RecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordResponse_RecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordResponse_RecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordResponse, success_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordResponse, error_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::CacheRecordResponse, records_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordResponse_RecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordResponse_RecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordResponse_RecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordResponse_RecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordResponse, success_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordResponse, error_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::GetRecordResponse, records_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordResponse_RecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordResponse_RecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordResponse_RecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordResponse_RecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordResponse, success_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordResponse, error_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::StoreRecordResponse, records_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameResponse_RecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameResponse_RecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameResponse_RecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameResponse_RecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameResponse, success_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameResponse, error_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::RegisterNameResponse, records_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameResponse_RecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameResponse_RecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameResponse_RecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameResponse_RecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameResponse, success_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameResponse, error_),
  PROTOBUF_FIELD_OFFSET(::node::highway::v1::VerifyNameResponse, records_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::node::highway::v1::CreateChannelResponse)},
  { 7, -1, -1, sizeof(::node::highway::v1::SubscribeChannelResponse)},
  { 14, -1, -1, sizeof(::node::highway::v1::UnsubscribeChannelResponse)},
  { 21, -1, -1, sizeof(::node::highway::v1::UpdateChannelResponse)},
  { 28, -1, -1, sizeof(::node::highway::v1::ListPeersResponse)},
  { 37, 45, -1, sizeof(::node::highway::v1::DecideExchangeResponse_RecordsEntry_DoNotUse)},
  { 47, -1, -1, sizeof(::node::highway::v1::DecideExchangeResponse)},
  { 56, -1, -1, sizeof(::node::highway::v1::SendExchangeResponse)},
  { 64, 72, -1, sizeof(::node::highway::v1::CacheRecordResponse_RecordsEntry_DoNotUse)},
  { 74, -1, -1, sizeof(::node::highway::v1::CacheRecordResponse)},
  { 83, 91, -1, sizeof(::node::highway::v1::GetRecordResponse_RecordsEntry_DoNotUse)},
  { 93, -1, -1, sizeof(::node::highway::v1::GetRecordResponse)},
  { 102, 110, -1, sizeof(::node::highway::v1::StoreRecordResponse_RecordsEntry_DoNotUse)},
  { 112, -1, -1, sizeof(::node::highway::v1::StoreRecordResponse)},
  { 121, 129, -1, sizeof(::node::highway::v1::RegisterNameResponse_RecordsEntry_DoNotUse)},
  { 131, -1, -1, sizeof(::node::highway::v1::RegisterNameResponse)},
  { 140, 148, -1, sizeof(::node::highway::v1::VerifyNameResponse_RecordsEntry_DoNotUse)},
  { 150, -1, -1, sizeof(::node::highway::v1::VerifyNameResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_CreateChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_SubscribeChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_UnsubscribeChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_UpdateChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_ListPeersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_DecideExchangeResponse_RecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_DecideExchangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_SendExchangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_CacheRecordResponse_RecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_CacheRecordResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_GetRecordResponse_RecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_GetRecordResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_StoreRecordResponse_RecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_StoreRecordResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_RegisterNameResponse_RecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_RegisterNameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_VerifyNameResponse_RecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::highway::v1::_VerifyNameResponse_default_instance_),
};

const char descriptor_table_protodef_node_2fhighway_2fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036node/highway/v1/response.proto\022\017node.h"
  "ighway.v1\032\024common/v1/core.proto\032\034node/co"
  "des/v1/response.proto\"H\n\025CreateChannelRe"
  "sponse\022/\n\004info\030\001 \001(\0132\033.node.codes.v1.Res"
  "ponseInfoR\004info\"K\n\030SubscribeChannelRespo"
  "nse\022/\n\004info\030\001 \001(\0132\033.node.codes.v1.Respon"
  "seInfoR\004info\"M\n\032UnsubscribeChannelRespon"
  "se\022/\n\004info\030\001 \001(\0132\033.node.codes.v1.Respons"
  "eInfoR\004info\"H\n\025UpdateChannelResponse\022/\n\004"
  "info\030\001 \001(\0132\033.node.codes.v1.ResponseInfoR"
  "\004info\"h\n\021ListPeersResponse\022\020\n\003olc\030\001 \001(\tR"
  "\003olc\022%\n\005peers\030\002 \003(\0132\017.common.v1.PeerR\005pe"
  "ers\022\032\n\010received\030\003 \001(\003R\010received\"\324\001\n\026Deci"
  "deExchangeResponse\022\030\n\007success\030\001 \001(\010R\007suc"
  "cess\022\024\n\005error\030\002 \001(\tR\005error\022N\n\007records\030\003 "
  "\003(\01324.node.highway.v1.DecideExchangeResp"
  "onse.RecordsEntryR\007records\032:\n\014RecordsEnt"
  "ry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005val"
  "ue:\0028\001\"F\n\024SendExchangeResponse\022\030\n\007succes"
  "s\030\001 \001(\010R\007success\022\024\n\005error\030\002 \001(\tR\005error\"\316"
  "\001\n\023CacheRecordResponse\022\030\n\007success\030\001 \001(\010R"
  "\007success\022\024\n\005error\030\002 \001(\tR\005error\022K\n\007record"
  "s\030\003 \003(\01321.node.highway.v1.CacheRecordRes"
  "ponse.RecordsEntryR\007records\032:\n\014RecordsEn"
  "try\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005va"
  "lue:\0028\001\"\312\001\n\021GetRecordResponse\022\030\n\007success"
  "\030\001 \001(\010R\007success\022\024\n\005error\030\002 \001(\tR\005error\022I\n"
  "\007records\030\003 \003(\0132/.node.highway.v1.GetReco"
  "rdResponse.RecordsEntryR\007records\032:\n\014Reco"
  "rdsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001("
  "\tR\005value:\0028\001\"\316\001\n\023StoreRecordResponse\022\030\n\007"
  "success\030\001 \001(\010R\007success\022\024\n\005error\030\002 \001(\tR\005e"
  "rror\022K\n\007records\030\003 \003(\01321.node.highway.v1."
  "StoreRecordResponse.RecordsEntryR\007record"
  "s\032:\n\014RecordsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005v"
  "alue\030\002 \001(\tR\005value:\0028\001\"\320\001\n\024RegisterNameRe"
  "sponse\022\030\n\007success\030\001 \001(\010R\007success\022\024\n\005erro"
  "r\030\002 \001(\tR\005error\022L\n\007records\030\003 \003(\01322.node.h"
  "ighway.v1.RegisterNameResponse.RecordsEn"
  "tryR\007records\032:\n\014RecordsEntry\022\020\n\003key\030\001 \001("
  "\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"\314\001\n\022Ver"
  "ifyNameResponse\022\030\n\007success\030\001 \001(\010R\007succes"
  "s\022\024\n\005error\030\002 \001(\tR\005error\022J\n\007records\030\003 \003(\013"
  "20.node.highway.v1.VerifyNameResponse.Re"
  "cordsEntryR\007records\032:\n\014RecordsEntry\022\020\n\003k"
  "ey\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001B"
  "&Z$github.com/sonr-io/core/node/highwayb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_deps[2] = {
  &::descriptor_table_common_2fv1_2fcore_2eproto,
  &::descriptor_table_node_2fcodes_2fv1_2fresponse_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto = {
  false, false, 1887, descriptor_table_protodef_node_2fhighway_2fv1_2fresponse_2eproto, "node/highway/v1/response.proto", 
  &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once, descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_deps, 2, 18,
  schemas, file_default_instances, TableStruct_node_2fhighway_2fv1_2fresponse_2eproto::offsets,
  file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto, file_level_enum_descriptors_node_2fhighway_2fv1_2fresponse_2eproto, file_level_service_descriptors_node_2fhighway_2fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fhighway_2fv1_2fresponse_2eproto(&descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto);
namespace node {
namespace highway {
namespace v1 {

// ===================================================================

class CreateChannelResponse::_Internal {
 public:
  static const ::node::codes::v1::ResponseInfo& info(const CreateChannelResponse* msg);
};

const ::node::codes::v1::ResponseInfo&
CreateChannelResponse::_Internal::info(const CreateChannelResponse* msg) {
  return *msg->info_;
}
void CreateChannelResponse::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
CreateChannelResponse::CreateChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.CreateChannelResponse)
}
CreateChannelResponse::CreateChannelResponse(const CreateChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::node::codes::v1::ResponseInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.CreateChannelResponse)
}

inline void CreateChannelResponse::SharedCtor() {
info_ = nullptr;
}

CreateChannelResponse::~CreateChannelResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.CreateChannelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void CreateChannelResponse::ArenaDtor(void* object) {
  CreateChannelResponse* _this = reinterpret_cast< CreateChannelResponse* >(object);
  (void)_this;
}
void CreateChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.CreateChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.CreateChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.CreateChannelResponse)
  return target;
}

size_t CreateChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.CreateChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateChannelResponse::GetClassData() const { return &_class_data_; }

void CreateChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateChannelResponse *>(to)->MergeFrom(
      static_cast<const CreateChannelResponse &>(from));
}


void CreateChannelResponse::MergeFrom(const CreateChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.CreateChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::node::codes::v1::ResponseInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateChannelResponse::CopyFrom(const CreateChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.CreateChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelResponse::IsInitialized() const {
  return true;
}

void CreateChannelResponse::InternalSwap(CreateChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChannelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[0]);
}

// ===================================================================

class SubscribeChannelResponse::_Internal {
 public:
  static const ::node::codes::v1::ResponseInfo& info(const SubscribeChannelResponse* msg);
};

const ::node::codes::v1::ResponseInfo&
SubscribeChannelResponse::_Internal::info(const SubscribeChannelResponse* msg) {
  return *msg->info_;
}
void SubscribeChannelResponse::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
SubscribeChannelResponse::SubscribeChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.SubscribeChannelResponse)
}
SubscribeChannelResponse::SubscribeChannelResponse(const SubscribeChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::node::codes::v1::ResponseInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.SubscribeChannelResponse)
}

inline void SubscribeChannelResponse::SharedCtor() {
info_ = nullptr;
}

SubscribeChannelResponse::~SubscribeChannelResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.SubscribeChannelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribeChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SubscribeChannelResponse::ArenaDtor(void* object) {
  SubscribeChannelResponse* _this = reinterpret_cast< SubscribeChannelResponse* >(object);
  (void)_this;
}
void SubscribeChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.SubscribeChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.SubscribeChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.SubscribeChannelResponse)
  return target;
}

size_t SubscribeChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.SubscribeChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribeChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeChannelResponse::GetClassData() const { return &_class_data_; }

void SubscribeChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscribeChannelResponse *>(to)->MergeFrom(
      static_cast<const SubscribeChannelResponse &>(from));
}


void SubscribeChannelResponse::MergeFrom(const SubscribeChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.SubscribeChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::node::codes::v1::ResponseInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeChannelResponse::CopyFrom(const SubscribeChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.SubscribeChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeChannelResponse::IsInitialized() const {
  return true;
}

void SubscribeChannelResponse::InternalSwap(SubscribeChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeChannelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[1]);
}

// ===================================================================

class UnsubscribeChannelResponse::_Internal {
 public:
  static const ::node::codes::v1::ResponseInfo& info(const UnsubscribeChannelResponse* msg);
};

const ::node::codes::v1::ResponseInfo&
UnsubscribeChannelResponse::_Internal::info(const UnsubscribeChannelResponse* msg) {
  return *msg->info_;
}
void UnsubscribeChannelResponse::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
UnsubscribeChannelResponse::UnsubscribeChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.UnsubscribeChannelResponse)
}
UnsubscribeChannelResponse::UnsubscribeChannelResponse(const UnsubscribeChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::node::codes::v1::ResponseInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.UnsubscribeChannelResponse)
}

inline void UnsubscribeChannelResponse::SharedCtor() {
info_ = nullptr;
}

UnsubscribeChannelResponse::~UnsubscribeChannelResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.UnsubscribeChannelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnsubscribeChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void UnsubscribeChannelResponse::ArenaDtor(void* object) {
  UnsubscribeChannelResponse* _this = reinterpret_cast< UnsubscribeChannelResponse* >(object);
  (void)_this;
}
void UnsubscribeChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsubscribeChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnsubscribeChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.UnsubscribeChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsubscribeChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsubscribeChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.UnsubscribeChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.UnsubscribeChannelResponse)
  return target;
}

size_t UnsubscribeChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.UnsubscribeChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsubscribeChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnsubscribeChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsubscribeChannelResponse::GetClassData() const { return &_class_data_; }

void UnsubscribeChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnsubscribeChannelResponse *>(to)->MergeFrom(
      static_cast<const UnsubscribeChannelResponse &>(from));
}


void UnsubscribeChannelResponse::MergeFrom(const UnsubscribeChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.UnsubscribeChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::node::codes::v1::ResponseInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsubscribeChannelResponse::CopyFrom(const UnsubscribeChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.UnsubscribeChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeChannelResponse::IsInitialized() const {
  return true;
}

void UnsubscribeChannelResponse::InternalSwap(UnsubscribeChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeChannelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[2]);
}

// ===================================================================

class UpdateChannelResponse::_Internal {
 public:
  static const ::node::codes::v1::ResponseInfo& info(const UpdateChannelResponse* msg);
};

const ::node::codes::v1::ResponseInfo&
UpdateChannelResponse::_Internal::info(const UpdateChannelResponse* msg) {
  return *msg->info_;
}
void UpdateChannelResponse::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
UpdateChannelResponse::UpdateChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.UpdateChannelResponse)
}
UpdateChannelResponse::UpdateChannelResponse(const UpdateChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::node::codes::v1::ResponseInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.UpdateChannelResponse)
}

inline void UpdateChannelResponse::SharedCtor() {
info_ = nullptr;
}

UpdateChannelResponse::~UpdateChannelResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.UpdateChannelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void UpdateChannelResponse::ArenaDtor(void* object) {
  UpdateChannelResponse* _this = reinterpret_cast< UpdateChannelResponse* >(object);
  (void)_this;
}
void UpdateChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.UpdateChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.UpdateChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.UpdateChannelResponse)
  return target;
}

size_t UpdateChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.UpdateChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .node.codes.v1.ResponseInfo info = 1 [json_name = "info"];
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateChannelResponse::GetClassData() const { return &_class_data_; }

void UpdateChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateChannelResponse *>(to)->MergeFrom(
      static_cast<const UpdateChannelResponse &>(from));
}


void UpdateChannelResponse::MergeFrom(const UpdateChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.UpdateChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::node::codes::v1::ResponseInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateChannelResponse::CopyFrom(const UpdateChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.UpdateChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChannelResponse::IsInitialized() const {
  return true;
}

void UpdateChannelResponse::InternalSwap(UpdateChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateChannelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[3]);
}

// ===================================================================

class ListPeersResponse::_Internal {
 public:
};

void ListPeersResponse::clear_peers() {
  peers_.Clear();
}
ListPeersResponse::ListPeersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  peers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.ListPeersResponse)
}
ListPeersResponse::ListPeersResponse(const ListPeersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  olc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    olc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_olc().empty()) {
    olc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_olc(), 
      GetArenaForAllocation());
  }
  received_ = from.received_;
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.ListPeersResponse)
}

inline void ListPeersResponse::SharedCtor() {
olc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  olc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
received_ = int64_t{0};
}

ListPeersResponse::~ListPeersResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.ListPeersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListPeersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  olc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPeersResponse::ArenaDtor(void* object) {
  ListPeersResponse* _this = reinterpret_cast< ListPeersResponse* >(object);
  (void)_this;
}
void ListPeersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPeersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPeersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.ListPeersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  olc_.ClearToEmpty();
  received_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPeersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string olc = 1 [json_name = "olc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_olc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.ListPeersResponse.olc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.v1.Peer peers = 2 [json_name = "peers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 received = 3 [json_name = "received"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPeersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.ListPeersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string olc = 1 [json_name = "olc"];
  if (!this->_internal_olc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_olc().data(), static_cast<int>(this->_internal_olc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.ListPeersResponse.olc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_olc(), target);
  }

  // repeated .common.v1.Peer peers = 2 [json_name = "peers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_peers(i), target, stream);
  }

  // int64 received = 3 [json_name = "received"];
  if (this->_internal_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_received(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.ListPeersResponse)
  return target;
}

size_t ListPeersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.ListPeersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.v1.Peer peers = 2 [json_name = "peers"];
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string olc = 1 [json_name = "olc"];
  if (!this->_internal_olc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_olc());
  }

  // int64 received = 3 [json_name = "received"];
  if (this->_internal_received() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_received());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPeersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPeersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPeersResponse::GetClassData() const { return &_class_data_; }

void ListPeersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListPeersResponse *>(to)->MergeFrom(
      static_cast<const ListPeersResponse &>(from));
}


void ListPeersResponse::MergeFrom(const ListPeersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.ListPeersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
  if (!from._internal_olc().empty()) {
    _internal_set_olc(from._internal_olc());
  }
  if (from._internal_received() != 0) {
    _internal_set_received(from._internal_received());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPeersResponse::CopyFrom(const ListPeersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.ListPeersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPeersResponse::IsInitialized() const {
  return true;
}

void ListPeersResponse::InternalSwap(ListPeersResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  peers_.InternalSwap(&other->peers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &olc_, lhs_arena,
      &other->olc_, rhs_arena
  );
  swap(received_, other->received_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPeersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[4]);
}

// ===================================================================

DecideExchangeResponse_RecordsEntry_DoNotUse::DecideExchangeResponse_RecordsEntry_DoNotUse() {}
DecideExchangeResponse_RecordsEntry_DoNotUse::DecideExchangeResponse_RecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DecideExchangeResponse_RecordsEntry_DoNotUse::MergeFrom(const DecideExchangeResponse_RecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DecideExchangeResponse_RecordsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[5]);
}

// ===================================================================

class DecideExchangeResponse::_Internal {
 public:
};

DecideExchangeResponse::DecideExchangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.DecideExchangeResponse)
}
DecideExchangeResponse::DecideExchangeResponse(const DecideExchangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  records_.MergeFrom(from.records_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.DecideExchangeResponse)
}

inline void DecideExchangeResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

DecideExchangeResponse::~DecideExchangeResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.DecideExchangeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecideExchangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecideExchangeResponse::ArenaDtor(void* object) {
  DecideExchangeResponse* _this = reinterpret_cast< DecideExchangeResponse* >(object);
  (void)_this;
  _this->records_. ~MapField();
}
inline void DecideExchangeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &DecideExchangeResponse::ArenaDtor);
  }
}
void DecideExchangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecideExchangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.DecideExchangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  error_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecideExchangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.DecideExchangeResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> records = 3 [json_name = "records"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DecideExchangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.DecideExchangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.DecideExchangeResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // map<string, string> records = 3 [json_name = "records"];
  if (!this->_internal_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.DecideExchangeResponse.RecordsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.DecideExchangeResponse.RecordsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DecideExchangeResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it) {
        target = DecideExchangeResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.DecideExchangeResponse)
  return target;
}

size_t DecideExchangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.DecideExchangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> records = 3 [json_name = "records"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_records().begin();
      it != this->_internal_records().end(); ++it) {
    total_size += DecideExchangeResponse_RecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecideExchangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecideExchangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecideExchangeResponse::GetClassData() const { return &_class_data_; }

void DecideExchangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DecideExchangeResponse *>(to)->MergeFrom(
      static_cast<const DecideExchangeResponse &>(from));
}


void DecideExchangeResponse::MergeFrom(const DecideExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.DecideExchangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecideExchangeResponse::CopyFrom(const DecideExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.DecideExchangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecideExchangeResponse::IsInitialized() const {
  return true;
}

void DecideExchangeResponse::InternalSwap(DecideExchangeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecideExchangeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[6]);
}

// ===================================================================

class SendExchangeResponse::_Internal {
 public:
};

SendExchangeResponse::SendExchangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.SendExchangeResponse)
}
SendExchangeResponse::SendExchangeResponse(const SendExchangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.SendExchangeResponse)
}

inline void SendExchangeResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

SendExchangeResponse::~SendExchangeResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.SendExchangeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendExchangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendExchangeResponse::ArenaDtor(void* object) {
  SendExchangeResponse* _this = reinterpret_cast< SendExchangeResponse* >(object);
  (void)_this;
}
void SendExchangeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendExchangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendExchangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.SendExchangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendExchangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.SendExchangeResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendExchangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.SendExchangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.SendExchangeResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.SendExchangeResponse)
  return target;
}

size_t SendExchangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.SendExchangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendExchangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendExchangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendExchangeResponse::GetClassData() const { return &_class_data_; }

void SendExchangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendExchangeResponse *>(to)->MergeFrom(
      static_cast<const SendExchangeResponse &>(from));
}


void SendExchangeResponse::MergeFrom(const SendExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.SendExchangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendExchangeResponse::CopyFrom(const SendExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.SendExchangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendExchangeResponse::IsInitialized() const {
  return true;
}

void SendExchangeResponse::InternalSwap(SendExchangeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendExchangeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[7]);
}

// ===================================================================

CacheRecordResponse_RecordsEntry_DoNotUse::CacheRecordResponse_RecordsEntry_DoNotUse() {}
CacheRecordResponse_RecordsEntry_DoNotUse::CacheRecordResponse_RecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CacheRecordResponse_RecordsEntry_DoNotUse::MergeFrom(const CacheRecordResponse_RecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CacheRecordResponse_RecordsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[8]);
}

// ===================================================================

class CacheRecordResponse::_Internal {
 public:
};

CacheRecordResponse::CacheRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.CacheRecordResponse)
}
CacheRecordResponse::CacheRecordResponse(const CacheRecordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  records_.MergeFrom(from.records_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.CacheRecordResponse)
}

inline void CacheRecordResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

CacheRecordResponse::~CacheRecordResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.CacheRecordResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CacheRecordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacheRecordResponse::ArenaDtor(void* object) {
  CacheRecordResponse* _this = reinterpret_cast< CacheRecordResponse* >(object);
  (void)_this;
  _this->records_. ~MapField();
}
inline void CacheRecordResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CacheRecordResponse::ArenaDtor);
  }
}
void CacheRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CacheRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.CacheRecordResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  error_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheRecordResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.CacheRecordResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> records = 3 [json_name = "records"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheRecordResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.CacheRecordResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.CacheRecordResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // map<string, string> records = 3 [json_name = "records"];
  if (!this->_internal_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.CacheRecordResponse.RecordsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.CacheRecordResponse.RecordsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CacheRecordResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it) {
        target = CacheRecordResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.CacheRecordResponse)
  return target;
}

size_t CacheRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.CacheRecordResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> records = 3 [json_name = "records"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_records().begin();
      it != this->_internal_records().end(); ++it) {
    total_size += CacheRecordResponse_RecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CacheRecordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CacheRecordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CacheRecordResponse::GetClassData() const { return &_class_data_; }

void CacheRecordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CacheRecordResponse *>(to)->MergeFrom(
      static_cast<const CacheRecordResponse &>(from));
}


void CacheRecordResponse::MergeFrom(const CacheRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.CacheRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CacheRecordResponse::CopyFrom(const CacheRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.CacheRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheRecordResponse::IsInitialized() const {
  return true;
}

void CacheRecordResponse::InternalSwap(CacheRecordResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheRecordResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[9]);
}

// ===================================================================

GetRecordResponse_RecordsEntry_DoNotUse::GetRecordResponse_RecordsEntry_DoNotUse() {}
GetRecordResponse_RecordsEntry_DoNotUse::GetRecordResponse_RecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetRecordResponse_RecordsEntry_DoNotUse::MergeFrom(const GetRecordResponse_RecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetRecordResponse_RecordsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[10]);
}

// ===================================================================

class GetRecordResponse::_Internal {
 public:
};

GetRecordResponse::GetRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.GetRecordResponse)
}
GetRecordResponse::GetRecordResponse(const GetRecordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  records_.MergeFrom(from.records_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.GetRecordResponse)
}

inline void GetRecordResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

GetRecordResponse::~GetRecordResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.GetRecordResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRecordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRecordResponse::ArenaDtor(void* object) {
  GetRecordResponse* _this = reinterpret_cast< GetRecordResponse* >(object);
  (void)_this;
  _this->records_. ~MapField();
}
inline void GetRecordResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GetRecordResponse::ArenaDtor);
  }
}
void GetRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.GetRecordResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  error_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecordResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.GetRecordResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> records = 3 [json_name = "records"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecordResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.GetRecordResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.GetRecordResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // map<string, string> records = 3 [json_name = "records"];
  if (!this->_internal_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.GetRecordResponse.RecordsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.GetRecordResponse.RecordsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetRecordResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it) {
        target = GetRecordResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.GetRecordResponse)
  return target;
}

size_t GetRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.GetRecordResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> records = 3 [json_name = "records"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_records().begin();
      it != this->_internal_records().end(); ++it) {
    total_size += GetRecordResponse_RecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRecordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecordResponse::GetClassData() const { return &_class_data_; }

void GetRecordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRecordResponse *>(to)->MergeFrom(
      static_cast<const GetRecordResponse &>(from));
}


void GetRecordResponse::MergeFrom(const GetRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.GetRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecordResponse::CopyFrom(const GetRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.GetRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecordResponse::IsInitialized() const {
  return true;
}

void GetRecordResponse::InternalSwap(GetRecordResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecordResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[11]);
}

// ===================================================================

StoreRecordResponse_RecordsEntry_DoNotUse::StoreRecordResponse_RecordsEntry_DoNotUse() {}
StoreRecordResponse_RecordsEntry_DoNotUse::StoreRecordResponse_RecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StoreRecordResponse_RecordsEntry_DoNotUse::MergeFrom(const StoreRecordResponse_RecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StoreRecordResponse_RecordsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[12]);
}

// ===================================================================

class StoreRecordResponse::_Internal {
 public:
};

StoreRecordResponse::StoreRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.StoreRecordResponse)
}
StoreRecordResponse::StoreRecordResponse(const StoreRecordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  records_.MergeFrom(from.records_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.StoreRecordResponse)
}

inline void StoreRecordResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

StoreRecordResponse::~StoreRecordResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.StoreRecordResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StoreRecordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StoreRecordResponse::ArenaDtor(void* object) {
  StoreRecordResponse* _this = reinterpret_cast< StoreRecordResponse* >(object);
  (void)_this;
  _this->records_. ~MapField();
}
inline void StoreRecordResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &StoreRecordResponse::ArenaDtor);
  }
}
void StoreRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoreRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.StoreRecordResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  error_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreRecordResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.StoreRecordResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> records = 3 [json_name = "records"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoreRecordResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.StoreRecordResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.StoreRecordResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // map<string, string> records = 3 [json_name = "records"];
  if (!this->_internal_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.StoreRecordResponse.RecordsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.StoreRecordResponse.RecordsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StoreRecordResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it) {
        target = StoreRecordResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.StoreRecordResponse)
  return target;
}

size_t StoreRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.StoreRecordResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> records = 3 [json_name = "records"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_records().begin();
      it != this->_internal_records().end(); ++it) {
    total_size += StoreRecordResponse_RecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreRecordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StoreRecordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreRecordResponse::GetClassData() const { return &_class_data_; }

void StoreRecordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StoreRecordResponse *>(to)->MergeFrom(
      static_cast<const StoreRecordResponse &>(from));
}


void StoreRecordResponse::MergeFrom(const StoreRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.StoreRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreRecordResponse::CopyFrom(const StoreRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.StoreRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRecordResponse::IsInitialized() const {
  return true;
}

void StoreRecordResponse::InternalSwap(StoreRecordResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreRecordResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[13]);
}

// ===================================================================

RegisterNameResponse_RecordsEntry_DoNotUse::RegisterNameResponse_RecordsEntry_DoNotUse() {}
RegisterNameResponse_RecordsEntry_DoNotUse::RegisterNameResponse_RecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RegisterNameResponse_RecordsEntry_DoNotUse::MergeFrom(const RegisterNameResponse_RecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RegisterNameResponse_RecordsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[14]);
}

// ===================================================================

class RegisterNameResponse::_Internal {
 public:
};

RegisterNameResponse::RegisterNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.RegisterNameResponse)
}
RegisterNameResponse::RegisterNameResponse(const RegisterNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  records_.MergeFrom(from.records_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.RegisterNameResponse)
}

inline void RegisterNameResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

RegisterNameResponse::~RegisterNameResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.RegisterNameResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterNameResponse::ArenaDtor(void* object) {
  RegisterNameResponse* _this = reinterpret_cast< RegisterNameResponse* >(object);
  (void)_this;
  _this->records_. ~MapField();
}
inline void RegisterNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &RegisterNameResponse::ArenaDtor);
  }
}
void RegisterNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.RegisterNameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  error_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.RegisterNameResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> records = 3 [json_name = "records"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.RegisterNameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.RegisterNameResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // map<string, string> records = 3 [json_name = "records"];
  if (!this->_internal_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.RegisterNameResponse.RecordsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.RegisterNameResponse.RecordsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RegisterNameResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it) {
        target = RegisterNameResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.RegisterNameResponse)
  return target;
}

size_t RegisterNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.RegisterNameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> records = 3 [json_name = "records"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_records().begin();
      it != this->_internal_records().end(); ++it) {
    total_size += RegisterNameResponse_RecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterNameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNameResponse::GetClassData() const { return &_class_data_; }

void RegisterNameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterNameResponse *>(to)->MergeFrom(
      static_cast<const RegisterNameResponse &>(from));
}


void RegisterNameResponse::MergeFrom(const RegisterNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.RegisterNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNameResponse::CopyFrom(const RegisterNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.RegisterNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNameResponse::IsInitialized() const {
  return true;
}

void RegisterNameResponse::InternalSwap(RegisterNameResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNameResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[15]);
}

// ===================================================================

VerifyNameResponse_RecordsEntry_DoNotUse::VerifyNameResponse_RecordsEntry_DoNotUse() {}
VerifyNameResponse_RecordsEntry_DoNotUse::VerifyNameResponse_RecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VerifyNameResponse_RecordsEntry_DoNotUse::MergeFrom(const VerifyNameResponse_RecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VerifyNameResponse_RecordsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[16]);
}

// ===================================================================

class VerifyNameResponse::_Internal {
 public:
};

VerifyNameResponse::VerifyNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.highway.v1.VerifyNameResponse)
}
VerifyNameResponse::VerifyNameResponse(const VerifyNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  records_.MergeFrom(from.records_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:node.highway.v1.VerifyNameResponse)
}

inline void VerifyNameResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

VerifyNameResponse::~VerifyNameResponse() {
  // @@protoc_insertion_point(destructor:node.highway.v1.VerifyNameResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VerifyNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerifyNameResponse::ArenaDtor(void* object) {
  VerifyNameResponse* _this = reinterpret_cast< VerifyNameResponse* >(object);
  (void)_this;
  _this->records_. ~MapField();
}
inline void VerifyNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &VerifyNameResponse::ArenaDtor);
  }
}
void VerifyNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VerifyNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:node.highway.v1.VerifyNameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  error_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.highway.v1.VerifyNameResponse.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> records = 3 [json_name = "records"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyNameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.highway.v1.VerifyNameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.highway.v1.VerifyNameResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // map<string, string> records = 3 [json_name = "records"];
  if (!this->_internal_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.VerifyNameResponse.RecordsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.highway.v1.VerifyNameResponse.RecordsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VerifyNameResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it) {
        target = VerifyNameResponse_RecordsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.highway.v1.VerifyNameResponse)
  return target;
}

size_t VerifyNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.highway.v1.VerifyNameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> records = 3 [json_name = "records"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_records().begin();
      it != this->_internal_records().end(); ++it) {
    total_size += VerifyNameResponse_RecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyNameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VerifyNameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyNameResponse::GetClassData() const { return &_class_data_; }

void VerifyNameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VerifyNameResponse *>(to)->MergeFrom(
      static_cast<const VerifyNameResponse &>(from));
}


void VerifyNameResponse::MergeFrom(const VerifyNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.highway.v1.VerifyNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyNameResponse::CopyFrom(const VerifyNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.highway.v1.VerifyNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyNameResponse::IsInitialized() const {
  return true;
}

void VerifyNameResponse::InternalSwap(VerifyNameResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyNameResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_getter, &descriptor_table_node_2fhighway_2fv1_2fresponse_2eproto_once,
      file_level_metadata_node_2fhighway_2fv1_2fresponse_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace highway
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::node::highway::v1::CreateChannelResponse* Arena::CreateMaybeMessage< ::node::highway::v1::CreateChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::CreateChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::SubscribeChannelResponse* Arena::CreateMaybeMessage< ::node::highway::v1::SubscribeChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::SubscribeChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::UnsubscribeChannelResponse* Arena::CreateMaybeMessage< ::node::highway::v1::UnsubscribeChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::UnsubscribeChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::UpdateChannelResponse* Arena::CreateMaybeMessage< ::node::highway::v1::UpdateChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::UpdateChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::ListPeersResponse* Arena::CreateMaybeMessage< ::node::highway::v1::ListPeersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::ListPeersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::DecideExchangeResponse_RecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::node::highway::v1::DecideExchangeResponse_RecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::DecideExchangeResponse_RecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::DecideExchangeResponse* Arena::CreateMaybeMessage< ::node::highway::v1::DecideExchangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::DecideExchangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::SendExchangeResponse* Arena::CreateMaybeMessage< ::node::highway::v1::SendExchangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::SendExchangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::CacheRecordResponse_RecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::node::highway::v1::CacheRecordResponse_RecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::CacheRecordResponse_RecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::CacheRecordResponse* Arena::CreateMaybeMessage< ::node::highway::v1::CacheRecordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::CacheRecordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::GetRecordResponse_RecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::node::highway::v1::GetRecordResponse_RecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::GetRecordResponse_RecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::GetRecordResponse* Arena::CreateMaybeMessage< ::node::highway::v1::GetRecordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::GetRecordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::StoreRecordResponse_RecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::node::highway::v1::StoreRecordResponse_RecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::StoreRecordResponse_RecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::StoreRecordResponse* Arena::CreateMaybeMessage< ::node::highway::v1::StoreRecordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::StoreRecordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::RegisterNameResponse_RecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::node::highway::v1::RegisterNameResponse_RecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::RegisterNameResponse_RecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::RegisterNameResponse* Arena::CreateMaybeMessage< ::node::highway::v1::RegisterNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::RegisterNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::VerifyNameResponse_RecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::node::highway::v1::VerifyNameResponse_RecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::VerifyNameResponse_RecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::highway::v1::VerifyNameResponse* Arena::CreateMaybeMessage< ::node::highway::v1::VerifyNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::highway::v1::VerifyNameResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
