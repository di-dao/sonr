// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/vault/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d11830cb882a786, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d11830cb882a786, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// !
// ||--------------------------------------------------------------------------------||
// ! ||                              Gateway API Responses || !
// ||--------------------------------------------------------------------------------||
type SendWalletMailRequest struct {
	Creator string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Mail    *WalletMail `protobuf:"bytes,2,opt,name=mail,proto3" json:"mail,omitempty"`
	To      string      `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *SendWalletMailRequest) Reset()         { *m = SendWalletMailRequest{} }
func (m *SendWalletMailRequest) String() string { return proto.CompactTextString(m) }
func (*SendWalletMailRequest) ProtoMessage()    {}
func (*SendWalletMailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d11830cb882a786, []int{2}
}
func (m *SendWalletMailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendWalletMailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendWalletMailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendWalletMailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendWalletMailRequest.Merge(m, src)
}
func (m *SendWalletMailRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendWalletMailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendWalletMailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendWalletMailRequest proto.InternalMessageInfo

func (m *SendWalletMailRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SendWalletMailRequest) GetMail() *WalletMail {
	if m != nil {
		return m.Mail
	}
	return nil
}

func (m *SendWalletMailRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type SendWalletMailResponse struct {
	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SendWalletMailResponse) Reset()         { *m = SendWalletMailResponse{} }
func (m *SendWalletMailResponse) String() string { return proto.CompactTextString(m) }
func (*SendWalletMailResponse) ProtoMessage()    {}
func (*SendWalletMailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d11830cb882a786, []int{3}
}
func (m *SendWalletMailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendWalletMailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendWalletMailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendWalletMailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendWalletMailResponse.Merge(m, src)
}
func (m *SendWalletMailResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendWalletMailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendWalletMailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendWalletMailResponse proto.InternalMessageInfo

func (m *SendWalletMailResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SendWalletMailResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SendWalletMailResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ReadWalletMailRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *ReadWalletMailRequest) Reset()         { *m = ReadWalletMailRequest{} }
func (m *ReadWalletMailRequest) String() string { return proto.CompactTextString(m) }
func (*ReadWalletMailRequest) ProtoMessage()    {}
func (*ReadWalletMailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d11830cb882a786, []int{4}
}
func (m *ReadWalletMailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadWalletMailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadWalletMailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadWalletMailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadWalletMailRequest.Merge(m, src)
}
func (m *ReadWalletMailRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadWalletMailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadWalletMailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadWalletMailRequest proto.InternalMessageInfo

func (m *ReadWalletMailRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type ReadWalletMailResponse struct {
	Mailboxes map[string]*WalletMailbox `protobuf:"bytes,1,rep,name=mailboxes,proto3" json:"mailboxes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ReadWalletMailResponse) Reset()         { *m = ReadWalletMailResponse{} }
func (m *ReadWalletMailResponse) String() string { return proto.CompactTextString(m) }
func (*ReadWalletMailResponse) ProtoMessage()    {}
func (*ReadWalletMailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d11830cb882a786, []int{5}
}
func (m *ReadWalletMailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadWalletMailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadWalletMailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadWalletMailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadWalletMailResponse.Merge(m, src)
}
func (m *ReadWalletMailResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReadWalletMailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadWalletMailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadWalletMailResponse proto.InternalMessageInfo

func (m *ReadWalletMailResponse) GetMailboxes() map[string]*WalletMailbox {
	if m != nil {
		return m.Mailboxes
	}
	return nil
}

type QueryGetClaimableWalletRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetClaimableWalletRequest) Reset()         { *m = QueryGetClaimableWalletRequest{} }
func (m *QueryGetClaimableWalletRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetClaimableWalletRequest) ProtoMessage()    {}
func (*QueryGetClaimableWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d11830cb882a786, []int{6}
}
func (m *QueryGetClaimableWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClaimableWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClaimableWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClaimableWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClaimableWalletRequest.Merge(m, src)
}
func (m *QueryGetClaimableWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClaimableWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClaimableWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClaimableWalletRequest proto.InternalMessageInfo

func (m *QueryGetClaimableWalletRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetClaimableWalletResponse struct {
	ClaimableWallet ClaimableWallet `protobuf:"bytes,1,opt,name=ClaimableWallet,proto3" json:"ClaimableWallet"`
}

func (m *QueryGetClaimableWalletResponse) Reset()         { *m = QueryGetClaimableWalletResponse{} }
func (m *QueryGetClaimableWalletResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetClaimableWalletResponse) ProtoMessage()    {}
func (*QueryGetClaimableWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d11830cb882a786, []int{7}
}
func (m *QueryGetClaimableWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClaimableWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClaimableWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClaimableWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClaimableWalletResponse.Merge(m, src)
}
func (m *QueryGetClaimableWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClaimableWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClaimableWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClaimableWalletResponse proto.InternalMessageInfo

func (m *QueryGetClaimableWalletResponse) GetClaimableWallet() ClaimableWallet {
	if m != nil {
		return m.ClaimableWallet
	}
	return ClaimableWallet{}
}

type QueryAllClaimableWalletRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClaimableWalletRequest) Reset()         { *m = QueryAllClaimableWalletRequest{} }
func (m *QueryAllClaimableWalletRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllClaimableWalletRequest) ProtoMessage()    {}
func (*QueryAllClaimableWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d11830cb882a786, []int{8}
}
func (m *QueryAllClaimableWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClaimableWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClaimableWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClaimableWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClaimableWalletRequest.Merge(m, src)
}
func (m *QueryAllClaimableWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClaimableWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClaimableWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClaimableWalletRequest proto.InternalMessageInfo

func (m *QueryAllClaimableWalletRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllClaimableWalletResponse struct {
	ClaimableWallet []ClaimableWallet   `protobuf:"bytes,1,rep,name=ClaimableWallet,proto3" json:"ClaimableWallet"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClaimableWalletResponse) Reset()         { *m = QueryAllClaimableWalletResponse{} }
func (m *QueryAllClaimableWalletResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllClaimableWalletResponse) ProtoMessage()    {}
func (*QueryAllClaimableWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d11830cb882a786, []int{9}
}
func (m *QueryAllClaimableWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClaimableWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClaimableWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClaimableWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClaimableWalletResponse.Merge(m, src)
}
func (m *QueryAllClaimableWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClaimableWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClaimableWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClaimableWalletResponse proto.InternalMessageInfo

func (m *QueryAllClaimableWalletResponse) GetClaimableWallet() []ClaimableWallet {
	if m != nil {
		return m.ClaimableWallet
	}
	return nil
}

func (m *QueryAllClaimableWalletResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "core.vault.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "core.vault.QueryParamsResponse")
	proto.RegisterType((*SendWalletMailRequest)(nil), "core.vault.SendWalletMailRequest")
	proto.RegisterType((*SendWalletMailResponse)(nil), "core.vault.SendWalletMailResponse")
	proto.RegisterType((*ReadWalletMailRequest)(nil), "core.vault.ReadWalletMailRequest")
	proto.RegisterType((*ReadWalletMailResponse)(nil), "core.vault.ReadWalletMailResponse")
	proto.RegisterMapType((map[string]*WalletMailbox)(nil), "core.vault.ReadWalletMailResponse.MailboxesEntry")
	proto.RegisterType((*QueryGetClaimableWalletRequest)(nil), "core.vault.QueryGetClaimableWalletRequest")
	proto.RegisterType((*QueryGetClaimableWalletResponse)(nil), "core.vault.QueryGetClaimableWalletResponse")
	proto.RegisterType((*QueryAllClaimableWalletRequest)(nil), "core.vault.QueryAllClaimableWalletRequest")
	proto.RegisterType((*QueryAllClaimableWalletResponse)(nil), "core.vault.QueryAllClaimableWalletResponse")
}

func init() { proto.RegisterFile("core/vault/query.proto", fileDescriptor_5d11830cb882a786) }

var fileDescriptor_5d11830cb882a786 = []byte{
	// 762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x4d, 0x6b, 0x13, 0x41,
	0x18, 0xc7, 0xb3, 0x49, 0x5f, 0xec, 0x53, 0x89, 0x32, 0xa6, 0x69, 0x1a, 0xcb, 0x46, 0x17, 0x5f,
	0x4a, 0x84, 0x9d, 0xa6, 0x22, 0x48, 0x0f, 0x42, 0x2b, 0xda, 0x83, 0x14, 0xeb, 0x7a, 0x28, 0x78,
	0x9b, 0x24, 0xe3, 0x66, 0x71, 0x77, 0x27, 0xdd, 0x99, 0xd4, 0x86, 0xd2, 0x8b, 0x37, 0x11, 0x44,
	0xf0, 0x33, 0xf8, 0x19, 0xbc, 0x7b, 0xea, 0xb1, 0xe0, 0xc5, 0x93, 0x48, 0xeb, 0x07, 0x91, 0x9d,
	0x99, 0x90, 0xdd, 0x64, 0xd3, 0xaa, 0xb7, 0xe4, 0x79, 0xfb, 0xff, 0x9e, 0xc9, 0xfc, 0x27, 0x50,
	0x6e, 0xb1, 0x88, 0xe2, 0x7d, 0xd2, 0xf3, 0x05, 0xde, 0xeb, 0xd1, 0xa8, 0x6f, 0x77, 0x23, 0x26,
	0x18, 0x82, 0x38, 0x6e, 0xcb, 0x78, 0xb5, 0xe4, 0x32, 0x97, 0xc9, 0x30, 0x8e, 0x3f, 0xa9, 0x8a,
	0xea, 0xb2, 0xcb, 0x98, 0xeb, 0x53, 0x4c, 0xba, 0x1e, 0x26, 0x61, 0xc8, 0x04, 0x11, 0x1e, 0x0b,
	0xb9, 0xce, 0xd6, 0x5b, 0x8c, 0x07, 0x8c, 0xe3, 0x26, 0xe1, 0x54, 0x0d, 0xc6, 0xfb, 0x8d, 0x26,
	0x15, 0xa4, 0x81, 0xbb, 0xc4, 0xf5, 0x42, 0x59, 0xac, 0x6b, 0x2b, 0x09, 0x06, 0x97, 0x86, 0x94,
	0x7b, 0x83, 0x29, 0xa5, 0x44, 0x86, 0xbf, 0x1e, 0x44, 0x17, 0x13, 0xd1, 0x96, 0x4f, 0xbc, 0x40,
	0x27, 0xac, 0x12, 0xa0, 0x17, 0xb1, 0xd4, 0x0e, 0x89, 0x48, 0xc0, 0x1d, 0xba, 0xd7, 0xa3, 0x5c,
	0x58, 0x5b, 0x70, 0x2d, 0x15, 0xe5, 0x5d, 0x16, 0x72, 0x8a, 0x56, 0x61, 0xa6, 0x2b, 0x23, 0x15,
	0xe3, 0x86, 0xb1, 0x32, 0xbf, 0x86, 0xec, 0xe1, 0xca, 0xb6, 0xaa, 0xdd, 0x9c, 0x3a, 0xfe, 0x59,
	0xcb, 0x39, 0xba, 0xce, 0x0a, 0x60, 0xe1, 0x25, 0x0d, 0xdb, 0xbb, 0xc4, 0xf7, 0xa9, 0xd8, 0x26,
	0x9e, 0xaf, 0x15, 0x50, 0x05, 0x66, 0x5b, 0x11, 0x25, 0x82, 0x45, 0x72, 0xd6, 0x9c, 0x33, 0xf8,
	0x8a, 0xea, 0x30, 0x15, 0x10, 0xcf, 0xaf, 0xe4, 0xa5, 0x44, 0x39, 0x29, 0x91, 0x18, 0x23, 0x6b,
	0x50, 0x11, 0xf2, 0x82, 0x55, 0x0a, 0x72, 0x40, 0x5e, 0x30, 0x2b, 0x84, 0xf2, 0xa8, 0x9c, 0x46,
	0xaf, 0xc0, 0x2c, 0xef, 0xb5, 0x5a, 0x94, 0x2b, 0xf6, 0x4b, 0xce, 0xe0, 0x2b, 0x5a, 0x86, 0x39,
	0xe1, 0x05, 0x94, 0x0b, 0x12, 0x74, 0xa5, 0x68, 0xc1, 0x19, 0x06, 0xe2, 0x2c, 0xf7, 0xdc, 0x90,
	0x88, 0x5e, 0x44, 0xa5, 0xd0, 0x65, 0x67, 0x18, 0xb0, 0x1a, 0xb0, 0xe0, 0x50, 0xf2, 0x2f, 0xeb,
	0x59, 0xdf, 0x0c, 0x28, 0x8f, 0xf6, 0x68, 0xc6, 0xe7, 0x30, 0x17, 0x6f, 0xd5, 0x64, 0x07, 0x34,
	0xa6, 0x2c, 0xac, 0xcc, 0xaf, 0x35, 0x92, 0xeb, 0x67, 0xb7, 0xd9, 0xdb, 0x83, 0x9e, 0x27, 0xa1,
	0x88, 0xfa, 0xce, 0x70, 0x46, 0x75, 0x17, 0x8a, 0xe9, 0x24, 0xba, 0x0a, 0x85, 0x37, 0xb4, 0xaf,
	0x99, 0xe2, 0x8f, 0x08, 0xc3, 0xf4, 0x3e, 0xf1, 0x7b, 0x54, 0x9f, 0xf7, 0x52, 0xf6, 0x79, 0x37,
	0xd9, 0x81, 0xa3, 0xea, 0xd6, 0xf3, 0x0f, 0x0d, 0x6b, 0x15, 0x4c, 0x79, 0x3f, 0xb6, 0xa8, 0x78,
	0x1c, 0xdf, 0x26, 0xd2, 0xf4, 0xa9, 0x2a, 0x1e, 0x1c, 0x40, 0x11, 0xf2, 0x5e, 0x5b, 0xea, 0x4c,
	0x39, 0x79, 0xaf, 0x6d, 0x85, 0x50, 0x9b, 0xd8, 0xa1, 0xd7, 0x7f, 0x06, 0x57, 0x46, 0x52, 0xfa,
	0x9a, 0x5d, 0x4f, 0x32, 0x8d, 0x94, 0xe8, 0xfb, 0x36, 0xda, 0x69, 0x75, 0x34, 0xe1, 0x86, 0xef,
	0x4f, 0x20, 0x7c, 0x0a, 0x30, 0xb4, 0x95, 0x56, 0xba, 0x63, 0x2b, 0x0f, 0xda, 0xb1, 0x07, 0x6d,
	0x65, 0x6e, 0xed, 0x41, 0x7b, 0x87, 0xb8, 0x54, 0xf7, 0x3a, 0x89, 0x4e, 0xeb, 0xab, 0xa1, 0x57,
	0xcb, 0x92, 0x3a, 0x6f, 0xb5, 0xc2, 0xff, 0xad, 0x86, 0xb6, 0x52, 0xe0, 0xea, 0x67, 0xbb, 0x7b,
	0x21, 0xb8, 0x22, 0x49, 0x92, 0xaf, 0x7d, 0x99, 0x86, 0x69, 0x49, 0x8e, 0x28, 0xcc, 0x28, 0xfb,
	0x22, 0x33, 0x09, 0x34, 0xfe, 0x32, 0x54, 0x6b, 0x13, 0xf3, 0x4a, 0xc0, 0xaa, 0xbe, 0xfb, 0xfe,
	0xfb, 0x73, 0xbe, 0x84, 0x10, 0x4e, 0x3c, 0x39, 0xea, 0x35, 0x40, 0x1f, 0x0d, 0x28, 0xa6, 0xfd,
	0x89, 0x6e, 0x26, 0xe7, 0x65, 0x3e, 0x15, 0x55, 0xeb, 0xbc, 0x12, 0xad, 0xfa, 0x40, 0xaa, 0xe2,
	0x75, 0xa3, 0x6e, 0xd5, 0x71, 0xc7, 0x73, 0x3b, 0x6f, 0x49, 0x5f, 0x6b, 0x6b, 0x3b, 0xe0, 0x43,
	0xed, 0xc0, 0x23, 0xcc, 0x69, 0xd8, 0xc6, 0x87, 0x82, 0x1d, 0xa1, 0xf7, 0x06, 0x14, 0xd3, 0xae,
	0x4a, 0x03, 0x65, 0x9a, 0x3b, 0x0d, 0x94, 0x6d, 0x4a, 0x6b, 0x55, 0x02, 0xd5, 0x63, 0xa0, 0xdb,
	0x17, 0x02, 0x45, 0x94, 0xb4, 0xd1, 0x07, 0x63, 0xec, 0x92, 0xa0, 0xfa, 0xd8, 0x69, 0x4f, 0x74,
	0x5c, 0xf5, 0xde, 0x5f, 0xd5, 0x6a, 0xbc, 0x9a, 0xc4, 0x5b, 0x42, 0x8b, 0x78, 0xec, 0x8f, 0x01,
	0x1f, 0x7a, 0x6d, 0x79, 0x32, 0x68, 0xa4, 0x79, 0xc3, 0xf7, 0x33, 0x80, 0x26, 0x1a, 0x2c, 0x03,
	0x68, 0xb2, 0x43, 0xb2, 0xaf, 0x8d, 0x02, 0xda, 0x7c, 0x74, 0x7c, 0x6a, 0x1a, 0x27, 0xa7, 0xa6,
	0xf1, 0xeb, 0xd4, 0x34, 0x3e, 0x9d, 0x99, 0xb9, 0x93, 0x33, 0x33, 0xf7, 0xe3, 0xcc, 0xcc, 0xbd,
	0xba, 0xe5, 0x7a, 0xa2, 0xd3, 0x6b, 0xda, 0x2d, 0x16, 0x60, 0xce, 0xc2, 0xa8, 0xb3, 0xa7, 0xda,
	0x0f, 0xf4, 0x00, 0xd1, 0xef, 0x52, 0xde, 0x9c, 0x91, 0x7f, 0x75, 0xf7, 0xff, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x06, 0xe6, 0x49, 0xca, 0xb9, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Returns parameters for the `x/vault` module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Sends an encrypted message to a given wallet address
	SendWalletMail(ctx context.Context, in *SendWalletMailRequest, opts ...grpc.CallOption) (*SendWalletMailResponse, error)
	// Reads messages for a given wallet address
	ReadWalletMail(ctx context.Context, in *ReadWalletMailRequest, opts ...grpc.CallOption) (*ReadWalletMailResponse, error)
	// Queries a list of ClaimableWallet items.
	ClaimableWallet(ctx context.Context, in *QueryGetClaimableWalletRequest, opts ...grpc.CallOption) (*QueryGetClaimableWalletResponse, error)
	ClaimableWalletAll(ctx context.Context, in *QueryAllClaimableWalletRequest, opts ...grpc.CallOption) (*QueryAllClaimableWalletResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/core.vault.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SendWalletMail(ctx context.Context, in *SendWalletMailRequest, opts ...grpc.CallOption) (*SendWalletMailResponse, error) {
	out := new(SendWalletMailResponse)
	err := c.cc.Invoke(ctx, "/core.vault.Query/SendWalletMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReadWalletMail(ctx context.Context, in *ReadWalletMailRequest, opts ...grpc.CallOption) (*ReadWalletMailResponse, error) {
	out := new(ReadWalletMailResponse)
	err := c.cc.Invoke(ctx, "/core.vault.Query/ReadWalletMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimableWallet(ctx context.Context, in *QueryGetClaimableWalletRequest, opts ...grpc.CallOption) (*QueryGetClaimableWalletResponse, error) {
	out := new(QueryGetClaimableWalletResponse)
	err := c.cc.Invoke(ctx, "/core.vault.Query/ClaimableWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimableWalletAll(ctx context.Context, in *QueryAllClaimableWalletRequest, opts ...grpc.CallOption) (*QueryAllClaimableWalletResponse, error) {
	out := new(QueryAllClaimableWalletResponse)
	err := c.cc.Invoke(ctx, "/core.vault.Query/ClaimableWalletAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Returns parameters for the `x/vault` module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Sends an encrypted message to a given wallet address
	SendWalletMail(context.Context, *SendWalletMailRequest) (*SendWalletMailResponse, error)
	// Reads messages for a given wallet address
	ReadWalletMail(context.Context, *ReadWalletMailRequest) (*ReadWalletMailResponse, error)
	// Queries a list of ClaimableWallet items.
	ClaimableWallet(context.Context, *QueryGetClaimableWalletRequest) (*QueryGetClaimableWalletResponse, error)
	ClaimableWalletAll(context.Context, *QueryAllClaimableWalletRequest) (*QueryAllClaimableWalletResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) SendWalletMail(ctx context.Context, req *SendWalletMailRequest) (*SendWalletMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWalletMail not implemented")
}
func (*UnimplementedQueryServer) ReadWalletMail(ctx context.Context, req *ReadWalletMailRequest) (*ReadWalletMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWalletMail not implemented")
}
func (*UnimplementedQueryServer) ClaimableWallet(ctx context.Context, req *QueryGetClaimableWalletRequest) (*QueryGetClaimableWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimableWallet not implemented")
}
func (*UnimplementedQueryServer) ClaimableWalletAll(ctx context.Context, req *QueryAllClaimableWalletRequest) (*QueryAllClaimableWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimableWalletAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.vault.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SendWalletMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWalletMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SendWalletMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.vault.Query/SendWalletMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SendWalletMail(ctx, req.(*SendWalletMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReadWalletMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWalletMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReadWalletMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.vault.Query/ReadWalletMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReadWalletMail(ctx, req.(*ReadWalletMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimableWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClaimableWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimableWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.vault.Query/ClaimableWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimableWallet(ctx, req.(*QueryGetClaimableWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimableWalletAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClaimableWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimableWalletAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.vault.Query/ClaimableWalletAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimableWalletAll(ctx, req.(*QueryAllClaimableWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.vault.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SendWalletMail",
			Handler:    _Query_SendWalletMail_Handler,
		},
		{
			MethodName: "ReadWalletMail",
			Handler:    _Query_ReadWalletMail_Handler,
		},
		{
			MethodName: "ClaimableWallet",
			Handler:    _Query_ClaimableWallet_Handler,
		},
		{
			MethodName: "ClaimableWalletAll",
			Handler:    _Query_ClaimableWalletAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/vault/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SendWalletMailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendWalletMailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendWalletMailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mail != nil {
		{
			size, err := m.Mail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendWalletMailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendWalletMailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendWalletMailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReadWalletMailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadWalletMailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadWalletMailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadWalletMailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadWalletMailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadWalletMailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mailboxes) > 0 {
		for k := range m.Mailboxes {
			v := m.Mailboxes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClaimableWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClaimableWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClaimableWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClaimableWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClaimableWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClaimableWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClaimableWallet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllClaimableWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClaimableWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimableWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClaimableWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClaimableWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimableWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClaimableWallet) > 0 {
		for iNdEx := len(m.ClaimableWallet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimableWallet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *SendWalletMailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Mail != nil {
		l = m.Mail.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SendWalletMailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ReadWalletMailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ReadWalletMailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mailboxes) > 0 {
		for k, v := range m.Mailboxes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryGetClaimableWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetClaimableWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClaimableWallet.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllClaimableWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllClaimableWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimableWallet) > 0 {
		for _, e := range m.ClaimableWallet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendWalletMailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendWalletMailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendWalletMailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mail == nil {
				m.Mail = &WalletMail{}
			}
			if err := m.Mail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendWalletMailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendWalletMailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendWalletMailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadWalletMailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadWalletMailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadWalletMailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadWalletMailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadWalletMailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadWalletMailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mailboxes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mailboxes == nil {
				m.Mailboxes = make(map[string]*WalletMailbox)
			}
			var mapkey string
			var mapvalue *WalletMailbox
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WalletMailbox{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Mailboxes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClaimableWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClaimableWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClaimableWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClaimableWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClaimableWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClaimableWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableWallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimableWallet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClaimableWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClaimableWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClaimableWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClaimableWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClaimableWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClaimableWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableWallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimableWallet = append(m.ClaimableWallet, ClaimableWallet{})
			if err := m.ClaimableWallet[len(m.ClaimableWallet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
