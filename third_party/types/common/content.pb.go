// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/v1/content.proto

// Package Motor is used for defining a Motor node and its properties.

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BucketCodec int32

const (
	BucketCodec_BucketCodec_NONE   BucketCodec = 0
	BucketCodec_BucketCodec_SCHEMA BucketCodec = 1
)

var BucketCodec_name = map[int32]string{
	0: "BucketCodec_NONE",
	1: "BucketCodec_SCHEMA",
}

var BucketCodec_value = map[string]int32{
	"BucketCodec_NONE":   0,
	"BucketCodec_SCHEMA": 1,
}

func (x BucketCodec) String() string {
	return proto.EnumName(BucketCodec_name, int32(x))
}

func (BucketCodec) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_771e8473c4a272b4, []int{0}
}

type BucketItem struct {
	Name          string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         []byte      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Codec         BucketCodec `protobuf:"varint,3,opt,name=codec,proto3,enum=sonrio.common.v1.BucketCodec" json:"codec,omitempty"`
	DefinitionUri string      `protobuf:"bytes,4,opt,name=definition_uri,json=definitionUri,proto3" json:"definition_uri,omitempty"`
}

func (m *BucketItem) Reset()         { *m = BucketItem{} }
func (m *BucketItem) String() string { return proto.CompactTextString(m) }
func (*BucketItem) ProtoMessage()    {}
func (*BucketItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_771e8473c4a272b4, []int{0}
}
func (m *BucketItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BucketItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BucketItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BucketItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketItem.Merge(m, src)
}
func (m *BucketItem) XXX_Size() int {
	return m.Size()
}
func (m *BucketItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketItem.DiscardUnknown(m)
}

var xxx_messageInfo_BucketItem proto.InternalMessageInfo

func (m *BucketItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BucketItem) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BucketItem) GetCodec() BucketCodec {
	if m != nil {
		return m.Codec
	}
	return BucketCodec_BucketCodec_NONE
}

func (m *BucketItem) GetDefinitionUri() string {
	if m != nil {
		return m.DefinitionUri
	}
	return ""
}

func init() {
	proto.RegisterEnum("sonrio.common.v1.BucketCodec", BucketCodec_name, BucketCodec_value)
	proto.RegisterType((*BucketItem)(nil), "sonrio.common.v1.BucketItem")
}

func init() { proto.RegisterFile("common/v1/content.proto", fileDescriptor_771e8473c4a272b4) }

var fileDescriptor_771e8473c4a272b4 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0xd3, 0x2f, 0x33, 0xd4, 0x4f, 0xce, 0xcf, 0x2b, 0x49, 0xcd, 0x2b, 0xd1, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x12, 0x28, 0xce, 0xcf, 0x2b, 0xca, 0xcc, 0xd7, 0x83, 0xc8, 0xeb, 0x95,
	0x19, 0x2a, 0x4d, 0x62, 0xe4, 0xe2, 0x72, 0x2a, 0x4d, 0xce, 0x4e, 0x2d, 0xf1, 0x2c, 0x49, 0xcd,
	0x15, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02,
	0xb3, 0x85, 0x44, 0xb8, 0x58, 0xcb, 0x12, 0x73, 0x4a, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x78,
	0x82, 0x20, 0x1c, 0x21, 0x63, 0x2e, 0xd6, 0xe4, 0xfc, 0x94, 0xd4, 0x64, 0x09, 0x66, 0x05, 0x46,
	0x0d, 0x3e, 0x23, 0x59, 0x3d, 0x74, 0xa3, 0xf5, 0x20, 0xc6, 0x3a, 0x83, 0x14, 0x05, 0x41, 0xd4,
	0x0a, 0xa9, 0x72, 0xf1, 0xa5, 0xa4, 0xa6, 0x65, 0xe6, 0x65, 0x96, 0x64, 0xe6, 0xe7, 0xc5, 0x97,
	0x16, 0x65, 0x4a, 0xb0, 0x80, 0x2d, 0xe2, 0x45, 0x88, 0x86, 0x16, 0x65, 0x6a, 0x59, 0x73, 0x71,
	0x23, 0x69, 0x16, 0x12, 0xe1, 0x12, 0x40, 0xe2, 0xc6, 0xfb, 0xf9, 0xfb, 0xb9, 0x0a, 0x30, 0x08,
	0x89, 0x71, 0x09, 0x21, 0x8b, 0x06, 0x3b, 0x7b, 0xb8, 0xfa, 0x3a, 0x0a, 0x30, 0x3a, 0x79, 0x9d,
	0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31,
	0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x41, 0x7a, 0x66, 0x49, 0x46, 0x69,
	0x12, 0xc8, 0x89, 0xfa, 0x20, 0xd7, 0xea, 0x66, 0xe6, 0x83, 0x69, 0xfd, 0x92, 0x8c, 0xcc, 0xa2,
	0x94, 0xf8, 0x82, 0xc4, 0xa2, 0x92, 0x4a, 0xfd, 0x92, 0xca, 0x82, 0xd4, 0x62, 0x7d, 0x88, 0x2f,
	0x92, 0xd8, 0xc0, 0xc1, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x34, 0x78, 0x64, 0x51,
	0x01, 0x00, 0x00,
}

func (m *BucketItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BucketItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefinitionUri) > 0 {
		i -= len(m.DefinitionUri)
		copy(dAtA[i:], m.DefinitionUri)
		i = encodeVarintContent(dAtA, i, uint64(len(m.DefinitionUri)))
		i--
		dAtA[i] = 0x22
	}
	if m.Codec != 0 {
		i = encodeVarintContent(dAtA, i, uint64(m.Codec))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintContent(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintContent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContent(dAtA []byte, offset int, v uint64) int {
	offset -= sovContent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BucketItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if m.Codec != 0 {
		n += 1 + sovContent(uint64(m.Codec))
	}
	l = len(m.DefinitionUri)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	return n
}

func sovContent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContent(x uint64) (n int) {
	return sovContent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BucketItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codec", wireType)
			}
			m.Codec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Codec |= BucketCodec(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefinitionUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefinitionUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContent = fmt.Errorf("proto: unexpected end of group")
)
