// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bucket/bucket.proto

// Package Motor is used for defining a Motor node and its properties.

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BucketVisibility is the visibility of the bucket to authorized users of an application
type BucketVisibility int32

const (
	// Bucket does not have visibility set.
	BucketVisibility_PUBLIC BucketVisibility = 0
	// Bucket is visible to anyone.
	BucketVisibility_USER BucketVisibility = 1
	// Bucket is visible to anyone who has access token.
	BucketVisibility_APPLICATION BucketVisibility = 2
)

var BucketVisibility_name = map[int32]string{
	0: "PUBLIC",
	1: "USER",
	2: "APPLICATION",
}

var BucketVisibility_value = map[string]int32{
	"PUBLIC":      0,
	"USER":        1,
	"APPLICATION": 2,
}

func (x BucketVisibility) String() string {
	return proto.EnumName(BucketVisibility_name, int32(x))
}

func (BucketVisibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_748678784c4bd53f, []int{0}
}

//
//Wraps items within a bucket. Items will be one of the following
//DID -> reference to another bucket (WhereIs)
//CID -> reference to content (map[string]interface{})
type BucketContent struct {
	// Raw content serialized to bytes
	Item []byte `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// Content id a CID, DID, or unspecified
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BucketContent) Reset()         { *m = BucketContent{} }
func (m *BucketContent) String() string { return proto.CompactTextString(m) }
func (*BucketContent) ProtoMessage()    {}
func (*BucketContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_748678784c4bd53f, []int{0}
}
func (m *BucketContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BucketContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BucketContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BucketContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketContent.Merge(m, src)
}
func (m *BucketContent) XXX_Size() int {
	return m.Size()
}
func (m *BucketContent) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketContent.DiscardUnknown(m)
}

var xxx_messageInfo_BucketContent proto.InternalMessageInfo

func (m *BucketContent) GetItem() []byte {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *BucketContent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Bucket struct {
	// DID of the created bucket.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Creator of the new bucket
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// Name of the new bucket.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Visibility of the new bucket.
	Visibility BucketVisibility `protobuf:"varint,4,opt,name=visibility,proto3,enum=sonrio.sonr.bucket.BucketVisibility" json:"visibility,omitempty"`
	// IsActive flag of the new bucket.
	IsActive bool `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// size of the new bucket.
	Size_ int64 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *Bucket) Reset()         { *m = Bucket{} }
func (m *Bucket) String() string { return proto.CompactTextString(m) }
func (*Bucket) ProtoMessage()    {}
func (*Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_748678784c4bd53f, []int{1}
}
func (m *Bucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bucket.Merge(m, src)
}
func (m *Bucket) XXX_Size() int {
	return m.Size()
}
func (m *Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_Bucket proto.InternalMessageInfo

func (m *Bucket) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Bucket) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Bucket) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Bucket) GetVisibility() BucketVisibility {
	if m != nil {
		return m.Visibility
	}
	return BucketVisibility_PUBLIC
}

func (m *Bucket) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Bucket) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func init() {
	proto.RegisterEnum("sonrio.sonr.bucket.BucketVisibility", BucketVisibility_name, BucketVisibility_value)
	proto.RegisterType((*BucketContent)(nil), "sonrio.sonr.bucket.BucketContent")
	proto.RegisterType((*Bucket)(nil), "sonrio.sonr.bucket.Bucket")
}

func init() { proto.RegisterFile("bucket/bucket.proto", fileDescriptor_748678784c4bd53f) }

var fileDescriptor_748678784c4bd53f = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xb3, 0x69, 0x89, 0xcd, 0xa8, 0x35, 0x6c, 0x2f, 0x01, 0x21, 0x84, 0x22, 0x12, 0x04,
	0x13, 0xb0, 0x27, 0x8f, 0x6d, 0xf5, 0x50, 0x28, 0x1a, 0x56, 0xab, 0xe0, 0x45, 0x9a, 0x74, 0xd1,
	0x41, 0x93, 0x2d, 0xc9, 0xa6, 0x58, 0x9f, 0xc2, 0x57, 0xf2, 0xe6, 0xb1, 0x47, 0x8f, 0xd2, 0xbe,
	0x88, 0x64, 0xd3, 0x8a, 0xe8, 0xe9, 0xff, 0x87, 0xf9, 0xfe, 0x99, 0x81, 0x81, 0x56, 0x54, 0xc4,
	0x4f, 0x5c, 0x06, 0x95, 0xf8, 0xd3, 0x4c, 0x48, 0x41, 0x69, 0x2e, 0xd2, 0x0c, 0x85, 0x5f, 0x8a,
	0x5f, 0x75, 0xda, 0x1d, 0xd8, 0xed, 0x29, 0xd7, 0x17, 0xa9, 0xe4, 0xa9, 0xa4, 0x14, 0xea, 0x28,
	0x79, 0x62, 0x13, 0x97, 0x78, 0x3b, 0x4c, 0x79, 0xda, 0x04, 0x1d, 0x27, 0xb6, 0xee, 0x12, 0xcf,
	0x64, 0x3a, 0x4e, 0xda, 0xef, 0x04, 0x8c, 0x2a, 0x55, 0xe2, 0x45, 0x81, 0x13, 0x85, 0x9b, 0x4c,
	0x79, 0x6a, 0xc3, 0x56, 0x9c, 0xf1, 0xb1, 0x14, 0xd9, 0x3a, 0xb3, 0x29, 0x4b, 0x3a, 0x1d, 0x27,
	0xdc, 0xae, 0x55, 0x74, 0xe9, 0xe9, 0x19, 0xc0, 0x0c, 0x73, 0x8c, 0xf0, 0x19, 0xe5, 0xdc, 0xae,
	0xbb, 0xc4, 0x6b, 0x9e, 0x1c, 0xf8, 0xff, 0x4f, 0xf5, 0xab, 0x8d, 0x37, 0x3f, 0x2c, 0xfb, 0x95,
	0xa3, 0xfb, 0x60, 0x62, 0x7e, 0x3f, 0x8e, 0x25, 0xce, 0xb8, 0x6d, 0xb8, 0xc4, 0x6b, 0xb0, 0x06,
	0xe6, 0x5d, 0x55, 0x97, 0x6b, 0x73, 0x7c, 0xe5, 0xb6, 0xe9, 0x12, 0xaf, 0xc6, 0x94, 0x3f, 0x3a,
	0x05, 0xeb, 0xef, 0x40, 0x0a, 0x60, 0x84, 0xa3, 0xde, 0x70, 0xd0, 0xb7, 0x34, 0xda, 0x80, 0xfa,
	0xe8, 0xea, 0x9c, 0x59, 0x84, 0xee, 0xc1, 0x76, 0x37, 0x0c, 0x87, 0x83, 0x7e, 0xf7, 0x7a, 0x70,
	0x79, 0x61, 0xe9, 0xbd, 0xdb, 0x8f, 0xa5, 0x43, 0x16, 0x4b, 0x87, 0x7c, 0x2d, 0x1d, 0xf2, 0xb6,
	0x72, 0xb4, 0xc5, 0xca, 0xd1, 0x3e, 0x57, 0x8e, 0x06, 0xad, 0xcd, 0xc9, 0x72, 0x3e, 0xe5, 0xb9,
	0x9f, 0x08, 0x29, 0xb2, 0x90, 0xdc, 0x1d, 0x3e, 0xa0, 0x7c, 0x2c, 0x22, 0x3f, 0x16, 0x49, 0x50,
	0xb6, 0x8f, 0x51, 0x28, 0x0d, 0x5e, 0xd6, 0x0f, 0x0a, 0x14, 0x1f, 0x19, 0xea, 0x4f, 0x9d, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0xee, 0xde, 0x35, 0xbe, 0x01, 0x00, 0x00,
}

func (m *BucketContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BucketContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Item) > 0 {
		i -= len(m.Item)
		copy(dAtA[i:], m.Item)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.Item)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bucket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bucket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintBucket(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x48
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Visibility != 0 {
		i = encodeVarintBucket(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintBucket(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBucket(dAtA []byte, offset int, v uint64) int {
	offset -= sovBucket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BucketContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Item)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	return n
}

func (m *Bucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBucket(uint64(l))
	}
	if m.Visibility != 0 {
		n += 1 + sovBucket(uint64(m.Visibility))
	}
	if m.IsActive {
		n += 2
	}
	if m.Size_ != 0 {
		n += 1 + sovBucket(uint64(m.Size_))
	}
	return n
}

func sovBucket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBucket(x uint64) (n int) {
	return sovBucket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BucketContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBucket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item[:0], dAtA[iNdEx:postIndex]...)
			if m.Item == nil {
				m.Item = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBucket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBucket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBucket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBucket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= BucketVisibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBucket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBucket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBucket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBucket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBucket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBucket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBucket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBucket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBucket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBucket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBucket = fmt.Errorf("proto: unexpected end of group")
)
