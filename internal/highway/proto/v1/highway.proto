syntax = "proto3";

// Node
package sonrio.highway.v1;
import "channel/channel.proto";
import "channel/tx.proto";
import "bucket/tx.proto";
import "object/tx.proto";
import "highway/v1/request.proto";
import "highway/v1/response.proto";
option go_package = "github.com/sonr-io/sonr/highway/v1";

// Highway
//
// Provides is a RPC service for interfacing over the Highway node.
service Highway {
  // Create New Object
  //
  // Creates a new Publish/Subscribe topic object for the given service.
  // The calling node must have already registered a service for the object.
  rpc CreateObject(sonrio.sonr.object.MsgCreateObject) returns (sonrio.sonr.object.MsgCreateObjectResponse) {}

  // Update a Object
  //
  // Updates the configuration of the given object.
  rpc UpdateObject(sonrio.sonr.object.MsgUpdateObject) returns (sonrio.sonr.object.MsgUpdateObjectResponse) {}

  // Deactivate a Object
  //
  // Deactivates the given object.
  rpc DeactivateObject(sonrio.sonr.object.MsgDeactivateObject) returns (sonrio.sonr.object.MsgDeactivateObjectResponse) {}

  // Create New Bucket
  //
  // Creates a new Publish/Subscribe topic bucket for the given service.
  // The calling node must have already registered a service for the bucket.
  rpc CreateBucket(sonrio.sonr.bucket.MsgCreateBucket) returns (sonrio.sonr.bucket.MsgCreateBucketResponse) {}

  // Update a Bucket
  //
  // Updates the configuration of the given bucket.
  rpc UpdateBucket(sonrio.sonr.bucket.MsgUpdateBucket) returns (sonrio.sonr.bucket.MsgUpdateBucketResponse) {}

  // Deactivate a Bucket
  //
  // Deactivates the given bucket.
  rpc DeactivateBucket(sonrio.sonr.bucket.MsgDeactivateBucket) returns (sonrio.sonr.bucket.MsgDeactivateBucketResponse) {}

  // Create New Channel
  //
  // Creates a new Publish/Subscribe topic channel for the given service.
  // The calling node must have already registered a service for the channel.
  rpc CreateChannel(sonrio.sonr.channel.MsgCreateChannel) returns (sonrio.sonr.channel.MsgCreateChannelResponse) {}

  // Update a Channel
  //
  // Updates the configuration of the given channel.
  rpc UpdateChannel(sonrio.sonr.channel.MsgUpdateChannel) returns (sonrio.sonr.channel.MsgUpdateChannelResponse) {}

  // Deactivate a Channel
  //
  // Deactivates the given channel.
  rpc DeactivateChannel(sonrio.sonr.channel.MsgDeactivateChannel) returns (sonrio.sonr.channel.MsgDeactivateChannelResponse) {}

  // Listen to a Channel - Stream
  //
  // Subscribes the calling node to the given channel and returns all publish events
  // as a stream.
  rpc ListenChannel(sonrio.highway.v1.MsgListenChannel) returns (stream sonrio.sonr.channel.ChannelMessage) {}

  // Upload Blob
  //
  // Uploads a file or buffer to the calling node's service IPFS storage.
  rpc UploadBlob(sonrio.highway.v1.MsgUploadBlob) returns (sonrio.highway.v1.MsgUploadBlobResponse) {}

  // Download a Blob
  //
  // Downloads a file or buffer from the calling node's service IPFS storage.
  rpc DownloadBlob(sonrio.highway.v1.MsgDownloadBlob) returns (sonrio.highway.v1.MsgDownloadBlobResponse) {}

  // Remove a Blob
  //
  // Deletes the given blob from the calling node's service IPFS storage.
  rpc RemoveBlob(sonrio.highway.v1.MsgRemoveBlob) returns (sonrio.highway.v1.MsgRemoveBlobResponse) {}
}
