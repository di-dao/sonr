syntax = "proto3";

package sonr.core;
option go_package = "github.com/sonr-io/core/internal/common";

// Internet Connection Type
enum Connection {
  OFFLINE = 0;  // No Internet Connection
  WIFI = 1;     // Wifi Connection
  MOBILE = 2;   // Mobile Connection
  ETHERNET = 3; // Ethernet Connection
}

// Environment Type Configuration
enum Environment {
  DEVELOPMENT = 0; // Development Environment
  PRODUCTION = 1;  // Production Environment
}

// Location from GeoIP and OLC information
message Location {
  // Location Latitude
  double latitude = 1;

  // Location Longitude
  double longitude = 2;

  // Location Placemark Information - Generated
  Placemark placemark = 3;

  // Contains detailed placemark information.
  message Placemark {
    // The name associated with the placemark.
    string name = 1;

    // The street associated with the placemark.
    string street = 2;

    // The abbreviated country name, according to the two letter (alpha-2) [ISO
    // standard](https://www.iso.org/iso-3166-country-codes.html).
    string isoCountryCode = 3;

    // The name of the country associated with the placemark.
    string country = 4;

    // The postal code associated with the placemark.
    string postalCode = 5;

    // The name of the state or province associated with the placemark.
    string administrativeArea = 6;

    // Additional administrative area information for the placemark.
    string subAdministrativeArea = 7;

    // The name of the city associated with the placemark.
    string locality = 8;

    // Additional city-level information for the placemark.
    string subLocality = 9;

    // The street address associated with the placemark.
    string thoroughfare = 10;

    // Additional street address information for the placemark.
    string subThoroughfare = 11;
  }
}

// Shared Metadata for Messages on all Protocols
message Metadata {
  int64 timestamp = 1; // Unix timestamp
  string nodeId = 2;   // Node ID
  bytes signature = 3; // Signature of the message
  bytes publicKey = 4; // Public Key of the message sender
}

// Standard MIME with Additional Extensions
message MIME {
  Type type = 1;      // Type of File
  string subtype = 2; // Extension of File
  string value = 3;   // Type/Subtype i.e. (image/jpeg)

  enum Type {
    OTHER = 0;    // Other File Type - If cannot derive from Subtype
    AUDIO = 1;    // Sound, Audio Files
    DOCUMENT = 2; // Document Files - PDF, Word, Excel, etc.
    IMAGE = 3;    // Image Files
    TEXT = 4;     // Text Based Files
    VIDEO = 5;    // Video Files
    URL = 6;      // URL Links
  }
}

// Basic Info Sent to Peers to Establish Connections
message Peer {
  string sName = 1;    // User Sonr Domain
  Status status = 2;   // Peer Status
  Device device = 3;   // Peer Device Info
  Profile profile = 4; // Peers General Information
  bytes publicKey = 5; // Public Key of the Peer

  // Peer Info for Device
  message Device {
    string id = 1;       // Peer Device ID
    string hostName = 2; // Peer Host Name
    string os = 3;       // Peer Operating System
    string arch = 4;     // Peer Architecture
    string model = 5;    // Peers Device Model
  }

  // Peers Active Status
  enum Status {
    OFFLINE = 0; // Offline - Not Online or Not a Full Node
    ONLINE = 1;  // Online - Full Node Available
    AWAY = 2;    // Away - Not Online, but has a full node
    BUSY = 3;    // Busy - Online, but busy with Transfer
  }
}

// General Information about Peer passed during Authentication
message Profile {
  string sName = 1;            // Sonr Based Username
  string firstName = 2;        // General Info
  string lastName = 3;         // General Info
  bytes picture = 4;           // Profile Picture
  string bio = 6;              // User Biography
  repeated Social socials = 7; // Social Media
}

// Social Media Item Information
message Social {
  bool valid = 1;      // Whether this is a valid Social
  string username = 2; // Username of Social
  string url = 3;      // URL to Social
  bytes picture = 4;   // Profile Picture
  Media media = 5;     // Type of Social

  // Social Type
  enum Media {
    OTHER = 0;     // Other Social Network
    FACEBOOK = 1;  // Facebook
    TWITTER = 2;   // Twitter
    MEDIUM = 3;    // Medium
    TIKTOK = 4;    // TikTok
    INSTAGRAM = 5; // Instagram
    YOUTUBE = 6;   // YouTube
    GITHUB = 7;    // GitHub
    SNAPCHAT = 8;  // Snapchat
    SPOTIFY = 9;   // Spotify
  }
}
