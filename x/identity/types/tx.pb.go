// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: identity/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgInitializeIdentity defines the Msg/IncrementCounter request type.
type MsgInitializeIdentity struct {
	// sender is the message sender.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// peer_id is the peer id of the identity.
	PeerId string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// address is the address of the identity.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// public_key is the public key of the identity.
	PublicKey []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// ipns is the ipns of the identity.
	Ipns string `protobuf:"bytes,5,opt,name=ipns,proto3" json:"ipns,omitempty"`
	// accumulator_key is the accumulator key of the identity.
	AccumulatorKey []byte `protobuf:"bytes,6,opt,name=accumulator_key,json=accumulatorKey,proto3" json:"accumulator_key,omitempty"`
	// network is the network of the identity.
	Network string `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
}

func (m *MsgInitializeIdentity) Reset()         { *m = MsgInitializeIdentity{} }
func (m *MsgInitializeIdentity) String() string { return proto.CompactTextString(m) }
func (*MsgInitializeIdentity) ProtoMessage()    {}
func (*MsgInitializeIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1dd0dd8a5cf0d27, []int{0}
}
func (m *MsgInitializeIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitializeIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitializeIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitializeIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitializeIdentity.Merge(m, src)
}
func (m *MsgInitializeIdentity) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitializeIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitializeIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitializeIdentity proto.InternalMessageInfo

func (m *MsgInitializeIdentity) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgInitializeIdentity) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *MsgInitializeIdentity) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgInitializeIdentity) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *MsgInitializeIdentity) GetIpns() string {
	if m != nil {
		return m.Ipns
	}
	return ""
}

func (m *MsgInitializeIdentity) GetAccumulatorKey() []byte {
	if m != nil {
		return m.AccumulatorKey
	}
	return nil
}

func (m *MsgInitializeIdentity) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

// MsgInitializeIdentityResponse defines the Msg/InitializeIdentity response type.
type MsgInitializeIdentityResponse struct {
}

func (m *MsgInitializeIdentityResponse) Reset()         { *m = MsgInitializeIdentityResponse{} }
func (m *MsgInitializeIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitializeIdentityResponse) ProtoMessage()    {}
func (*MsgInitializeIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1dd0dd8a5cf0d27, []int{1}
}
func (m *MsgInitializeIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitializeIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitializeIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitializeIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitializeIdentityResponse.Merge(m, src)
}
func (m *MsgInitializeIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitializeIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitializeIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitializeIdentityResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgInitializeIdentity)(nil), "identity.v1.MsgInitializeIdentity")
	proto.RegisterType((*MsgInitializeIdentityResponse)(nil), "identity.v1.MsgInitializeIdentityResponse")
}

func init() { proto.RegisterFile("identity/v1/tx.proto", fileDescriptor_f1dd0dd8a5cf0d27) }

var fileDescriptor_f1dd0dd8a5cf0d27 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0x8f, 0xfb, 0x27, 0x51, 0x0f, 0x04, 0xe2, 0x14, 0xd4, 0x23, 0x52, 0x4d, 0x15, 0x09, 0x51,
	0x59, 0xaa, 0x8f, 0x82, 0x58, 0xd8, 0xa8, 0x58, 0x22, 0xd4, 0xc5, 0x6c, 0x2c, 0x91, 0xe3, 0x3b,
	0x5d, 0x4f, 0x8d, 0xef, 0xcc, 0xbd, 0x73, 0xa9, 0x99, 0x10, 0x23, 0x13, 0x5f, 0x83, 0x2d, 0x03,
	0x1f, 0x82, 0x31, 0x62, 0x62, 0x44, 0xc9, 0x90, 0xaf, 0x81, 0x7c, 0x67, 0x43, 0x06, 0x4b, 0x5d,
	0xac, 0xf7, 0x7e, 0xff, 0x9e, 0xdf, 0xb3, 0xd1, 0x50, 0x32, 0xae, 0xac, 0xb4, 0x15, 0xbd, 0x3e,
	0xa3, 0xf6, 0x26, 0x2e, 0x8c, 0xb6, 0x1a, 0xdf, 0x69, 0xd1, 0xf8, 0xfa, 0x6c, 0x74, 0x98, 0x69,
	0xc8, 0x35, 0xd0, 0x1c, 0x44, 0x2d, 0xca, 0x41, 0x78, 0xd5, 0x68, 0x28, 0xb4, 0xd0, 0xae, 0xa4,
	0x75, 0xd5, 0xa0, 0x0f, 0xd2, 0x5c, 0x2a, 0x4d, 0xdd, 0xb3, 0x81, 0x1e, 0x6d, 0x0f, 0x11, 0x5c,
	0x71, 0x90, 0xd0, 0x52, 0x3e, 0x7c, 0xea, 0x63, 0x7c, 0xe3, 0xa9, 0xf1, 0xf7, 0x1d, 0xf4, 0xf0,
	0x02, 0xc4, 0x44, 0x49, 0x2b, 0xd3, 0xb9, 0xfc, 0xc4, 0x27, 0x4d, 0x0a, 0x7e, 0x86, 0xfa, 0xc0,
	0x15, 0xe3, 0x86, 0x04, 0xc7, 0xc1, 0xc9, 0xc1, 0x39, 0xf9, 0xf5, 0xe3, 0x74, 0xd8, 0x78, 0x5f,
	0x33, 0x66, 0x38, 0xc0, 0x3b, 0x6b, 0xa4, 0x12, 0x49, 0xa3, 0xc3, 0x87, 0x68, 0x50, 0x70, 0x6e,
	0xa6, 0x92, 0x91, 0x9d, 0xda, 0x92, 0xf4, 0xeb, 0x76, 0xc2, 0x30, 0x41, 0x83, 0xd4, 0x3b, 0xc8,
	0xae, 0x23, 0xda, 0x16, 0x1f, 0x21, 0x54, 0x94, 0xb3, 0xb9, 0xcc, 0xa6, 0x57, 0xbc, 0x22, 0x7b,
	0xc7, 0xc1, 0xc9, 0xdd, 0xe4, 0xc0, 0x23, 0x6f, 0x79, 0x85, 0x31, 0xda, 0x93, 0x85, 0x02, 0xb2,
	0xef, 0x5c, 0xae, 0xc6, 0x4f, 0xd1, 0xfd, 0x34, 0xcb, 0xca, 0xbc, 0x9c, 0xa7, 0x56, 0x1b, 0xe7,
	0xeb, 0x3b, 0xdf, 0xbd, 0x2d, 0xb8, 0x36, 0x13, 0x34, 0x50, 0xdc, 0x7e, 0xd4, 0xe6, 0x8a, 0x0c,
	0xfc, 0xd4, 0xa6, 0x7d, 0xf5, 0xf2, 0xcb, 0x66, 0x11, 0x35, 0x6f, 0xfd, 0x75, 0xb3, 0x88, 0x9e,
	0x80, 0x56, 0xe6, 0xf2, 0x03, 0xfd, 0x77, 0xc1, 0xce, 0x8b, 0x8c, 0x1f, 0xa3, 0xa3, 0x4e, 0x22,
	0xe1, 0x50, 0x68, 0x05, 0xfc, 0xb9, 0x41, 0xbb, 0x17, 0x20, 0x30, 0x43, 0xb8, 0xe3, 0x9e, 0xe3,
	0x78, 0xeb, 0x7b, 0xc7, 0x9d, 0x41, 0xa3, 0xe8, 0x76, 0x4d, 0x3b, 0x6c, 0xb4, 0xff, 0x79, 0xb3,
	0x88, 0x82, 0xf3, 0x37, 0x3f, 0x57, 0x61, 0xb0, 0x5c, 0x85, 0xc1, 0x9f, 0x55, 0x18, 0x7c, 0x5b,
	0x87, 0xbd, 0xe5, 0x3a, 0xec, 0xfd, 0x5e, 0x87, 0xbd, 0xf7, 0x91, 0x90, 0xf6, 0xb2, 0x9c, 0xc5,
	0x99, 0xce, 0x29, 0x93, 0x2c, 0xd5, 0xa7, 0xda, 0x08, 0x5a, 0xaf, 0x4a, 0x6f, 0xfe, 0xaf, 0x6a,
	0xab, 0x82, 0xc3, 0xac, 0xef, 0xfe, 0x86, 0x17, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0xf5,
	0x72, 0x17, 0xaa, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// IncrementCounter increments the counter.
	InitializeIdentity(ctx context.Context, in *MsgInitializeIdentity, opts ...grpc.CallOption) (*MsgInitializeIdentityResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) InitializeIdentity(ctx context.Context, in *MsgInitializeIdentity, opts ...grpc.CallOption) (*MsgInitializeIdentityResponse, error) {
	out := new(MsgInitializeIdentityResponse)
	err := c.cc.Invoke(ctx, "/identity.v1.Msg/InitializeIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// IncrementCounter increments the counter.
	InitializeIdentity(context.Context, *MsgInitializeIdentity) (*MsgInitializeIdentityResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) InitializeIdentity(ctx context.Context, req *MsgInitializeIdentity) (*MsgInitializeIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeIdentity not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_InitializeIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitializeIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitializeIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.v1.Msg/InitializeIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitializeIdentity(ctx, req.(*MsgInitializeIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "identity.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitializeIdentity",
			Handler:    _Msg_InitializeIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/v1/tx.proto",
}

func (m *MsgInitializeIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitializeIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitializeIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AccumulatorKey) > 0 {
		i -= len(m.AccumulatorKey)
		copy(dAtA[i:], m.AccumulatorKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AccumulatorKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Ipns) > 0 {
		i -= len(m.Ipns)
		copy(dAtA[i:], m.Ipns)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ipns)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitializeIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitializeIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitializeIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgInitializeIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ipns)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AccumulatorKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInitializeIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgInitializeIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitializeIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitializeIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatorKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatorKey = append(m.AccumulatorKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AccumulatorKey == nil {
				m.AccumulatorKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitializeIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitializeIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitializeIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
