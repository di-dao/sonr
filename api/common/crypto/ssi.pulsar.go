// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package crypto

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sort "sort"
	sync "sync"
)

var (
	md_Proof                     protoreflect.MessageDescriptor
	fd_Proof_type                protoreflect.FieldDescriptor
	fd_Proof_proof_purpose       protoreflect.FieldDescriptor
	fd_Proof_verification_method protoreflect.FieldDescriptor
	fd_Proof_created             protoreflect.FieldDescriptor
	fd_Proof_domain              protoreflect.FieldDescriptor
)

func init() {
	file_common_crypto_ssi_proto_init()
	md_Proof = File_common_crypto_ssi_proto.Messages().ByName("Proof")
	fd_Proof_type = md_Proof.Fields().ByName("type")
	fd_Proof_proof_purpose = md_Proof.Fields().ByName("proof_purpose")
	fd_Proof_verification_method = md_Proof.Fields().ByName("verification_method")
	fd_Proof_created = md_Proof.Fields().ByName("created")
	fd_Proof_domain = md_Proof.Fields().ByName("domain")
}

var _ protoreflect.Message = (*fastReflection_Proof)(nil)

type fastReflection_Proof Proof

func (x *Proof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Proof)(x)
}

func (x *Proof) slowProtoReflect() protoreflect.Message {
	mi := &file_common_crypto_ssi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Proof_messageType fastReflection_Proof_messageType
var _ protoreflect.MessageType = fastReflection_Proof_messageType{}

type fastReflection_Proof_messageType struct{}

func (x fastReflection_Proof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Proof)(nil)
}
func (x fastReflection_Proof_messageType) New() protoreflect.Message {
	return new(fastReflection_Proof)
}
func (x fastReflection_Proof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Proof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Proof) Descriptor() protoreflect.MessageDescriptor {
	return md_Proof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Proof) Type() protoreflect.MessageType {
	return _fastReflection_Proof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Proof) New() protoreflect.Message {
	return new(fastReflection_Proof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Proof) Interface() protoreflect.ProtoMessage {
	return (*Proof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Proof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_Proof_type, value) {
			return
		}
	}
	if x.ProofPurpose != "" {
		value := protoreflect.ValueOfString(x.ProofPurpose)
		if !f(fd_Proof_proof_purpose, value) {
			return
		}
	}
	if x.VerificationMethod != "" {
		value := protoreflect.ValueOfString(x.VerificationMethod)
		if !f(fd_Proof_verification_method, value) {
			return
		}
	}
	if x.Created != "" {
		value := protoreflect.ValueOfString(x.Created)
		if !f(fd_Proof_created, value) {
			return
		}
	}
	if x.Domain != "" {
		value := protoreflect.ValueOfString(x.Domain)
		if !f(fd_Proof_domain, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Proof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "common.crypto.Proof.type":
		return x.Type_ != 0
	case "common.crypto.Proof.proof_purpose":
		return x.ProofPurpose != ""
	case "common.crypto.Proof.verification_method":
		return x.VerificationMethod != ""
	case "common.crypto.Proof.created":
		return x.Created != ""
	case "common.crypto.Proof.domain":
		return x.Domain != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.Proof"))
		}
		panic(fmt.Errorf("message common.crypto.Proof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "common.crypto.Proof.type":
		x.Type_ = 0
	case "common.crypto.Proof.proof_purpose":
		x.ProofPurpose = ""
	case "common.crypto.Proof.verification_method":
		x.VerificationMethod = ""
	case "common.crypto.Proof.created":
		x.Created = ""
	case "common.crypto.Proof.domain":
		x.Domain = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.Proof"))
		}
		panic(fmt.Errorf("message common.crypto.Proof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Proof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "common.crypto.Proof.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "common.crypto.Proof.proof_purpose":
		value := x.ProofPurpose
		return protoreflect.ValueOfString(value)
	case "common.crypto.Proof.verification_method":
		value := x.VerificationMethod
		return protoreflect.ValueOfString(value)
	case "common.crypto.Proof.created":
		value := x.Created
		return protoreflect.ValueOfString(value)
	case "common.crypto.Proof.domain":
		value := x.Domain
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.Proof"))
		}
		panic(fmt.Errorf("message common.crypto.Proof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "common.crypto.Proof.type":
		x.Type_ = (ProofType)(value.Enum())
	case "common.crypto.Proof.proof_purpose":
		x.ProofPurpose = value.Interface().(string)
	case "common.crypto.Proof.verification_method":
		x.VerificationMethod = value.Interface().(string)
	case "common.crypto.Proof.created":
		x.Created = value.Interface().(string)
	case "common.crypto.Proof.domain":
		x.Domain = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.Proof"))
		}
		panic(fmt.Errorf("message common.crypto.Proof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "common.crypto.Proof.type":
		panic(fmt.Errorf("field type of message common.crypto.Proof is not mutable"))
	case "common.crypto.Proof.proof_purpose":
		panic(fmt.Errorf("field proof_purpose of message common.crypto.Proof is not mutable"))
	case "common.crypto.Proof.verification_method":
		panic(fmt.Errorf("field verification_method of message common.crypto.Proof is not mutable"))
	case "common.crypto.Proof.created":
		panic(fmt.Errorf("field created of message common.crypto.Proof is not mutable"))
	case "common.crypto.Proof.domain":
		panic(fmt.Errorf("field domain of message common.crypto.Proof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.Proof"))
		}
		panic(fmt.Errorf("message common.crypto.Proof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Proof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "common.crypto.Proof.type":
		return protoreflect.ValueOfEnum(0)
	case "common.crypto.Proof.proof_purpose":
		return protoreflect.ValueOfString("")
	case "common.crypto.Proof.verification_method":
		return protoreflect.ValueOfString("")
	case "common.crypto.Proof.created":
		return protoreflect.ValueOfString("")
	case "common.crypto.Proof.domain":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.Proof"))
		}
		panic(fmt.Errorf("message common.crypto.Proof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Proof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in common.crypto.Proof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Proof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Proof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Proof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Proof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Proof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		l = len(x.ProofPurpose)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.VerificationMethod)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Created)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Domain)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Proof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Domain) > 0 {
			i -= len(x.Domain)
			copy(dAtA[i:], x.Domain)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Domain)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Created) > 0 {
			i -= len(x.Created)
			copy(dAtA[i:], x.Created)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Created)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.VerificationMethod) > 0 {
			i -= len(x.VerificationMethod)
			copy(dAtA[i:], x.VerificationMethod)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VerificationMethod)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ProofPurpose) > 0 {
			i -= len(x.ProofPurpose)
			copy(dAtA[i:], x.ProofPurpose)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProofPurpose)))
			i--
			dAtA[i] = 0x12
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Proof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Proof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= ProofType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProofPurpose", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProofPurpose = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VerificationMethod = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Created = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Domain = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_JSONWebSignature2020Proof       protoreflect.MessageDescriptor
	fd_JSONWebSignature2020Proof_proof protoreflect.FieldDescriptor
	fd_JSONWebSignature2020Proof_jws   protoreflect.FieldDescriptor
)

func init() {
	file_common_crypto_ssi_proto_init()
	md_JSONWebSignature2020Proof = File_common_crypto_ssi_proto.Messages().ByName("JSONWebSignature2020Proof")
	fd_JSONWebSignature2020Proof_proof = md_JSONWebSignature2020Proof.Fields().ByName("proof")
	fd_JSONWebSignature2020Proof_jws = md_JSONWebSignature2020Proof.Fields().ByName("jws")
}

var _ protoreflect.Message = (*fastReflection_JSONWebSignature2020Proof)(nil)

type fastReflection_JSONWebSignature2020Proof JSONWebSignature2020Proof

func (x *JSONWebSignature2020Proof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_JSONWebSignature2020Proof)(x)
}

func (x *JSONWebSignature2020Proof) slowProtoReflect() protoreflect.Message {
	mi := &file_common_crypto_ssi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_JSONWebSignature2020Proof_messageType fastReflection_JSONWebSignature2020Proof_messageType
var _ protoreflect.MessageType = fastReflection_JSONWebSignature2020Proof_messageType{}

type fastReflection_JSONWebSignature2020Proof_messageType struct{}

func (x fastReflection_JSONWebSignature2020Proof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_JSONWebSignature2020Proof)(nil)
}
func (x fastReflection_JSONWebSignature2020Proof_messageType) New() protoreflect.Message {
	return new(fastReflection_JSONWebSignature2020Proof)
}
func (x fastReflection_JSONWebSignature2020Proof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_JSONWebSignature2020Proof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_JSONWebSignature2020Proof) Descriptor() protoreflect.MessageDescriptor {
	return md_JSONWebSignature2020Proof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_JSONWebSignature2020Proof) Type() protoreflect.MessageType {
	return _fastReflection_JSONWebSignature2020Proof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_JSONWebSignature2020Proof) New() protoreflect.Message {
	return new(fastReflection_JSONWebSignature2020Proof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_JSONWebSignature2020Proof) Interface() protoreflect.ProtoMessage {
	return (*JSONWebSignature2020Proof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_JSONWebSignature2020Proof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Proof != nil {
		value := protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
		if !f(fd_JSONWebSignature2020Proof_proof, value) {
			return
		}
	}
	if x.Jws != "" {
		value := protoreflect.ValueOfString(x.Jws)
		if !f(fd_JSONWebSignature2020Proof_jws, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_JSONWebSignature2020Proof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "common.crypto.JSONWebSignature2020Proof.proof":
		return x.Proof != nil
	case "common.crypto.JSONWebSignature2020Proof.jws":
		return x.Jws != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.JSONWebSignature2020Proof"))
		}
		panic(fmt.Errorf("message common.crypto.JSONWebSignature2020Proof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_JSONWebSignature2020Proof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "common.crypto.JSONWebSignature2020Proof.proof":
		x.Proof = nil
	case "common.crypto.JSONWebSignature2020Proof.jws":
		x.Jws = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.JSONWebSignature2020Proof"))
		}
		panic(fmt.Errorf("message common.crypto.JSONWebSignature2020Proof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_JSONWebSignature2020Proof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "common.crypto.JSONWebSignature2020Proof.proof":
		value := x.Proof
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "common.crypto.JSONWebSignature2020Proof.jws":
		value := x.Jws
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.JSONWebSignature2020Proof"))
		}
		panic(fmt.Errorf("message common.crypto.JSONWebSignature2020Proof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_JSONWebSignature2020Proof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "common.crypto.JSONWebSignature2020Proof.proof":
		x.Proof = value.Message().Interface().(*Proof)
	case "common.crypto.JSONWebSignature2020Proof.jws":
		x.Jws = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.JSONWebSignature2020Proof"))
		}
		panic(fmt.Errorf("message common.crypto.JSONWebSignature2020Proof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_JSONWebSignature2020Proof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "common.crypto.JSONWebSignature2020Proof.proof":
		if x.Proof == nil {
			x.Proof = new(Proof)
		}
		return protoreflect.ValueOfMessage(x.Proof.ProtoReflect())
	case "common.crypto.JSONWebSignature2020Proof.jws":
		panic(fmt.Errorf("field jws of message common.crypto.JSONWebSignature2020Proof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.JSONWebSignature2020Proof"))
		}
		panic(fmt.Errorf("message common.crypto.JSONWebSignature2020Proof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_JSONWebSignature2020Proof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "common.crypto.JSONWebSignature2020Proof.proof":
		m := new(Proof)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "common.crypto.JSONWebSignature2020Proof.jws":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.JSONWebSignature2020Proof"))
		}
		panic(fmt.Errorf("message common.crypto.JSONWebSignature2020Proof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_JSONWebSignature2020Proof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in common.crypto.JSONWebSignature2020Proof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_JSONWebSignature2020Proof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_JSONWebSignature2020Proof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_JSONWebSignature2020Proof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_JSONWebSignature2020Proof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*JSONWebSignature2020Proof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Proof != nil {
			l = options.Size(x.Proof)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Jws)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*JSONWebSignature2020Proof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Jws) > 0 {
			i -= len(x.Jws)
			copy(dAtA[i:], x.Jws)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Jws)))
			i--
			dAtA[i] = 0x12
		}
		if x.Proof != nil {
			encoded, err := options.Marshal(x.Proof)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*JSONWebSignature2020Proof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: JSONWebSignature2020Proof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: JSONWebSignature2020Proof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Proof == nil {
					x.Proof = &Proof{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Proof); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Jws", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Jws = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_VerifiableCredential_2_list)(nil)

type _VerifiableCredential_2_list struct {
	list *[]string
}

func (x *_VerifiableCredential_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VerifiableCredential_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_VerifiableCredential_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_VerifiableCredential_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_VerifiableCredential_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message VerifiableCredential at list field Context as it is not of Message kind"))
}

func (x *_VerifiableCredential_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_VerifiableCredential_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_VerifiableCredential_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_VerifiableCredential_3_list)(nil)

type _VerifiableCredential_3_list struct {
	list *[]string
}

func (x *_VerifiableCredential_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VerifiableCredential_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_VerifiableCredential_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_VerifiableCredential_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_VerifiableCredential_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message VerifiableCredential at list field Type_ as it is not of Message kind"))
}

func (x *_VerifiableCredential_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_VerifiableCredential_3_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_VerifiableCredential_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.Map = (*_VerifiableCredential_7_map)(nil)

type _VerifiableCredential_7_map struct {
	m *map[string]string
}

func (x *_VerifiableCredential_7_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_VerifiableCredential_7_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfString(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_VerifiableCredential_7_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_VerifiableCredential_7_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_VerifiableCredential_7_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfString(v)
}

func (x *_VerifiableCredential_7_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.m)[concreteKey] = concreteValue
}

func (x *_VerifiableCredential_7_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_VerifiableCredential_7_map) NewValue() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_VerifiableCredential_7_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.Map = (*_VerifiableCredential_8_map)(nil)

type _VerifiableCredential_8_map struct {
	m *map[string]string
}

func (x *_VerifiableCredential_8_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_VerifiableCredential_8_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfString(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_VerifiableCredential_8_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_VerifiableCredential_8_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_VerifiableCredential_8_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfString(v)
}

func (x *_VerifiableCredential_8_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.m)[concreteKey] = concreteValue
}

func (x *_VerifiableCredential_8_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_VerifiableCredential_8_map) NewValue() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_VerifiableCredential_8_map) IsValid() bool {
	return x.m != nil
}

var (
	md_VerifiableCredential                    protoreflect.MessageDescriptor
	fd_VerifiableCredential_id                 protoreflect.FieldDescriptor
	fd_VerifiableCredential_context            protoreflect.FieldDescriptor
	fd_VerifiableCredential_type               protoreflect.FieldDescriptor
	fd_VerifiableCredential_issuer             protoreflect.FieldDescriptor
	fd_VerifiableCredential_issuance_date      protoreflect.FieldDescriptor
	fd_VerifiableCredential_expiration_date    protoreflect.FieldDescriptor
	fd_VerifiableCredential_credential_subject protoreflect.FieldDescriptor
	fd_VerifiableCredential_proof              protoreflect.FieldDescriptor
)

func init() {
	file_common_crypto_ssi_proto_init()
	md_VerifiableCredential = File_common_crypto_ssi_proto.Messages().ByName("VerifiableCredential")
	fd_VerifiableCredential_id = md_VerifiableCredential.Fields().ByName("id")
	fd_VerifiableCredential_context = md_VerifiableCredential.Fields().ByName("context")
	fd_VerifiableCredential_type = md_VerifiableCredential.Fields().ByName("type")
	fd_VerifiableCredential_issuer = md_VerifiableCredential.Fields().ByName("issuer")
	fd_VerifiableCredential_issuance_date = md_VerifiableCredential.Fields().ByName("issuance_date")
	fd_VerifiableCredential_expiration_date = md_VerifiableCredential.Fields().ByName("expiration_date")
	fd_VerifiableCredential_credential_subject = md_VerifiableCredential.Fields().ByName("credential_subject")
	fd_VerifiableCredential_proof = md_VerifiableCredential.Fields().ByName("proof")
}

var _ protoreflect.Message = (*fastReflection_VerifiableCredential)(nil)

type fastReflection_VerifiableCredential VerifiableCredential

func (x *VerifiableCredential) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VerifiableCredential)(x)
}

func (x *VerifiableCredential) slowProtoReflect() protoreflect.Message {
	mi := &file_common_crypto_ssi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VerifiableCredential_messageType fastReflection_VerifiableCredential_messageType
var _ protoreflect.MessageType = fastReflection_VerifiableCredential_messageType{}

type fastReflection_VerifiableCredential_messageType struct{}

func (x fastReflection_VerifiableCredential_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VerifiableCredential)(nil)
}
func (x fastReflection_VerifiableCredential_messageType) New() protoreflect.Message {
	return new(fastReflection_VerifiableCredential)
}
func (x fastReflection_VerifiableCredential_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VerifiableCredential
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VerifiableCredential) Descriptor() protoreflect.MessageDescriptor {
	return md_VerifiableCredential
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VerifiableCredential) Type() protoreflect.MessageType {
	return _fastReflection_VerifiableCredential_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VerifiableCredential) New() protoreflect.Message {
	return new(fastReflection_VerifiableCredential)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VerifiableCredential) Interface() protoreflect.ProtoMessage {
	return (*VerifiableCredential)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VerifiableCredential) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_VerifiableCredential_id, value) {
			return
		}
	}
	if len(x.Context) != 0 {
		value := protoreflect.ValueOfList(&_VerifiableCredential_2_list{list: &x.Context})
		if !f(fd_VerifiableCredential_context, value) {
			return
		}
	}
	if len(x.Type_) != 0 {
		value := protoreflect.ValueOfList(&_VerifiableCredential_3_list{list: &x.Type_})
		if !f(fd_VerifiableCredential_type, value) {
			return
		}
	}
	if x.Issuer != "" {
		value := protoreflect.ValueOfString(x.Issuer)
		if !f(fd_VerifiableCredential_issuer, value) {
			return
		}
	}
	if x.IssuanceDate != "" {
		value := protoreflect.ValueOfString(x.IssuanceDate)
		if !f(fd_VerifiableCredential_issuance_date, value) {
			return
		}
	}
	if x.ExpirationDate != "" {
		value := protoreflect.ValueOfString(x.ExpirationDate)
		if !f(fd_VerifiableCredential_expiration_date, value) {
			return
		}
	}
	if len(x.CredentialSubject) != 0 {
		value := protoreflect.ValueOfMap(&_VerifiableCredential_7_map{m: &x.CredentialSubject})
		if !f(fd_VerifiableCredential_credential_subject, value) {
			return
		}
	}
	if len(x.Proof) != 0 {
		value := protoreflect.ValueOfMap(&_VerifiableCredential_8_map{m: &x.Proof})
		if !f(fd_VerifiableCredential_proof, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VerifiableCredential) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "common.crypto.VerifiableCredential.id":
		return x.Id != ""
	case "common.crypto.VerifiableCredential.context":
		return len(x.Context) != 0
	case "common.crypto.VerifiableCredential.type":
		return len(x.Type_) != 0
	case "common.crypto.VerifiableCredential.issuer":
		return x.Issuer != ""
	case "common.crypto.VerifiableCredential.issuance_date":
		return x.IssuanceDate != ""
	case "common.crypto.VerifiableCredential.expiration_date":
		return x.ExpirationDate != ""
	case "common.crypto.VerifiableCredential.credential_subject":
		return len(x.CredentialSubject) != 0
	case "common.crypto.VerifiableCredential.proof":
		return len(x.Proof) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.VerifiableCredential"))
		}
		panic(fmt.Errorf("message common.crypto.VerifiableCredential does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerifiableCredential) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "common.crypto.VerifiableCredential.id":
		x.Id = ""
	case "common.crypto.VerifiableCredential.context":
		x.Context = nil
	case "common.crypto.VerifiableCredential.type":
		x.Type_ = nil
	case "common.crypto.VerifiableCredential.issuer":
		x.Issuer = ""
	case "common.crypto.VerifiableCredential.issuance_date":
		x.IssuanceDate = ""
	case "common.crypto.VerifiableCredential.expiration_date":
		x.ExpirationDate = ""
	case "common.crypto.VerifiableCredential.credential_subject":
		x.CredentialSubject = nil
	case "common.crypto.VerifiableCredential.proof":
		x.Proof = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.VerifiableCredential"))
		}
		panic(fmt.Errorf("message common.crypto.VerifiableCredential does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VerifiableCredential) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "common.crypto.VerifiableCredential.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "common.crypto.VerifiableCredential.context":
		if len(x.Context) == 0 {
			return protoreflect.ValueOfList(&_VerifiableCredential_2_list{})
		}
		listValue := &_VerifiableCredential_2_list{list: &x.Context}
		return protoreflect.ValueOfList(listValue)
	case "common.crypto.VerifiableCredential.type":
		if len(x.Type_) == 0 {
			return protoreflect.ValueOfList(&_VerifiableCredential_3_list{})
		}
		listValue := &_VerifiableCredential_3_list{list: &x.Type_}
		return protoreflect.ValueOfList(listValue)
	case "common.crypto.VerifiableCredential.issuer":
		value := x.Issuer
		return protoreflect.ValueOfString(value)
	case "common.crypto.VerifiableCredential.issuance_date":
		value := x.IssuanceDate
		return protoreflect.ValueOfString(value)
	case "common.crypto.VerifiableCredential.expiration_date":
		value := x.ExpirationDate
		return protoreflect.ValueOfString(value)
	case "common.crypto.VerifiableCredential.credential_subject":
		if len(x.CredentialSubject) == 0 {
			return protoreflect.ValueOfMap(&_VerifiableCredential_7_map{})
		}
		mapValue := &_VerifiableCredential_7_map{m: &x.CredentialSubject}
		return protoreflect.ValueOfMap(mapValue)
	case "common.crypto.VerifiableCredential.proof":
		if len(x.Proof) == 0 {
			return protoreflect.ValueOfMap(&_VerifiableCredential_8_map{})
		}
		mapValue := &_VerifiableCredential_8_map{m: &x.Proof}
		return protoreflect.ValueOfMap(mapValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.VerifiableCredential"))
		}
		panic(fmt.Errorf("message common.crypto.VerifiableCredential does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerifiableCredential) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "common.crypto.VerifiableCredential.id":
		x.Id = value.Interface().(string)
	case "common.crypto.VerifiableCredential.context":
		lv := value.List()
		clv := lv.(*_VerifiableCredential_2_list)
		x.Context = *clv.list
	case "common.crypto.VerifiableCredential.type":
		lv := value.List()
		clv := lv.(*_VerifiableCredential_3_list)
		x.Type_ = *clv.list
	case "common.crypto.VerifiableCredential.issuer":
		x.Issuer = value.Interface().(string)
	case "common.crypto.VerifiableCredential.issuance_date":
		x.IssuanceDate = value.Interface().(string)
	case "common.crypto.VerifiableCredential.expiration_date":
		x.ExpirationDate = value.Interface().(string)
	case "common.crypto.VerifiableCredential.credential_subject":
		mv := value.Map()
		cmv := mv.(*_VerifiableCredential_7_map)
		x.CredentialSubject = *cmv.m
	case "common.crypto.VerifiableCredential.proof":
		mv := value.Map()
		cmv := mv.(*_VerifiableCredential_8_map)
		x.Proof = *cmv.m
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.VerifiableCredential"))
		}
		panic(fmt.Errorf("message common.crypto.VerifiableCredential does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerifiableCredential) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "common.crypto.VerifiableCredential.context":
		if x.Context == nil {
			x.Context = []string{}
		}
		value := &_VerifiableCredential_2_list{list: &x.Context}
		return protoreflect.ValueOfList(value)
	case "common.crypto.VerifiableCredential.type":
		if x.Type_ == nil {
			x.Type_ = []string{}
		}
		value := &_VerifiableCredential_3_list{list: &x.Type_}
		return protoreflect.ValueOfList(value)
	case "common.crypto.VerifiableCredential.credential_subject":
		if x.CredentialSubject == nil {
			x.CredentialSubject = make(map[string]string)
		}
		value := &_VerifiableCredential_7_map{m: &x.CredentialSubject}
		return protoreflect.ValueOfMap(value)
	case "common.crypto.VerifiableCredential.proof":
		if x.Proof == nil {
			x.Proof = make(map[string]string)
		}
		value := &_VerifiableCredential_8_map{m: &x.Proof}
		return protoreflect.ValueOfMap(value)
	case "common.crypto.VerifiableCredential.id":
		panic(fmt.Errorf("field id of message common.crypto.VerifiableCredential is not mutable"))
	case "common.crypto.VerifiableCredential.issuer":
		panic(fmt.Errorf("field issuer of message common.crypto.VerifiableCredential is not mutable"))
	case "common.crypto.VerifiableCredential.issuance_date":
		panic(fmt.Errorf("field issuance_date of message common.crypto.VerifiableCredential is not mutable"))
	case "common.crypto.VerifiableCredential.expiration_date":
		panic(fmt.Errorf("field expiration_date of message common.crypto.VerifiableCredential is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.VerifiableCredential"))
		}
		panic(fmt.Errorf("message common.crypto.VerifiableCredential does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VerifiableCredential) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "common.crypto.VerifiableCredential.id":
		return protoreflect.ValueOfString("")
	case "common.crypto.VerifiableCredential.context":
		list := []string{}
		return protoreflect.ValueOfList(&_VerifiableCredential_2_list{list: &list})
	case "common.crypto.VerifiableCredential.type":
		list := []string{}
		return protoreflect.ValueOfList(&_VerifiableCredential_3_list{list: &list})
	case "common.crypto.VerifiableCredential.issuer":
		return protoreflect.ValueOfString("")
	case "common.crypto.VerifiableCredential.issuance_date":
		return protoreflect.ValueOfString("")
	case "common.crypto.VerifiableCredential.expiration_date":
		return protoreflect.ValueOfString("")
	case "common.crypto.VerifiableCredential.credential_subject":
		m := make(map[string]string)
		return protoreflect.ValueOfMap(&_VerifiableCredential_7_map{m: &m})
	case "common.crypto.VerifiableCredential.proof":
		m := make(map[string]string)
		return protoreflect.ValueOfMap(&_VerifiableCredential_8_map{m: &m})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: common.crypto.VerifiableCredential"))
		}
		panic(fmt.Errorf("message common.crypto.VerifiableCredential does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VerifiableCredential) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in common.crypto.VerifiableCredential", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VerifiableCredential) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerifiableCredential) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VerifiableCredential) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VerifiableCredential) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VerifiableCredential)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Context) > 0 {
			for _, s := range x.Context {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Type_) > 0 {
			for _, s := range x.Type_ {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Issuer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IssuanceDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExpirationDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.CredentialSubject) > 0 {
			SiZeMaP := func(k string, v string) {
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + 1 + len(v) + runtime.Sov(uint64(len(v)))
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.CredentialSubject))
				for k := range x.CredentialSubject {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.CredentialSubject[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.CredentialSubject {
					SiZeMaP(k, v)
				}
			}
		}
		if len(x.Proof) > 0 {
			SiZeMaP := func(k string, v string) {
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + 1 + len(v) + runtime.Sov(uint64(len(v)))
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.Proof))
				for k := range x.Proof {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.Proof[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.Proof {
					SiZeMaP(k, v)
				}
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VerifiableCredential)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Proof) > 0 {
			MaRsHaLmAp := func(k string, v string) (protoiface.MarshalOutput, error) {
				baseI := i
				i -= len(v)
				copy(dAtA[i:], v)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x42
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForProof := make([]string, 0, len(x.Proof))
				for k := range x.Proof {
					keysForProof = append(keysForProof, string(k))
				}
				sort.Slice(keysForProof, func(i, j int) bool {
					return keysForProof[i] < keysForProof[j]
				})
				for iNdEx := len(keysForProof) - 1; iNdEx >= 0; iNdEx-- {
					v := x.Proof[string(keysForProof[iNdEx])]
					out, err := MaRsHaLmAp(keysForProof[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.Proof {
					v := x.Proof[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.CredentialSubject) > 0 {
			MaRsHaLmAp := func(k string, v string) (protoiface.MarshalOutput, error) {
				baseI := i
				i -= len(v)
				copy(dAtA[i:], v)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x3a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForCredentialSubject := make([]string, 0, len(x.CredentialSubject))
				for k := range x.CredentialSubject {
					keysForCredentialSubject = append(keysForCredentialSubject, string(k))
				}
				sort.Slice(keysForCredentialSubject, func(i, j int) bool {
					return keysForCredentialSubject[i] < keysForCredentialSubject[j]
				})
				for iNdEx := len(keysForCredentialSubject) - 1; iNdEx >= 0; iNdEx-- {
					v := x.CredentialSubject[string(keysForCredentialSubject[iNdEx])]
					out, err := MaRsHaLmAp(keysForCredentialSubject[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.CredentialSubject {
					v := x.CredentialSubject[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.ExpirationDate) > 0 {
			i -= len(x.ExpirationDate)
			copy(dAtA[i:], x.ExpirationDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExpirationDate)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.IssuanceDate) > 0 {
			i -= len(x.IssuanceDate)
			copy(dAtA[i:], x.IssuanceDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IssuanceDate)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Issuer) > 0 {
			i -= len(x.Issuer)
			copy(dAtA[i:], x.Issuer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Issuer)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Type_) > 0 {
			for iNdEx := len(x.Type_) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Type_[iNdEx])
				copy(dAtA[i:], x.Type_[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Type_[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Context) > 0 {
			for iNdEx := len(x.Context) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Context[iNdEx])
				copy(dAtA[i:], x.Context[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Context[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VerifiableCredential)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VerifiableCredential: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VerifiableCredential: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Context = append(x.Context, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Type_ = append(x.Type_, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Issuer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IssuanceDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IssuanceDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExpirationDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CredentialSubject", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CredentialSubject == nil {
					x.CredentialSubject = make(map[string]string)
				}
				var mapkey string
				var mapvalue string
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						var stringLenmapvalue uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapvalue |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapvalue := int(stringLenmapvalue)
						if intStringLenmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapvalue := iNdEx + intStringLenmapvalue
						if postStringIndexmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapvalue > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
						iNdEx = postStringIndexmapvalue
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.CredentialSubject[mapkey] = mapvalue
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Proof == nil {
					x.Proof = make(map[string]string)
				}
				var mapkey string
				var mapvalue string
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						var stringLenmapvalue uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapvalue |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapvalue := int(stringLenmapvalue)
						if intStringLenmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapvalue := iNdEx + intStringLenmapvalue
						if postStringIndexmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapvalue > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
						iNdEx = postStringIndexmapvalue
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.Proof[mapkey] = mapvalue
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: common/crypto/ssi.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyType is the type of key used to sign a DID document.
type KeyType int32

const (
	// No key type specified
	KeyType_KeyType_UNSPECIFIED KeyType = 0
	// JsonWebKey2020 is a VerificationMethod type.
	// https://w3c-ccg.github.io/lds-jws2020/
	KeyType_KeyType_JSON_WEB_KEY_2020 KeyType = 1
	// ED25519VerificationKey2018 is the Ed25519VerificationKey2018 verification
	// key type as specified here: https://w3c-ccg.github.io/lds-ed25519-2018/
	KeyType_KeyType_ED25519_VERIFICATION_KEY_2018 KeyType = 2
	// ECDSASECP256K1VerificationKey2019 is the EcdsaSecp256k1VerificationKey2019
	// verification key type as specified here:
	// https://w3c-ccg.github.io/lds-ecdsa-secp256k1-2019/
	KeyType_KeyType_ECDSA_SECP256K1_VERIFICATION_KEY_2019 KeyType = 3
	// RSAVerificationKey2018 is the RsaVerificationKey2018 verification key type
	// as specified here: https://w3c-ccg.github.io/lds-rsa2018/
	KeyType_KeyType_RSA_VERIFICATION_KEY_2018 KeyType = 4
	// WebAuthnAuthentication2018 is the WebAuthnAuthentication2018 verification
	// key type as specified here: https://w3c-ccg.github.io/lds-webauthn/
	KeyType_KeyType_WEB_AUTHN_AUTHENTICATION_2018 KeyType = 5
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "KeyType_UNSPECIFIED",
		1: "KeyType_JSON_WEB_KEY_2020",
		2: "KeyType_ED25519_VERIFICATION_KEY_2018",
		3: "KeyType_ECDSA_SECP256K1_VERIFICATION_KEY_2019",
		4: "KeyType_RSA_VERIFICATION_KEY_2018",
		5: "KeyType_WEB_AUTHN_AUTHENTICATION_2018",
	}
	KeyType_value = map[string]int32{
		"KeyType_UNSPECIFIED":                           0,
		"KeyType_JSON_WEB_KEY_2020":                     1,
		"KeyType_ED25519_VERIFICATION_KEY_2018":         2,
		"KeyType_ECDSA_SECP256K1_VERIFICATION_KEY_2019": 3,
		"KeyType_RSA_VERIFICATION_KEY_2018":             4,
		"KeyType_WEB_AUTHN_AUTHENTICATION_2018":         5,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_crypto_ssi_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_common_crypto_ssi_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_common_crypto_ssi_proto_rawDescGZIP(), []int{0}
}

// ProofType is the type of proof used to present claims over a DID document.
type ProofType int32

const (
	// No proof type specified
	ProofType_ProofType_UNSPECIFIED ProofType = 0
	// JsonWebSignature2020 is a proof type.
	// https://w3c-ccg.github.io/lds-jws2020/
	ProofType_ProofType_JSON_WEB_SIGNATURE_2020 ProofType = 1
	// ED25519Signature2018 is the Ed25519Signature2018 proof type as specified
	// here: https://w3c-ccg.github.io/lds-ed25519-2018/
	ProofType_ProofType_ED25519_SIGNATURE_2018 ProofType = 2
	// EcdsaSecp256k1Signature2019 is the EcdsaSecp256k1Signature2019 proof type
	// as specified here: https://w3c-ccg.github.io/lds-ecdsa-secp256k1-2019/
	ProofType_ProofType_ECDSA_SECP256K1_SIGNATURE_2019 ProofType = 3
	// RsaSignature2018 is the RsaSignature2018 proof type as specified here:
	// https://w3c-ccg.github.io/lds-rsa2018/
	ProofType_ProofType_RSA_SIGNATURE_2018 ProofType = 4
)

// Enum value maps for ProofType.
var (
	ProofType_name = map[int32]string{
		0: "ProofType_UNSPECIFIED",
		1: "ProofType_JSON_WEB_SIGNATURE_2020",
		2: "ProofType_ED25519_SIGNATURE_2018",
		3: "ProofType_ECDSA_SECP256K1_SIGNATURE_2019",
		4: "ProofType_RSA_SIGNATURE_2018",
	}
	ProofType_value = map[string]int32{
		"ProofType_UNSPECIFIED":                    0,
		"ProofType_JSON_WEB_SIGNATURE_2020":        1,
		"ProofType_ED25519_SIGNATURE_2018":         2,
		"ProofType_ECDSA_SECP256K1_SIGNATURE_2019": 3,
		"ProofType_RSA_SIGNATURE_2018":             4,
	}
)

func (x ProofType) Enum() *ProofType {
	p := new(ProofType)
	*p = x
	return p
}

func (x ProofType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProofType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_crypto_ssi_proto_enumTypes[1].Descriptor()
}

func (ProofType) Type() protoreflect.EnumType {
	return &file_common_crypto_ssi_proto_enumTypes[1]
}

func (x ProofType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProofType.Descriptor instead.
func (ProofType) EnumDescriptor() ([]byte, []int) {
	return file_common_crypto_ssi_proto_rawDescGZIP(), []int{1}
}

// Proof represents a credential/presentation proof as defined by the Linked
// Data Proofs 1.0 specification (https://w3c-ccg.github.io/ld-proofs/).
type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type defines the specific proof type used. For example, an
	// Ed25519Signature2018 type indicates that the proof includes a digital
	// signature produced by an ed25519 cryptographic key.
	Type_ ProofType `protobuf:"varint,1,opt,name=type,proto3,enum=common.crypto.ProofType" json:"type,omitempty"`
	// ProofPurpose defines the intent for the proof, the reason why an entity
	// created it. Acts as a safeguard to prevent the proof from being misused for
	// a purpose other than the one it was intended for.
	ProofPurpose string `protobuf:"bytes,2,opt,name=proof_purpose,json=proofPurpose,proto3" json:"proof_purpose,omitempty"`
	// VerificationMethod points to the ID that can be used to verify the proof,
	// eg: a public key.
	VerificationMethod string `protobuf:"bytes,3,opt,name=verification_method,json=verificationMethod,proto3" json:"verification_method,omitempty"`
	// Created notes when the proof was created using a iso8601 string
	Created string `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	// Domain specifies the restricted domain of the proof
	Domain string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_crypto_ssi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_common_crypto_ssi_proto_rawDescGZIP(), []int{0}
}

func (x *Proof) GetType_() ProofType {
	if x != nil {
		return x.Type_
	}
	return ProofType_ProofType_UNSPECIFIED
}

func (x *Proof) GetProofPurpose() string {
	if x != nil {
		return x.ProofPurpose
	}
	return ""
}

func (x *Proof) GetVerificationMethod() string {
	if x != nil {
		return x.VerificationMethod
	}
	return ""
}

func (x *Proof) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Proof) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// JSONWebSignature2020Proof is a VC proof with a signature according to
// JsonWebSignature2020
type JSONWebSignature2020Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof *Proof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	Jws   string `protobuf:"bytes,2,opt,name=jws,proto3" json:"jws,omitempty"`
}

func (x *JSONWebSignature2020Proof) Reset() {
	*x = JSONWebSignature2020Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_crypto_ssi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSONWebSignature2020Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONWebSignature2020Proof) ProtoMessage() {}

// Deprecated: Use JSONWebSignature2020Proof.ProtoReflect.Descriptor instead.
func (*JSONWebSignature2020Proof) Descriptor() ([]byte, []int) {
	return file_common_crypto_ssi_proto_rawDescGZIP(), []int{1}
}

func (x *JSONWebSignature2020Proof) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *JSONWebSignature2020Proof) GetJws() string {
	if x != nil {
		return x.Jws
	}
	return ""
}

// VerifiableCredential represents a credential as defined by the Verifiable
// Credentials Data Model 1.0 specification
// (https://www.w3.org/TR/vc-data-model/).
type VerifiableCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier for the credential.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Context is a list of URIs that define the context of the credential.
	Context []string `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	// Type is a list of URIs that define the type of the credential.
	Type_ []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// Issuer is the DID of the issuer of the credential.
	Issuer string `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// IssuanceDate is the date the credential was issued.
	IssuanceDate string `protobuf:"bytes,5,opt,name=issuance_date,json=issuanceDate,proto3" json:"issuance_date,omitempty"`
	// ExpirationDate is the date the credential expires.
	ExpirationDate string `protobuf:"bytes,6,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// CredentialSubject is the subject of the credential.
	CredentialSubject map[string]string `protobuf:"bytes,7,rep,name=credential_subject,json=credentialSubject,proto3" json:"credential_subject,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Proof is the proof of the credential.
	Proof map[string]string `protobuf:"bytes,8,rep,name=proof,proto3" json:"proof,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VerifiableCredential) Reset() {
	*x = VerifiableCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_crypto_ssi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableCredential) ProtoMessage() {}

// Deprecated: Use VerifiableCredential.ProtoReflect.Descriptor instead.
func (*VerifiableCredential) Descriptor() ([]byte, []int) {
	return file_common_crypto_ssi_proto_rawDescGZIP(), []int{2}
}

func (x *VerifiableCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerifiableCredential) GetContext() []string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *VerifiableCredential) GetType_() []string {
	if x != nil {
		return x.Type_
	}
	return nil
}

func (x *VerifiableCredential) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *VerifiableCredential) GetIssuanceDate() string {
	if x != nil {
		return x.IssuanceDate
	}
	return ""
}

func (x *VerifiableCredential) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *VerifiableCredential) GetCredentialSubject() map[string]string {
	if x != nil {
		return x.CredentialSubject
	}
	return nil
}

func (x *VerifiableCredential) GetProof() map[string]string {
	if x != nil {
		return x.Proof
	}
	return nil
}

var File_common_crypto_ssi_proto protoreflect.FileDescriptor

var file_common_crypto_ssi_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f,
	0x73, 0x73, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x59, 0x0a, 0x19, 0x4a, 0x53, 0x4f, 0x4e,
	0x57, 0x65, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x30, 0x32, 0x30,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6a, 0x77, 0x73, 0x22, 0xeb, 0x03, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x69, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x1a, 0x44, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x2a, 0xf1, 0x01, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x32,
	0x30, 0x32, 0x30, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x32, 0x30, 0x31, 0x38, 0x10, 0x02,
	0x12, 0x31, 0x0a, 0x2d, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x43, 0x44, 0x53,
	0x41, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x4b, 0x31, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x32, 0x30, 0x31,
	0x39, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x32, 0x30, 0x31, 0x38, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4e, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x32,
	0x30, 0x31, 0x38, 0x10, 0x05, 0x2a, 0xc3, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4a, 0x53, 0x4f, 0x4e,
	0x5f, 0x57, 0x45, 0x42, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x32,
	0x30, 0x32, 0x30, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x32, 0x30, 0x31, 0x38, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x53,
	0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x4b, 0x31, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x32, 0x30, 0x31, 0x39, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x32, 0x30, 0x31, 0x38, 0x10, 0x04, 0x42, 0x98, 0x01, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x42, 0x08, 0x53, 0x73, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2d, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0xca, 0x02, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0xe2, 0x02, 0x19, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_crypto_ssi_proto_rawDescOnce sync.Once
	file_common_crypto_ssi_proto_rawDescData = file_common_crypto_ssi_proto_rawDesc
)

func file_common_crypto_ssi_proto_rawDescGZIP() []byte {
	file_common_crypto_ssi_proto_rawDescOnce.Do(func() {
		file_common_crypto_ssi_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_crypto_ssi_proto_rawDescData)
	})
	return file_common_crypto_ssi_proto_rawDescData
}

var file_common_crypto_ssi_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_common_crypto_ssi_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_common_crypto_ssi_proto_goTypes = []interface{}{
	(KeyType)(0),                      // 0: common.crypto.KeyType
	(ProofType)(0),                    // 1: common.crypto.ProofType
	(*Proof)(nil),                     // 2: common.crypto.Proof
	(*JSONWebSignature2020Proof)(nil), // 3: common.crypto.JSONWebSignature2020Proof
	(*VerifiableCredential)(nil),      // 4: common.crypto.VerifiableCredential
	nil,                               // 5: common.crypto.VerifiableCredential.CredentialSubjectEntry
	nil,                               // 6: common.crypto.VerifiableCredential.ProofEntry
}
var file_common_crypto_ssi_proto_depIdxs = []int32{
	1, // 0: common.crypto.Proof.type:type_name -> common.crypto.ProofType
	2, // 1: common.crypto.JSONWebSignature2020Proof.proof:type_name -> common.crypto.Proof
	5, // 2: common.crypto.VerifiableCredential.credential_subject:type_name -> common.crypto.VerifiableCredential.CredentialSubjectEntry
	6, // 3: common.crypto.VerifiableCredential.proof:type_name -> common.crypto.VerifiableCredential.ProofEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_common_crypto_ssi_proto_init() }
func file_common_crypto_ssi_proto_init() {
	if File_common_crypto_ssi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_crypto_ssi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_crypto_ssi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSONWebSignature2020Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_crypto_ssi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_crypto_ssi_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_crypto_ssi_proto_goTypes,
		DependencyIndexes: file_common_crypto_ssi_proto_depIdxs,
		EnumInfos:         file_common_crypto_ssi_proto_enumTypes,
		MessageInfos:      file_common_crypto_ssi_proto_msgTypes,
	}.Build()
	File_common_crypto_ssi_proto = out.File
	file_common_crypto_ssi_proto_rawDesc = nil
	file_common_crypto_ssi_proto_goTypes = nil
	file_common_crypto_ssi_proto_depIdxs = nil
}
