syntax = "proto3";

package sonrio.sonr.schema;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "schema/v1/params.proto";
import "schema/v1/schema.proto";
// this line is used by starport scaffolding # 1


option go_package = "github.com/sonr-io/sonr/x/schema/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sonr-io/sonr/schema/params";
  }

  rpc QuerySchema(QuerySchemaRequest) returns (QuerySchemaResponse) {
    option (google.api.http).get = "/sonr-io/sonr/schema/query";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QuerySchemaRequest {
  string did = 1;
}

message QuerySchemaResponse {
  SchemaReference schema = 1;
}

// this line is used by starport scaffolding # 3
