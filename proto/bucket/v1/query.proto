syntax = "proto3";
package sonrio.sonr.bucket;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "bucket/v1/params.proto";
import "bucket/v1/which_is.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/sonr-io/sonr/x/bucket/types";

// Query defines the gRPC querier service.
service Query {
	// Params
	//
	// Parameters queries the parameters of the module.
	rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
		option (google.api.http).get = "/sonr-io/sonr/bucket/params";
	}

	// WhichIs
	//
	// Queries a WhichIs by did.
	rpc WhichIs(QueryWhichIsRequest) returns (QueryWhichIsResponse) {
		option (google.api.http).get = "/sonr-io/sonr/bucket/which_is/{did}";
	}

	// WhichIsAll
	//
	// Queries a list of WhichIs items.
	rpc WhichIsAll(QueryAllWhichIsRequest) returns (QueryAllWhichIsResponse) {
		option (google.api.http).get = "/sonr-io/sonr/bucket/which_is";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryWhichIsRequest {
	string did = 1;
}

message QueryWhichIsResponse {
	WhichIs which_is = 1 [(gogoproto.nullable) = false];
}

message QueryAllWhichIsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllWhichIsResponse {
	repeated WhichIs which_is = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
