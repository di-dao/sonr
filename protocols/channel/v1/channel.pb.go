// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: protocols/channel/v1/channel.proto

// Package Channel contains definitions for channel specific events and data.

package channel

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EventType is the type of event being performed on a channel.
type ChannelEventType int32

const (
	// EventTypeUnspecified is the default value.
	ChannelEventType_CHANNEL_EVENT_TYPE_UNSPECIFIED ChannelEventType = 0
	// EventTypeGet is a get event being performed on a channel record in the store.
	ChannelEventType_CHANNEL_EVENT_TYPE_GET ChannelEventType = 1
	// EventTypeSet is a set event on the record store.
	ChannelEventType_CHANNEL_EVENT_TYPE_SET ChannelEventType = 2
	// EventTypeDelete is a delete event on the record store.
	ChannelEventType_CHANNEL_EVENT_TYPE_DELETE ChannelEventType = 3
)

// Enum value maps for ChannelEventType.
var (
	ChannelEventType_name = map[int32]string{
		0: "CHANNEL_EVENT_TYPE_UNSPECIFIED",
		1: "CHANNEL_EVENT_TYPE_GET",
		2: "CHANNEL_EVENT_TYPE_SET",
		3: "CHANNEL_EVENT_TYPE_DELETE",
	}
	ChannelEventType_value = map[string]int32{
		"CHANNEL_EVENT_TYPE_UNSPECIFIED": 0,
		"CHANNEL_EVENT_TYPE_GET":         1,
		"CHANNEL_EVENT_TYPE_SET":         2,
		"CHANNEL_EVENT_TYPE_DELETE":      3,
	}
)

func (x ChannelEventType) Enum() *ChannelEventType {
	p := new(ChannelEventType)
	*p = x
	return p
}

func (x ChannelEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocols_channel_v1_channel_proto_enumTypes[0].Descriptor()
}

func (ChannelEventType) Type() protoreflect.EnumType {
	return &file_protocols_channel_v1_channel_proto_enumTypes[0]
}

func (x ChannelEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelEventType.Descriptor instead.
func (ChannelEventType) EnumDescriptor() ([]byte, []int) {
	return file_protocols_channel_v1_channel_proto_rawDescGZIP(), []int{0}
}

// ChannelEvent is the base event type for all channel events.
type ChannelEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner is the peer that originated the event.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Type is the type of event being performed on a channel.
	Type ChannelEventType `protobuf:"varint,2,opt,name=type,proto3,enum=protocols.channel.v1.ChannelEventType" json:"type,omitempty"`
	// Record is the entry being modified in the Store.
	Record *ChannelStoreRecord `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
	// Metadata is the metadata associated with the event.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChannelEvent) Reset() {
	*x = ChannelEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_channel_v1_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelEvent) ProtoMessage() {}

func (x *ChannelEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_channel_v1_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelEvent.ProtoReflect.Descriptor instead.
func (*ChannelEvent) Descriptor() ([]byte, []int) {
	return file_protocols_channel_v1_channel_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelEvent) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ChannelEvent) GetType() ChannelEventType {
	if x != nil {
		return x.Type
	}
	return ChannelEventType_CHANNEL_EVENT_TYPE_UNSPECIFIED
}

func (x *ChannelEvent) GetRecord() *ChannelStoreRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *ChannelEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ChannelMessage is a message sent to a channel.
type ChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner is the peer that originated the message.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Text is the message text.
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"` // optional
	// Data is the data being sent.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // optional
	// Metadata is the metadata associated with the message.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChannelMessage) Reset() {
	*x = ChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_channel_v1_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessage) ProtoMessage() {}

func (x *ChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_channel_v1_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessage.ProtoReflect.Descriptor instead.
func (*ChannelMessage) Descriptor() ([]byte, []int) {
	return file_protocols_channel_v1_channel_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelMessage) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ChannelMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChannelMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChannelMessage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Store is a disk based key-value store for channel data.
type ChannelStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entries is the data being stored.
	Entries map[string]*ChannelStoreRecord `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Capacity is the maximum number of entries that can be stored.
	Capacity int32 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Modified is the last time the store was modified.
	Modified int64 `protobuf:"varint,3,opt,name=modified,proto3" json:"modified,omitempty"`
	// TTL is the time to live for entries in the store.
	Ttl int64 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *ChannelStore) Reset() {
	*x = ChannelStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_channel_v1_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStore) ProtoMessage() {}

func (x *ChannelStore) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_channel_v1_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStore.ProtoReflect.Descriptor instead.
func (*ChannelStore) Descriptor() ([]byte, []int) {
	return file_protocols_channel_v1_channel_proto_rawDescGZIP(), []int{2}
}

func (x *ChannelStore) GetEntries() map[string]*ChannelStoreRecord {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ChannelStore) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ChannelStore) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *ChannelStore) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// ChannelStoreRecord is the data being stored in the ChannelStore.
type ChannelStoreRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner is the peer that originated the event.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Key is the key being modified in the Store.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Value is the value being modified in the Store.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Expiration is the expiration time for the entry.
	Expiration int64 `protobuf:"varint,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Created is the time the entry was created.
	Created int64 `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	// Modified is the time the entry was last modified.
	Modified int64 `protobuf:"varint,6,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *ChannelStoreRecord) Reset() {
	*x = ChannelStoreRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_channel_v1_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStoreRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStoreRecord) ProtoMessage() {}

func (x *ChannelStoreRecord) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_channel_v1_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStoreRecord.ProtoReflect.Descriptor instead.
func (*ChannelStoreRecord) Descriptor() ([]byte, []int) {
	return file_protocols_channel_v1_channel_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelStoreRecord) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ChannelStoreRecord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ChannelStoreRecord) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ChannelStoreRecord) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *ChannelStoreRecord) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ChannelStoreRecord) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

var File_protocols_channel_v1_channel_proto protoreflect.FileDescriptor

var file_protocols_channel_v1_channel_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x22, 0xad, 0x02, 0x0a, 0x0c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x0e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a, 0x64,
	0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2a,
	0x8d, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x42,
	0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6e, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocols_channel_v1_channel_proto_rawDescOnce sync.Once
	file_protocols_channel_v1_channel_proto_rawDescData = file_protocols_channel_v1_channel_proto_rawDesc
)

func file_protocols_channel_v1_channel_proto_rawDescGZIP() []byte {
	file_protocols_channel_v1_channel_proto_rawDescOnce.Do(func() {
		file_protocols_channel_v1_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocols_channel_v1_channel_proto_rawDescData)
	})
	return file_protocols_channel_v1_channel_proto_rawDescData
}

var file_protocols_channel_v1_channel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protocols_channel_v1_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_protocols_channel_v1_channel_proto_goTypes = []interface{}{
	(ChannelEventType)(0),      // 0: protocols.channel.v1.ChannelEventType
	(*ChannelEvent)(nil),       // 1: protocols.channel.v1.ChannelEvent
	(*ChannelMessage)(nil),     // 2: protocols.channel.v1.ChannelMessage
	(*ChannelStore)(nil),       // 3: protocols.channel.v1.ChannelStore
	(*ChannelStoreRecord)(nil), // 4: protocols.channel.v1.ChannelStoreRecord
	nil,                        // 5: protocols.channel.v1.ChannelEvent.MetadataEntry
	nil,                        // 6: protocols.channel.v1.ChannelMessage.MetadataEntry
	nil,                        // 7: protocols.channel.v1.ChannelStore.EntriesEntry
}
var file_protocols_channel_v1_channel_proto_depIdxs = []int32{
	0, // 0: protocols.channel.v1.ChannelEvent.type:type_name -> protocols.channel.v1.ChannelEventType
	4, // 1: protocols.channel.v1.ChannelEvent.record:type_name -> protocols.channel.v1.ChannelStoreRecord
	5, // 2: protocols.channel.v1.ChannelEvent.metadata:type_name -> protocols.channel.v1.ChannelEvent.MetadataEntry
	6, // 3: protocols.channel.v1.ChannelMessage.metadata:type_name -> protocols.channel.v1.ChannelMessage.MetadataEntry
	7, // 4: protocols.channel.v1.ChannelStore.entries:type_name -> protocols.channel.v1.ChannelStore.EntriesEntry
	4, // 5: protocols.channel.v1.ChannelStore.EntriesEntry.value:type_name -> protocols.channel.v1.ChannelStoreRecord
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_protocols_channel_v1_channel_proto_init() }
func file_protocols_channel_v1_channel_proto_init() {
	if File_protocols_channel_v1_channel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocols_channel_v1_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_channel_v1_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_channel_v1_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_channel_v1_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStoreRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocols_channel_v1_channel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocols_channel_v1_channel_proto_goTypes,
		DependencyIndexes: file_protocols_channel_v1_channel_proto_depIdxs,
		EnumInfos:         file_protocols_channel_v1_channel_proto_enumTypes,
		MessageInfos:      file_protocols_channel_v1_channel_proto_msgTypes,
	}.Build()
	File_protocols_channel_v1_channel_proto = out.File
	file_protocols_channel_v1_channel_proto_rawDesc = nil
	file_protocols_channel_v1_channel_proto_goTypes = nil
	file_protocols_channel_v1_channel_proto_depIdxs = nil
}
