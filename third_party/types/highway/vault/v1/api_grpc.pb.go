// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: highway/vault/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VaultClient is the client API for Vault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultClient interface {
	// Keygen generates a new keypair and returns the public key.
	Keygen(ctx context.Context, in *KeygenRequest, opts ...grpc.CallOption) (*KeygenResponse, error)
	// Refresh refreshes the keypair and returns the public key.
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Sign signs the data with the private key and returns the signature.
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
	// Derive derives a new key from the private key and returns the public key.
	Derive(ctx context.Context, in *DeriveRequest, opts ...grpc.CallOption) (*DeriveResponse, error)
}

type vaultClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultClient(cc grpc.ClientConnInterface) VaultClient {
	return &vaultClient{cc}
}

func (c *vaultClient) Keygen(ctx context.Context, in *KeygenRequest, opts ...grpc.CallOption) (*KeygenResponse, error) {
	out := new(KeygenResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.vault.v1.Vault/Keygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.vault.v1.Vault/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.vault.v1.Vault/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Derive(ctx context.Context, in *DeriveRequest, opts ...grpc.CallOption) (*DeriveResponse, error) {
	out := new(DeriveResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.vault.v1.Vault/Derive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServer is the server API for Vault service.
// All implementations must embed UnimplementedVaultServer
// for forward compatibility
type VaultServer interface {
	// Keygen generates a new keypair and returns the public key.
	Keygen(context.Context, *KeygenRequest) (*KeygenResponse, error)
	// Refresh refreshes the keypair and returns the public key.
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Sign signs the data with the private key and returns the signature.
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	// Derive derives a new key from the private key and returns the public key.
	Derive(context.Context, *DeriveRequest) (*DeriveResponse, error)
	mustEmbedUnimplementedVaultServer()
}

// UnimplementedVaultServer must be embedded to have forward compatible implementations.
type UnimplementedVaultServer struct {
}

func (UnimplementedVaultServer) Keygen(context.Context, *KeygenRequest) (*KeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keygen not implemented")
}
func (UnimplementedVaultServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedVaultServer) Sign(context.Context, *SignRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedVaultServer) Derive(context.Context, *DeriveRequest) (*DeriveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Derive not implemented")
}
func (UnimplementedVaultServer) mustEmbedUnimplementedVaultServer() {}

// UnsafeVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServer will
// result in compilation errors.
type UnsafeVaultServer interface {
	mustEmbedUnimplementedVaultServer()
}

func RegisterVaultServer(s grpc.ServiceRegistrar, srv VaultServer) {
	s.RegisterService(&Vault_ServiceDesc, srv)
}

func _Vault_Keygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Keygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.vault.v1.Vault/Keygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Keygen(ctx, req.(*KeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.vault.v1.Vault/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.vault.v1.Vault/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Derive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Derive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.vault.v1.Vault/Derive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Derive(ctx, req.(*DeriveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vault_ServiceDesc is the grpc.ServiceDesc for Vault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.highway.vault.v1.Vault",
	HandlerType: (*VaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Keygen",
			Handler:    _Vault_Keygen_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Vault_Refresh_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _Vault_Sign_Handler,
		},
		{
			MethodName: "Derive",
			Handler:    _Vault_Derive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "highway/vault/v1/api.proto",
}
