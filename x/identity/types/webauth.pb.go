// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sonr/identity/webauth.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AttestionRequest is the request to generate a Attestion.
type AttestionRequest struct {
	// Optional RP ID to use for the Attestion.
	RpId string `protobuf:"bytes,1,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	// Username to use for the AlsoKnownAs field in the didDoc
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *AttestionRequest) Reset()         { *m = AttestionRequest{} }
func (m *AttestionRequest) String() string { return proto.CompactTextString(m) }
func (*AttestionRequest) ProtoMessage()    {}
func (*AttestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47f9df0daa60868f, []int{0}
}
func (m *AttestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestionRequest.Merge(m, src)
}
func (m *AttestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *AttestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestionRequest proto.InternalMessageInfo

func (m *AttestionRequest) GetRpId() string {
	if m != nil {
		return m.RpId
	}
	return ""
}

func (m *AttestionRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// AttestionResponse is the response to a Attestion request.
type AttestionResponse struct {
	SessionId       string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CreationOptions string   `protobuf:"bytes,2,opt,name=creation_options,json=creationOptions,proto3" json:"creation_options,omitempty"`
	RpName          string   `protobuf:"bytes,3,opt,name=rp_name,json=rpName,proto3" json:"rp_name,omitempty"`
	RpOrigins       []string `protobuf:"bytes,4,rep,name=rp_origins,json=rpOrigins,proto3" json:"rp_origins,omitempty"`
	RpIcon          string   `protobuf:"bytes,5,opt,name=rp_icon,json=rpIcon,proto3" json:"rp_icon,omitempty"`
}

func (m *AttestionResponse) Reset()         { *m = AttestionResponse{} }
func (m *AttestionResponse) String() string { return proto.CompactTextString(m) }
func (*AttestionResponse) ProtoMessage()    {}
func (*AttestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47f9df0daa60868f, []int{1}
}
func (m *AttestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestionResponse.Merge(m, src)
}
func (m *AttestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *AttestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttestionResponse proto.InternalMessageInfo

func (m *AttestionResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *AttestionResponse) GetCreationOptions() string {
	if m != nil {
		return m.CreationOptions
	}
	return ""
}

func (m *AttestionResponse) GetRpName() string {
	if m != nil {
		return m.RpName
	}
	return ""
}

func (m *AttestionResponse) GetRpOrigins() []string {
	if m != nil {
		return m.RpOrigins
	}
	return nil
}

func (m *AttestionResponse) GetRpIcon() string {
	if m != nil {
		return m.RpIcon
	}
	return ""
}

// AssertionRequest is the request to generate a Assertion.
type AssertionRequest struct {
	// Optional RP ID to use for the Assertion.
	RpId string `protobuf:"bytes,1,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	// Username to use for the AlsoKnownAs field in the didDoc
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *AssertionRequest) Reset()         { *m = AssertionRequest{} }
func (m *AssertionRequest) String() string { return proto.CompactTextString(m) }
func (*AssertionRequest) ProtoMessage()    {}
func (*AssertionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47f9df0daa60868f, []int{2}
}
func (m *AssertionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssertionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssertionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssertionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssertionRequest.Merge(m, src)
}
func (m *AssertionRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssertionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssertionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssertionRequest proto.InternalMessageInfo

func (m *AssertionRequest) GetRpId() string {
	if m != nil {
		return m.RpId
	}
	return ""
}

func (m *AssertionRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// AssertionResponse is the response to a Assertion request.
type AssertionResponse struct {
	SessionId        string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AssertionOptions string   `protobuf:"bytes,2,opt,name=assertion_options,json=assertionOptions,proto3" json:"assertion_options,omitempty"`
	RpName           string   `protobuf:"bytes,3,opt,name=rp_name,json=rpName,proto3" json:"rp_name,omitempty"`
	RpOrigins        []string `protobuf:"bytes,4,rep,name=rp_origins,json=rpOrigins,proto3" json:"rp_origins,omitempty"`
	RpIcon           string   `protobuf:"bytes,5,opt,name=rp_icon,json=rpIcon,proto3" json:"rp_icon,omitempty"`
}

func (m *AssertionResponse) Reset()         { *m = AssertionResponse{} }
func (m *AssertionResponse) String() string { return proto.CompactTextString(m) }
func (*AssertionResponse) ProtoMessage()    {}
func (*AssertionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47f9df0daa60868f, []int{3}
}
func (m *AssertionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssertionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssertionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssertionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssertionResponse.Merge(m, src)
}
func (m *AssertionResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssertionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssertionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssertionResponse proto.InternalMessageInfo

func (m *AssertionResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *AssertionResponse) GetAssertionOptions() string {
	if m != nil {
		return m.AssertionOptions
	}
	return ""
}

func (m *AssertionResponse) GetRpName() string {
	if m != nil {
		return m.RpName
	}
	return ""
}

func (m *AssertionResponse) GetRpOrigins() []string {
	if m != nil {
		return m.RpOrigins
	}
	return nil
}

func (m *AssertionResponse) GetRpIcon() string {
	if m != nil {
		return m.RpIcon
	}
	return ""
}

func init() {
	proto.RegisterType((*AttestionRequest)(nil), "sonrhq.sonr.identity.AttestionRequest")
	proto.RegisterType((*AttestionResponse)(nil), "sonrhq.sonr.identity.AttestionResponse")
	proto.RegisterType((*AssertionRequest)(nil), "sonrhq.sonr.identity.AssertionRequest")
	proto.RegisterType((*AssertionResponse)(nil), "sonrhq.sonr.identity.AssertionResponse")
}

func init() { proto.RegisterFile("sonr/identity/webauth.proto", fileDescriptor_47f9df0daa60868f) }

var fileDescriptor_47f9df0daa60868f = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcd, 0xaa, 0xd3, 0x40,
	0x14, 0x6e, 0x7a, 0x7f, 0xbc, 0x77, 0x16, 0xda, 0x3b, 0x0a, 0x0d, 0x51, 0x43, 0xe9, 0x42, 0x2b,
	0x62, 0x06, 0x2c, 0xae, 0x5c, 0xb5, 0xae, 0xba, 0xb1, 0x50, 0x17, 0x82, 0x9b, 0x30, 0x49, 0x86,
	0x64, 0xc0, 0xce, 0x4c, 0x67, 0x26, 0x68, 0x29, 0xdd, 0xf8, 0x04, 0x82, 0x7b, 0x1f, 0x41, 0x7c,
	0x0c, 0x17, 0x2e, 0x0a, 0x6e, 0x5c, 0x4a, 0xeb, 0x83, 0x48, 0x26, 0x9d, 0xb6, 0x86, 0x96, 0x0a,
	0x72, 0x57, 0x21, 0xe7, 0x9c, 0xef, 0x3b, 0xdf, 0x77, 0xce, 0x19, 0x70, 0x57, 0x71, 0x26, 0x11,
	0x4d, 0x08, 0xd3, 0x54, 0x4f, 0xd1, 0x3b, 0x12, 0xe1, 0x5c, 0x67, 0x81, 0x90, 0x5c, 0x73, 0x78,
	0xa7, 0x48, 0x66, 0x93, 0xa0, 0xf8, 0x04, 0xb6, 0xc6, 0xbb, 0x97, 0x72, 0x9e, 0xbe, 0x25, 0x08,
	0x0b, 0x8a, 0x30, 0x63, 0x5c, 0x63, 0x4d, 0x39, 0x53, 0x25, 0xc6, 0x6b, 0xfe, 0x4d, 0x98, 0xd0,
	0xa4, 0x4c, 0xb4, 0x5f, 0x80, 0x46, 0x4f, 0x6b, 0xa2, 0x8a, 0xe2, 0x11, 0x99, 0xe4, 0x44, 0x69,
	0x78, 0x1b, 0x9c, 0x49, 0x11, 0xd2, 0xc4, 0x75, 0x5a, 0x4e, 0xe7, 0x72, 0x74, 0x2a, 0xc5, 0x20,
	0x81, 0x1e, 0xb8, 0xc8, 0x15, 0x91, 0x0c, 0x8f, 0x89, 0x5b, 0x37, 0xf1, 0xcd, 0x7f, 0xfb, 0x8b,
	0x03, 0xae, 0x76, 0x58, 0x94, 0xe0, 0x4c, 0x11, 0x78, 0x1f, 0x00, 0x45, 0x94, 0xa2, 0x9c, 0x6d,
	0xb9, 0x2e, 0xd7, 0x91, 0x41, 0x02, 0x1f, 0x81, 0x46, 0x2c, 0x89, 0x51, 0x19, 0x72, 0x61, 0xc4,
	0xae, 0x89, 0x6f, 0xd9, 0xf8, 0xb0, 0x0c, 0xc3, 0x26, 0xb8, 0x21, 0x45, 0x68, 0x5a, 0x9f, 0x98,
	0x8a, 0x73, 0x29, 0x5e, 0xe2, 0xb1, 0x69, 0x21, 0x45, 0xc8, 0x25, 0x4d, 0x29, 0x53, 0xee, 0x69,
	0xeb, 0xa4, 0x68, 0x21, 0xc5, 0xb0, 0x0c, 0xac, 0x71, 0x34, 0xe6, 0xcc, 0x3d, 0xb3, 0xb8, 0x41,
	0xcc, 0x99, 0x71, 0xad, 0x14, 0x91, 0xff, 0xe5, 0xfa, 0x6b, 0xe1, 0x7a, 0xcb, 0xf2, 0x6f, 0xae,
	0x1f, 0x83, 0x2b, 0x6c, 0x31, 0x15, 0xdb, 0x8d, 0x4d, 0xe2, 0xba, 0x7c, 0x3f, 0xfd, 0x5e, 0x07,
	0x17, 0xaf, 0x49, 0xd4, 0xcb, 0x75, 0xc6, 0xe0, 0x67, 0x07, 0xdc, 0x7c, 0xa5, 0xb1, 0xd4, 0x9b,
	0xd5, 0xc1, 0x07, 0xc1, 0xbe, 0xdb, 0x0a, 0xaa, 0x17, 0xe2, 0x3d, 0x3c, 0x5a, 0x57, 0x4e, 0xa3,
	0xfd, 0xfc, 0xc3, 0x8f, 0xdf, 0x9f, 0xea, 0xcf, 0x60, 0x17, 0x15, 0x95, 0x4f, 0x28, 0x37, 0x5f,
	0x7b, 0xd0, 0x0c, 0x61, 0x8b, 0x40, 0x33, 0x33, 0xfc, 0x39, 0x9a, 0xd9, 0xf9, 0xce, 0x77, 0x04,
	0xda, 0xc1, 0x1c, 0x14, 0x58, 0x59, 0xe6, 0x41, 0x81, 0xd5, 0x75, 0x1d, 0x17, 0x68, 0x11, 0x7b,
	0x04, 0xf6, 0xfb, 0xdf, 0x96, 0xbe, 0xb3, 0x58, 0xfa, 0xce, 0xaf, 0xa5, 0xef, 0x7c, 0x5c, 0xf9,
	0xb5, 0xc5, 0xca, 0xaf, 0xfd, 0x5c, 0xf9, 0xb5, 0x37, 0x9d, 0x94, 0xea, 0x2c, 0x8f, 0x82, 0x98,
	0x8f, 0x4b, 0xe2, 0x6c, 0x52, 0x12, 0xbf, 0xdf, 0x3e, 0x42, 0x3d, 0x15, 0x44, 0x45, 0xe7, 0xe6,
	0x1d, 0x76, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x55, 0xb4, 0x46, 0xf3, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebAuthnClient is the client API for WebAuthn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebAuthnClient interface {
	// StartAttestion generates a Attestion and returns it.
	StartAttestion(ctx context.Context, in *AttestionRequest, opts ...grpc.CallOption) (*AttestionResponse, error)
	// StartAssertion generates a Assertion and returns it.
	StartAssertion(ctx context.Context, in *AssertionRequest, opts ...grpc.CallOption) (*AssertionResponse, error)
}

type webAuthnClient struct {
	cc grpc1.ClientConn
}

func NewWebAuthnClient(cc grpc1.ClientConn) WebAuthnClient {
	return &webAuthnClient{cc}
}

func (c *webAuthnClient) StartAttestion(ctx context.Context, in *AttestionRequest, opts ...grpc.CallOption) (*AttestionResponse, error) {
	out := new(AttestionResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.WebAuthn/StartAttestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAuthnClient) StartAssertion(ctx context.Context, in *AssertionRequest, opts ...grpc.CallOption) (*AssertionResponse, error) {
	out := new(AssertionResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.WebAuthn/StartAssertion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebAuthnServer is the server API for WebAuthn service.
type WebAuthnServer interface {
	// StartAttestion generates a Attestion and returns it.
	StartAttestion(context.Context, *AttestionRequest) (*AttestionResponse, error)
	// StartAssertion generates a Assertion and returns it.
	StartAssertion(context.Context, *AssertionRequest) (*AssertionResponse, error)
}

// UnimplementedWebAuthnServer can be embedded to have forward compatible implementations.
type UnimplementedWebAuthnServer struct {
}

func (*UnimplementedWebAuthnServer) StartAttestion(ctx context.Context, req *AttestionRequest) (*AttestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAttestion not implemented")
}
func (*UnimplementedWebAuthnServer) StartAssertion(ctx context.Context, req *AssertionRequest) (*AssertionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAssertion not implemented")
}

func RegisterWebAuthnServer(s grpc1.Server, srv WebAuthnServer) {
	s.RegisterService(&_WebAuthn_serviceDesc, srv)
}

func _WebAuthn_StartAttestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAuthnServer).StartAttestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.WebAuthn/StartAttestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAuthnServer).StartAttestion(ctx, req.(*AttestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAuthn_StartAssertion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssertionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAuthnServer).StartAssertion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.WebAuthn/StartAssertion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAuthnServer).StartAssertion(ctx, req.(*AssertionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebAuthn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.sonr.identity.WebAuthn",
	HandlerType: (*WebAuthnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartAttestion",
			Handler:    _WebAuthn_StartAttestion_Handler,
		},
		{
			MethodName: "StartAssertion",
			Handler:    _WebAuthn_StartAssertion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonr/identity/webauth.proto",
}

func (m *AttestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RpId) > 0 {
		i -= len(m.RpId)
		copy(dAtA[i:], m.RpId)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RpIcon) > 0 {
		i -= len(m.RpIcon)
		copy(dAtA[i:], m.RpIcon)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpIcon)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RpOrigins) > 0 {
		for iNdEx := len(m.RpOrigins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RpOrigins[iNdEx])
			copy(dAtA[i:], m.RpOrigins[iNdEx])
			i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpOrigins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RpName) > 0 {
		i -= len(m.RpName)
		copy(dAtA[i:], m.RpName)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CreationOptions) > 0 {
		i -= len(m.CreationOptions)
		copy(dAtA[i:], m.CreationOptions)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.CreationOptions)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssertionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssertionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssertionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RpId) > 0 {
		i -= len(m.RpId)
		copy(dAtA[i:], m.RpId)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssertionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssertionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssertionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RpIcon) > 0 {
		i -= len(m.RpIcon)
		copy(dAtA[i:], m.RpIcon)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpIcon)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RpOrigins) > 0 {
		for iNdEx := len(m.RpOrigins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RpOrigins[iNdEx])
			copy(dAtA[i:], m.RpOrigins[iNdEx])
			i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpOrigins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RpName) > 0 {
		i -= len(m.RpName)
		copy(dAtA[i:], m.RpName)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AssertionOptions) > 0 {
		i -= len(m.AssertionOptions)
		copy(dAtA[i:], m.AssertionOptions)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.AssertionOptions)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWebauth(dAtA []byte, offset int, v uint64) int {
	offset -= sovWebauth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AttestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RpId)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	return n
}

func (m *AttestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	l = len(m.CreationOptions)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	l = len(m.RpName)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	if len(m.RpOrigins) > 0 {
		for _, s := range m.RpOrigins {
			l = len(s)
			n += 1 + l + sovWebauth(uint64(l))
		}
	}
	l = len(m.RpIcon)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	return n
}

func (m *AssertionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RpId)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	return n
}

func (m *AssertionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	l = len(m.AssertionOptions)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	l = len(m.RpName)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	if len(m.RpOrigins) > 0 {
		for _, s := range m.RpOrigins {
			l = len(s)
			n += 1 + l + sovWebauth(uint64(l))
		}
	}
	l = len(m.RpIcon)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	return n
}

func sovWebauth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebauth(x uint64) (n int) {
	return sovWebauth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AttestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationOptions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpOrigins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpOrigins = append(m.RpOrigins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssertionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssertionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssertionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssertionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssertionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssertionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertionOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssertionOptions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpOrigins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpOrigins = append(m.RpOrigins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebauth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebauth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebauth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWebauth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWebauth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWebauth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebauth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWebauth = fmt.Errorf("proto: unexpected end of group")
)
