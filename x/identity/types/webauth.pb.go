// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sonr/identity/webauth.proto

// Package Motor is used for defining a Motor node and its properties.

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChallengRequest is the request to generate a challenge.
type ChallengeRequest struct {
	// Optional RP ID to use for the challenge.
	RpId string `protobuf:"bytes,1,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	// Username to use for the AlsoKnownAs field in the didDoc
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Optional to set existing account
	IsExistingAccount bool `protobuf:"varint,3,opt,name=is_existing_account,json=isExistingAccount,proto3" json:"is_existing_account,omitempty"`
}

func (m *ChallengeRequest) Reset()         { *m = ChallengeRequest{} }
func (m *ChallengeRequest) String() string { return proto.CompactTextString(m) }
func (*ChallengeRequest) ProtoMessage()    {}
func (*ChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47f9df0daa60868f, []int{0}
}
func (m *ChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeRequest.Merge(m, src)
}
func (m *ChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeRequest proto.InternalMessageInfo

func (m *ChallengeRequest) GetRpId() string {
	if m != nil {
		return m.RpId
	}
	return ""
}

func (m *ChallengeRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ChallengeRequest) GetIsExistingAccount() bool {
	if m != nil {
		return m.IsExistingAccount
	}
	return false
}

// ChallengeResponse is the response to a Challenge request.
type ChallengeResponse struct {
	SessionId       string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CreationOptions string   `protobuf:"bytes,2,opt,name=creation_options,json=creationOptions,proto3" json:"creation_options,omitempty"`
	RpName          string   `protobuf:"bytes,3,opt,name=rp_name,json=rpName,proto3" json:"rp_name,omitempty"`
	RpOrigins       []string `protobuf:"bytes,4,rep,name=rp_origins,json=rpOrigins,proto3" json:"rp_origins,omitempty"`
	RpIcon          string   `protobuf:"bytes,5,opt,name=rp_icon,json=rpIcon,proto3" json:"rp_icon,omitempty"`
}

func (m *ChallengeResponse) Reset()         { *m = ChallengeResponse{} }
func (m *ChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*ChallengeResponse) ProtoMessage()    {}
func (*ChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_47f9df0daa60868f, []int{1}
}
func (m *ChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeResponse.Merge(m, src)
}
func (m *ChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeResponse proto.InternalMessageInfo

func (m *ChallengeResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ChallengeResponse) GetCreationOptions() string {
	if m != nil {
		return m.CreationOptions
	}
	return ""
}

func (m *ChallengeResponse) GetRpName() string {
	if m != nil {
		return m.RpName
	}
	return ""
}

func (m *ChallengeResponse) GetRpOrigins() []string {
	if m != nil {
		return m.RpOrigins
	}
	return nil
}

func (m *ChallengeResponse) GetRpIcon() string {
	if m != nil {
		return m.RpIcon
	}
	return ""
}

func init() {
	proto.RegisterType((*ChallengeRequest)(nil), "sonrhq.sonr.identity.ChallengeRequest")
	proto.RegisterType((*ChallengeResponse)(nil), "sonrhq.sonr.identity.ChallengeResponse")
}

func init() { proto.RegisterFile("sonr/identity/webauth.proto", fileDescriptor_47f9df0daa60868f) }

var fileDescriptor_47f9df0daa60868f = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x3f, 0xeb, 0x13, 0x41,
	0x10, 0xcd, 0xfe, 0xf2, 0xc7, 0x64, 0x1b, 0x93, 0x8d, 0xe0, 0x11, 0xcd, 0x71, 0x1c, 0xa8, 0x51,
	0xf1, 0x0e, 0xb4, 0xb3, 0x4b, 0xc4, 0x22, 0x8d, 0x81, 0x34, 0x82, 0xcd, 0x71, 0x7f, 0x96, 0xbb,
	0x85, 0x64, 0x66, 0xb3, 0xbb, 0x87, 0x49, 0x6b, 0x67, 0x27, 0x08, 0x7e, 0x0c, 0x3f, 0x87, 0x65,
	0xc0, 0xc6, 0x52, 0x12, 0x3f, 0x88, 0xdc, 0xbf, 0x44, 0x44, 0xb0, 0x1a, 0xee, 0xcd, 0x7b, 0x33,
	0xef, 0xde, 0x0e, 0xbd, 0xa7, 0x11, 0x94, 0x2f, 0x12, 0x0e, 0x46, 0x98, 0x83, 0xff, 0x9e, 0x47,
	0x61, 0x6e, 0x32, 0x4f, 0x2a, 0x34, 0xc8, 0xee, 0x14, 0xcd, 0x6c, 0xe7, 0x15, 0xc5, 0x6b, 0x38,
	0x93, 0xfb, 0x29, 0x62, 0xba, 0xe1, 0x7e, 0x28, 0x85, 0x1f, 0x02, 0xa0, 0x09, 0x8d, 0x40, 0xd0,
	0x95, 0xc6, 0xd5, 0x74, 0xf8, 0x2a, 0x0b, 0x37, 0x1b, 0x0e, 0x29, 0x5f, 0xf3, 0x5d, 0xce, 0xb5,
	0x61, 0x63, 0xda, 0x55, 0x32, 0x10, 0x89, 0x45, 0x1c, 0x32, 0x1b, 0xac, 0x3b, 0x4a, 0x2e, 0x13,
	0x36, 0xa1, 0xfd, 0x5c, 0x73, 0x05, 0xe1, 0x96, 0x5b, 0x37, 0x25, 0x7e, 0xf9, 0x66, 0x1e, 0x1d,
	0x0b, 0x1d, 0xf0, 0xbd, 0xd0, 0x46, 0x40, 0x1a, 0x84, 0x71, 0x8c, 0x39, 0x18, 0xab, 0xed, 0x90,
	0x59, 0x7f, 0x3d, 0x12, 0xfa, 0x75, 0xdd, 0x99, 0x57, 0x0d, 0xf7, 0x2b, 0xa1, 0xa3, 0x3f, 0xb6,
	0x6a, 0x89, 0xa0, 0x39, 0x9b, 0x52, 0xaa, 0xb9, 0xd6, 0x02, 0xe1, 0xba, 0x7b, 0x50, 0x23, 0xcb,
	0x84, 0x3d, 0xa6, 0xc3, 0x58, 0xf1, 0xd2, 0x7c, 0x80, 0xb2, 0xfc, 0x87, 0xda, 0xc8, 0xed, 0x06,
	0x5f, 0x55, 0x30, 0xbb, 0x4b, 0x6f, 0x29, 0x19, 0x94, 0x56, 0xdb, 0x25, 0xa3, 0xa7, 0xe4, 0x9b,
	0xc2, 0xe8, 0x94, 0x52, 0x25, 0x03, 0x54, 0x22, 0x15, 0xa0, 0xad, 0x8e, 0xd3, 0x2e, 0x56, 0x28,
	0xb9, 0xaa, 0x80, 0x5a, 0x27, 0x62, 0x04, 0xab, 0xdb, 0xe8, 0x96, 0x31, 0xc2, 0xf3, 0x2f, 0x84,
	0xf6, 0xdf, 0xf2, 0x68, 0x9e, 0x9b, 0x0c, 0xd8, 0x47, 0x42, 0x07, 0x17, 0xf7, 0xec, 0xa1, 0xf7,
	0xaf, 0xd4, 0xbd, 0xbf, 0x43, 0x9d, 0x3c, 0xfa, 0x2f, 0xaf, 0x8a, 0xc1, 0x7d, 0xfa, 0xe1, 0xfb,
	0xaf, 0xcf, 0x37, 0x0f, 0x5c, 0xc7, 0x2f, 0x98, 0xcf, 0x04, 0x96, 0xb5, 0x79, 0x6a, 0xf0, 0xe3,
	0x46, 0xf1, 0x92, 0x3c, 0x59, 0x2c, 0xbe, 0x9d, 0x6c, 0x72, 0x3c, 0xd9, 0xe4, 0xe7, 0xc9, 0x26,
	0x9f, 0xce, 0x76, 0xeb, 0x78, 0xb6, 0x5b, 0x3f, 0xce, 0x76, 0xeb, 0xdd, 0x2c, 0x15, 0x26, 0xcb,
	0x23, 0x2f, 0xc6, 0x6d, 0x35, 0x28, 0xdb, 0x55, 0x83, 0xf6, 0xd7, 0xf3, 0x31, 0x07, 0xc9, 0x75,
	0xd4, 0x2b, 0x2f, 0xe1, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x76, 0xcc, 0x76, 0x7b, 0x5c,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebAuthnClient is the client API for WebAuthn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebAuthnClient interface {
	// Challenge generates a challenge and returns it.
	Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error)
}

type webAuthnClient struct {
	cc grpc1.ClientConn
}

func NewWebAuthnClient(cc grpc1.ClientConn) WebAuthnClient {
	return &webAuthnClient{cc}
}

func (c *webAuthnClient) Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error) {
	out := new(ChallengeResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.sonr.identity.WebAuthn/Challenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebAuthnServer is the server API for WebAuthn service.
type WebAuthnServer interface {
	// Challenge generates a challenge and returns it.
	Challenge(context.Context, *ChallengeRequest) (*ChallengeResponse, error)
}

// UnimplementedWebAuthnServer can be embedded to have forward compatible implementations.
type UnimplementedWebAuthnServer struct {
}

func (*UnimplementedWebAuthnServer) Challenge(ctx context.Context, req *ChallengeRequest) (*ChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Challenge not implemented")
}

func RegisterWebAuthnServer(s grpc1.Server, srv WebAuthnServer) {
	s.RegisterService(&_WebAuthn_serviceDesc, srv)
}

func _WebAuthn_Challenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAuthnServer).Challenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.sonr.identity.WebAuthn/Challenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAuthnServer).Challenge(ctx, req.(*ChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebAuthn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.sonr.identity.WebAuthn",
	HandlerType: (*WebAuthnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Challenge",
			Handler:    _WebAuthn_Challenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonr/identity/webauth.proto",
}

func (m *ChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsExistingAccount {
		i--
		if m.IsExistingAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RpId) > 0 {
		i -= len(m.RpId)
		copy(dAtA[i:], m.RpId)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RpIcon) > 0 {
		i -= len(m.RpIcon)
		copy(dAtA[i:], m.RpIcon)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpIcon)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RpOrigins) > 0 {
		for iNdEx := len(m.RpOrigins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RpOrigins[iNdEx])
			copy(dAtA[i:], m.RpOrigins[iNdEx])
			i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpOrigins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RpName) > 0 {
		i -= len(m.RpName)
		copy(dAtA[i:], m.RpName)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.RpName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CreationOptions) > 0 {
		i -= len(m.CreationOptions)
		copy(dAtA[i:], m.CreationOptions)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.CreationOptions)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintWebauth(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWebauth(dAtA []byte, offset int, v uint64) int {
	offset -= sovWebauth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RpId)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	if m.IsExistingAccount {
		n += 2
	}
	return n
}

func (m *ChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	l = len(m.CreationOptions)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	l = len(m.RpName)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	if len(m.RpOrigins) > 0 {
		for _, s := range m.RpOrigins {
			l = len(s)
			n += 1 + l + sovWebauth(uint64(l))
		}
	}
	l = len(m.RpIcon)
	if l > 0 {
		n += 1 + l + sovWebauth(uint64(l))
	}
	return n
}

func sovWebauth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebauth(x uint64) (n int) {
	return sovWebauth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExistingAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExistingAccount = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWebauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationOptions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpOrigins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpOrigins = append(m.RpOrigins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebauth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebauth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebauth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWebauth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWebauth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWebauth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebauth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWebauth = fmt.Errorf("proto: unexpected end of group")
)
