// Code generated by protoc-gen-go-cosmos-orm-proto. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sonr/identity/module/v1/state_query.proto

package modulev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StateQueryService_GetAccount_FullMethodName                    = "/sonr.identity.module.v1.StateQueryService/GetAccount"
	StateQueryService_GetAccountByAddress_FullMethodName           = "/sonr.identity.module.v1.StateQueryService/GetAccountByAddress"
	StateQueryService_GetAccountByPublicKey_FullMethodName         = "/sonr.identity.module.v1.StateQueryService/GetAccountByPublicKey"
	StateQueryService_ListAccount_FullMethodName                   = "/sonr.identity.module.v1.StateQueryService/ListAccount"
	StateQueryService_GetBlockchain_FullMethodName                 = "/sonr.identity.module.v1.StateQueryService/GetBlockchain"
	StateQueryService_GetBlockchainByChainId_FullMethodName        = "/sonr.identity.module.v1.StateQueryService/GetBlockchainByChainId"
	StateQueryService_GetBlockchainByName_FullMethodName           = "/sonr.identity.module.v1.StateQueryService/GetBlockchainByName"
	StateQueryService_ListBlockchain_FullMethodName                = "/sonr.identity.module.v1.StateQueryService/ListBlockchain"
	StateQueryService_GetAccumulator_FullMethodName                = "/sonr.identity.module.v1.StateQueryService/GetAccumulator"
	StateQueryService_GetAccumulatorByControllerKey_FullMethodName = "/sonr.identity.module.v1.StateQueryService/GetAccumulatorByControllerKey"
	StateQueryService_ListAccumulator_FullMethodName               = "/sonr.identity.module.v1.StateQueryService/ListAccumulator"
	StateQueryService_GetController_FullMethodName                 = "/sonr.identity.module.v1.StateQueryService/GetController"
	StateQueryService_GetControllerByAddress_FullMethodName        = "/sonr.identity.module.v1.StateQueryService/GetControllerByAddress"
	StateQueryService_GetControllerByPublicKey_FullMethodName      = "/sonr.identity.module.v1.StateQueryService/GetControllerByPublicKey"
	StateQueryService_GetControllerByPeerId_FullMethodName         = "/sonr.identity.module.v1.StateQueryService/GetControllerByPeerId"
	StateQueryService_ListController_FullMethodName                = "/sonr.identity.module.v1.StateQueryService/ListController"
)

// StateQueryServiceClient is the client API for StateQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateQueryServiceClient interface {
	// Get queries the Account table by its primary key.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// GetAccountByAddress queries the Account table by its Address index
	GetAccountByAddress(ctx context.Context, in *GetAccountByAddressRequest, opts ...grpc.CallOption) (*GetAccountByAddressResponse, error)
	// GetAccountByPublicKey queries the Account table by its PublicKey index
	GetAccountByPublicKey(ctx context.Context, in *GetAccountByPublicKeyRequest, opts ...grpc.CallOption) (*GetAccountByPublicKeyResponse, error)
	// ListAccount queries the Account table using prefix and range queries against defined indexes.
	ListAccount(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error)
	// Get queries the Blockchain table by its primary key.
	GetBlockchain(ctx context.Context, in *GetBlockchainRequest, opts ...grpc.CallOption) (*GetBlockchainResponse, error)
	// GetBlockchainByChainId queries the Blockchain table by its ChainId index
	GetBlockchainByChainId(ctx context.Context, in *GetBlockchainByChainIdRequest, opts ...grpc.CallOption) (*GetBlockchainByChainIdResponse, error)
	// GetBlockchainByName queries the Blockchain table by its Name index
	GetBlockchainByName(ctx context.Context, in *GetBlockchainByNameRequest, opts ...grpc.CallOption) (*GetBlockchainByNameResponse, error)
	// ListBlockchain queries the Blockchain table using prefix and range queries against defined indexes.
	ListBlockchain(ctx context.Context, in *ListBlockchainRequest, opts ...grpc.CallOption) (*ListBlockchainResponse, error)
	// Get queries the Accumulator table by its primary key.
	GetAccumulator(ctx context.Context, in *GetAccumulatorRequest, opts ...grpc.CallOption) (*GetAccumulatorResponse, error)
	// GetAccumulatorByControllerKey queries the Accumulator table by its ControllerKey index
	GetAccumulatorByControllerKey(ctx context.Context, in *GetAccumulatorByControllerKeyRequest, opts ...grpc.CallOption) (*GetAccumulatorByControllerKeyResponse, error)
	// ListAccumulator queries the Accumulator table using prefix and range queries against defined indexes.
	ListAccumulator(ctx context.Context, in *ListAccumulatorRequest, opts ...grpc.CallOption) (*ListAccumulatorResponse, error)
	// Get queries the Controller table by its primary key.
	GetController(ctx context.Context, in *GetControllerRequest, opts ...grpc.CallOption) (*GetControllerResponse, error)
	// GetControllerByAddress queries the Controller table by its Address index
	GetControllerByAddress(ctx context.Context, in *GetControllerByAddressRequest, opts ...grpc.CallOption) (*GetControllerByAddressResponse, error)
	// GetControllerByPublicKey queries the Controller table by its PublicKey index
	GetControllerByPublicKey(ctx context.Context, in *GetControllerByPublicKeyRequest, opts ...grpc.CallOption) (*GetControllerByPublicKeyResponse, error)
	// GetControllerByPeerId queries the Controller table by its PeerId index
	GetControllerByPeerId(ctx context.Context, in *GetControllerByPeerIdRequest, opts ...grpc.CallOption) (*GetControllerByPeerIdResponse, error)
	// ListController queries the Controller table using prefix and range queries against defined indexes.
	ListController(ctx context.Context, in *ListControllerRequest, opts ...grpc.CallOption) (*ListControllerResponse, error)
}

type stateQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateQueryServiceClient(cc grpc.ClientConnInterface) StateQueryServiceClient {
	return &stateQueryServiceClient{cc}
}

func (c *stateQueryServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetAccountByAddress(ctx context.Context, in *GetAccountByAddressRequest, opts ...grpc.CallOption) (*GetAccountByAddressResponse, error) {
	out := new(GetAccountByAddressResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetAccountByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetAccountByPublicKey(ctx context.Context, in *GetAccountByPublicKeyRequest, opts ...grpc.CallOption) (*GetAccountByPublicKeyResponse, error) {
	out := new(GetAccountByPublicKeyResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetAccountByPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListAccount(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error) {
	out := new(ListAccountResponse)
	err := c.cc.Invoke(ctx, StateQueryService_ListAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetBlockchain(ctx context.Context, in *GetBlockchainRequest, opts ...grpc.CallOption) (*GetBlockchainResponse, error) {
	out := new(GetBlockchainResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetBlockchain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetBlockchainByChainId(ctx context.Context, in *GetBlockchainByChainIdRequest, opts ...grpc.CallOption) (*GetBlockchainByChainIdResponse, error) {
	out := new(GetBlockchainByChainIdResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetBlockchainByChainId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetBlockchainByName(ctx context.Context, in *GetBlockchainByNameRequest, opts ...grpc.CallOption) (*GetBlockchainByNameResponse, error) {
	out := new(GetBlockchainByNameResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetBlockchainByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListBlockchain(ctx context.Context, in *ListBlockchainRequest, opts ...grpc.CallOption) (*ListBlockchainResponse, error) {
	out := new(ListBlockchainResponse)
	err := c.cc.Invoke(ctx, StateQueryService_ListBlockchain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetAccumulator(ctx context.Context, in *GetAccumulatorRequest, opts ...grpc.CallOption) (*GetAccumulatorResponse, error) {
	out := new(GetAccumulatorResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetAccumulator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetAccumulatorByControllerKey(ctx context.Context, in *GetAccumulatorByControllerKeyRequest, opts ...grpc.CallOption) (*GetAccumulatorByControllerKeyResponse, error) {
	out := new(GetAccumulatorByControllerKeyResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetAccumulatorByControllerKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListAccumulator(ctx context.Context, in *ListAccumulatorRequest, opts ...grpc.CallOption) (*ListAccumulatorResponse, error) {
	out := new(ListAccumulatorResponse)
	err := c.cc.Invoke(ctx, StateQueryService_ListAccumulator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetController(ctx context.Context, in *GetControllerRequest, opts ...grpc.CallOption) (*GetControllerResponse, error) {
	out := new(GetControllerResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetController_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetControllerByAddress(ctx context.Context, in *GetControllerByAddressRequest, opts ...grpc.CallOption) (*GetControllerByAddressResponse, error) {
	out := new(GetControllerByAddressResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetControllerByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetControllerByPublicKey(ctx context.Context, in *GetControllerByPublicKeyRequest, opts ...grpc.CallOption) (*GetControllerByPublicKeyResponse, error) {
	out := new(GetControllerByPublicKeyResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetControllerByPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetControllerByPeerId(ctx context.Context, in *GetControllerByPeerIdRequest, opts ...grpc.CallOption) (*GetControllerByPeerIdResponse, error) {
	out := new(GetControllerByPeerIdResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetControllerByPeerId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListController(ctx context.Context, in *ListControllerRequest, opts ...grpc.CallOption) (*ListControllerResponse, error) {
	out := new(ListControllerResponse)
	err := c.cc.Invoke(ctx, StateQueryService_ListController_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateQueryServiceServer is the server API for StateQueryService service.
// All implementations must embed UnimplementedStateQueryServiceServer
// for forward compatibility
type StateQueryServiceServer interface {
	// Get queries the Account table by its primary key.
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// GetAccountByAddress queries the Account table by its Address index
	GetAccountByAddress(context.Context, *GetAccountByAddressRequest) (*GetAccountByAddressResponse, error)
	// GetAccountByPublicKey queries the Account table by its PublicKey index
	GetAccountByPublicKey(context.Context, *GetAccountByPublicKeyRequest) (*GetAccountByPublicKeyResponse, error)
	// ListAccount queries the Account table using prefix and range queries against defined indexes.
	ListAccount(context.Context, *ListAccountRequest) (*ListAccountResponse, error)
	// Get queries the Blockchain table by its primary key.
	GetBlockchain(context.Context, *GetBlockchainRequest) (*GetBlockchainResponse, error)
	// GetBlockchainByChainId queries the Blockchain table by its ChainId index
	GetBlockchainByChainId(context.Context, *GetBlockchainByChainIdRequest) (*GetBlockchainByChainIdResponse, error)
	// GetBlockchainByName queries the Blockchain table by its Name index
	GetBlockchainByName(context.Context, *GetBlockchainByNameRequest) (*GetBlockchainByNameResponse, error)
	// ListBlockchain queries the Blockchain table using prefix and range queries against defined indexes.
	ListBlockchain(context.Context, *ListBlockchainRequest) (*ListBlockchainResponse, error)
	// Get queries the Accumulator table by its primary key.
	GetAccumulator(context.Context, *GetAccumulatorRequest) (*GetAccumulatorResponse, error)
	// GetAccumulatorByControllerKey queries the Accumulator table by its ControllerKey index
	GetAccumulatorByControllerKey(context.Context, *GetAccumulatorByControllerKeyRequest) (*GetAccumulatorByControllerKeyResponse, error)
	// ListAccumulator queries the Accumulator table using prefix and range queries against defined indexes.
	ListAccumulator(context.Context, *ListAccumulatorRequest) (*ListAccumulatorResponse, error)
	// Get queries the Controller table by its primary key.
	GetController(context.Context, *GetControllerRequest) (*GetControllerResponse, error)
	// GetControllerByAddress queries the Controller table by its Address index
	GetControllerByAddress(context.Context, *GetControllerByAddressRequest) (*GetControllerByAddressResponse, error)
	// GetControllerByPublicKey queries the Controller table by its PublicKey index
	GetControllerByPublicKey(context.Context, *GetControllerByPublicKeyRequest) (*GetControllerByPublicKeyResponse, error)
	// GetControllerByPeerId queries the Controller table by its PeerId index
	GetControllerByPeerId(context.Context, *GetControllerByPeerIdRequest) (*GetControllerByPeerIdResponse, error)
	// ListController queries the Controller table using prefix and range queries against defined indexes.
	ListController(context.Context, *ListControllerRequest) (*ListControllerResponse, error)
	mustEmbedUnimplementedStateQueryServiceServer()
}

// UnimplementedStateQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateQueryServiceServer struct {
}

func (UnimplementedStateQueryServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedStateQueryServiceServer) GetAccountByAddress(context.Context, *GetAccountByAddressRequest) (*GetAccountByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByAddress not implemented")
}
func (UnimplementedStateQueryServiceServer) GetAccountByPublicKey(context.Context, *GetAccountByPublicKeyRequest) (*GetAccountByPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByPublicKey not implemented")
}
func (UnimplementedStateQueryServiceServer) ListAccount(context.Context, *ListAccountRequest) (*ListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccount not implemented")
}
func (UnimplementedStateQueryServiceServer) GetBlockchain(context.Context, *GetBlockchainRequest) (*GetBlockchainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchain not implemented")
}
func (UnimplementedStateQueryServiceServer) GetBlockchainByChainId(context.Context, *GetBlockchainByChainIdRequest) (*GetBlockchainByChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchainByChainId not implemented")
}
func (UnimplementedStateQueryServiceServer) GetBlockchainByName(context.Context, *GetBlockchainByNameRequest) (*GetBlockchainByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchainByName not implemented")
}
func (UnimplementedStateQueryServiceServer) ListBlockchain(context.Context, *ListBlockchainRequest) (*ListBlockchainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockchain not implemented")
}
func (UnimplementedStateQueryServiceServer) GetAccumulator(context.Context, *GetAccumulatorRequest) (*GetAccumulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccumulator not implemented")
}
func (UnimplementedStateQueryServiceServer) GetAccumulatorByControllerKey(context.Context, *GetAccumulatorByControllerKeyRequest) (*GetAccumulatorByControllerKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccumulatorByControllerKey not implemented")
}
func (UnimplementedStateQueryServiceServer) ListAccumulator(context.Context, *ListAccumulatorRequest) (*ListAccumulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccumulator not implemented")
}
func (UnimplementedStateQueryServiceServer) GetController(context.Context, *GetControllerRequest) (*GetControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetController not implemented")
}
func (UnimplementedStateQueryServiceServer) GetControllerByAddress(context.Context, *GetControllerByAddressRequest) (*GetControllerByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerByAddress not implemented")
}
func (UnimplementedStateQueryServiceServer) GetControllerByPublicKey(context.Context, *GetControllerByPublicKeyRequest) (*GetControllerByPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerByPublicKey not implemented")
}
func (UnimplementedStateQueryServiceServer) GetControllerByPeerId(context.Context, *GetControllerByPeerIdRequest) (*GetControllerByPeerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerByPeerId not implemented")
}
func (UnimplementedStateQueryServiceServer) ListController(context.Context, *ListControllerRequest) (*ListControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListController not implemented")
}
func (UnimplementedStateQueryServiceServer) mustEmbedUnimplementedStateQueryServiceServer() {}

// UnsafeStateQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateQueryServiceServer will
// result in compilation errors.
type UnsafeStateQueryServiceServer interface {
	mustEmbedUnimplementedStateQueryServiceServer()
}

func RegisterStateQueryServiceServer(s grpc.ServiceRegistrar, srv StateQueryServiceServer) {
	s.RegisterService(&StateQueryService_ServiceDesc, srv)
}

func _StateQueryService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetAccountByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetAccountByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetAccountByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetAccountByAddress(ctx, req.(*GetAccountByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetAccountByPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetAccountByPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetAccountByPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetAccountByPublicKey(ctx, req.(*GetAccountByPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_ListAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListAccount(ctx, req.(*ListAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetBlockchain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetBlockchain(ctx, req.(*GetBlockchainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetBlockchainByChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainByChainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetBlockchainByChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetBlockchainByChainId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetBlockchainByChainId(ctx, req.(*GetBlockchainByChainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetBlockchainByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetBlockchainByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetBlockchainByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetBlockchainByName(ctx, req.(*GetBlockchainByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockchainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_ListBlockchain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListBlockchain(ctx, req.(*ListBlockchainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetAccumulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccumulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetAccumulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetAccumulator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetAccumulator(ctx, req.(*GetAccumulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetAccumulatorByControllerKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccumulatorByControllerKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetAccumulatorByControllerKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetAccumulatorByControllerKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetAccumulatorByControllerKey(ctx, req.(*GetAccumulatorByControllerKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListAccumulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccumulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListAccumulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_ListAccumulator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListAccumulator(ctx, req.(*ListAccumulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetController(ctx, req.(*GetControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetControllerByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetControllerByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetControllerByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetControllerByAddress(ctx, req.(*GetControllerByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetControllerByPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerByPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetControllerByPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetControllerByPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetControllerByPublicKey(ctx, req.(*GetControllerByPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetControllerByPeerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerByPeerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetControllerByPeerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetControllerByPeerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetControllerByPeerId(ctx, req.(*GetControllerByPeerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_ListController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListController(ctx, req.(*ListControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateQueryService_ServiceDesc is the grpc.ServiceDesc for StateQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonr.identity.module.v1.StateQueryService",
	HandlerType: (*StateQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _StateQueryService_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountByAddress",
			Handler:    _StateQueryService_GetAccountByAddress_Handler,
		},
		{
			MethodName: "GetAccountByPublicKey",
			Handler:    _StateQueryService_GetAccountByPublicKey_Handler,
		},
		{
			MethodName: "ListAccount",
			Handler:    _StateQueryService_ListAccount_Handler,
		},
		{
			MethodName: "GetBlockchain",
			Handler:    _StateQueryService_GetBlockchain_Handler,
		},
		{
			MethodName: "GetBlockchainByChainId",
			Handler:    _StateQueryService_GetBlockchainByChainId_Handler,
		},
		{
			MethodName: "GetBlockchainByName",
			Handler:    _StateQueryService_GetBlockchainByName_Handler,
		},
		{
			MethodName: "ListBlockchain",
			Handler:    _StateQueryService_ListBlockchain_Handler,
		},
		{
			MethodName: "GetAccumulator",
			Handler:    _StateQueryService_GetAccumulator_Handler,
		},
		{
			MethodName: "GetAccumulatorByControllerKey",
			Handler:    _StateQueryService_GetAccumulatorByControllerKey_Handler,
		},
		{
			MethodName: "ListAccumulator",
			Handler:    _StateQueryService_ListAccumulator_Handler,
		},
		{
			MethodName: "GetController",
			Handler:    _StateQueryService_GetController_Handler,
		},
		{
			MethodName: "GetControllerByAddress",
			Handler:    _StateQueryService_GetControllerByAddress_Handler,
		},
		{
			MethodName: "GetControllerByPublicKey",
			Handler:    _StateQueryService_GetControllerByPublicKey_Handler,
		},
		{
			MethodName: "GetControllerByPeerId",
			Handler:    _StateQueryService_GetControllerByPeerId_Handler,
		},
		{
			MethodName: "ListController",
			Handler:    _StateQueryService_ListController_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonr/identity/module/v1/state_query.proto",
}
