##### Labeler ##########################################################################################################
# Enable "labeler" for your PR that would add labels to PRs based on the paths that are modified in the PR.
labelPRBasedOnFilePath:
  # Add 'label1' to any changes within 'example' folder or any subfolders
  Crypto:
    - "pkg/crypto/**/*"

  # Add 'label2' to any file changes within 'example2' folder
  Highway:
    - "pkg/highway/**/*"
    - "cmd/highway/**/*"
    - "internal/context/**/*"
    - "internal/orm/**/*"

  # Complex: Add 'area/core' label to any change within the 'core' package
  Identity:
    - "pkg/vault/**/*"
    - "proto/sonrhq/sonr/identity/**/*"
    - "x/identity/**/*"
    - "pkg/crypto/daed/**/*"
    - "pkg/crypto/ecies/**/*"
    - "pkg/crypto/tecdsa/**/*"
    - "internal/wallet/**/*"

  Service:
    - "pkg/webauth/**/*"
    - "pkg/crypto/accumulator/**/*"
    - "proto/sonrhq/sonr/service/**/*"
    - "x/service/**/*"

  Config:
    - config/**/*
    - ".github/**/*"
    - ".gitignore"
    - ".vscode/**"
    - ".devcontainer/**"
    - "go.mod"
    - "go.sum"
    - Taskfile.yml
    - "Makefile"

  Documentation:
    - docs/**/*
    - "CODE_OF_CONDUCT.md"
    - "CONTRIBUTING.md"
    - "LICENSE"
    - "SECURITY.md"
    - DEVELOPERS.md
    - "**/README.md"

  Deployment:
    - ".dockerignore"
    - "Dockerfile"
    - "docker-compose.yml"
    - ".goreleaser.yml"
    - networks/testnet-*/**
    - networks/mainnet-*/**
    - networks/devnet-*/**
    - deploy/**/*

  UI-UX:
    - "pkg/nebula/**/*"
    - "**/*.templ"

# Various Flags to control behaviour of the "Labeler"
labelerFlags:
  # If this flag is changed to 'false', labels would only be added when the PR is first created and not when existing
  # PR is updated.
  # The default is 'true' which means the labels would be added when PR is updated even if they were removed by the user
  labelOnPRUpdates: true

##### Reviewer #########################################################################################################
# Enable "Reviewer" for your PR that would add reviewers to PRs based on the lables that exist on the PR. You have the option to set a default reviewer that gets added to every PR, or you can omit that config variable to skip it.
addReviewerBasedOnLabel:
  # specify PR labels that you want to auto assign reviewers based on
  labels:
    Deployment:
      - prnk28
    Config:
      - prnk28
    Documentation:
      - prnk28

##### Greetings ########################################################################################################
# Comment to be posted to welcome users when they open their first PR
firstPRWelcomeComment: >
  Thanks for opening this pull request! Please check out our contributing guidelines.

# Comment to be posted to congratulate user on their first merged PR
firstPRMergeComment: >
  Awesome work, congrats on your first merged pull request!

# Comment to be posted to on first time issues
firstIssueWelcomeComment: >
  Thanks for opening your first issue here! Be sure to follow the issue template!

###### IssueLink Adder #################################################################################################
# Insert Issue (Jira/Github etc) link in PR description based on the Issue ID in PR title.
insertIssueLinkInPrDescription:
  # specify the placeholder for the issue link that should be present in the description
  descriptionIssuePlaceholderRegexp: "^Issue link: (.*)$"
  matchers:
    docOnlyIssueMatch:
      titleIssueIdRegexp: \[(SONR-X{4})\]
      descriptionIssueLink: "`Referenced Github Issue`"

###### Title Validator #################################################################################################
# Verifies if commit/PR titles match the regexp specified
verifyTitles:
  # Regular expression that should be matched by titles of commits or PR
  titleRegexp: ^\[SONR-[0-9]{4}\].*$|^\[SONR-XXXX\].*$
  # If set to true, it will always check the PR title (as opposed to the individual commits).
  alwaysUsePrTitle: true
  # If set to true, it will only check the commit in case there is a single commit.
  # In case of multiple commits it will check PR title.
  # This reflects the standard behaviour of Github that for `Squash & Merge` GitHub
  # uses the PR title rather than commit messages for the squashed commit ¯\_(ツ)_/¯
  # For single-commit PRs it takes the squashed commit message from the commit as expected.
  #
  # If set to false it will check all commit messages. This is useful when you do not squash commits at merge.
  validateEitherPrOrSingleCommitTitle: true
  # The title the GitHub status should appear from.
  statusTitle: "Title Validator"
  # A custom message to be displayed when the title passes validation.
  successMessage: "Validation successful!"
  # A custom message to be displayed when the title fails validation.
  # Allows insertion of ${type} (commit/PR), ${title} (the title validated) and ${regex} (the titleRegexp above).
  failureMessage: "Wrong ${type} title: ${title}"
