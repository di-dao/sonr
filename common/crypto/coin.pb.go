// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: sonrhq/common/crypto/coin.proto

package crypto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CoinType is the BIP-0044 coin type for each supported coin.
type CoinType int32

const (
	// Bitcoins coin type is 0
	CoinType_CoinType_BITCOIN CoinType = 0
	// Testnet coin type is 1
	CoinType_CoinType_TESTNET CoinType = 1
	// Litecoin coin type is 2
	CoinType_CoinType_LITECOIN CoinType = 2
	// Dogecoin coin type is 3
	CoinType_CoinType_DOGE CoinType = 3
	// Ethereum coin type is 60
	CoinType_CoinType_ETHEREUM CoinType = 4
	// Sonr coin type is 703
	CoinType_CoinType_SONR CoinType = 5
	// Cosmos coin type is 118
	CoinType_CoinType_COSMOS CoinType = 6
	// Filecoin coin type is 461
	CoinType_CoinType_FILECOIN CoinType = 7
	// Handshake coin type is 5353
	CoinType_CoinType_HNS CoinType = 8
	// Solana coin type is 501
	CoinType_CoinType_SOLANA CoinType = 9
	// Ripple coin type is 144
	CoinType_CoinType_XRP CoinType = 10
)

// Enum value maps for CoinType.
var (
	CoinType_name = map[int32]string{
		0:  "CoinType_BITCOIN",
		1:  "CoinType_TESTNET",
		2:  "CoinType_LITECOIN",
		3:  "CoinType_DOGE",
		4:  "CoinType_ETHEREUM",
		5:  "CoinType_SONR",
		6:  "CoinType_COSMOS",
		7:  "CoinType_FILECOIN",
		8:  "CoinType_HNS",
		9:  "CoinType_SOLANA",
		10: "CoinType_XRP",
	}
	CoinType_value = map[string]int32{
		"CoinType_BITCOIN":  0,
		"CoinType_TESTNET":  1,
		"CoinType_LITECOIN": 2,
		"CoinType_DOGE":     3,
		"CoinType_ETHEREUM": 4,
		"CoinType_SONR":     5,
		"CoinType_COSMOS":   6,
		"CoinType_FILECOIN": 7,
		"CoinType_HNS":      8,
		"CoinType_SOLANA":   9,
		"CoinType_XRP":      10,
	}
)

func (x CoinType) Enum() *CoinType {
	p := new(CoinType)
	*p = x
	return p
}

func (x CoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_sonrhq_common_crypto_coin_proto_enumTypes[0].Descriptor()
}

func (CoinType) Type() protoreflect.EnumType {
	return &file_sonrhq_common_crypto_coin_proto_enumTypes[0]
}

func (x CoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoinType.Descriptor instead.
func (CoinType) EnumDescriptor() ([]byte, []int) {
	return file_sonrhq_common_crypto_coin_proto_rawDescGZIP(), []int{0}
}

// AccountData is the data needed to create an account.
type AccountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Algo      string `protobuf:"bytes,2,opt,name=algo,proto3" json:"algo,omitempty"`
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *AccountData) Reset() {
	*x = AccountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sonrhq_common_crypto_coin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountData) ProtoMessage() {}

func (x *AccountData) ProtoReflect() protoreflect.Message {
	mi := &file_sonrhq_common_crypto_coin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountData.ProtoReflect.Descriptor instead.
func (*AccountData) Descriptor() ([]byte, []int) {
	return file_sonrhq_common_crypto_coin_proto_rawDescGZIP(), []int{0}
}

func (x *AccountData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccountData) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *AccountData) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

var File_sonrhq_common_crypto_coin_proto protoreflect.FileDescriptor

var file_sonrhq_common_crypto_coin_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x6f, 0x6e, 0x72, 0x68, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x73, 0x6f, 0x6e, 0x72, 0x68, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x6c, 0x67, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x2a, 0xef, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x49, 0x54,
	0x43, 0x4f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x43, 0x4f, 0x49,
	0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x4f, 0x47, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4f, 0x4e, 0x52, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x53,
	0x4d, 0x4f, 0x53, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x4e,
	0x41, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x52, 0x50, 0x10, 0x0a, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x68, 0x71, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sonrhq_common_crypto_coin_proto_rawDescOnce sync.Once
	file_sonrhq_common_crypto_coin_proto_rawDescData = file_sonrhq_common_crypto_coin_proto_rawDesc
)

func file_sonrhq_common_crypto_coin_proto_rawDescGZIP() []byte {
	file_sonrhq_common_crypto_coin_proto_rawDescOnce.Do(func() {
		file_sonrhq_common_crypto_coin_proto_rawDescData = protoimpl.X.CompressGZIP(file_sonrhq_common_crypto_coin_proto_rawDescData)
	})
	return file_sonrhq_common_crypto_coin_proto_rawDescData
}

var file_sonrhq_common_crypto_coin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sonrhq_common_crypto_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_sonrhq_common_crypto_coin_proto_goTypes = []interface{}{
	(CoinType)(0),       // 0: sonrhq.common.crypto.CoinType
	(*AccountData)(nil), // 1: sonrhq.common.crypto.AccountData
}
var file_sonrhq_common_crypto_coin_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sonrhq_common_crypto_coin_proto_init() }
func file_sonrhq_common_crypto_coin_proto_init() {
	if File_sonrhq_common_crypto_coin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sonrhq_common_crypto_coin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sonrhq_common_crypto_coin_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sonrhq_common_crypto_coin_proto_goTypes,
		DependencyIndexes: file_sonrhq_common_crypto_coin_proto_depIdxs,
		EnumInfos:         file_sonrhq_common_crypto_coin_proto_enumTypes,
		MessageInfos:      file_sonrhq_common_crypto_coin_proto_msgTypes,
	}.Build()
	File_sonrhq_common_crypto_coin_proto = out.File
	file_sonrhq_common_crypto_coin_proto_rawDesc = nil
	file_sonrhq_common_crypto_coin_proto_goTypes = nil
	file_sonrhq_common_crypto_coin_proto_depIdxs = nil
}
