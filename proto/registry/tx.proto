syntax = "proto3";
package sonrio.sonr.registry;
import "registry/who_is.proto";
import "registry/credential.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/sonr-io/blockchain/x/registry/types";

// Msg defines the Msg Application.
service Msg {
  // Register Application
  //
  // RegisterApplication registers a new application on the Registry module.
  rpc RegisterApplication(MsgRegisterApplication) returns (MsgRegisterApplicationResponse);

  // Register Name
  //
  // RegisterName registers a .snr/ name for an account on the Registry module.
  rpc RegisterName(MsgRegisterName) returns (MsgRegisterNameResponse);

  // Access Name
  //
  // AccessName allows an account to access a .snr/ name on the Registry module. The equivalent of
  // of a traditional Login method.
  rpc AccessName(MsgAccessName) returns (MsgAccessNameResponse);

  // Update Name
  //
  // UpdateName allows an account to update a .snr/ name on the Registry module. Or,
  // in other words, link a new device to an existing .snr/ name.
  rpc UpdateName(MsgUpdateName) returns (MsgUpdateNameResponse);

  // Access Application
  //
  // AccessApplication allows an account to access an application on the Registry module.
  rpc AccessApplication(MsgAccessApplication) returns (MsgAccessApplicationResponse);

  // Update Application
  //
  // UpdateApplication allows an account to update an application's config on the Registry module.
  rpc UpdateApplication(MsgUpdateApplication) returns (MsgUpdateApplicationResponse);

  // Create WhoIs
  //
  // CreateWhoIs allows an account to create a WhoIs on the Registry module.
  rpc CreateWhoIs(MsgCreateWhoIs) returns (MsgCreateWhoIsResponse);

  // Update WhoIs
  //
  // UpdateWhoIs allows an account to update a WhoIs on the Registry module.
  rpc UpdateWhoIs(MsgUpdateWhoIs) returns (MsgUpdateWhoIsResponse);

  // Delete WhoIs
  //
  // DeleteWhoIs allows an account to delete a WhoIs on the Registry module.
  rpc DeleteWhoIs(MsgDeleteWhoIs) returns (MsgDeleteWhoIsResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgRegisterApplication {
  // Creator is the account address of the creator of the Application.
  string creator = 1;

  // Client side JSON Web Token for AssertionMethod
  Credential credential = 2;

  // Application Name is the endpoint of the Application.
  string application_name = 3;

  // Application Description is the description of the Application.
  string application_description = 4; //optional

  // Application URL is the URL of the Application.
  string application_url = 5; //optional

  // Application Category is the category of the Application.
  string application_category = 6; //optional
}

message MsgRegisterApplicationResponse {
  // Code of the response
    int32 code = 1;

    // Message of the response
    string message = 2;

    // WhoIs for the registered name
    WhoIs who_is = 3;

    // Session returns the session for the name
    Session session = 4;
}

// MsgRegisterName is a request to register a name with the ".snr" name of a peer
message MsgRegisterName {
  // Account address of the name owner
  string creator = 1;

  // Selected Name to register
  string name_to_register = 2;

  // Client side JSON Web Token for AssertionMethod
  Credential credential = 3;

   // The Updated Metadata
  map<string, string> metadata = 4; // optional
}

message MsgRegisterNameResponse {
    // Code of the response
    int32 code = 1;

    // Message of the response
    string message = 2;

    // WhoIs for the registered name
    WhoIs who_is = 3;

    // Session returns the session for the name
    Session session = 4;
}

// MsgAccessName defines the MsgAccessName transaction.
message MsgAccessName {
// The account that is accessing the name
  string creator = 1;

  // The name to access
  string name = 2;

  // Client side JSON Web Token for AssertionMethod
  Credential credential = 3;
}

message MsgAccessNameResponse {
    // Code of the response
    int32 code = 1;

    // Message of the response
    string message = 2;

    // WhoIs for the registered name
    WhoIs who_is = 3;

    // Session returns the session for the name
    Session session = 4;
}

message MsgUpdateName {
  // The account that owns the name.
  string creator = 1;

  // The did of the peer to update the name of
  string did = 2;

  // Client side JSON Web Token for AssertionMethod. For additional devices being linked.
  Credential credential = 3;

  // The Updated Metadata
  map<string, string> metadata = 4; // optional

  // Session returns the session for the name
  Session session = 5;
}

message MsgUpdateNameResponse {
    // Code of the response
    int32 code = 1;

    // Message of the response
    string message = 2;

    // WhoIs for the registered name
    WhoIs who_is = 3;
}

message MsgAccessApplication {
  // The account that is accessing the Application
  string creator = 1;

  // The name of the Application to access
  string app_name = 2;

  // Client side JSON Web Token for AssertionMethod
  Credential credential = 3;
}

message MsgAccessApplicationResponse {
    // Code of the response
    int32 code = 1;

    // Message of the response
    string message = 2;

    // Data of the response
    map<string, string> metadata = 3;

    // WhoIs for the registered name
    WhoIs who_is = 4;

    // Session returns the session for the name
    Session session = 5;
}

message MsgUpdateApplication {
  // The account that owns the name.
  string creator = 1;

  // The name of the peer to update the Application details of
  string did = 2;

  // The updated configuration for the Application
  map<string, string> metadata = 3;

  // Session returns the session for the name
  Session session = 4;
}

message MsgUpdateApplicationResponse {
    // Code of the response
    int32 code = 1;

    // Message of the response
    string message = 2;

    // Data of the response
    map<string, string> metadata = 3;

    // WhoIs for the registered name
    WhoIs who_is = 4;
}

message MsgCreateWhoIs {
  string creator = 1;
  string did = 2;
  bytes document = 3;
  repeated Credential credentials = 4;
  string name = 5;
}
message MsgCreateWhoIsResponse {
    // Code of the response
    int32 code = 1;

    // Message of the response
    string message = 2;

    WhoIs who_is = 3;
}

message MsgUpdateWhoIs {
  string creator = 1;
  string did = 2;
  bytes document = 3;
  repeated Credential credentials = 4;
}
message MsgUpdateWhoIsResponse {
    // Code of the response
    int32 code = 1;

    // Message of the response
    string message = 2;

    WhoIs who_is = 3;}

message MsgDeleteWhoIs {
  string creator = 1;
  string did = 2;
}

message MsgDeleteWhoIsResponse {
    // Code of the response
    int32 code = 1;

    // Message of the response
    string message = 2;
}

// this line is used by starport scaffolding # proto/tx/message
