syntax = "proto3";
package sonrio.sonr.bucket;
// import "object/v1/object.proto";
option go_package = "github.com/sonr-io/sonr/x/bucket/types";

// Bucket is a collection of objects.
message BucketDoc {
    // Label is human-readable name of the bucket.
    string label = 1;

    // Description is a human-readable description of the bucket.
    string description = 2;

    // Type is the kind of bucket for either App specific or User specific data.
    BucketType type = 3;

    // Did is the identifier of the bucket.
    string did = 4;

    // Objects are stored in a tree structure.
    repeated string object_dids = 5;
}

// BucketType is the type of a bucket.
enum BucketType {
    // BucketTypeUnspecified is the default value.
    BUCKET_TYPE_UNSPECIFIED = 0;

    // BucketTypeApp is an App specific bucket. For Assets regarding the service.
    BUCKET_TYPE_APP = 1;

    // BucketTypeUser is a User specific bucket. For any remote user data that is required
    // to be stored in the Network.
    BUCKET_TYPE_USER = 2;
}


// BucketEvent is the base event type for all Bucket events.
message BucketEvent {
    // Owner is the peer that originated the event.
    string peer_did = 1;

    // Type is the type of event being performed on a Bucket.
    BucketEventType type = 2;

    // Object is the entry being modified in the Bucket.
    // sonrio.sonr.object.ObjectDoc object = 3;

    // Metadata is the metadata associated with the event.
    map<string, string> metadata = 4;
}

// EventType is the type of event being performed on a Bucket.
enum BucketEventType {
    // EventTypeUnspecified is the default value.
    BUCKET_EVENT_TYPE_UNSPECIFIED = 0;

    // EventTypeGet is a get event being performed on a Bucket record.
    BUCKET_EVENT_TYPE_GET = 1;

    // EventTypeSet is a set event on the Bucket store.
    BUCKET_EVENT_TYPE_SET = 2;

    // EventTypeDelete is a delete event on the Bucket store.
    BUCKET_EVENT_TYPE_DELETE = 3;
}
