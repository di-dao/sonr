// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: api/common/api.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Internet Connection Type
type ConnectionType int32

const (
	ConnectionType_OFFLINE  ConnectionType = 0 // No Internet Connection
	ConnectionType_WIFI     ConnectionType = 1 // Wifi Connection
	ConnectionType_MOBILE   ConnectionType = 2 // Mobile Connection
	ConnectionType_ETHERNET ConnectionType = 3 // Ethernet Connection
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "OFFLINE",
		1: "WIFI",
		2: "MOBILE",
		3: "ETHERNET",
	}
	ConnectionType_value = map[string]int32{
		"OFFLINE":  0,
		"WIFI":     1,
		"MOBILE":   2,
		"ETHERNET": 3,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_api_proto_enumTypes[0].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_api_common_api_proto_enumTypes[0]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_api_common_api_proto_rawDescGZIP(), []int{0}
}

type ConnectionRequest_IPAddress_Family int32

const (
	ConnectionRequest_IPAddress_IPV4 ConnectionRequest_IPAddress_Family = 0 // IPv4 Address
	ConnectionRequest_IPAddress_IPV6 ConnectionRequest_IPAddress_Family = 1 // IPv6 Address
)

// Enum value maps for ConnectionRequest_IPAddress_Family.
var (
	ConnectionRequest_IPAddress_Family_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	ConnectionRequest_IPAddress_Family_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x ConnectionRequest_IPAddress_Family) Enum() *ConnectionRequest_IPAddress_Family {
	p := new(ConnectionRequest_IPAddress_Family)
	*p = x
	return p
}

func (x ConnectionRequest_IPAddress_Family) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionRequest_IPAddress_Family) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_api_proto_enumTypes[1].Descriptor()
}

func (ConnectionRequest_IPAddress_Family) Type() protoreflect.EnumType {
	return &file_api_common_api_proto_enumTypes[1]
}

func (x ConnectionRequest_IPAddress_Family) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionRequest_IPAddress_Family.Descriptor instead.
func (ConnectionRequest_IPAddress_Family) EnumDescriptor() ([]byte, []int) {
	return file_api_common_api_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Connection Message to Establish Sonr Host/API/Room
type ConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location       *Location                         `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`                        // Current Runtime Location
	Profile        *Profile                          `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`                          // Users Contact Card
	Type           ConnectionType                    `protobuf:"varint,3,opt,name=type,proto3,enum=sonr.core.ConnectionType" json:"type,omitempty"` // Internet Connection Type
	HostOptions    *ConnectionRequest_HostOptions    `protobuf:"bytes,4,opt,name=hostOptions,proto3" json:"hostOptions,omitempty"`                  // Libp2p Host config
	ServiceOptions *ConnectionRequest_ServiceOptions `protobuf:"bytes,5,opt,name=serviceOptions,proto3" json:"serviceOptions,omitempty"`            // Service Config
}

func (x *ConnectionRequest) Reset() {
	*x = ConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRequest) ProtoMessage() {}

func (x *ConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRequest.ProtoReflect.Descriptor instead.
func (*ConnectionRequest) Descriptor() ([]byte, []int) {
	return file_api_common_api_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectionRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ConnectionRequest) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ConnectionRequest) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_OFFLINE
}

func (x *ConnectionRequest) GetHostOptions() *ConnectionRequest_HostOptions {
	if x != nil {
		return x.HostOptions
	}
	return nil
}

func (x *ConnectionRequest) GetServiceOptions() *ConnectionRequest_ServiceOptions {
	if x != nil {
		return x.ServiceOptions
	}
	return nil
}

// Response from Connection Request
type ConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // True if Host is Active
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`      // Error Message if Host is not Active
}

func (x *ConnectionResponse) Reset() {
	*x = ConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionResponse) ProtoMessage() {}

func (x *ConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionResponse.ProtoReflect.Descriptor instead.
func (*ConnectionResponse) Descriptor() ([]byte, []int) {
	return file_api_common_api_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConnectionResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Location from GeoIP and OLC information
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location Latitude
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Location Longitude
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Location Placemark Information - Generated
	Placemark *Location_Placemark `protobuf:"bytes,3,opt,name=placemark,proto3" json:"placemark,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_api_common_api_proto_rawDescGZIP(), []int{2}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetPlacemark() *Location_Placemark {
	if x != nil {
		return x.Placemark
	}
	return nil
}

// Shared Metadata for Messages on all Protocols
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Unix timestamp
	NodeId    string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`        // Node ID
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`  // Signature of the message
	PublicKey []byte `protobuf:"bytes,4,opt,name=publicKey,proto3" json:"publicKey,omitempty"`  // Public Key of the message sender
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_api_common_api_proto_rawDescGZIP(), []int{3}
}

func (x *Metadata) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Metadata) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Metadata) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Metadata) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Libp2p Host Options
type ConnectionRequest_HostOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuicTransport   bool                           `protobuf:"varint,1,opt,name=quicTransport,proto3" json:"quicTransport,omitempty"`     // Enable QUIC Transport
	HttpTransport   bool                           `protobuf:"varint,2,opt,name=httpTransport,proto3" json:"httpTransport,omitempty"`     // Enable HTTP Transport
	WebrtcTransport bool                           `protobuf:"varint,3,opt,name=webrtcTransport,proto3" json:"webrtcTransport,omitempty"` // Enable WebRTC Transport
	MdnsDiscovery   bool                           `protobuf:"varint,4,opt,name=mdnsDiscovery,proto3" json:"mdnsDiscovery,omitempty"`     // Enable MDNS Discovery
	Ipv4Only        bool                           `protobuf:"varint,5,opt,name=ipv4Only,proto3" json:"ipv4Only,omitempty"`               // Enable IPv4 Only
	ListenPort      int32                          `protobuf:"varint,6,opt,name=listenPort,proto3" json:"listenPort,omitempty"`           // Listen Port for Libp2p
	ListenAddrs     []*ConnectionRequest_IPAddress `protobuf:"bytes,7,rep,name=listenAddrs,proto3" json:"listenAddrs,omitempty"`          // List of Listen Addresses (optional)
}

func (x *ConnectionRequest_HostOptions) Reset() {
	*x = ConnectionRequest_HostOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRequest_HostOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRequest_HostOptions) ProtoMessage() {}

func (x *ConnectionRequest_HostOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRequest_HostOptions.ProtoReflect.Descriptor instead.
func (*ConnectionRequest_HostOptions) Descriptor() ([]byte, []int) {
	return file_api_common_api_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConnectionRequest_HostOptions) GetQuicTransport() bool {
	if x != nil {
		return x.QuicTransport
	}
	return false
}

func (x *ConnectionRequest_HostOptions) GetHttpTransport() bool {
	if x != nil {
		return x.HttpTransport
	}
	return false
}

func (x *ConnectionRequest_HostOptions) GetWebrtcTransport() bool {
	if x != nil {
		return x.WebrtcTransport
	}
	return false
}

func (x *ConnectionRequest_HostOptions) GetMdnsDiscovery() bool {
	if x != nil {
		return x.MdnsDiscovery
	}
	return false
}

func (x *ConnectionRequest_HostOptions) GetIpv4Only() bool {
	if x != nil {
		return x.Ipv4Only
	}
	return false
}

func (x *ConnectionRequest_HostOptions) GetListenPort() int32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

func (x *ConnectionRequest_HostOptions) GetListenAddrs() []*ConnectionRequest_IPAddress {
	if x != nil {
		return x.ListenAddrs
	}
	return nil
}

// Service Configuration
type ConnectionRequest_ServiceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Textile    bool  `protobuf:"varint,1,opt,name=textile,proto3" json:"textile,omitempty"`       // Enable Textile Client and Threads
	Mailbox    bool  `protobuf:"varint,2,opt,name=mailbox,proto3" json:"mailbox,omitempty"`       // Enable Mailbox
	Buckets    bool  `protobuf:"varint,3,opt,name=buckets,proto3" json:"buckets,omitempty"`       // Enable Buckets
	Push       bool  `protobuf:"varint,4,opt,name=push,proto3" json:"push,omitempty"`             // Enable Push Notifications
	AutoUpdate bool  `protobuf:"varint,5,opt,name=autoUpdate,proto3" json:"autoUpdate,omitempty"` // Enable Auto Update Events
	OlcRange   int32 `protobuf:"varint,6,opt,name=olcRange,proto3" json:"olcRange,omitempty"`     // OLC Range Value for Local Room (Default: 6)
}

func (x *ConnectionRequest_ServiceOptions) Reset() {
	*x = ConnectionRequest_ServiceOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRequest_ServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRequest_ServiceOptions) ProtoMessage() {}

func (x *ConnectionRequest_ServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRequest_ServiceOptions.ProtoReflect.Descriptor instead.
func (*ConnectionRequest_ServiceOptions) Descriptor() ([]byte, []int) {
	return file_api_common_api_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ConnectionRequest_ServiceOptions) GetTextile() bool {
	if x != nil {
		return x.Textile
	}
	return false
}

func (x *ConnectionRequest_ServiceOptions) GetMailbox() bool {
	if x != nil {
		return x.Mailbox
	}
	return false
}

func (x *ConnectionRequest_ServiceOptions) GetBuckets() bool {
	if x != nil {
		return x.Buckets
	}
	return false
}

func (x *ConnectionRequest_ServiceOptions) GetPush() bool {
	if x != nil {
		return x.Push
	}
	return false
}

func (x *ConnectionRequest_ServiceOptions) GetAutoUpdate() bool {
	if x != nil {
		return x.AutoUpdate
	}
	return false
}

func (x *ConnectionRequest_ServiceOptions) GetOlcRange() int32 {
	if x != nil {
		return x.OlcRange
	}
	return 0
}

// IP Address Interface
type ConnectionRequest_IPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                        // Name of Interface
	Value    string                             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                                                      // IP Address of Interface
	Mac      string                             `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`                                                          // Mac Address of Interface
	Internal bool                               `protobuf:"varint,4,opt,name=internal,proto3" json:"internal,omitempty"`                                               // Wether it is a Loopback Interface
	Family   ConnectionRequest_IPAddress_Family `protobuf:"varint,5,opt,name=family,proto3,enum=sonr.core.ConnectionRequest_IPAddress_Family" json:"family,omitempty"` // Address Family
}

func (x *ConnectionRequest_IPAddress) Reset() {
	*x = ConnectionRequest_IPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRequest_IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRequest_IPAddress) ProtoMessage() {}

func (x *ConnectionRequest_IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRequest_IPAddress.ProtoReflect.Descriptor instead.
func (*ConnectionRequest_IPAddress) Descriptor() ([]byte, []int) {
	return file_api_common_api_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ConnectionRequest_IPAddress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectionRequest_IPAddress) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ConnectionRequest_IPAddress) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *ConnectionRequest_IPAddress) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *ConnectionRequest_IPAddress) GetFamily() ConnectionRequest_IPAddress_Family {
	if x != nil {
		return x.Family
	}
	return ConnectionRequest_IPAddress_IPV4
}

// Contains detailed placemark information.
type Location_Placemark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name associated with the placemark.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The street associated with the placemark.
	Street string `protobuf:"bytes,2,opt,name=street,proto3" json:"street,omitempty"`
	// The abbreviated country name, according to the two letter (alpha-2) [ISO
	// standard](https://www.iso.org/iso-3166-country-codes.html).
	IsoCountryCode string `protobuf:"bytes,3,opt,name=isoCountryCode,proto3" json:"isoCountryCode,omitempty"`
	// The name of the country associated with the placemark.
	Country string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	// The postal code associated with the placemark.
	PostalCode string `protobuf:"bytes,5,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	// The name of the state or province associated with the placemark.
	AdministrativeArea string `protobuf:"bytes,6,opt,name=administrativeArea,proto3" json:"administrativeArea,omitempty"`
	// Additional administrative area information for the placemark.
	SubAdministrativeArea string `protobuf:"bytes,7,opt,name=subAdministrativeArea,proto3" json:"subAdministrativeArea,omitempty"`
	// The name of the city associated with the placemark.
	Locality string `protobuf:"bytes,8,opt,name=locality,proto3" json:"locality,omitempty"`
	// Additional city-level information for the placemark.
	SubLocality string `protobuf:"bytes,9,opt,name=subLocality,proto3" json:"subLocality,omitempty"`
	// The street address associated with the placemark.
	Thoroughfare string `protobuf:"bytes,10,opt,name=thoroughfare,proto3" json:"thoroughfare,omitempty"`
	// Additional street address information for the placemark.
	SubThoroughfare string `protobuf:"bytes,11,opt,name=subThoroughfare,proto3" json:"subThoroughfare,omitempty"`
}

func (x *Location_Placemark) Reset() {
	*x = Location_Placemark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location_Placemark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location_Placemark) ProtoMessage() {}

func (x *Location_Placemark) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location_Placemark.ProtoReflect.Descriptor instead.
func (*Location_Placemark) Descriptor() ([]byte, []int) {
	return file_api_common_api_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Location_Placemark) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Location_Placemark) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Location_Placemark) GetIsoCountryCode() string {
	if x != nil {
		return x.IsoCountryCode
	}
	return ""
}

func (x *Location_Placemark) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location_Placemark) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Location_Placemark) GetAdministrativeArea() string {
	if x != nil {
		return x.AdministrativeArea
	}
	return ""
}

func (x *Location_Placemark) GetSubAdministrativeArea() string {
	if x != nil {
		return x.SubAdministrativeArea
	}
	return ""
}

func (x *Location_Placemark) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *Location_Placemark) GetSubLocality() string {
	if x != nil {
		return x.SubLocality
	}
	return ""
}

func (x *Location_Placemark) GetThoroughfare() string {
	if x != nil {
		return x.Thoroughfare
	}
	return ""
}

func (x *Location_Placemark) GetSubThoroughfare() string {
	if x != nil {
		return x.SubThoroughfare
	}
	return ""
}

var File_api_common_api_proto protoreflect.FileDescriptor

var file_api_common_api_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x07, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x6f,
	0x6e, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0b,
	0x68, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x68, 0x6f, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xaf, 0x02,
	0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x71, 0x75, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x64, 0x6e, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x64, 0x6e, 0x73,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x76,
	0x34, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x70, 0x76,
	0x34, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x6e,
	0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x73, 0x1a,
	0xae, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x70, 0x75, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x6c, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x1a, 0xc8, 0x01, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x6f, 0x6e, 0x72, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x1c, 0x0a,
	0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x22, 0x44, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x8f, 0x04, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6f,
	0x6e, 0x72, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x8b, 0x03, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x73, 0x75, 0x62, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x6f, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x66, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x6f,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x54, 0x68, 0x6f, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x61, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x54, 0x68, 0x6f, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x66,
	0x61, 0x72, 0x65, 0x22, 0x7c, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x2a, 0x41, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x46, 0x49, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f,
	0x42, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x10, 0x03, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_common_api_proto_rawDescOnce sync.Once
	file_api_common_api_proto_rawDescData = file_api_common_api_proto_rawDesc
)

func file_api_common_api_proto_rawDescGZIP() []byte {
	file_api_common_api_proto_rawDescOnce.Do(func() {
		file_api_common_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_api_proto_rawDescData)
	})
	return file_api_common_api_proto_rawDescData
}

var file_api_common_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_common_api_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_common_api_proto_goTypes = []interface{}{
	(ConnectionType)(0),                      // 0: sonr.core.ConnectionType
	(ConnectionRequest_IPAddress_Family)(0),  // 1: sonr.core.ConnectionRequest.IPAddress.Family
	(*ConnectionRequest)(nil),                // 2: sonr.core.ConnectionRequest
	(*ConnectionResponse)(nil),               // 3: sonr.core.ConnectionResponse
	(*Location)(nil),                         // 4: sonr.core.Location
	(*Metadata)(nil),                         // 5: sonr.core.Metadata
	(*ConnectionRequest_HostOptions)(nil),    // 6: sonr.core.ConnectionRequest.HostOptions
	(*ConnectionRequest_ServiceOptions)(nil), // 7: sonr.core.ConnectionRequest.ServiceOptions
	(*ConnectionRequest_IPAddress)(nil),      // 8: sonr.core.ConnectionRequest.IPAddress
	(*Location_Placemark)(nil),               // 9: sonr.core.Location.Placemark
	(*Profile)(nil),                          // 10: sonr.core.Profile
}
var file_api_common_api_proto_depIdxs = []int32{
	4,  // 0: sonr.core.ConnectionRequest.location:type_name -> sonr.core.Location
	10, // 1: sonr.core.ConnectionRequest.profile:type_name -> sonr.core.Profile
	0,  // 2: sonr.core.ConnectionRequest.type:type_name -> sonr.core.ConnectionType
	6,  // 3: sonr.core.ConnectionRequest.hostOptions:type_name -> sonr.core.ConnectionRequest.HostOptions
	7,  // 4: sonr.core.ConnectionRequest.serviceOptions:type_name -> sonr.core.ConnectionRequest.ServiceOptions
	9,  // 5: sonr.core.Location.placemark:type_name -> sonr.core.Location.Placemark
	8,  // 6: sonr.core.ConnectionRequest.HostOptions.listenAddrs:type_name -> sonr.core.ConnectionRequest.IPAddress
	1,  // 7: sonr.core.ConnectionRequest.IPAddress.family:type_name -> sonr.core.ConnectionRequest.IPAddress.Family
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_common_api_proto_init() }
func file_api_common_api_proto_init() {
	if File_api_common_api_proto != nil {
		return
	}
	file_api_common_core_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_common_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRequest_HostOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRequest_ServiceOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRequest_IPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_common_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location_Placemark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_api_proto_goTypes,
		DependencyIndexes: file_api_common_api_proto_depIdxs,
		EnumInfos:         file_api_common_api_proto_enumTypes,
		MessageInfos:      file_api_common_api_proto_msgTypes,
	}.Build()
	File_api_common_api_proto = out.File
	file_api_common_api_proto_rawDesc = nil
	file_api_common_api_proto_goTypes = nil
	file_api_common_api_proto_depIdxs = nil
}
