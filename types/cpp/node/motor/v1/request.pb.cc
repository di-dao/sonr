// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/motor/v1/request.proto

#include "node/motor/v1/request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace node {
namespace motor {
namespace v1 {
constexpr InitializeRequest_VariablesEntry_DoNotUse::InitializeRequest_VariablesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct InitializeRequest_VariablesEntry_DoNotUseDefaultTypeInternal {
  constexpr InitializeRequest_VariablesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializeRequest_VariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InitializeRequest_VariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializeRequest_VariablesEntry_DoNotUseDefaultTypeInternal _InitializeRequest_VariablesEntry_DoNotUse_default_instance_;
constexpr InitializeRequest_DeviceOptions::InitializeRequest_DeviceOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , home_dir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , support_dir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , temp_dir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InitializeRequest_DeviceOptionsDefaultTypeInternal {
  constexpr InitializeRequest_DeviceOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializeRequest_DeviceOptionsDefaultTypeInternal() {}
  union {
    InitializeRequest_DeviceOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializeRequest_DeviceOptionsDefaultTypeInternal _InitializeRequest_DeviceOptions_default_instance_;
constexpr InitializeRequest_HostOptions::InitializeRequest_HostOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : listen_addrs_()
  , quic_transport_(false)
  , http_transport_(false)
  , ipv4_only_(false){}
struct InitializeRequest_HostOptionsDefaultTypeInternal {
  constexpr InitializeRequest_HostOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializeRequest_HostOptionsDefaultTypeInternal() {}
  union {
    InitializeRequest_HostOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializeRequest_HostOptionsDefaultTypeInternal _InitializeRequest_HostOptions_default_instance_;
constexpr InitializeRequest_ServiceOptions::InitializeRequest_ServiceOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : textile_(false)
  , mailbox_(false)
  , buckets_(false)
  , interval_(0){}
struct InitializeRequest_ServiceOptionsDefaultTypeInternal {
  constexpr InitializeRequest_ServiceOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializeRequest_ServiceOptionsDefaultTypeInternal() {}
  union {
    InitializeRequest_ServiceOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializeRequest_ServiceOptionsDefaultTypeInternal _InitializeRequest_ServiceOptions_default_instance_;
constexpr InitializeRequest_IPAddress::InitializeRequest_IPAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , internal_(false)
  , family_(0)
{}
struct InitializeRequest_IPAddressDefaultTypeInternal {
  constexpr InitializeRequest_IPAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializeRequest_IPAddressDefaultTypeInternal() {}
  union {
    InitializeRequest_IPAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializeRequest_IPAddressDefaultTypeInternal _InitializeRequest_IPAddress_default_instance_;
constexpr InitializeRequest::InitializeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variables_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , wallet_passphrase_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(nullptr)
  , profile_(nullptr)
  , host_options_(nullptr)
  , service_options_(nullptr)
  , device_options_(nullptr)
  , connection_(0)

  , environment_(0)
{}
struct InitializeRequestDefaultTypeInternal {
  constexpr InitializeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializeRequestDefaultTypeInternal() {}
  union {
    InitializeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializeRequestDefaultTypeInternal _InitializeRequest_default_instance_;
constexpr ShareRequest::ShareRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , peer_(nullptr)
  , message_(nullptr){}
struct ShareRequestDefaultTypeInternal {
  constexpr ShareRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShareRequestDefaultTypeInternal() {}
  union {
    ShareRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShareRequestDefaultTypeInternal _ShareRequest_default_instance_;
constexpr DecideRequest::DecideRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_(nullptr)
  , decision_(false){}
struct DecideRequestDefaultTypeInternal {
  constexpr DecideRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecideRequestDefaultTypeInternal() {}
  union {
    DecideRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecideRequestDefaultTypeInternal _DecideRequest_default_instance_;
constexpr SearchRequest::SearchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SearchRequestDefaultTypeInternal {
  constexpr SearchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchRequestDefaultTypeInternal() {}
  union {
    SearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
constexpr OnLobbyRefreshRequest::OnLobbyRefreshRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OnLobbyRefreshRequestDefaultTypeInternal {
  constexpr OnLobbyRefreshRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnLobbyRefreshRequestDefaultTypeInternal() {}
  union {
    OnLobbyRefreshRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnLobbyRefreshRequestDefaultTypeInternal _OnLobbyRefreshRequest_default_instance_;
constexpr OnMailboxMessageRequest::OnMailboxMessageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OnMailboxMessageRequestDefaultTypeInternal {
  constexpr OnMailboxMessageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnMailboxMessageRequestDefaultTypeInternal() {}
  union {
    OnMailboxMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnMailboxMessageRequestDefaultTypeInternal _OnMailboxMessageRequest_default_instance_;
constexpr OnTransmitDecisionRequest::OnTransmitDecisionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OnTransmitDecisionRequestDefaultTypeInternal {
  constexpr OnTransmitDecisionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnTransmitDecisionRequestDefaultTypeInternal() {}
  union {
    OnTransmitDecisionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnTransmitDecisionRequestDefaultTypeInternal _OnTransmitDecisionRequest_default_instance_;
constexpr OnTransmitInviteRequest::OnTransmitInviteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OnTransmitInviteRequestDefaultTypeInternal {
  constexpr OnTransmitInviteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnTransmitInviteRequestDefaultTypeInternal() {}
  union {
    OnTransmitInviteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnTransmitInviteRequestDefaultTypeInternal _OnTransmitInviteRequest_default_instance_;
constexpr OnTransmitProgressRequest::OnTransmitProgressRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OnTransmitProgressRequestDefaultTypeInternal {
  constexpr OnTransmitProgressRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnTransmitProgressRequestDefaultTypeInternal() {}
  union {
    OnTransmitProgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnTransmitProgressRequestDefaultTypeInternal _OnTransmitProgressRequest_default_instance_;
constexpr OnTransmitCompleteRequest::OnTransmitCompleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OnTransmitCompleteRequestDefaultTypeInternal {
  constexpr OnTransmitCompleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnTransmitCompleteRequestDefaultTypeInternal() {}
  union {
    OnTransmitCompleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnTransmitCompleteRequestDefaultTypeInternal _OnTransmitCompleteRequest_default_instance_;
}  // namespace v1
}  // namespace motor
}  // namespace node
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fmotor_2fv1_2frequest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fmotor_2fv1_2frequest_2eproto = nullptr;

const uint32_t TableStruct_node_2fmotor_2fv1_2frequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_VariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_VariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_VariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_VariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_DeviceOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_DeviceOptions, id_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_DeviceOptions, home_dir_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_DeviceOptions, support_dir_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_DeviceOptions, temp_dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_HostOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_HostOptions, quic_transport_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_HostOptions, http_transport_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_HostOptions, ipv4_only_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_HostOptions, listen_addrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_ServiceOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_ServiceOptions, textile_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_ServiceOptions, mailbox_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_ServiceOptions, buckets_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_ServiceOptions, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_IPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_IPAddress, name_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_IPAddress, address_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_IPAddress, internal_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest_IPAddress, family_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest, location_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest, profile_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest, connection_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest, host_options_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest, service_options_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest, device_options_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest, environment_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest, variables_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::InitializeRequest, wallet_passphrase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::ShareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::ShareRequest, peer_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::ShareRequest, message_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::ShareRequest, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::DecideRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::DecideRequest, decision_),
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::DecideRequest, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::SearchRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::SearchRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnLobbyRefreshRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnMailboxMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitDecisionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitInviteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitProgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::node::motor::v1::OnTransmitCompleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::node::motor::v1::InitializeRequest_VariablesEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::node::motor::v1::InitializeRequest_DeviceOptions)},
  { 20, -1, -1, sizeof(::node::motor::v1::InitializeRequest_HostOptions)},
  { 30, -1, -1, sizeof(::node::motor::v1::InitializeRequest_ServiceOptions)},
  { 40, -1, -1, sizeof(::node::motor::v1::InitializeRequest_IPAddress)},
  { 50, -1, -1, sizeof(::node::motor::v1::InitializeRequest)},
  { 65, -1, -1, sizeof(::node::motor::v1::ShareRequest)},
  { 74, -1, -1, sizeof(::node::motor::v1::DecideRequest)},
  { 82, -1, -1, sizeof(::node::motor::v1::SearchRequest)},
  { 91, -1, -1, sizeof(::node::motor::v1::OnLobbyRefreshRequest)},
  { 97, -1, -1, sizeof(::node::motor::v1::OnMailboxMessageRequest)},
  { 103, -1, -1, sizeof(::node::motor::v1::OnTransmitDecisionRequest)},
  { 109, -1, -1, sizeof(::node::motor::v1::OnTransmitInviteRequest)},
  { 115, -1, -1, sizeof(::node::motor::v1::OnTransmitProgressRequest)},
  { 121, -1, -1, sizeof(::node::motor::v1::OnTransmitCompleteRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_InitializeRequest_VariablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_InitializeRequest_DeviceOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_InitializeRequest_HostOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_InitializeRequest_ServiceOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_InitializeRequest_IPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_InitializeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_ShareRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_DecideRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_SearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnLobbyRefreshRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnMailboxMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnTransmitDecisionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnTransmitInviteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnTransmitProgressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::node::motor::v1::_OnTransmitCompleteRequest_default_instance_),
};

const char descriptor_table_protodef_node_2fmotor_2fv1_2frequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033node/motor/v1/request.proto\022\rnode.moto"
  "r.v1\032\024common/v1/core.proto\032\024common/v1/da"
  "ta.proto\"\304\n\n\021InitializeRequest\022/\n\010locati"
  "on\030\001 \001(\0132\023.common.v1.LocationR\010location\022"
  ",\n\007profile\030\002 \001(\0132\022.common.v1.ProfileR\007pr"
  "ofile\0225\n\nconnection\030\003 \001(\0162\025.common.v1.Co"
  "nnectionR\nconnection\022O\n\014host_options\030\004 \001"
  "(\0132,.node.motor.v1.InitializeRequest.Hos"
  "tOptionsR\013hostOptions\022X\n\017service_options"
  "\030\005 \001(\0132/.node.motor.v1.InitializeRequest"
  ".ServiceOptionsR\016serviceOptions\022U\n\016devic"
  "e_options\030\006 \001(\0132..node.motor.v1.Initiali"
  "zeRequest.DeviceOptionsR\rdeviceOptions\0228"
  "\n\013environment\030\007 \001(\0162\026.common.v1.Environm"
  "entR\013environment\022M\n\tvariables\030\010 \003(\0132/.no"
  "de.motor.v1.InitializeRequest.VariablesE"
  "ntryR\tvariables\022+\n\021wallet_passphrase\030\t \001"
  "(\tR\020walletPassphrase\032<\n\016VariablesEntry\022\020"
  "\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\002"
  "8\001\032v\n\rDeviceOptions\022\016\n\002id\030\001 \001(\tR\002id\022\031\n\010h"
  "ome_dir\030\002 \001(\tR\007homeDir\022\037\n\013support_dir\030\003 "
  "\001(\tR\nsupportDir\022\031\n\010temp_dir\030\004 \001(\tR\007tempD"
  "ir\032\307\001\n\013HostOptions\022%\n\016quic_transport\030\001 \001"
  "(\010R\rquicTransport\022%\n\016http_transport\030\002 \001("
  "\010R\rhttpTransport\022\033\n\tipv4_only\030\003 \001(\010R\010ipv"
  "4Only\022M\n\014listen_addrs\030\004 \003(\0132*.node.motor"
  ".v1.InitializeRequest.IPAddressR\013listenA"
  "ddrs\032z\n\016ServiceOptions\022\030\n\007textile\030\001 \001(\010R"
  "\007textile\022\030\n\007mailbox\030\002 \001(\010R\007mailbox\022\030\n\007bu"
  "ckets\030\003 \001(\010R\007buckets\022\032\n\010interval\030\004 \001(\005R\010"
  "interval\032\344\001\n\tIPAddress\022\022\n\004name\030\001 \001(\tR\004na"
  "me\022\030\n\007address\030\002 \001(\tR\007address\022\032\n\010internal"
  "\030\003 \001(\010R\010internal\022I\n\006family\030\004 \001(\01621.node."
  "motor.v1.InitializeRequest.IPAddress.Fam"
  "ilyR\006family\"B\n\006Family\022\026\n\022FAMILY_UNSPECIF"
  "IED\020\000\022\017\n\013FAMILY_IPV4\020\001\022\017\n\013FAMILY_IPV6\020\002\""
  "\222\001\n\014ShareRequest\022#\n\004peer\030\001 \001(\0132\017.common."
  "v1.PeerR\004peer\0220\n\007message\030\002 \001(\0132\026.common."
  "v1.MessageItemR\007message\022+\n\005items\030\003 \003(\0132\025"
  ".common.v1.SupplyItemR\005items\"P\n\rDecideRe"
  "quest\022\032\n\010decision\030\001 \001(\010R\010decision\022#\n\004pee"
  "r\030\002 \001(\0132\017.common.v1.PeerR\004peer\"L\n\rSearch"
  "Request\022\027\n\006s_name\030\001 \001(\tH\000R\005sName\022\031\n\007peer"
  "_id\030\002 \001(\tH\000R\006peerIdB\007\n\005query\"\027\n\025OnLobbyR"
  "efreshRequest\"\031\n\027OnMailboxMessageRequest"
  "\"\033\n\031OnTransmitDecisionRequest\"\031\n\027OnTrans"
  "mitInviteRequest\"\033\n\031OnTransmitProgressRe"
  "quest\"\033\n\031OnTransmitCompleteRequestB$Z\"gi"
  "thub.com/sonr-io/core/node/motorb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_deps[2] = {
  &::descriptor_table_common_2fv1_2fcore_2eproto,
  &::descriptor_table_common_2fv1_2fdata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fmotor_2fv1_2frequest_2eproto = {
  false, false, 1960, descriptor_table_protodef_node_2fmotor_2fv1_2frequest_2eproto, "node/motor/v1/request.proto", 
  &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once, descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_deps, 2, 15,
  schemas, file_default_instances, TableStruct_node_2fmotor_2fv1_2frequest_2eproto::offsets,
  file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto, file_level_enum_descriptors_node_2fmotor_2fv1_2frequest_2eproto, file_level_service_descriptors_node_2fmotor_2fv1_2frequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter() {
  return &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fmotor_2fv1_2frequest_2eproto(&descriptor_table_node_2fmotor_2fv1_2frequest_2eproto);
namespace node {
namespace motor {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InitializeRequest_IPAddress_Family_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fmotor_2fv1_2frequest_2eproto);
  return file_level_enum_descriptors_node_2fmotor_2fv1_2frequest_2eproto[0];
}
bool InitializeRequest_IPAddress_Family_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr InitializeRequest_IPAddress_Family InitializeRequest_IPAddress::FAMILY_UNSPECIFIED;
constexpr InitializeRequest_IPAddress_Family InitializeRequest_IPAddress::FAMILY_IPV4;
constexpr InitializeRequest_IPAddress_Family InitializeRequest_IPAddress::FAMILY_IPV6;
constexpr InitializeRequest_IPAddress_Family InitializeRequest_IPAddress::Family_MIN;
constexpr InitializeRequest_IPAddress_Family InitializeRequest_IPAddress::Family_MAX;
constexpr int InitializeRequest_IPAddress::Family_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

InitializeRequest_VariablesEntry_DoNotUse::InitializeRequest_VariablesEntry_DoNotUse() {}
InitializeRequest_VariablesEntry_DoNotUse::InitializeRequest_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InitializeRequest_VariablesEntry_DoNotUse::MergeFrom(const InitializeRequest_VariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InitializeRequest_VariablesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[0]);
}

// ===================================================================

class InitializeRequest_DeviceOptions::_Internal {
 public:
};

InitializeRequest_DeviceOptions::InitializeRequest_DeviceOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.InitializeRequest.DeviceOptions)
}
InitializeRequest_DeviceOptions::InitializeRequest_DeviceOptions(const InitializeRequest_DeviceOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  home_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    home_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home_dir().empty()) {
    home_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_home_dir(), 
      GetArenaForAllocation());
  }
  support_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    support_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_support_dir().empty()) {
    support_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_support_dir(), 
      GetArenaForAllocation());
  }
  temp_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    temp_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_temp_dir().empty()) {
    temp_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_temp_dir(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.InitializeRequest.DeviceOptions)
}

inline void InitializeRequest_DeviceOptions::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
home_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  home_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
support_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  support_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
temp_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  temp_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitializeRequest_DeviceOptions::~InitializeRequest_DeviceOptions() {
  // @@protoc_insertion_point(destructor:node.motor.v1.InitializeRequest.DeviceOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitializeRequest_DeviceOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  home_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  temp_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitializeRequest_DeviceOptions::ArenaDtor(void* object) {
  InitializeRequest_DeviceOptions* _this = reinterpret_cast< InitializeRequest_DeviceOptions* >(object);
  (void)_this;
}
void InitializeRequest_DeviceOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitializeRequest_DeviceOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitializeRequest_DeviceOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.InitializeRequest.DeviceOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  home_dir_.ClearToEmpty();
  support_dir_.ClearToEmpty();
  temp_dir_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeRequest_DeviceOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.InitializeRequest.DeviceOptions.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string home_dir = 2 [json_name = "homeDir"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_home_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.InitializeRequest.DeviceOptions.home_dir"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string support_dir = 3 [json_name = "supportDir"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_support_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.InitializeRequest.DeviceOptions.support_dir"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string temp_dir = 4 [json_name = "tempDir"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_temp_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.InitializeRequest.DeviceOptions.temp_dir"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeRequest_DeviceOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.InitializeRequest.DeviceOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.InitializeRequest.DeviceOptions.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string home_dir = 2 [json_name = "homeDir"];
  if (!this->_internal_home_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home_dir().data(), static_cast<int>(this->_internal_home_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.InitializeRequest.DeviceOptions.home_dir");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_home_dir(), target);
  }

  // string support_dir = 3 [json_name = "supportDir"];
  if (!this->_internal_support_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_support_dir().data(), static_cast<int>(this->_internal_support_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.InitializeRequest.DeviceOptions.support_dir");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_support_dir(), target);
  }

  // string temp_dir = 4 [json_name = "tempDir"];
  if (!this->_internal_temp_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_temp_dir().data(), static_cast<int>(this->_internal_temp_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.InitializeRequest.DeviceOptions.temp_dir");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_temp_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.InitializeRequest.DeviceOptions)
  return target;
}

size_t InitializeRequest_DeviceOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.InitializeRequest.DeviceOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string home_dir = 2 [json_name = "homeDir"];
  if (!this->_internal_home_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home_dir());
  }

  // string support_dir = 3 [json_name = "supportDir"];
  if (!this->_internal_support_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_support_dir());
  }

  // string temp_dir = 4 [json_name = "tempDir"];
  if (!this->_internal_temp_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_temp_dir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeRequest_DeviceOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitializeRequest_DeviceOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeRequest_DeviceOptions::GetClassData() const { return &_class_data_; }

void InitializeRequest_DeviceOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitializeRequest_DeviceOptions *>(to)->MergeFrom(
      static_cast<const InitializeRequest_DeviceOptions &>(from));
}


void InitializeRequest_DeviceOptions::MergeFrom(const InitializeRequest_DeviceOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.InitializeRequest.DeviceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_home_dir().empty()) {
    _internal_set_home_dir(from._internal_home_dir());
  }
  if (!from._internal_support_dir().empty()) {
    _internal_set_support_dir(from._internal_support_dir());
  }
  if (!from._internal_temp_dir().empty()) {
    _internal_set_temp_dir(from._internal_temp_dir());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeRequest_DeviceOptions::CopyFrom(const InitializeRequest_DeviceOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.InitializeRequest.DeviceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeRequest_DeviceOptions::IsInitialized() const {
  return true;
}

void InitializeRequest_DeviceOptions::InternalSwap(InitializeRequest_DeviceOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &home_dir_, lhs_arena,
      &other->home_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &support_dir_, lhs_arena,
      &other->support_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &temp_dir_, lhs_arena,
      &other->temp_dir_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeRequest_DeviceOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[1]);
}

// ===================================================================

class InitializeRequest_HostOptions::_Internal {
 public:
};

InitializeRequest_HostOptions::InitializeRequest_HostOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  listen_addrs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.InitializeRequest.HostOptions)
}
InitializeRequest_HostOptions::InitializeRequest_HostOptions(const InitializeRequest_HostOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      listen_addrs_(from.listen_addrs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quic_transport_, &from.quic_transport_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipv4_only_) -
    reinterpret_cast<char*>(&quic_transport_)) + sizeof(ipv4_only_));
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.InitializeRequest.HostOptions)
}

inline void InitializeRequest_HostOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quic_transport_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ipv4_only_) -
    reinterpret_cast<char*>(&quic_transport_)) + sizeof(ipv4_only_));
}

InitializeRequest_HostOptions::~InitializeRequest_HostOptions() {
  // @@protoc_insertion_point(destructor:node.motor.v1.InitializeRequest.HostOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitializeRequest_HostOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitializeRequest_HostOptions::ArenaDtor(void* object) {
  InitializeRequest_HostOptions* _this = reinterpret_cast< InitializeRequest_HostOptions* >(object);
  (void)_this;
}
void InitializeRequest_HostOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitializeRequest_HostOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitializeRequest_HostOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.InitializeRequest.HostOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listen_addrs_.Clear();
  ::memset(&quic_transport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4_only_) -
      reinterpret_cast<char*>(&quic_transport_)) + sizeof(ipv4_only_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeRequest_HostOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool quic_transport = 1 [json_name = "quicTransport"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          quic_transport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool http_transport = 2 [json_name = "httpTransport"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          http_transport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ipv4_only = 3 [json_name = "ipv4Only"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ipv4_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .node.motor.v1.InitializeRequest.IPAddress listen_addrs = 4 [json_name = "listenAddrs"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_listen_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeRequest_HostOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.InitializeRequest.HostOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool quic_transport = 1 [json_name = "quicTransport"];
  if (this->_internal_quic_transport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_quic_transport(), target);
  }

  // bool http_transport = 2 [json_name = "httpTransport"];
  if (this->_internal_http_transport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_http_transport(), target);
  }

  // bool ipv4_only = 3 [json_name = "ipv4Only"];
  if (this->_internal_ipv4_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ipv4_only(), target);
  }

  // repeated .node.motor.v1.InitializeRequest.IPAddress listen_addrs = 4 [json_name = "listenAddrs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_listen_addrs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_listen_addrs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.InitializeRequest.HostOptions)
  return target;
}

size_t InitializeRequest_HostOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.InitializeRequest.HostOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .node.motor.v1.InitializeRequest.IPAddress listen_addrs = 4 [json_name = "listenAddrs"];
  total_size += 1UL * this->_internal_listen_addrs_size();
  for (const auto& msg : this->listen_addrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool quic_transport = 1 [json_name = "quicTransport"];
  if (this->_internal_quic_transport() != 0) {
    total_size += 1 + 1;
  }

  // bool http_transport = 2 [json_name = "httpTransport"];
  if (this->_internal_http_transport() != 0) {
    total_size += 1 + 1;
  }

  // bool ipv4_only = 3 [json_name = "ipv4Only"];
  if (this->_internal_ipv4_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeRequest_HostOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitializeRequest_HostOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeRequest_HostOptions::GetClassData() const { return &_class_data_; }

void InitializeRequest_HostOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitializeRequest_HostOptions *>(to)->MergeFrom(
      static_cast<const InitializeRequest_HostOptions &>(from));
}


void InitializeRequest_HostOptions::MergeFrom(const InitializeRequest_HostOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.InitializeRequest.HostOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  listen_addrs_.MergeFrom(from.listen_addrs_);
  if (from._internal_quic_transport() != 0) {
    _internal_set_quic_transport(from._internal_quic_transport());
  }
  if (from._internal_http_transport() != 0) {
    _internal_set_http_transport(from._internal_http_transport());
  }
  if (from._internal_ipv4_only() != 0) {
    _internal_set_ipv4_only(from._internal_ipv4_only());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeRequest_HostOptions::CopyFrom(const InitializeRequest_HostOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.InitializeRequest.HostOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeRequest_HostOptions::IsInitialized() const {
  return true;
}

void InitializeRequest_HostOptions::InternalSwap(InitializeRequest_HostOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  listen_addrs_.InternalSwap(&other->listen_addrs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitializeRequest_HostOptions, ipv4_only_)
      + sizeof(InitializeRequest_HostOptions::ipv4_only_)
      - PROTOBUF_FIELD_OFFSET(InitializeRequest_HostOptions, quic_transport_)>(
          reinterpret_cast<char*>(&quic_transport_),
          reinterpret_cast<char*>(&other->quic_transport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeRequest_HostOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[2]);
}

// ===================================================================

class InitializeRequest_ServiceOptions::_Internal {
 public:
};

InitializeRequest_ServiceOptions::InitializeRequest_ServiceOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.InitializeRequest.ServiceOptions)
}
InitializeRequest_ServiceOptions::InitializeRequest_ServiceOptions(const InitializeRequest_ServiceOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&textile_, &from.textile_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&textile_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.InitializeRequest.ServiceOptions)
}

inline void InitializeRequest_ServiceOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&textile_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&textile_)) + sizeof(interval_));
}

InitializeRequest_ServiceOptions::~InitializeRequest_ServiceOptions() {
  // @@protoc_insertion_point(destructor:node.motor.v1.InitializeRequest.ServiceOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitializeRequest_ServiceOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitializeRequest_ServiceOptions::ArenaDtor(void* object) {
  InitializeRequest_ServiceOptions* _this = reinterpret_cast< InitializeRequest_ServiceOptions* >(object);
  (void)_this;
}
void InitializeRequest_ServiceOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitializeRequest_ServiceOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitializeRequest_ServiceOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.InitializeRequest.ServiceOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&textile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&textile_)) + sizeof(interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeRequest_ServiceOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool textile = 1 [json_name = "textile"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          textile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool mailbox = 2 [json_name = "mailbox"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          mailbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool buckets = 3 [json_name = "buckets"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 interval = 4 [json_name = "interval"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeRequest_ServiceOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.InitializeRequest.ServiceOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool textile = 1 [json_name = "textile"];
  if (this->_internal_textile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_textile(), target);
  }

  // bool mailbox = 2 [json_name = "mailbox"];
  if (this->_internal_mailbox() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mailbox(), target);
  }

  // bool buckets = 3 [json_name = "buckets"];
  if (this->_internal_buckets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_buckets(), target);
  }

  // int32 interval = 4 [json_name = "interval"];
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.InitializeRequest.ServiceOptions)
  return target;
}

size_t InitializeRequest_ServiceOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.InitializeRequest.ServiceOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool textile = 1 [json_name = "textile"];
  if (this->_internal_textile() != 0) {
    total_size += 1 + 1;
  }

  // bool mailbox = 2 [json_name = "mailbox"];
  if (this->_internal_mailbox() != 0) {
    total_size += 1 + 1;
  }

  // bool buckets = 3 [json_name = "buckets"];
  if (this->_internal_buckets() != 0) {
    total_size += 1 + 1;
  }

  // int32 interval = 4 [json_name = "interval"];
  if (this->_internal_interval() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeRequest_ServiceOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitializeRequest_ServiceOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeRequest_ServiceOptions::GetClassData() const { return &_class_data_; }

void InitializeRequest_ServiceOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitializeRequest_ServiceOptions *>(to)->MergeFrom(
      static_cast<const InitializeRequest_ServiceOptions &>(from));
}


void InitializeRequest_ServiceOptions::MergeFrom(const InitializeRequest_ServiceOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.InitializeRequest.ServiceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_textile() != 0) {
    _internal_set_textile(from._internal_textile());
  }
  if (from._internal_mailbox() != 0) {
    _internal_set_mailbox(from._internal_mailbox());
  }
  if (from._internal_buckets() != 0) {
    _internal_set_buckets(from._internal_buckets());
  }
  if (from._internal_interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeRequest_ServiceOptions::CopyFrom(const InitializeRequest_ServiceOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.InitializeRequest.ServiceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeRequest_ServiceOptions::IsInitialized() const {
  return true;
}

void InitializeRequest_ServiceOptions::InternalSwap(InitializeRequest_ServiceOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitializeRequest_ServiceOptions, interval_)
      + sizeof(InitializeRequest_ServiceOptions::interval_)
      - PROTOBUF_FIELD_OFFSET(InitializeRequest_ServiceOptions, textile_)>(
          reinterpret_cast<char*>(&textile_),
          reinterpret_cast<char*>(&other->textile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeRequest_ServiceOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[3]);
}

// ===================================================================

class InitializeRequest_IPAddress::_Internal {
 public:
};

InitializeRequest_IPAddress::InitializeRequest_IPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.InitializeRequest.IPAddress)
}
InitializeRequest_IPAddress::InitializeRequest_IPAddress(const InitializeRequest_IPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&internal_, &from.internal_,
    static_cast<size_t>(reinterpret_cast<char*>(&family_) -
    reinterpret_cast<char*>(&internal_)) + sizeof(family_));
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.InitializeRequest.IPAddress)
}

inline void InitializeRequest_IPAddress::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&internal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&family_) -
    reinterpret_cast<char*>(&internal_)) + sizeof(family_));
}

InitializeRequest_IPAddress::~InitializeRequest_IPAddress() {
  // @@protoc_insertion_point(destructor:node.motor.v1.InitializeRequest.IPAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitializeRequest_IPAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitializeRequest_IPAddress::ArenaDtor(void* object) {
  InitializeRequest_IPAddress* _this = reinterpret_cast< InitializeRequest_IPAddress* >(object);
  (void)_this;
}
void InitializeRequest_IPAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitializeRequest_IPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitializeRequest_IPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.InitializeRequest.IPAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  address_.ClearToEmpty();
  ::memset(&internal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&internal_)) + sizeof(family_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeRequest_IPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.InitializeRequest.IPAddress.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.InitializeRequest.IPAddress.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool internal = 3 [json_name = "internal"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          internal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .node.motor.v1.InitializeRequest.IPAddress.Family family = 4 [json_name = "family"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_family(static_cast<::node::motor::v1::InitializeRequest_IPAddress_Family>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeRequest_IPAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.InitializeRequest.IPAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.InitializeRequest.IPAddress.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.InitializeRequest.IPAddress.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // bool internal = 3 [json_name = "internal"];
  if (this->_internal_internal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_internal(), target);
  }

  // .node.motor.v1.InitializeRequest.IPAddress.Family family = 4 [json_name = "family"];
  if (this->_internal_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_family(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.InitializeRequest.IPAddress)
  return target;
}

size_t InitializeRequest_IPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.InitializeRequest.IPAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool internal = 3 [json_name = "internal"];
  if (this->_internal_internal() != 0) {
    total_size += 1 + 1;
  }

  // .node.motor.v1.InitializeRequest.IPAddress.Family family = 4 [json_name = "family"];
  if (this->_internal_family() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_family());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeRequest_IPAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitializeRequest_IPAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeRequest_IPAddress::GetClassData() const { return &_class_data_; }

void InitializeRequest_IPAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitializeRequest_IPAddress *>(to)->MergeFrom(
      static_cast<const InitializeRequest_IPAddress &>(from));
}


void InitializeRequest_IPAddress::MergeFrom(const InitializeRequest_IPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.InitializeRequest.IPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_internal() != 0) {
    _internal_set_internal(from._internal_internal());
  }
  if (from._internal_family() != 0) {
    _internal_set_family(from._internal_family());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeRequest_IPAddress::CopyFrom(const InitializeRequest_IPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.InitializeRequest.IPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeRequest_IPAddress::IsInitialized() const {
  return true;
}

void InitializeRequest_IPAddress::InternalSwap(InitializeRequest_IPAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitializeRequest_IPAddress, family_)
      + sizeof(InitializeRequest_IPAddress::family_)
      - PROTOBUF_FIELD_OFFSET(InitializeRequest_IPAddress, internal_)>(
          reinterpret_cast<char*>(&internal_),
          reinterpret_cast<char*>(&other->internal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeRequest_IPAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[4]);
}

// ===================================================================

class InitializeRequest::_Internal {
 public:
  static const ::common::v1::Location& location(const InitializeRequest* msg);
  static const ::common::v1::Profile& profile(const InitializeRequest* msg);
  static const ::node::motor::v1::InitializeRequest_HostOptions& host_options(const InitializeRequest* msg);
  static const ::node::motor::v1::InitializeRequest_ServiceOptions& service_options(const InitializeRequest* msg);
  static const ::node::motor::v1::InitializeRequest_DeviceOptions& device_options(const InitializeRequest* msg);
};

const ::common::v1::Location&
InitializeRequest::_Internal::location(const InitializeRequest* msg) {
  return *msg->location_;
}
const ::common::v1::Profile&
InitializeRequest::_Internal::profile(const InitializeRequest* msg) {
  return *msg->profile_;
}
const ::node::motor::v1::InitializeRequest_HostOptions&
InitializeRequest::_Internal::host_options(const InitializeRequest* msg) {
  return *msg->host_options_;
}
const ::node::motor::v1::InitializeRequest_ServiceOptions&
InitializeRequest::_Internal::service_options(const InitializeRequest* msg) {
  return *msg->service_options_;
}
const ::node::motor::v1::InitializeRequest_DeviceOptions&
InitializeRequest::_Internal::device_options(const InitializeRequest* msg) {
  return *msg->device_options_;
}
void InitializeRequest::clear_location() {
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
void InitializeRequest::clear_profile() {
  if (GetArenaForAllocation() == nullptr && profile_ != nullptr) {
    delete profile_;
  }
  profile_ = nullptr;
}
InitializeRequest::InitializeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  variables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.InitializeRequest)
}
InitializeRequest::InitializeRequest(const InitializeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  variables_.MergeFrom(from.variables_);
  wallet_passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    wallet_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wallet_passphrase().empty()) {
    wallet_passphrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wallet_passphrase(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    location_ = new ::common::v1::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_profile()) {
    profile_ = new ::common::v1::Profile(*from.profile_);
  } else {
    profile_ = nullptr;
  }
  if (from._internal_has_host_options()) {
    host_options_ = new ::node::motor::v1::InitializeRequest_HostOptions(*from.host_options_);
  } else {
    host_options_ = nullptr;
  }
  if (from._internal_has_service_options()) {
    service_options_ = new ::node::motor::v1::InitializeRequest_ServiceOptions(*from.service_options_);
  } else {
    service_options_ = nullptr;
  }
  if (from._internal_has_device_options()) {
    device_options_ = new ::node::motor::v1::InitializeRequest_DeviceOptions(*from.device_options_);
  } else {
    device_options_ = nullptr;
  }
  ::memcpy(&connection_, &from.connection_,
    static_cast<size_t>(reinterpret_cast<char*>(&environment_) -
    reinterpret_cast<char*>(&connection_)) + sizeof(environment_));
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.InitializeRequest)
}

inline void InitializeRequest::SharedCtor() {
wallet_passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  wallet_passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&environment_) -
    reinterpret_cast<char*>(&location_)) + sizeof(environment_));
}

InitializeRequest::~InitializeRequest() {
  // @@protoc_insertion_point(destructor:node.motor.v1.InitializeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitializeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  wallet_passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete profile_;
  if (this != internal_default_instance()) delete host_options_;
  if (this != internal_default_instance()) delete service_options_;
  if (this != internal_default_instance()) delete device_options_;
}

void InitializeRequest::ArenaDtor(void* object) {
  InitializeRequest* _this = reinterpret_cast< InitializeRequest* >(object);
  (void)_this;
  _this->variables_. ~MapField();
}
inline void InitializeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &InitializeRequest::ArenaDtor);
  }
}
void InitializeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitializeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.InitializeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  wallet_passphrase_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && profile_ != nullptr) {
    delete profile_;
  }
  profile_ = nullptr;
  if (GetArenaForAllocation() == nullptr && host_options_ != nullptr) {
    delete host_options_;
  }
  host_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && service_options_ != nullptr) {
    delete service_options_;
  }
  service_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && device_options_ != nullptr) {
    delete device_options_;
  }
  device_options_ = nullptr;
  ::memset(&connection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&environment_) -
      reinterpret_cast<char*>(&connection_)) + sizeof(environment_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Location location = 1 [json_name = "location"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Profile profile = 2 [json_name = "profile"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Connection connection = 3 [json_name = "connection"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connection(static_cast<::common::v1::Connection>(val));
        } else
          goto handle_unusual;
        continue;
      // .node.motor.v1.InitializeRequest.HostOptions host_options = 4 [json_name = "hostOptions"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .node.motor.v1.InitializeRequest.ServiceOptions service_options = 5 [json_name = "serviceOptions"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .node.motor.v1.InitializeRequest.DeviceOptions device_options = 6 [json_name = "deviceOptions"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Environment environment = 7 [json_name = "environment"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_environment(static_cast<::common::v1::Environment>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> variables = 8 [json_name = "variables"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string wallet_passphrase = 9 [json_name = "walletPassphrase"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_wallet_passphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.InitializeRequest.wallet_passphrase"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.InitializeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Location location = 1 [json_name = "location"];
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // .common.v1.Profile profile = 2 [json_name = "profile"];
  if (this->_internal_has_profile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::profile(this), target, stream);
  }

  // .common.v1.Connection connection = 3 [json_name = "connection"];
  if (this->_internal_connection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_connection(), target);
  }

  // .node.motor.v1.InitializeRequest.HostOptions host_options = 4 [json_name = "hostOptions"];
  if (this->_internal_has_host_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::host_options(this), target, stream);
  }

  // .node.motor.v1.InitializeRequest.ServiceOptions service_options = 5 [json_name = "serviceOptions"];
  if (this->_internal_has_service_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::service_options(this), target, stream);
  }

  // .node.motor.v1.InitializeRequest.DeviceOptions device_options = 6 [json_name = "deviceOptions"];
  if (this->_internal_has_device_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::device_options(this), target, stream);
  }

  // .common.v1.Environment environment = 7 [json_name = "environment"];
  if (this->_internal_environment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_environment(), target);
  }

  // map<string, string> variables = 8 [json_name = "variables"];
  if (!this->_internal_variables().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.motor.v1.InitializeRequest.VariablesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "node.motor.v1.InitializeRequest.VariablesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_variables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_variables().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_variables().begin();
          it != this->_internal_variables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InitializeRequest_VariablesEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_variables().begin();
          it != this->_internal_variables().end(); ++it) {
        target = InitializeRequest_VariablesEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string wallet_passphrase = 9 [json_name = "walletPassphrase"];
  if (!this->_internal_wallet_passphrase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wallet_passphrase().data(), static_cast<int>(this->_internal_wallet_passphrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.InitializeRequest.wallet_passphrase");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_wallet_passphrase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.InitializeRequest)
  return target;
}

size_t InitializeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.InitializeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> variables = 8 [json_name = "variables"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_variables().begin();
      it != this->_internal_variables().end(); ++it) {
    total_size += InitializeRequest_VariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string wallet_passphrase = 9 [json_name = "walletPassphrase"];
  if (!this->_internal_wallet_passphrase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wallet_passphrase());
  }

  // .common.v1.Location location = 1 [json_name = "location"];
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .common.v1.Profile profile = 2 [json_name = "profile"];
  if (this->_internal_has_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profile_);
  }

  // .node.motor.v1.InitializeRequest.HostOptions host_options = 4 [json_name = "hostOptions"];
  if (this->_internal_has_host_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_options_);
  }

  // .node.motor.v1.InitializeRequest.ServiceOptions service_options = 5 [json_name = "serviceOptions"];
  if (this->_internal_has_service_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_options_);
  }

  // .node.motor.v1.InitializeRequest.DeviceOptions device_options = 6 [json_name = "deviceOptions"];
  if (this->_internal_has_device_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_options_);
  }

  // .common.v1.Connection connection = 3 [json_name = "connection"];
  if (this->_internal_connection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connection());
  }

  // .common.v1.Environment environment = 7 [json_name = "environment"];
  if (this->_internal_environment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_environment());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitializeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeRequest::GetClassData() const { return &_class_data_; }

void InitializeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitializeRequest *>(to)->MergeFrom(
      static_cast<const InitializeRequest &>(from));
}


void InitializeRequest::MergeFrom(const InitializeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.InitializeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
  if (!from._internal_wallet_passphrase().empty()) {
    _internal_set_wallet_passphrase(from._internal_wallet_passphrase());
  }
  if (from._internal_has_location()) {
    _internal_mutable_location()->::common::v1::Location::MergeFrom(from._internal_location());
  }
  if (from._internal_has_profile()) {
    _internal_mutable_profile()->::common::v1::Profile::MergeFrom(from._internal_profile());
  }
  if (from._internal_has_host_options()) {
    _internal_mutable_host_options()->::node::motor::v1::InitializeRequest_HostOptions::MergeFrom(from._internal_host_options());
  }
  if (from._internal_has_service_options()) {
    _internal_mutable_service_options()->::node::motor::v1::InitializeRequest_ServiceOptions::MergeFrom(from._internal_service_options());
  }
  if (from._internal_has_device_options()) {
    _internal_mutable_device_options()->::node::motor::v1::InitializeRequest_DeviceOptions::MergeFrom(from._internal_device_options());
  }
  if (from._internal_connection() != 0) {
    _internal_set_connection(from._internal_connection());
  }
  if (from._internal_environment() != 0) {
    _internal_set_environment(from._internal_environment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeRequest::CopyFrom(const InitializeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.InitializeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeRequest::IsInitialized() const {
  return true;
}

void InitializeRequest::InternalSwap(InitializeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  variables_.InternalSwap(&other->variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &wallet_passphrase_, lhs_arena,
      &other->wallet_passphrase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitializeRequest, environment_)
      + sizeof(InitializeRequest::environment_)
      - PROTOBUF_FIELD_OFFSET(InitializeRequest, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[5]);
}

// ===================================================================

class ShareRequest::_Internal {
 public:
  static const ::common::v1::Peer& peer(const ShareRequest* msg);
  static const ::common::v1::MessageItem& message(const ShareRequest* msg);
};

const ::common::v1::Peer&
ShareRequest::_Internal::peer(const ShareRequest* msg) {
  return *msg->peer_;
}
const ::common::v1::MessageItem&
ShareRequest::_Internal::message(const ShareRequest* msg) {
  return *msg->message_;
}
void ShareRequest::clear_peer() {
  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
void ShareRequest::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
void ShareRequest::clear_items() {
  items_.Clear();
}
ShareRequest::ShareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.ShareRequest)
}
ShareRequest::ShareRequest(const ShareRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::common::v1::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::common::v1::MessageItem(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.ShareRequest)
}

inline void ShareRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
    reinterpret_cast<char*>(&peer_)) + sizeof(message_));
}

ShareRequest::~ShareRequest() {
  // @@protoc_insertion_point(destructor:node.motor.v1.ShareRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShareRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete peer_;
  if (this != internal_default_instance()) delete message_;
}

void ShareRequest::ArenaDtor(void* object) {
  ShareRequest* _this = reinterpret_cast< ShareRequest* >(object);
  (void)_this;
}
void ShareRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.ShareRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShareRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.v1.Peer peer = 1 [json_name = "peer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.MessageItem message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .common.v1.SupplyItem items = 3 [json_name = "items"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShareRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.ShareRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.Peer peer = 1 [json_name = "peer"];
  if (this->_internal_has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  // .common.v1.MessageItem message = 2 [json_name = "message"];
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  // repeated .common.v1.SupplyItem items = 3 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.ShareRequest)
  return target;
}

size_t ShareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.ShareRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.v1.SupplyItem items = 3 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .common.v1.Peer peer = 1 [json_name = "peer"];
  if (this->_internal_has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .common.v1.MessageItem message = 2 [json_name = "message"];
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShareRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShareRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShareRequest::GetClassData() const { return &_class_data_; }

void ShareRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShareRequest *>(to)->MergeFrom(
      static_cast<const ShareRequest &>(from));
}


void ShareRequest::MergeFrom(const ShareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.ShareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_peer()) {
    _internal_mutable_peer()->::common::v1::Peer::MergeFrom(from._internal_peer());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::common::v1::MessageItem::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShareRequest::CopyFrom(const ShareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.ShareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareRequest::IsInitialized() const {
  return true;
}

void ShareRequest::InternalSwap(ShareRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShareRequest, message_)
      + sizeof(ShareRequest::message_)
      - PROTOBUF_FIELD_OFFSET(ShareRequest, peer_)>(
          reinterpret_cast<char*>(&peer_),
          reinterpret_cast<char*>(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShareRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[6]);
}

// ===================================================================

class DecideRequest::_Internal {
 public:
  static const ::common::v1::Peer& peer(const DecideRequest* msg);
};

const ::common::v1::Peer&
DecideRequest::_Internal::peer(const DecideRequest* msg) {
  return *msg->peer_;
}
void DecideRequest::clear_peer() {
  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
DecideRequest::DecideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.DecideRequest)
}
DecideRequest::DecideRequest(const DecideRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::common::v1::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  decision_ = from.decision_;
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.DecideRequest)
}

inline void DecideRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decision_) -
    reinterpret_cast<char*>(&peer_)) + sizeof(decision_));
}

DecideRequest::~DecideRequest() {
  // @@protoc_insertion_point(destructor:node.motor.v1.DecideRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DecideRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete peer_;
}

void DecideRequest::ArenaDtor(void* object) {
  DecideRequest* _this = reinterpret_cast< DecideRequest* >(object);
  (void)_this;
}
void DecideRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecideRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecideRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.DecideRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  decision_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecideRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool decision = 1 [json_name = "decision"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          decision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.v1.Peer peer = 2 [json_name = "peer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DecideRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.DecideRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool decision = 1 [json_name = "decision"];
  if (this->_internal_decision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_decision(), target);
  }

  // .common.v1.Peer peer = 2 [json_name = "peer"];
  if (this->_internal_has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::peer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.DecideRequest)
  return target;
}

size_t DecideRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.DecideRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.v1.Peer peer = 2 [json_name = "peer"];
  if (this->_internal_has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // bool decision = 1 [json_name = "decision"];
  if (this->_internal_decision() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecideRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecideRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecideRequest::GetClassData() const { return &_class_data_; }

void DecideRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DecideRequest *>(to)->MergeFrom(
      static_cast<const DecideRequest &>(from));
}


void DecideRequest::MergeFrom(const DecideRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.DecideRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer()) {
    _internal_mutable_peer()->::common::v1::Peer::MergeFrom(from._internal_peer());
  }
  if (from._internal_decision() != 0) {
    _internal_set_decision(from._internal_decision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecideRequest::CopyFrom(const DecideRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.DecideRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecideRequest::IsInitialized() const {
  return true;
}

void DecideRequest::InternalSwap(DecideRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecideRequest, decision_)
      + sizeof(DecideRequest::decision_)
      - PROTOBUF_FIELD_OFFSET(DecideRequest, peer_)>(
          reinterpret_cast<char*>(&peer_),
          reinterpret_cast<char*>(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecideRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[7]);
}

// ===================================================================

class SearchRequest::_Internal {
 public:
};

SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_query();
  switch (from.query_case()) {
    case kSName: {
      _internal_set_s_name(from._internal_s_name());
      break;
    }
    case kPeerId: {
      _internal_set_peer_id(from._internal_peer_id());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.SearchRequest)
}

inline void SearchRequest::SharedCtor() {
clear_has_query();
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:node.motor.v1.SearchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_query()) {
    clear_query();
  }
}

void SearchRequest::ArenaDtor(void* object) {
  SearchRequest* _this = reinterpret_cast< SearchRequest* >(object);
  (void)_this;
}
void SearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SearchRequest::clear_query() {
// @@protoc_insertion_point(one_of_clear_start:node.motor.v1.SearchRequest)
  switch (query_case()) {
    case kSName: {
      query_.s_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kPeerId: {
      query_.peer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_NOT_SET;
}


void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:node.motor.v1.SearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_query();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s_name = 1 [json_name = "sName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.SearchRequest.s_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string peer_id = 2 [json_name = "peerId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_peer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "node.motor.v1.SearchRequest.peer_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:node.motor.v1.SearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s_name = 1 [json_name = "sName"];
  if (_internal_has_s_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_name().data(), static_cast<int>(this->_internal_s_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.SearchRequest.s_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s_name(), target);
  }

  // string peer_id = 2 [json_name = "peerId"];
  if (_internal_has_peer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_id().data(), static_cast<int>(this->_internal_peer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "node.motor.v1.SearchRequest.peer_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:node.motor.v1.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:node.motor.v1.SearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (query_case()) {
    // string s_name = 1 [json_name = "sName"];
    case kSName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s_name());
      break;
    }
    // string peer_id = 2 [json_name = "peerId"];
    case kPeerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_peer_id());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRequest::GetClassData() const { return &_class_data_; }

void SearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SearchRequest *>(to)->MergeFrom(
      static_cast<const SearchRequest &>(from));
}


void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:node.motor.v1.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.query_case()) {
    case kSName: {
      _internal_set_s_name(from._internal_s_name());
      break;
    }
    case kPeerId: {
      _internal_set_peer_id(from._internal_peer_id());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:node.motor.v1.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(query_, other->query_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[8]);
}

// ===================================================================

class OnLobbyRefreshRequest::_Internal {
 public:
};

OnLobbyRefreshRequest::OnLobbyRefreshRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnLobbyRefreshRequest)
}
OnLobbyRefreshRequest::OnLobbyRefreshRequest(const OnLobbyRefreshRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnLobbyRefreshRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnLobbyRefreshRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnLobbyRefreshRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnLobbyRefreshRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[9]);
}

// ===================================================================

class OnMailboxMessageRequest::_Internal {
 public:
};

OnMailboxMessageRequest::OnMailboxMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnMailboxMessageRequest)
}
OnMailboxMessageRequest::OnMailboxMessageRequest(const OnMailboxMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnMailboxMessageRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnMailboxMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnMailboxMessageRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnMailboxMessageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[10]);
}

// ===================================================================

class OnTransmitDecisionRequest::_Internal {
 public:
};

OnTransmitDecisionRequest::OnTransmitDecisionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnTransmitDecisionRequest)
}
OnTransmitDecisionRequest::OnTransmitDecisionRequest(const OnTransmitDecisionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnTransmitDecisionRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnTransmitDecisionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnTransmitDecisionRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnTransmitDecisionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[11]);
}

// ===================================================================

class OnTransmitInviteRequest::_Internal {
 public:
};

OnTransmitInviteRequest::OnTransmitInviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnTransmitInviteRequest)
}
OnTransmitInviteRequest::OnTransmitInviteRequest(const OnTransmitInviteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnTransmitInviteRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnTransmitInviteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnTransmitInviteRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnTransmitInviteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[12]);
}

// ===================================================================

class OnTransmitProgressRequest::_Internal {
 public:
};

OnTransmitProgressRequest::OnTransmitProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnTransmitProgressRequest)
}
OnTransmitProgressRequest::OnTransmitProgressRequest(const OnTransmitProgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnTransmitProgressRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnTransmitProgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnTransmitProgressRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnTransmitProgressRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[13]);
}

// ===================================================================

class OnTransmitCompleteRequest::_Internal {
 public:
};

OnTransmitCompleteRequest::OnTransmitCompleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:node.motor.v1.OnTransmitCompleteRequest)
}
OnTransmitCompleteRequest::OnTransmitCompleteRequest(const OnTransmitCompleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:node.motor.v1.OnTransmitCompleteRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnTransmitCompleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnTransmitCompleteRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnTransmitCompleteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_getter, &descriptor_table_node_2fmotor_2fv1_2frequest_2eproto_once,
      file_level_metadata_node_2fmotor_2fv1_2frequest_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace motor
}  // namespace node
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::node::motor::v1::InitializeRequest_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::node::motor::v1::InitializeRequest_VariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::InitializeRequest_VariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::InitializeRequest_DeviceOptions* Arena::CreateMaybeMessage< ::node::motor::v1::InitializeRequest_DeviceOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::InitializeRequest_DeviceOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::InitializeRequest_HostOptions* Arena::CreateMaybeMessage< ::node::motor::v1::InitializeRequest_HostOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::InitializeRequest_HostOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::InitializeRequest_ServiceOptions* Arena::CreateMaybeMessage< ::node::motor::v1::InitializeRequest_ServiceOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::InitializeRequest_ServiceOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::InitializeRequest_IPAddress* Arena::CreateMaybeMessage< ::node::motor::v1::InitializeRequest_IPAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::InitializeRequest_IPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::InitializeRequest* Arena::CreateMaybeMessage< ::node::motor::v1::InitializeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::InitializeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::ShareRequest* Arena::CreateMaybeMessage< ::node::motor::v1::ShareRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::ShareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::DecideRequest* Arena::CreateMaybeMessage< ::node::motor::v1::DecideRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::DecideRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::SearchRequest* Arena::CreateMaybeMessage< ::node::motor::v1::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnLobbyRefreshRequest* Arena::CreateMaybeMessage< ::node::motor::v1::OnLobbyRefreshRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnLobbyRefreshRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnMailboxMessageRequest* Arena::CreateMaybeMessage< ::node::motor::v1::OnMailboxMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnMailboxMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnTransmitDecisionRequest* Arena::CreateMaybeMessage< ::node::motor::v1::OnTransmitDecisionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnTransmitDecisionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnTransmitInviteRequest* Arena::CreateMaybeMessage< ::node::motor::v1::OnTransmitInviteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnTransmitInviteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnTransmitProgressRequest* Arena::CreateMaybeMessage< ::node::motor::v1::OnTransmitProgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnTransmitProgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::node::motor::v1::OnTransmitCompleteRequest* Arena::CreateMaybeMessage< ::node::motor::v1::OnTransmitCompleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::node::motor::v1::OnTransmitCompleteRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
