syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrio.motor.core.v1;

import "core/v1/request.proto";
import "core/v1/response.proto";
option go_package = "github.com/sonr-io/sonr/pkg/motor";

// MotorService is a RPC service for interfacing over the Motor node.
service MotorService {

  // Node Methods
  // Respond Method to an Invite with Decision
  rpc Share(core.v1.ShareRequest) returns (core.v1.ShareResponse) {}

  // Respond Method to an Invite with Decision
  rpc Decide(core.v1.DecideRequest) returns (core.v1.DecideResponse) {}

  // Search Method to find a Peer by SName or PeerID
  rpc Search(core.v1.SearchRequest) returns (core.v1.SearchResponse) {}

  // Events Streams
  // Returns a stream of Lobby Refresh Events
  rpc OnLobbyRefresh(core.v1.OnLobbyRefreshRequest) returns (stream core.v1.OnLobbyRefreshResponse) {}

  // Returns a stream of Mailbox Message Events
  rpc OnMailboxMessage(core.v1.OnMailboxMessageRequest) returns (stream core.v1.OnMailboxMessageResponse) {}

  // Returns a stream of DecisionEvent's for Accepted Invites
  rpc OnTransmitDecision(core.v1.OnTransmitDecisionRequest) returns (stream core.v1.OnTransmitDecisionResponse) {}

  // Returns a stream of DecisionEvent's for Invites
  rpc OnTransmitInvite(core.v1.OnTransmitInviteRequest) returns (stream core.v1.OnTransmitInviteResponse) {}

  // Returns a stream of ProgressEvent's for Sessions
  rpc OnTransmitProgress(core.v1.OnTransmitProgressRequest) returns (stream core.v1.OnTransmitProgressResponse) {}

  // Returns a stream of Completed Transfers
  rpc OnTransmitComplete(core.v1.OnTransmitCompleteRequest) returns (stream core.v1.OnTransmitCompleteResponse) {}
}
