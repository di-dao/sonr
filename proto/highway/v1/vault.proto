syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrhq.highway.v1;

import "core/identity/did.proto";
import "google/api/annotations.proto";
import "sonr/common/info.proto";

option go_package = "github.com/sonrhq/core/types/highway/v1;highwayv1";

// AddShareRequest is the request to add a new key to the wallet ipfs store.
message AddShareRequest {
  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 1;

  // The user defined label for the device.
  string username = 2;

  // The security threshold for the wallet account.
  string key = 3;

  // The Unique Identifier for the client device. Typically in a cookie.
  string value = 4;
}

// AddShareResponse is the response to a AddShare request.
message AddShareResponse {
  bool success = 1;
  string key = 2;
}

// SyncShareRequest is the request to sync a key to the wallet ipfs store.
message SyncShareRequest {
  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 1;

  // The user defined label for the device.
  string username = 2;

  // The security threshold for the wallet account.
  string key = 3;

  // The signed credential response from the user.
  string credential_response = 4;
}

// RegisterFinishResponse is the response to a CreateAccount request.
message SyncShareResponse {
  // Success is true if the account exists.
  bool success = 1;

  // The key for the item.
  string key = 2;

  // The value for the item.
  string value = 3;
}

// LoginStartRequest is the request to login to an account.
message RefreshShareRequest {
  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 1;

  // The Sonr account address for the user.
  string account_address = 2;
}

// LoginStartResponse is the response to a Login request.
message RefreshShareResponse {
  // Success is true if the account exists.
  bool success = 1;

  // The account address for the user.
  string account_address = 2;

  // Json encoded WebAuthn credential options for the user to sign with.
  string credential_options = 3;

  // Relaying party id for the request.
  string rp_id = 4;

  // Relaying party name for the request.
  string rp_name = 5;
}


// ==================================================================
// GRPC/REST SERVICE
// ==================================================================

// Vault is the service used for managing a node's keypair.
service Vault {
  // Add Share to Vault
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  rpc Add(AddShareRequest) returns (AddShareResponse) {}

  // Sync Client Shares
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  rpc Sync(SyncShareRequest) returns (SyncShareResponse) {}

  // Refresh Shares
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  rpc Refresh(RefreshShareRequest) returns (RefreshShareResponse) {}
}
