// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: core/identity/tx.proto

package identity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_RegisterIdentity_FullMethodName        = "/core.identity.Msg/RegisterIdentity"
	Msg_CreateControllerAccount_FullMethodName = "/core.identity.Msg/CreateControllerAccount"
	Msg_UpdateControllerAccount_FullMethodName = "/core.identity.Msg/UpdateControllerAccount"
	Msg_DeleteControllerAccount_FullMethodName = "/core.identity.Msg/DeleteControllerAccount"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterIdentity registers a new identity.
	RegisterIdentity(ctx context.Context, in *MsgRegisterIdentity, opts ...grpc.CallOption) (*MsgRegisterIdentityResponse, error)
	// CreateControllerAccount creates a new controller account.
	CreateControllerAccount(ctx context.Context, in *MsgCreateControllerAccount, opts ...grpc.CallOption) (*MsgCreateControllerAccountResponse, error)
	// UpdateControllerAccount updates an existing controller account.
	UpdateControllerAccount(ctx context.Context, in *MsgUpdateControllerAccount, opts ...grpc.CallOption) (*MsgUpdateControllerAccountResponse, error)
	// DeleteControllerAccount deletes a controller account.
	DeleteControllerAccount(ctx context.Context, in *MsgDeleteControllerAccount, opts ...grpc.CallOption) (*MsgDeleteControllerAccountResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterIdentity(ctx context.Context, in *MsgRegisterIdentity, opts ...grpc.CallOption) (*MsgRegisterIdentityResponse, error) {
	out := new(MsgRegisterIdentityResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateControllerAccount(ctx context.Context, in *MsgCreateControllerAccount, opts ...grpc.CallOption) (*MsgCreateControllerAccountResponse, error) {
	out := new(MsgCreateControllerAccountResponse)
	err := c.cc.Invoke(ctx, Msg_CreateControllerAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateControllerAccount(ctx context.Context, in *MsgUpdateControllerAccount, opts ...grpc.CallOption) (*MsgUpdateControllerAccountResponse, error) {
	out := new(MsgUpdateControllerAccountResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateControllerAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteControllerAccount(ctx context.Context, in *MsgDeleteControllerAccount, opts ...grpc.CallOption) (*MsgDeleteControllerAccountResponse, error) {
	out := new(MsgDeleteControllerAccountResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteControllerAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// RegisterIdentity registers a new identity.
	RegisterIdentity(context.Context, *MsgRegisterIdentity) (*MsgRegisterIdentityResponse, error)
	// CreateControllerAccount creates a new controller account.
	CreateControllerAccount(context.Context, *MsgCreateControllerAccount) (*MsgCreateControllerAccountResponse, error)
	// UpdateControllerAccount updates an existing controller account.
	UpdateControllerAccount(context.Context, *MsgUpdateControllerAccount) (*MsgUpdateControllerAccountResponse, error)
	// DeleteControllerAccount deletes a controller account.
	DeleteControllerAccount(context.Context, *MsgDeleteControllerAccount) (*MsgDeleteControllerAccountResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) RegisterIdentity(context.Context, *MsgRegisterIdentity) (*MsgRegisterIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterIdentity not implemented")
}
func (UnimplementedMsgServer) CreateControllerAccount(context.Context, *MsgCreateControllerAccount) (*MsgCreateControllerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateControllerAccount not implemented")
}
func (UnimplementedMsgServer) UpdateControllerAccount(context.Context, *MsgUpdateControllerAccount) (*MsgUpdateControllerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateControllerAccount not implemented")
}
func (UnimplementedMsgServer) DeleteControllerAccount(context.Context, *MsgDeleteControllerAccount) (*MsgDeleteControllerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteControllerAccount not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_RegisterIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterIdentity(ctx, req.(*MsgRegisterIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateControllerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateControllerAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateControllerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateControllerAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateControllerAccount(ctx, req.(*MsgCreateControllerAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateControllerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateControllerAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateControllerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateControllerAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateControllerAccount(ctx, req.(*MsgUpdateControllerAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteControllerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteControllerAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteControllerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteControllerAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteControllerAccount(ctx, req.(*MsgDeleteControllerAccount))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.identity.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterIdentity",
			Handler:    _Msg_RegisterIdentity_Handler,
		},
		{
			MethodName: "CreateControllerAccount",
			Handler:    _Msg_CreateControllerAccount_Handler,
		},
		{
			MethodName: "UpdateControllerAccount",
			Handler:    _Msg_UpdateControllerAccount_Handler,
		},
		{
			MethodName: "DeleteControllerAccount",
			Handler:    _Msg_DeleteControllerAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/identity/tx.proto",
}
