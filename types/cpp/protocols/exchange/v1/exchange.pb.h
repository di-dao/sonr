// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols/exchange/v1/exchange.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocols_2fexchange_2fv1_2fexchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocols_2fexchange_2fv1_2fexchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/core.pb.h"
#include "common/v1/data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocols_2fexchange_2fv1_2fexchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocols_2fexchange_2fv1_2fexchange_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocols_2fexchange_2fv1_2fexchange_2eproto;
namespace protocols {
namespace exchange {
namespace v1 {
class InviteRequest;
struct InviteRequestDefaultTypeInternal;
extern InviteRequestDefaultTypeInternal _InviteRequest_default_instance_;
class InviteResponse;
struct InviteResponseDefaultTypeInternal;
extern InviteResponseDefaultTypeInternal _InviteResponse_default_instance_;
class MailboxMessage;
struct MailboxMessageDefaultTypeInternal;
extern MailboxMessageDefaultTypeInternal _MailboxMessage_default_instance_;
}  // namespace v1
}  // namespace exchange
}  // namespace protocols
PROTOBUF_NAMESPACE_OPEN
template<> ::protocols::exchange::v1::InviteRequest* Arena::CreateMaybeMessage<::protocols::exchange::v1::InviteRequest>(Arena*);
template<> ::protocols::exchange::v1::InviteResponse* Arena::CreateMaybeMessage<::protocols::exchange::v1::InviteResponse>(Arena*);
template<> ::protocols::exchange::v1::MailboxMessage* Arena::CreateMaybeMessage<::protocols::exchange::v1::MailboxMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocols {
namespace exchange {
namespace v1 {

// ===================================================================

class MailboxMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.exchange.v1.MailboxMessage) */ {
 public:
  inline MailboxMessage() : MailboxMessage(nullptr) {}
  ~MailboxMessage() override;
  explicit constexpr MailboxMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailboxMessage(const MailboxMessage& from);
  MailboxMessage(MailboxMessage&& from) noexcept
    : MailboxMessage() {
    *this = ::std::move(from);
  }

  inline MailboxMessage& operator=(const MailboxMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailboxMessage& operator=(MailboxMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailboxMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailboxMessage* internal_default_instance() {
    return reinterpret_cast<const MailboxMessage*>(
               &_MailboxMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MailboxMessage& a, MailboxMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MailboxMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailboxMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MailboxMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MailboxMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MailboxMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MailboxMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailboxMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.exchange.v1.MailboxMessage";
  }
  protected:
  explicit MailboxMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPayloadFieldNumber = 2,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kMetadataFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .common.v1.Payload payload = 2 [json_name = "payload"];
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::common::v1::Payload& payload() const;
  PROTOBUF_NODISCARD ::common::v1::Payload* release_payload();
  ::common::v1::Payload* mutable_payload();
  void set_allocated_payload(::common::v1::Payload* payload);
  private:
  const ::common::v1::Payload& _internal_payload() const;
  ::common::v1::Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::common::v1::Payload* payload);
  ::common::v1::Payload* unsafe_arena_release_payload();

  // .common.v1.Profile from = 3 [json_name = "from"];
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::common::v1::Profile& from() const;
  PROTOBUF_NODISCARD ::common::v1::Profile* release_from();
  ::common::v1::Profile* mutable_from();
  void set_allocated_from(::common::v1::Profile* from);
  private:
  const ::common::v1::Profile& _internal_from() const;
  ::common::v1::Profile* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::common::v1::Profile* from);
  ::common::v1::Profile* unsafe_arena_release_from();

  // .common.v1.Profile to = 4 [json_name = "to"];
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::common::v1::Profile& to() const;
  PROTOBUF_NODISCARD ::common::v1::Profile* release_to();
  ::common::v1::Profile* mutable_to();
  void set_allocated_to(::common::v1::Profile* to);
  private:
  const ::common::v1::Profile& _internal_to() const;
  ::common::v1::Profile* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::common::v1::Profile* to);
  ::common::v1::Profile* unsafe_arena_release_to();

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::common::v1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::common::v1::Metadata* release_metadata();
  ::common::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::common::v1::Metadata* metadata);
  private:
  const ::common::v1::Metadata& _internal_metadata() const;
  ::common::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::common::v1::Metadata* metadata);
  ::common::v1::Metadata* unsafe_arena_release_metadata();

  // int64 created_at = 6 [json_name = "createdAt"];
  void clear_created_at();
  int64_t created_at() const;
  void set_created_at(int64_t value);
  private:
  int64_t _internal_created_at() const;
  void _internal_set_created_at(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.exchange.v1.MailboxMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::common::v1::Payload* payload_;
  ::common::v1::Profile* from_;
  ::common::v1::Profile* to_;
  ::common::v1::Metadata* metadata_;
  int64_t created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocols_2fexchange_2fv1_2fexchange_2eproto;
};
// -------------------------------------------------------------------

class InviteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.exchange.v1.InviteRequest) */ {
 public:
  inline InviteRequest() : InviteRequest(nullptr) {}
  ~InviteRequest() override;
  explicit constexpr InviteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InviteRequest(const InviteRequest& from);
  InviteRequest(InviteRequest&& from) noexcept
    : InviteRequest() {
    *this = ::std::move(from);
  }

  inline InviteRequest& operator=(const InviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InviteRequest& operator=(InviteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InviteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InviteRequest* internal_default_instance() {
    return reinterpret_cast<const InviteRequest*>(
               &_InviteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InviteRequest& a, InviteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InviteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InviteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InviteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InviteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InviteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InviteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InviteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.exchange.v1.InviteRequest";
  }
  protected:
  explicit InviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kMetadataFieldNumber = 5,
  };
  // .common.v1.Payload payload = 1 [json_name = "payload"];
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::common::v1::Payload& payload() const;
  PROTOBUF_NODISCARD ::common::v1::Payload* release_payload();
  ::common::v1::Payload* mutable_payload();
  void set_allocated_payload(::common::v1::Payload* payload);
  private:
  const ::common::v1::Payload& _internal_payload() const;
  ::common::v1::Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::common::v1::Payload* payload);
  ::common::v1::Payload* unsafe_arena_release_payload();

  // .common.v1.Peer from = 3 [json_name = "from"];
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::common::v1::Peer& from() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_from();
  ::common::v1::Peer* mutable_from();
  void set_allocated_from(::common::v1::Peer* from);
  private:
  const ::common::v1::Peer& _internal_from() const;
  ::common::v1::Peer* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::common::v1::Peer* from);
  ::common::v1::Peer* unsafe_arena_release_from();

  // .common.v1.Peer to = 4 [json_name = "to"];
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::common::v1::Peer& to() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_to();
  ::common::v1::Peer* mutable_to();
  void set_allocated_to(::common::v1::Peer* to);
  private:
  const ::common::v1::Peer& _internal_to() const;
  ::common::v1::Peer* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::common::v1::Peer* to);
  ::common::v1::Peer* unsafe_arena_release_to();

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::common::v1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::common::v1::Metadata* release_metadata();
  ::common::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::common::v1::Metadata* metadata);
  private:
  const ::common::v1::Metadata& _internal_metadata() const;
  ::common::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::common::v1::Metadata* metadata);
  ::common::v1::Metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:protocols.exchange.v1.InviteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::v1::Payload* payload_;
  ::common::v1::Peer* from_;
  ::common::v1::Peer* to_;
  ::common::v1::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocols_2fexchange_2fv1_2fexchange_2eproto;
};
// -------------------------------------------------------------------

class InviteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.exchange.v1.InviteResponse) */ {
 public:
  inline InviteResponse() : InviteResponse(nullptr) {}
  ~InviteResponse() override;
  explicit constexpr InviteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InviteResponse(const InviteResponse& from);
  InviteResponse(InviteResponse&& from) noexcept
    : InviteResponse() {
    *this = ::std::move(from);
  }

  inline InviteResponse& operator=(const InviteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InviteResponse& operator=(InviteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InviteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InviteResponse* internal_default_instance() {
    return reinterpret_cast<const InviteResponse*>(
               &_InviteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InviteResponse& a, InviteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InviteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InviteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InviteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InviteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InviteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InviteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InviteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.exchange.v1.InviteResponse";
  }
  protected:
  explicit InviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kMetadataFieldNumber = 5,
    kDecisionFieldNumber = 1,
  };
  // .common.v1.Peer from = 3 [json_name = "from"];
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::common::v1::Peer& from() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_from();
  ::common::v1::Peer* mutable_from();
  void set_allocated_from(::common::v1::Peer* from);
  private:
  const ::common::v1::Peer& _internal_from() const;
  ::common::v1::Peer* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::common::v1::Peer* from);
  ::common::v1::Peer* unsafe_arena_release_from();

  // .common.v1.Peer to = 4 [json_name = "to"];
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::common::v1::Peer& to() const;
  PROTOBUF_NODISCARD ::common::v1::Peer* release_to();
  ::common::v1::Peer* mutable_to();
  void set_allocated_to(::common::v1::Peer* to);
  private:
  const ::common::v1::Peer& _internal_to() const;
  ::common::v1::Peer* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::common::v1::Peer* to);
  ::common::v1::Peer* unsafe_arena_release_to();

  // .common.v1.Metadata metadata = 5 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::common::v1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::common::v1::Metadata* release_metadata();
  ::common::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::common::v1::Metadata* metadata);
  private:
  const ::common::v1::Metadata& _internal_metadata() const;
  ::common::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::common::v1::Metadata* metadata);
  ::common::v1::Metadata* unsafe_arena_release_metadata();

  // bool decision = 1 [json_name = "decision"];
  void clear_decision();
  bool decision() const;
  void set_decision(bool value);
  private:
  bool _internal_decision() const;
  void _internal_set_decision(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.exchange.v1.InviteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::v1::Peer* from_;
  ::common::v1::Peer* to_;
  ::common::v1::Metadata* metadata_;
  bool decision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocols_2fexchange_2fv1_2fexchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MailboxMessage

// string id = 1 [json_name = "id"];
inline void MailboxMessage::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MailboxMessage::id() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.MailboxMessage.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailboxMessage::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocols.exchange.v1.MailboxMessage.id)
}
inline std::string* MailboxMessage::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.MailboxMessage.id)
  return _s;
}
inline const std::string& MailboxMessage::_internal_id() const {
  return id_.Get();
}
inline void MailboxMessage::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailboxMessage::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailboxMessage::release_id() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.MailboxMessage.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailboxMessage::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.MailboxMessage.id)
}

// .common.v1.Payload payload = 2 [json_name = "payload"];
inline bool MailboxMessage::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool MailboxMessage::has_payload() const {
  return _internal_has_payload();
}
inline const ::common::v1::Payload& MailboxMessage::_internal_payload() const {
  const ::common::v1::Payload* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Payload&>(
      ::common::v1::_Payload_default_instance_);
}
inline const ::common::v1::Payload& MailboxMessage::payload() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.MailboxMessage.payload)
  return _internal_payload();
}
inline void MailboxMessage::unsafe_arena_set_allocated_payload(
    ::common::v1::Payload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.MailboxMessage.payload)
}
inline ::common::v1::Payload* MailboxMessage::release_payload() {
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Payload* MailboxMessage::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.MailboxMessage.payload)
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::common::v1::Payload* MailboxMessage::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Payload>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::common::v1::Payload* MailboxMessage::mutable_payload() {
  ::common::v1::Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.MailboxMessage.payload)
  return _msg;
}
inline void MailboxMessage::set_allocated_payload(::common::v1::Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload));
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.MailboxMessage.payload)
}

// .common.v1.Profile from = 3 [json_name = "from"];
inline bool MailboxMessage::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool MailboxMessage::has_from() const {
  return _internal_has_from();
}
inline const ::common::v1::Profile& MailboxMessage::_internal_from() const {
  const ::common::v1::Profile* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Profile&>(
      ::common::v1::_Profile_default_instance_);
}
inline const ::common::v1::Profile& MailboxMessage::from() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.MailboxMessage.from)
  return _internal_from();
}
inline void MailboxMessage::unsafe_arena_set_allocated_from(
    ::common::v1::Profile* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.MailboxMessage.from)
}
inline ::common::v1::Profile* MailboxMessage::release_from() {
  
  ::common::v1::Profile* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Profile* MailboxMessage::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.MailboxMessage.from)
  
  ::common::v1::Profile* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::common::v1::Profile* MailboxMessage::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Profile>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::common::v1::Profile* MailboxMessage::mutable_from() {
  ::common::v1::Profile* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.MailboxMessage.from)
  return _msg;
}
inline void MailboxMessage::set_allocated_from(::common::v1::Profile* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.MailboxMessage.from)
}

// .common.v1.Profile to = 4 [json_name = "to"];
inline bool MailboxMessage::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool MailboxMessage::has_to() const {
  return _internal_has_to();
}
inline const ::common::v1::Profile& MailboxMessage::_internal_to() const {
  const ::common::v1::Profile* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Profile&>(
      ::common::v1::_Profile_default_instance_);
}
inline const ::common::v1::Profile& MailboxMessage::to() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.MailboxMessage.to)
  return _internal_to();
}
inline void MailboxMessage::unsafe_arena_set_allocated_to(
    ::common::v1::Profile* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.MailboxMessage.to)
}
inline ::common::v1::Profile* MailboxMessage::release_to() {
  
  ::common::v1::Profile* temp = to_;
  to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Profile* MailboxMessage::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.MailboxMessage.to)
  
  ::common::v1::Profile* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::common::v1::Profile* MailboxMessage::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Profile>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::common::v1::Profile* MailboxMessage::mutable_to() {
  ::common::v1::Profile* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.MailboxMessage.to)
  return _msg;
}
inline void MailboxMessage::set_allocated_to(::common::v1::Profile* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.MailboxMessage.to)
}

// .common.v1.Metadata metadata = 5 [json_name = "metadata"];
inline bool MailboxMessage::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool MailboxMessage::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::common::v1::Metadata& MailboxMessage::_internal_metadata() const {
  const ::common::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Metadata&>(
      ::common::v1::_Metadata_default_instance_);
}
inline const ::common::v1::Metadata& MailboxMessage::metadata() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.MailboxMessage.metadata)
  return _internal_metadata();
}
inline void MailboxMessage::unsafe_arena_set_allocated_metadata(
    ::common::v1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.MailboxMessage.metadata)
}
inline ::common::v1::Metadata* MailboxMessage::release_metadata() {
  
  ::common::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Metadata* MailboxMessage::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.MailboxMessage.metadata)
  
  ::common::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::common::v1::Metadata* MailboxMessage::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::common::v1::Metadata* MailboxMessage::mutable_metadata() {
  ::common::v1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.MailboxMessage.metadata)
  return _msg;
}
inline void MailboxMessage::set_allocated_metadata(::common::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.MailboxMessage.metadata)
}

// int64 created_at = 6 [json_name = "createdAt"];
inline void MailboxMessage::clear_created_at() {
  created_at_ = int64_t{0};
}
inline int64_t MailboxMessage::_internal_created_at() const {
  return created_at_;
}
inline int64_t MailboxMessage::created_at() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.MailboxMessage.created_at)
  return _internal_created_at();
}
inline void MailboxMessage::_internal_set_created_at(int64_t value) {
  
  created_at_ = value;
}
inline void MailboxMessage::set_created_at(int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:protocols.exchange.v1.MailboxMessage.created_at)
}

// -------------------------------------------------------------------

// InviteRequest

// .common.v1.Payload payload = 1 [json_name = "payload"];
inline bool InviteRequest::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool InviteRequest::has_payload() const {
  return _internal_has_payload();
}
inline const ::common::v1::Payload& InviteRequest::_internal_payload() const {
  const ::common::v1::Payload* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Payload&>(
      ::common::v1::_Payload_default_instance_);
}
inline const ::common::v1::Payload& InviteRequest::payload() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.InviteRequest.payload)
  return _internal_payload();
}
inline void InviteRequest::unsafe_arena_set_allocated_payload(
    ::common::v1::Payload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.InviteRequest.payload)
}
inline ::common::v1::Payload* InviteRequest::release_payload() {
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Payload* InviteRequest::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.InviteRequest.payload)
  
  ::common::v1::Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::common::v1::Payload* InviteRequest::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Payload>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::common::v1::Payload* InviteRequest::mutable_payload() {
  ::common::v1::Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.InviteRequest.payload)
  return _msg;
}
inline void InviteRequest::set_allocated_payload(::common::v1::Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload));
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.InviteRequest.payload)
}

// .common.v1.Peer from = 3 [json_name = "from"];
inline bool InviteRequest::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool InviteRequest::has_from() const {
  return _internal_has_from();
}
inline const ::common::v1::Peer& InviteRequest::_internal_from() const {
  const ::common::v1::Peer* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& InviteRequest::from() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.InviteRequest.from)
  return _internal_from();
}
inline void InviteRequest::unsafe_arena_set_allocated_from(
    ::common::v1::Peer* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.InviteRequest.from)
}
inline ::common::v1::Peer* InviteRequest::release_from() {
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* InviteRequest::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.InviteRequest.from)
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* InviteRequest::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::common::v1::Peer* InviteRequest::mutable_from() {
  ::common::v1::Peer* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.InviteRequest.from)
  return _msg;
}
inline void InviteRequest::set_allocated_from(::common::v1::Peer* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.InviteRequest.from)
}

// .common.v1.Peer to = 4 [json_name = "to"];
inline bool InviteRequest::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool InviteRequest::has_to() const {
  return _internal_has_to();
}
inline const ::common::v1::Peer& InviteRequest::_internal_to() const {
  const ::common::v1::Peer* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& InviteRequest::to() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.InviteRequest.to)
  return _internal_to();
}
inline void InviteRequest::unsafe_arena_set_allocated_to(
    ::common::v1::Peer* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.InviteRequest.to)
}
inline ::common::v1::Peer* InviteRequest::release_to() {
  
  ::common::v1::Peer* temp = to_;
  to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* InviteRequest::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.InviteRequest.to)
  
  ::common::v1::Peer* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* InviteRequest::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::common::v1::Peer* InviteRequest::mutable_to() {
  ::common::v1::Peer* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.InviteRequest.to)
  return _msg;
}
inline void InviteRequest::set_allocated_to(::common::v1::Peer* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.InviteRequest.to)
}

// .common.v1.Metadata metadata = 5 [json_name = "metadata"];
inline bool InviteRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool InviteRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::common::v1::Metadata& InviteRequest::_internal_metadata() const {
  const ::common::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Metadata&>(
      ::common::v1::_Metadata_default_instance_);
}
inline const ::common::v1::Metadata& InviteRequest::metadata() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.InviteRequest.metadata)
  return _internal_metadata();
}
inline void InviteRequest::unsafe_arena_set_allocated_metadata(
    ::common::v1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.InviteRequest.metadata)
}
inline ::common::v1::Metadata* InviteRequest::release_metadata() {
  
  ::common::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Metadata* InviteRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.InviteRequest.metadata)
  
  ::common::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::common::v1::Metadata* InviteRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::common::v1::Metadata* InviteRequest::mutable_metadata() {
  ::common::v1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.InviteRequest.metadata)
  return _msg;
}
inline void InviteRequest::set_allocated_metadata(::common::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.InviteRequest.metadata)
}

// -------------------------------------------------------------------

// InviteResponse

// bool decision = 1 [json_name = "decision"];
inline void InviteResponse::clear_decision() {
  decision_ = false;
}
inline bool InviteResponse::_internal_decision() const {
  return decision_;
}
inline bool InviteResponse::decision() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.InviteResponse.decision)
  return _internal_decision();
}
inline void InviteResponse::_internal_set_decision(bool value) {
  
  decision_ = value;
}
inline void InviteResponse::set_decision(bool value) {
  _internal_set_decision(value);
  // @@protoc_insertion_point(field_set:protocols.exchange.v1.InviteResponse.decision)
}

// .common.v1.Peer from = 3 [json_name = "from"];
inline bool InviteResponse::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool InviteResponse::has_from() const {
  return _internal_has_from();
}
inline const ::common::v1::Peer& InviteResponse::_internal_from() const {
  const ::common::v1::Peer* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& InviteResponse::from() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.InviteResponse.from)
  return _internal_from();
}
inline void InviteResponse::unsafe_arena_set_allocated_from(
    ::common::v1::Peer* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.InviteResponse.from)
}
inline ::common::v1::Peer* InviteResponse::release_from() {
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* InviteResponse::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.InviteResponse.from)
  
  ::common::v1::Peer* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* InviteResponse::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    from_ = p;
  }
  return from_;
}
inline ::common::v1::Peer* InviteResponse::mutable_from() {
  ::common::v1::Peer* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.InviteResponse.from)
  return _msg;
}
inline void InviteResponse::set_allocated_from(::common::v1::Peer* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from));
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.InviteResponse.from)
}

// .common.v1.Peer to = 4 [json_name = "to"];
inline bool InviteResponse::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool InviteResponse::has_to() const {
  return _internal_has_to();
}
inline const ::common::v1::Peer& InviteResponse::_internal_to() const {
  const ::common::v1::Peer* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Peer&>(
      ::common::v1::_Peer_default_instance_);
}
inline const ::common::v1::Peer& InviteResponse::to() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.InviteResponse.to)
  return _internal_to();
}
inline void InviteResponse::unsafe_arena_set_allocated_to(
    ::common::v1::Peer* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.InviteResponse.to)
}
inline ::common::v1::Peer* InviteResponse::release_to() {
  
  ::common::v1::Peer* temp = to_;
  to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Peer* InviteResponse::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.InviteResponse.to)
  
  ::common::v1::Peer* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::common::v1::Peer* InviteResponse::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Peer>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::common::v1::Peer* InviteResponse::mutable_to() {
  ::common::v1::Peer* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.InviteResponse.to)
  return _msg;
}
inline void InviteResponse::set_allocated_to(::common::v1::Peer* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.InviteResponse.to)
}

// .common.v1.Metadata metadata = 5 [json_name = "metadata"];
inline bool InviteResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool InviteResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::common::v1::Metadata& InviteResponse::_internal_metadata() const {
  const ::common::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Metadata&>(
      ::common::v1::_Metadata_default_instance_);
}
inline const ::common::v1::Metadata& InviteResponse::metadata() const {
  // @@protoc_insertion_point(field_get:protocols.exchange.v1.InviteResponse.metadata)
  return _internal_metadata();
}
inline void InviteResponse::unsafe_arena_set_allocated_metadata(
    ::common::v1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.exchange.v1.InviteResponse.metadata)
}
inline ::common::v1::Metadata* InviteResponse::release_metadata() {
  
  ::common::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Metadata* InviteResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocols.exchange.v1.InviteResponse.metadata)
  
  ::common::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::common::v1::Metadata* InviteResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::common::v1::Metadata* InviteResponse::mutable_metadata() {
  ::common::v1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:protocols.exchange.v1.InviteResponse.metadata)
  return _msg;
}
inline void InviteResponse::set_allocated_metadata(::common::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocols.exchange.v1.InviteResponse.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace exchange
}  // namespace protocols

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocols_2fexchange_2fv1_2fexchange_2eproto
