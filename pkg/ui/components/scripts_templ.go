// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"

func createCredential(rpName, rpId, challenge string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_createCredential_e419`,
		Function: `function __templ_createCredential_e419(rpName, rpId, challenge){const publicKeyCredentialCreationOptions = {
		challenge: Uint8Array.from(challenge, c => c.charCodeAt(0)),
		rp: {
			name: rpName,
			id: rpId,
		},
		user: {
			id: Uint8Array.from(
				"UZSL85T9AFC", c => c.charCodeAt(0)),
			name: "lee@webauthn.guide",
			displayName: "Lee",
		},
		pubKeyCredParams: [{alg: -7, type: "public-key"}],
		authenticatorSelection: {
			authenticatorAttachment: "cross-platform",
		},
		timeout: 60000,
		attestation: "direct"
	};

	const credential = await navigator.credentials.create({
		publicKey: publicKeyCredentialCreationOptions
	});
	console.log(credential);
}`,
		Call:       templ.SafeScript(`__templ_createCredential_e419`, rpName, rpId, challenge),
		CallInline: templ.SafeScriptInline(`__templ_createCredential_e419`, rpName, rpId, challenge),
	}
}

func getCredential(rpName, rpId, challenge string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_getCredential_ff50`,
		Function: `function __templ_getCredential_ff50(rpName, rpId, challenge){const publicKeyCredentialRequestOptions = {
		challenge: Uint8Array.from(challenge, c => c.charCodeAt(0)),
		allowCredentials: [{
			id: Uint8Array.from(
				credentialId, c => c.charCodeAt(0)),
			type: 'public-key',
			transports: ['usb', 'ble', 'nfc'],
		}],
		timeout: 60000,
	}

	const assertion = await navigator.credentials.get({
		publicKey: publicKeyCredentialRequestOptions
	});
	console.log(assertion);
}`,
		Call:       templ.SafeScript(`__templ_getCredential_ff50`, rpName, rpId, challenge),
		CallInline: templ.SafeScriptInline(`__templ_getCredential_ff50`, rpName, rpId, challenge),
	}
}
