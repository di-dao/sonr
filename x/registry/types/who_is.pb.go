// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registry/v1/who_is.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WhoIsType int32

const (
	// User is the type of the registered name
	WhoIsType_USER WhoIsType = 0
	// Application is the type of the registered name
	WhoIsType_APPLICATION WhoIsType = 1
)

var WhoIsType_name = map[int32]string{
	0: "USER",
	1: "APPLICATION",
}

var WhoIsType_value = map[string]int32{
	"USER":        0,
	"APPLICATION": 1,
}

func (x WhoIsType) String() string {
	return proto.EnumName(WhoIsType_name, int32(x))
}

func (WhoIsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84ce3acf2e057c6d, []int{0}
}

type WhoIs struct {
	// Alias is the list of registered `alsoKnownAs` identifiers of the User or Application
	Alias []string `protobuf:"bytes,1,rep,name=alias,proto3" json:"alias,omitempty"`
	// Owner is the top level DID of the User or Application derived from the multisignature wallet.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// DIDDocument is the bytes representation of DIDDocument within the WhoIs. Initially marshalled as JSON.
	DidDocument []byte `protobuf:"bytes,3,opt,name=did_document,json=didDocument,proto3" json:"did_document,omitempty"`
	// Credentials are the biometric info of the registered name and account encoded with public key
	Controllers []string `protobuf:"bytes,4,rep,name=controllers,proto3" json:"controllers,omitempty"`
	// Type is the kind of the entity. Possible values are: "user", "application"
	Type WhoIsType `protobuf:"varint,5,opt,name=type,proto3,enum=sonrio.sonr.registry.WhoIsType" json:"type,omitempty"`
	// Timestamp is the time of the last update of the DID Document
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// IsActive is the status of the DID Document
	IsActive bool `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *WhoIs) Reset()         { *m = WhoIs{} }
func (m *WhoIs) String() string { return proto.CompactTextString(m) }
func (*WhoIs) ProtoMessage()    {}
func (*WhoIs) Descriptor() ([]byte, []int) {
	return fileDescriptor_84ce3acf2e057c6d, []int{0}
}
func (m *WhoIs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhoIs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhoIs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhoIs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoIs.Merge(m, src)
}
func (m *WhoIs) XXX_Size() int {
	return m.Size()
}
func (m *WhoIs) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoIs.DiscardUnknown(m)
}

var xxx_messageInfo_WhoIs proto.InternalMessageInfo

func (m *WhoIs) GetAlias() []string {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *WhoIs) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *WhoIs) GetDidDocument() []byte {
	if m != nil {
		return m.DidDocument
	}
	return nil
}

func (m *WhoIs) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

func (m *WhoIs) GetType() WhoIsType {
	if m != nil {
		return m.Type
	}
	return WhoIsType_USER
}

func (m *WhoIs) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *WhoIs) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func init() {
	proto.RegisterEnum("sonrio.sonr.registry.WhoIsType", WhoIsType_name, WhoIsType_value)
	proto.RegisterType((*WhoIs)(nil), "sonrio.sonr.registry.WhoIs")
}

func init() { proto.RegisterFile("registry/v1/who_is.proto", fileDescriptor_84ce3acf2e057c6d) }

var fileDescriptor_84ce3acf2e057c6d = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x33, 0x5f, 0xff, 0x7c, 0xcd, 0xb4, 0x68, 0x19, 0xba, 0x18, 0x50, 0xe2, 0xe8, 0x42,
	0x82, 0x60, 0x82, 0xf6, 0x09, 0x5a, 0x75, 0x51, 0x10, 0x2d, 0x63, 0x45, 0x70, 0x53, 0xd2, 0x64,
	0x68, 0x07, 0x9a, 0xdc, 0x30, 0x33, 0x6d, 0xed, 0x5b, 0xf8, 0x58, 0x2e, 0xbb, 0x74, 0x29, 0xed,
	0xc6, 0xc7, 0x90, 0x8c, 0x5a, 0x5d, 0xb8, 0xba, 0x9c, 0x1f, 0x97, 0xc3, 0x8f, 0x83, 0xa9, 0x12,
	0x63, 0xa9, 0x8d, 0x5a, 0x86, 0xf3, 0xb3, 0x70, 0x31, 0x81, 0xa1, 0xd4, 0x41, 0xae, 0xc0, 0x00,
	0x69, 0x69, 0xc8, 0x94, 0x84, 0xa0, 0x38, 0xc1, 0xf7, 0xd7, 0xd1, 0x3b, 0xc2, 0x95, 0x87, 0x09,
	0xf4, 0x34, 0x69, 0xe1, 0x4a, 0x34, 0x95, 0x91, 0xa6, 0x88, 0x95, 0x7c, 0x97, 0x7f, 0x86, 0x82,
	0xc2, 0x22, 0x13, 0x8a, 0xfe, 0x63, 0xa8, 0xa0, 0x36, 0x90, 0x43, 0xdc, 0x48, 0x64, 0x32, 0x4c,
	0x20, 0x9e, 0xa5, 0x22, 0x33, 0xb4, 0xc4, 0x90, 0xdf, 0xe0, 0xf5, 0x44, 0x26, 0x97, 0x5f, 0x88,
	0x30, 0x5c, 0x8f, 0x21, 0x33, 0x0a, 0xa6, 0x53, 0xa1, 0x34, 0x2d, 0xdb, 0xd2, 0xdf, 0x88, 0xb4,
	0x71, 0xd9, 0x2c, 0x73, 0x41, 0x2b, 0x0c, 0xf9, 0x3b, 0xe7, 0x07, 0xc1, 0x5f, 0x7e, 0x81, 0x75,
	0x1b, 0x2c, 0x73, 0xc1, 0xed, 0x33, 0xd9, 0xc7, 0xae, 0x91, 0xa9, 0xd0, 0x26, 0x4a, 0x73, 0x5a,
	0x65, 0xc8, 0x2f, 0xf1, 0x1f, 0x40, 0xf6, 0xb0, 0x2b, 0xf5, 0x30, 0x8a, 0x8d, 0x9c, 0x0b, 0xfa,
	0x9f, 0x21, 0xbf, 0xc6, 0x6b, 0x52, 0x77, 0x6c, 0x3e, 0x39, 0xc6, 0xee, 0xb6, 0x8d, 0xd4, 0x70,
	0xf9, 0xfe, 0xee, 0x8a, 0x37, 0x1d, 0xb2, 0x8b, 0xeb, 0x9d, 0x7e, 0xff, 0xba, 0x77, 0xd1, 0x19,
	0xf4, 0x6e, 0x6f, 0x9a, 0xa8, 0xdb, 0x7d, 0x59, 0x7b, 0x68, 0xb5, 0xf6, 0xd0, 0xdb, 0xda, 0x43,
	0xcf, 0x1b, 0xcf, 0x59, 0x6d, 0x3c, 0xe7, 0x75, 0xe3, 0x39, 0x8f, 0xfe, 0x58, 0x9a, 0xc9, 0x6c,
	0x14, 0xc4, 0x90, 0x86, 0x85, 0xe6, 0xa9, 0x04, 0x7b, 0xc3, 0xa7, 0x70, 0x3b, 0x7b, 0x61, 0xa9,
	0x47, 0x55, 0xbb, 0x79, 0xfb, 0x23, 0x00, 0x00, 0xff, 0xff, 0x24, 0x67, 0xd4, 0xcc, 0x8f, 0x01,
	0x00, 0x00,
}

func (m *WhoIs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhoIs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhoIs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Timestamp != 0 {
		i = encodeVarintWhoIs(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.Type != 0 {
		i = encodeVarintWhoIs(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Controllers) > 0 {
		for iNdEx := len(m.Controllers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Controllers[iNdEx])
			copy(dAtA[i:], m.Controllers[iNdEx])
			i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Controllers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DidDocument) > 0 {
		i -= len(m.DidDocument)
		copy(dAtA[i:], m.DidDocument)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.DidDocument)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Alias) > 0 {
		for iNdEx := len(m.Alias) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Alias[iNdEx])
			copy(dAtA[i:], m.Alias[iNdEx])
			i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Alias[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintWhoIs(dAtA []byte, offset int, v uint64) int {
	offset -= sovWhoIs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WhoIs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Alias) > 0 {
		for _, s := range m.Alias {
			l = len(s)
			n += 1 + l + sovWhoIs(uint64(l))
		}
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	l = len(m.DidDocument)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			l = len(s)
			n += 1 + l + sovWhoIs(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovWhoIs(uint64(m.Type))
	}
	if m.Timestamp != 0 {
		n += 1 + sovWhoIs(uint64(m.Timestamp))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func sovWhoIs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWhoIs(x uint64) (n int) {
	return sovWhoIs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WhoIs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhoIs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhoIs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhoIs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = append(m.Alias, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidDocument = append(m.DidDocument[:0], dAtA[iNdEx:postIndex]...)
			if m.DidDocument == nil {
				m.DidDocument = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controllers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controllers = append(m.Controllers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= WhoIsType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWhoIs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhoIs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWhoIs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWhoIs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWhoIs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWhoIs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWhoIs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWhoIs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWhoIs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWhoIs = fmt.Errorf("proto: unexpected end of group")
)
