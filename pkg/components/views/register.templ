package views

import (
	"github.com/sonrhq/sonr/pkg/components/blocks"
	"github.com/sonrhq/sonr/x/service"
)

templ RegisterWelcomeView() {
	@blocks.CardLayout(blocks.Medium) {
		<div class="flex flex-col w-full justify-center items-center space-y-2 gap-1 mx-auto text-center max-w-lg">
			<div class="w-28 h-28 rounded-full bg-gradient-to-t from-teal-500 via-cyan-600 to-blue-700 border-2 border-stone-400/90 mt-3"></div>
			<sl-divider style="--spacing: 0.6rem;"></sl-divider>
			<h1 class="text-3xl font-semibold">Register Account</h1>
			<p class="text-stone-300 text-md text-center py-2 text-relaxed">
				Start your <sl-tooltip content="Access every IBC enabled blockchain with a secure Interchain Account." placement="top"><span class="font-semibold text-stone-200">Crypto Journey</span></sl-tooltip> easily and access DApps <sl-tooltip content="End to End encryption from the Validator to the client. Multi-Party Computed Wallets. Secure communication channel over Matrix." placement="top"><span class="font-semibold text-stone-200">the Safe Way</span></sl-tooltip> by creating a <sl-tooltip content="Decentralized Identity representation on the Sonr Blockchain. Anonymous and Encrypted." placement="top"><span class="font-semibold text-stone-200">Sonr Identity</span></sl-tooltip>
			</p>
		</div>
		<sl-divider class="bg-stone-500" style="--spacing: 1rem;"></sl-divider>
		<div class="max-w-[300px] mx-auto"></div>
		<sl-divider class="bg-stone-600" style="--spacing: 1rem;"></sl-divider>
		<div slot="footer" class="flex justify-center items-center px-3 gap-x-8">
			<sl-button size="large" variant="default">
				Learn More
			</sl-button>
			<sl-button size="large" variant="primary">
				Get Started
			</sl-button>
		</div>
	}
}

templ RegisterIdentifierView() {
	<form class={ "flex flex-row justify-evenly items-center align-middle pb-2.5 gap-x-1.5" }>
		<sl-input
			name="email"
			placeholder="sjobs@apple.com"
			size="large"
			autocomplete="username webauthn"
			required
		>
			<sl-icon class="text-stone-200" slot="prefix" name="at"></sl-icon>
		</sl-input>
		<sl-button type="submit" size="large" variant="default">
			<div class="text-md">
				@blocks.PasskeyIcon()
			</div>
		</sl-button>
		<div id="name-error" aria-live="polite" hidden></div>
	</form>
}

templ RegisterValidateView() {
	<form class={ "flex flex-row justify-evenly items-center align-middle pb-2.5 gap-x-1.5" }>
		<sl-input
			name="email"
			placeholder="sjobs@apple.com"
			size="large"
			autocomplete="username webauthn"
			required
		>
			<sl-icon class="text-stone-200" slot="prefix" name="at"></sl-icon>
		</sl-input>
		<sl-button type="submit" size="large" variant="default">
			<div class="text-md">
				@blocks.PasskeyIcon()
			</div>
		</sl-button>
		<div id="name-error" aria-live="polite" hidden></div>
	</form>
}

templ RegisterCredentialView() {
	<form class={ "flex flex-row justify-evenly items-center align-middle pb-2.5 gap-x-1.5" }>
		<sl-input
			name="email"
			placeholder="sjobs@apple.com"
			size="large"
			autocomplete="username webauthn"
			required
		>
			<sl-icon class="text-stone-200" slot="prefix" name="at"></sl-icon>
		</sl-input>
		<sl-button type="submit" size="large" variant="default">
			<div class="text-md">
				@blocks.PasskeyIcon()
			</div>
		</sl-button>
		<div id="name-error" aria-live="polite" hidden></div>
	</form>
}

templ RegisterFinishView() {
	<div class="w-full h-screen bg-stone-50 dark:bg-stone-950 flex flex-col overflow-clip">
		@blocks.ChatHeader()
		<div class="h-full w-full p-2 flex-grow">
			@blocks.ChatTimestamp()
			@blocks.ChatMessage()
			@blocks.ChatMessage(blocks.WithIncomingMessage("Hello, how are you?"))
			@blocks.ChatMessage()
			@blocks.ChatMessage(blocks.WithIncomingMessage("Hello, how are you?"))
		</div>
		@blocks.ChatFooter()
	</div>
}

script CreateCredential(rpName, rpId, challenge string) {
	const publicKeyCredentialCreationOptions = {
		challenge: Uint8Array.from(challenge, c => c.charCodeAt(0)),
		rp: {
			name: rpName,
			id: rpId,
		},
		user: {
			id: Uint8Array.from(
				"UZSL85T9AFC", c => c.charCodeAt(0)),
			name: "lee@webauthn.guide",
			displayName: "Lee",
		},
		pubKeyCredParams: [{alg: -7, type: "public-key"}],
		authenticatorSelection: {
			authenticatorAttachment: "cross-platform",
		},
		timeout: 60000,
		attestation: "direct"
	};

	const credential = navigator.credentials.create({
		publicKey: publicKeyCredentialCreationOptions
	}).then((credential) => {
		console.log(credential);
	});
}

templ PasskeyButton(record service.Record) {
	<div slot="suffix" onclick={ CreateCredential(record.Name, record.Origin, service.GenerateChallengeString()) } class="cursor-pointer">
		@blocks.PasskeyIcon()
	</div>
}
