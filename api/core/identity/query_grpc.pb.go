// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: core/identity/query.proto

package identity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName               = "/core.identity.Query/Params"
	Query_DIDDocument_FullMethodName          = "/core.identity.Query/DIDDocument"
	Query_DIDDocumentAll_FullMethodName       = "/core.identity.Query/DIDDocumentAll"
	Query_DidByOwner_FullMethodName           = "/core.identity.Query/DidByOwner"
	Query_DidByAlsoKnownAs_FullMethodName     = "/core.identity.Query/DidByAlsoKnownAs"
	Query_AliasAvailable_FullMethodName       = "/core.identity.Query/AliasAvailable"
	Query_ControllerAccount_FullMethodName    = "/core.identity.Query/ControllerAccount"
	Query_ControllerAccountAll_FullMethodName = "/core.identity.Query/ControllerAccountAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DIDDocument queries a list of DIDDocument items.
	DIDDocument(ctx context.Context, in *QueryGetDIDDocumentRequest, opts ...grpc.CallOption) (*QueryGetDIDDocumentResponse, error)
	// DIDDocumentAll queries all DIDDocument items.
	DIDDocumentAll(ctx context.Context, in *QueryAllDIDDocumentRequest, opts ...grpc.CallOption) (*QueryAllDIDDocumentResponse, error)
	// DidByOwner returns DIDDocument based on an owner.
	DidByOwner(ctx context.Context, in *QueryDidByOwnerRequest, opts ...grpc.CallOption) (*QueryDidByOwnerResponse, error)
	// DidByAlsoKnownAs returns DIDDocument based on an alias *only Sonr
	// Identities.
	DidByAlsoKnownAs(ctx context.Context, in *QueryDidByAlsoKnownAsRequest, opts ...grpc.CallOption) (*QueryDidByAlsoKnownAsResponse, error)
	// AliasAvailable checks if a given alias is available to register *only Sonr
	// Identities.
	AliasAvailable(ctx context.Context, in *QueryAliasAvailableRequest, opts ...grpc.CallOption) (*QueryAliasAvailableResponse, error)
	// ControllerAccount queries a list of ControllerAccount items.
	ControllerAccount(ctx context.Context, in *QueryGetControllerAccountRequest, opts ...grpc.CallOption) (*QueryGetControllerAccountResponse, error)
	// ControllerAccountAll queries all ControllerAccount items.
	ControllerAccountAll(ctx context.Context, in *QueryAllControllerAccountRequest, opts ...grpc.CallOption) (*QueryAllControllerAccountResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DIDDocument(ctx context.Context, in *QueryGetDIDDocumentRequest, opts ...grpc.CallOption) (*QueryGetDIDDocumentResponse, error) {
	out := new(QueryGetDIDDocumentResponse)
	err := c.cc.Invoke(ctx, Query_DIDDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DIDDocumentAll(ctx context.Context, in *QueryAllDIDDocumentRequest, opts ...grpc.CallOption) (*QueryAllDIDDocumentResponse, error) {
	out := new(QueryAllDIDDocumentResponse)
	err := c.cc.Invoke(ctx, Query_DIDDocumentAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidByOwner(ctx context.Context, in *QueryDidByOwnerRequest, opts ...grpc.CallOption) (*QueryDidByOwnerResponse, error) {
	out := new(QueryDidByOwnerResponse)
	err := c.cc.Invoke(ctx, Query_DidByOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidByAlsoKnownAs(ctx context.Context, in *QueryDidByAlsoKnownAsRequest, opts ...grpc.CallOption) (*QueryDidByAlsoKnownAsResponse, error) {
	out := new(QueryDidByAlsoKnownAsResponse)
	err := c.cc.Invoke(ctx, Query_DidByAlsoKnownAs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AliasAvailable(ctx context.Context, in *QueryAliasAvailableRequest, opts ...grpc.CallOption) (*QueryAliasAvailableResponse, error) {
	out := new(QueryAliasAvailableResponse)
	err := c.cc.Invoke(ctx, Query_AliasAvailable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ControllerAccount(ctx context.Context, in *QueryGetControllerAccountRequest, opts ...grpc.CallOption) (*QueryGetControllerAccountResponse, error) {
	out := new(QueryGetControllerAccountResponse)
	err := c.cc.Invoke(ctx, Query_ControllerAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ControllerAccountAll(ctx context.Context, in *QueryAllControllerAccountRequest, opts ...grpc.CallOption) (*QueryAllControllerAccountResponse, error) {
	out := new(QueryAllControllerAccountResponse)
	err := c.cc.Invoke(ctx, Query_ControllerAccountAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DIDDocument queries a list of DIDDocument items.
	DIDDocument(context.Context, *QueryGetDIDDocumentRequest) (*QueryGetDIDDocumentResponse, error)
	// DIDDocumentAll queries all DIDDocument items.
	DIDDocumentAll(context.Context, *QueryAllDIDDocumentRequest) (*QueryAllDIDDocumentResponse, error)
	// DidByOwner returns DIDDocument based on an owner.
	DidByOwner(context.Context, *QueryDidByOwnerRequest) (*QueryDidByOwnerResponse, error)
	// DidByAlsoKnownAs returns DIDDocument based on an alias *only Sonr
	// Identities.
	DidByAlsoKnownAs(context.Context, *QueryDidByAlsoKnownAsRequest) (*QueryDidByAlsoKnownAsResponse, error)
	// AliasAvailable checks if a given alias is available to register *only Sonr
	// Identities.
	AliasAvailable(context.Context, *QueryAliasAvailableRequest) (*QueryAliasAvailableResponse, error)
	// ControllerAccount queries a list of ControllerAccount items.
	ControllerAccount(context.Context, *QueryGetControllerAccountRequest) (*QueryGetControllerAccountResponse, error)
	// ControllerAccountAll queries all ControllerAccount items.
	ControllerAccountAll(context.Context, *QueryAllControllerAccountRequest) (*QueryAllControllerAccountResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) DIDDocument(context.Context, *QueryGetDIDDocumentRequest) (*QueryGetDIDDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DIDDocument not implemented")
}
func (UnimplementedQueryServer) DIDDocumentAll(context.Context, *QueryAllDIDDocumentRequest) (*QueryAllDIDDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DIDDocumentAll not implemented")
}
func (UnimplementedQueryServer) DidByOwner(context.Context, *QueryDidByOwnerRequest) (*QueryDidByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidByOwner not implemented")
}
func (UnimplementedQueryServer) DidByAlsoKnownAs(context.Context, *QueryDidByAlsoKnownAsRequest) (*QueryDidByAlsoKnownAsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidByAlsoKnownAs not implemented")
}
func (UnimplementedQueryServer) AliasAvailable(context.Context, *QueryAliasAvailableRequest) (*QueryAliasAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AliasAvailable not implemented")
}
func (UnimplementedQueryServer) ControllerAccount(context.Context, *QueryGetControllerAccountRequest) (*QueryGetControllerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControllerAccount not implemented")
}
func (UnimplementedQueryServer) ControllerAccountAll(context.Context, *QueryAllControllerAccountRequest) (*QueryAllControllerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControllerAccountAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DIDDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDIDDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DIDDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DIDDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DIDDocument(ctx, req.(*QueryGetDIDDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DIDDocumentAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDIDDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DIDDocumentAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DIDDocumentAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DIDDocumentAll(ctx, req.(*QueryAllDIDDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DidByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidByOwner(ctx, req.(*QueryDidByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidByAlsoKnownAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidByAlsoKnownAsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidByAlsoKnownAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DidByAlsoKnownAs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidByAlsoKnownAs(ctx, req.(*QueryDidByAlsoKnownAsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AliasAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAliasAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AliasAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AliasAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AliasAvailable(ctx, req.(*QueryAliasAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ControllerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetControllerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ControllerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ControllerAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ControllerAccount(ctx, req.(*QueryGetControllerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ControllerAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllControllerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ControllerAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ControllerAccountAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ControllerAccountAll(ctx, req.(*QueryAllControllerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.identity.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DIDDocument",
			Handler:    _Query_DIDDocument_Handler,
		},
		{
			MethodName: "DIDDocumentAll",
			Handler:    _Query_DIDDocumentAll_Handler,
		},
		{
			MethodName: "DidByOwner",
			Handler:    _Query_DidByOwner_Handler,
		},
		{
			MethodName: "DidByAlsoKnownAs",
			Handler:    _Query_DidByAlsoKnownAs_Handler,
		},
		{
			MethodName: "AliasAvailable",
			Handler:    _Query_AliasAvailable_Handler,
		},
		{
			MethodName: "ControllerAccount",
			Handler:    _Query_ControllerAccount_Handler,
		},
		{
			MethodName: "ControllerAccountAll",
			Handler:    _Query_ControllerAccountAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/identity/query.proto",
}
