// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service/v1/linking.proto

// Package exchange defines interfaces and types for exchange between two nodes in the network.

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	common "github.com/sonr-io/sonr/third_party/types/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LinkingEventType int32

const (
	// Linking event type is unknown.
	LinkingEventType_LINKING_EVENT_TYPE_UNSPECIFIED LinkingEventType = 0
	// The linking process has started. Either the session was opened or successfully joined (ok)
	LinkingEventType_LINKING_EVENT_TYPE_LINKING_INITIALIZED LinkingEventType = 1
	// Returns when a new peer has joined the topic. (ok)
	LinkingEventType_LINKING_EVENT_TYPE_LINKING_PEER_FOUND LinkingEventType = 2
	// Returns if a Peer joins the topic for pairing and no peers are available. (error)
	LinkingEventType_LINKING_EVENT_TYPE_LINKING_TOPIC_INVALID LinkingEventType = 3
	// Happens when unexpected networking error occurs. (error)
	LinkingEventType_LINKING_EVENT_TYPE_LINKING_DISCONNECTED LinkingEventType = 4
	// Occurs when the session timeout is reached. (error)
	LinkingEventType_LINKING_EVENT_TYPE_LINKING_TIMEOUT LinkingEventType = 5
	// This event happens on invalid AuthInfo (error)
	LinkingEventType_LINKING_EVENT_TYPE_LINKING_FAILED LinkingEventType = 6
	// This event happens if Broadcasting updated DIDDocument fails (error)
	LinkingEventType_LINKING_EVENT_TYPE_LINKING_BROADCAST_FAILED LinkingEventType = 7
	// Occurs when the Key Exchange is completed successfully. (ok)
	LinkingEventType_LINKING_EVENT_TYPE_LINKING_COMPLETE LinkingEventType = 8
)

var LinkingEventType_name = map[int32]string{
	0: "LINKING_EVENT_TYPE_UNSPECIFIED",
	1: "LINKING_EVENT_TYPE_LINKING_INITIALIZED",
	2: "LINKING_EVENT_TYPE_LINKING_PEER_FOUND",
	3: "LINKING_EVENT_TYPE_LINKING_TOPIC_INVALID",
	4: "LINKING_EVENT_TYPE_LINKING_DISCONNECTED",
	5: "LINKING_EVENT_TYPE_LINKING_TIMEOUT",
	6: "LINKING_EVENT_TYPE_LINKING_FAILED",
	7: "LINKING_EVENT_TYPE_LINKING_BROADCAST_FAILED",
	8: "LINKING_EVENT_TYPE_LINKING_COMPLETE",
}

var LinkingEventType_value = map[string]int32{
	"LINKING_EVENT_TYPE_UNSPECIFIED":              0,
	"LINKING_EVENT_TYPE_LINKING_INITIALIZED":      1,
	"LINKING_EVENT_TYPE_LINKING_PEER_FOUND":       2,
	"LINKING_EVENT_TYPE_LINKING_TOPIC_INVALID":    3,
	"LINKING_EVENT_TYPE_LINKING_DISCONNECTED":     4,
	"LINKING_EVENT_TYPE_LINKING_TIMEOUT":          5,
	"LINKING_EVENT_TYPE_LINKING_FAILED":           6,
	"LINKING_EVENT_TYPE_LINKING_BROADCAST_FAILED": 7,
	"LINKING_EVENT_TYPE_LINKING_COMPLETE":         8,
}

func (x LinkingEventType) String() string {
	return proto.EnumName(LinkingEventType_name, int32(x))
}

func (LinkingEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fa023698e065e8ee, []int{0}
}

type LinkingEvent struct {
	// The type of event which occurred.
	Type LinkingEventType `protobuf:"varint,1,opt,name=type,proto3,enum=sonrio.motor.service.v1.LinkingEventType" json:"type,omitempty"`
	// A list of Peer IDs in the topic at the current state
	PeerIds []string `protobuf:"bytes,2,rep,name=peer_ids,json=peerIds,proto3" json:"peer_ids,omitempty"`
	// The transmitted AuthInfo
	AuthInfo *common.AuthInfo `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`
}

func (m *LinkingEvent) Reset()         { *m = LinkingEvent{} }
func (m *LinkingEvent) String() string { return proto.CompactTextString(m) }
func (*LinkingEvent) ProtoMessage()    {}
func (*LinkingEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa023698e065e8ee, []int{0}
}
func (m *LinkingEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkingEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkingEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkingEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkingEvent.Merge(m, src)
}
func (m *LinkingEvent) XXX_Size() int {
	return m.Size()
}
func (m *LinkingEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkingEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LinkingEvent proto.InternalMessageInfo

func (m *LinkingEvent) GetType() LinkingEventType {
	if m != nil {
		return m.Type
	}
	return LinkingEventType_LINKING_EVENT_TYPE_UNSPECIFIED
}

func (m *LinkingEvent) GetPeerIds() []string {
	if m != nil {
		return m.PeerIds
	}
	return nil
}

func (m *LinkingEvent) GetAuthInfo() *common.AuthInfo {
	if m != nil {
		return m.AuthInfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("sonrio.motor.service.v1.LinkingEventType", LinkingEventType_name, LinkingEventType_value)
	proto.RegisterType((*LinkingEvent)(nil), "sonrio.motor.service.v1.LinkingEvent")
}

func init() { proto.RegisterFile("service/v1/linking.proto", fileDescriptor_fa023698e065e8ee) }

var fileDescriptor_fa023698e065e8ee = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0xeb, 0x75, 0x6c, 0x9d, 0x41, 0xc8, 0xb2, 0x40, 0x94, 0x1d, 0xa2, 0x52, 0xb4, 0xad,
	0xdb, 0x20, 0xd1, 0xc6, 0x81, 0x13, 0x87, 0x2c, 0x71, 0xd1, 0x27, 0x32, 0x27, 0x4a, 0xdd, 0x49,
	0xec, 0x12, 0x75, 0x6b, 0xb6, 0x5a, 0xd0, 0x38, 0x4a, 0xdc, 0x4a, 0x7d, 0x0b, 0x78, 0x04, 0xde,
	0x86, 0xe3, 0x8e, 0x1c, 0x51, 0xfb, 0x22, 0x28, 0xe9, 0x22, 0x10, 0x82, 0x9c, 0x12, 0x5b, 0xbf,
	0xff, 0xff, 0xb3, 0xf4, 0xfd, 0x70, 0x3b, 0x8f, 0xb3, 0xb9, 0xbc, 0x8e, 0xad, 0xf9, 0x89, 0xf5,
	0x59, 0x26, 0x9f, 0x64, 0x72, 0x6b, 0xa6, 0x99, 0xd2, 0x8a, 0x3e, 0xcb, 0x55, 0x92, 0x49, 0x65,
	0x4e, 0x95, 0x56, 0x99, 0x79, 0x8f, 0x99, 0xf3, 0x93, 0xdd, 0x27, 0xd7, 0x6a, 0x3a, 0x55, 0x49,
	0x91, 0x90, 0xc9, 0x8d, 0x5a, 0xe3, 0xdd, 0x6f, 0x08, 0x3f, 0xf2, 0xd6, 0x05, 0x6c, 0x1e, 0x27,
	0x9a, 0xbe, 0xc3, 0x9b, 0x7a, 0x91, 0xc6, 0x6d, 0xd4, 0x41, 0xbd, 0xc7, 0xa7, 0x87, 0xe6, 0x7f,
	0xea, 0xcc, 0x3f, 0x43, 0x62, 0x91, 0xc6, 0x61, 0x19, 0xa3, 0xcf, 0x71, 0x2b, 0x8d, 0xe3, 0x2c,
	0x92, 0xe3, 0xbc, 0xbd, 0xd1, 0x69, 0xf6, 0x76, 0xc2, 0xed, 0xe2, 0x0c, 0xe3, 0x9c, 0xbe, 0xc5,
	0x3b, 0xa3, 0x99, 0x9e, 0x44, 0xc5, 0xf4, 0x76, 0xb3, 0x83, 0x7a, 0x0f, 0x4f, 0x77, 0xab, 0xfa,
	0xf5, 0xdb, 0x8a, 0x5e, 0x7b, 0xa6, 0x27, 0x90, 0xdc, 0xa8, 0xb0, 0x35, 0xba, 0xff, 0x3b, 0xfa,
	0xda, 0xc4, 0xe4, 0xef, 0x71, 0xb4, 0x8b, 0x0d, 0x0f, 0xf8, 0x07, 0xe0, 0xef, 0x23, 0x76, 0xc1,
	0xb8, 0x88, 0xc4, 0xc7, 0x80, 0x45, 0x43, 0x3e, 0x08, 0x98, 0x03, 0x7d, 0x60, 0x2e, 0x69, 0xd0,
	0x23, 0xbc, 0xff, 0x0f, 0xa6, 0xba, 0x02, 0x0e, 0x02, 0x6c, 0x0f, 0x2e, 0x99, 0x4b, 0x10, 0x3d,
	0xc4, 0x7b, 0x35, 0x6c, 0xc0, 0x58, 0x18, 0xf5, 0xfd, 0x21, 0x77, 0xc9, 0x06, 0x7d, 0x85, 0x7b,
	0x35, 0xa8, 0xf0, 0x03, 0x70, 0x22, 0xe0, 0x17, 0xb6, 0x07, 0x2e, 0x69, 0xd2, 0x63, 0x7c, 0x50,
	0x43, 0xbb, 0x30, 0x70, 0x7c, 0xce, 0x99, 0x23, 0x98, 0x4b, 0x36, 0xe9, 0x3e, 0xee, 0xd6, 0x55,
	0xc3, 0x39, 0xf3, 0x87, 0x82, 0x3c, 0xa0, 0x7b, 0xf8, 0x45, 0x0d, 0xd7, 0xb7, 0xc1, 0x63, 0x2e,
	0xd9, 0xa2, 0x16, 0x3e, 0xae, 0xc1, 0xce, 0x42, 0xdf, 0x76, 0x1d, 0x7b, 0x20, 0xaa, 0xc0, 0x36,
	0x3d, 0xc0, 0x2f, 0x6b, 0x02, 0x8e, 0x7f, 0x1e, 0x78, 0x4c, 0x30, 0xd2, 0x3a, 0xd3, 0xdf, 0x97,
	0x06, 0xba, 0x5b, 0x1a, 0xe8, 0xe7, 0xd2, 0x40, 0x5f, 0x56, 0x46, 0xe3, 0x6e, 0x65, 0x34, 0x7e,
	0xac, 0x8c, 0x06, 0x7e, 0x2a, 0x55, 0xb9, 0x55, 0xb3, 0xf0, 0x21, 0xaf, 0x94, 0x09, 0xd0, 0xa5,
	0x7d, 0x2b, 0xf5, 0x64, 0x76, 0x55, 0xec, 0xda, 0x2a, 0x80, 0xd7, 0x52, 0x95, 0x5f, 0x4b, 0x4f,
	0x64, 0x36, 0x8e, 0xd2, 0x51, 0xa6, 0x17, 0x56, 0x19, 0xb2, 0x4a, 0xdb, 0xac, 0x51, 0x2a, 0x0b,
	0x5b, 0x7f, 0xab, 0x7e, 0xb5, 0x55, 0x4a, 0xfb, 0xe6, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38,
	0xb7, 0x7d, 0x02, 0xff, 0x02, 0x00, 0x00,
}

func (m *LinkingEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkingEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkingEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthInfo != nil {
		{
			size, err := m.AuthInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLinking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PeerIds) > 0 {
		for iNdEx := len(m.PeerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PeerIds[iNdEx])
			copy(dAtA[i:], m.PeerIds[iNdEx])
			i = encodeVarintLinking(dAtA, i, uint64(len(m.PeerIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintLinking(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLinking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLinking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LinkingEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLinking(uint64(m.Type))
	}
	if len(m.PeerIds) > 0 {
		for _, s := range m.PeerIds {
			l = len(s)
			n += 1 + l + sovLinking(uint64(l))
		}
	}
	if m.AuthInfo != nil {
		l = m.AuthInfo.Size()
		n += 1 + l + sovLinking(uint64(l))
	}
	return n
}

func sovLinking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLinking(x uint64) (n int) {
	return sovLinking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LinkingEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLinking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkingEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkingEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLinking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= LinkingEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLinking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLinking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLinking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerIds = append(m.PeerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLinking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLinking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLinking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthInfo == nil {
				m.AuthInfo = &common.AuthInfo{}
			}
			if err := m.AuthInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLinking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLinking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLinking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLinking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLinking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLinking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLinking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLinking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLinking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLinking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLinking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLinking = fmt.Errorf("proto: unexpected end of group")
)
