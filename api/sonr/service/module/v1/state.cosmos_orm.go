// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package modulev1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type CredentialTable interface {
	Insert(ctx context.Context, credential *Credential) error
	InsertReturningSequence(ctx context.Context, credential *Credential) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, credential *Credential) error
	Save(ctx context.Context, credential *Credential) error
	Delete(ctx context.Context, credential *Credential) error
	Has(ctx context.Context, sequence uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, sequence uint64) (*Credential, error)
	HasByOriginHandle(ctx context.Context, origin string, handle string) (found bool, err error)
	// GetByOriginHandle returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOriginHandle(ctx context.Context, origin string, handle string) (*Credential, error)
	HasById(ctx context.Context, id []byte) (found bool, err error)
	// GetById returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetById(ctx context.Context, id []byte) (*Credential, error)
	HasByOriginAuthority(ctx context.Context, origin string, authority string) (found bool, err error)
	// GetByOriginAuthority returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOriginAuthority(ctx context.Context, origin string, authority string) (*Credential, error)
	List(ctx context.Context, prefixKey CredentialIndexKey, opts ...ormlist.Option) (CredentialIterator, error)
	ListRange(ctx context.Context, from, to CredentialIndexKey, opts ...ormlist.Option) (CredentialIterator, error)
	DeleteBy(ctx context.Context, prefixKey CredentialIndexKey) error
	DeleteRange(ctx context.Context, from, to CredentialIndexKey) error

	doNotImplement()
}

type CredentialIterator struct {
	ormtable.Iterator
}

func (i CredentialIterator) Value() (*Credential, error) {
	var credential Credential
	err := i.UnmarshalMessage(&credential)
	return &credential, err
}

type CredentialIndexKey interface {
	id() uint32
	values() []interface{}
	credentialIndexKey()
}

// primary key starting index..
type CredentialPrimaryKey = CredentialSequenceIndexKey

type CredentialSequenceIndexKey struct {
	vs []interface{}
}

func (x CredentialSequenceIndexKey) id() uint32            { return 0 }
func (x CredentialSequenceIndexKey) values() []interface{} { return x.vs }
func (x CredentialSequenceIndexKey) credentialIndexKey()   {}

func (this CredentialSequenceIndexKey) WithSequence(sequence uint64) CredentialSequenceIndexKey {
	this.vs = []interface{}{sequence}
	return this
}

type CredentialHandleIndexKey struct {
	vs []interface{}
}

func (x CredentialHandleIndexKey) id() uint32            { return 1 }
func (x CredentialHandleIndexKey) values() []interface{} { return x.vs }
func (x CredentialHandleIndexKey) credentialIndexKey()   {}

func (this CredentialHandleIndexKey) WithHandle(handle string) CredentialHandleIndexKey {
	this.vs = []interface{}{handle}
	return this
}

type CredentialOriginHandleIndexKey struct {
	vs []interface{}
}

func (x CredentialOriginHandleIndexKey) id() uint32            { return 2 }
func (x CredentialOriginHandleIndexKey) values() []interface{} { return x.vs }
func (x CredentialOriginHandleIndexKey) credentialIndexKey()   {}

func (this CredentialOriginHandleIndexKey) WithOrigin(origin string) CredentialOriginHandleIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this CredentialOriginHandleIndexKey) WithOriginHandle(origin string, handle string) CredentialOriginHandleIndexKey {
	this.vs = []interface{}{origin, handle}
	return this
}

type CredentialIdIndexKey struct {
	vs []interface{}
}

func (x CredentialIdIndexKey) id() uint32            { return 3 }
func (x CredentialIdIndexKey) values() []interface{} { return x.vs }
func (x CredentialIdIndexKey) credentialIndexKey()   {}

func (this CredentialIdIndexKey) WithId(id []byte) CredentialIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type CredentialOriginAuthorityIndexKey struct {
	vs []interface{}
}

func (x CredentialOriginAuthorityIndexKey) id() uint32            { return 4 }
func (x CredentialOriginAuthorityIndexKey) values() []interface{} { return x.vs }
func (x CredentialOriginAuthorityIndexKey) credentialIndexKey()   {}

func (this CredentialOriginAuthorityIndexKey) WithOrigin(origin string) CredentialOriginAuthorityIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this CredentialOriginAuthorityIndexKey) WithOriginAuthority(origin string, authority string) CredentialOriginAuthorityIndexKey {
	this.vs = []interface{}{origin, authority}
	return this
}

type credentialTable struct {
	table ormtable.AutoIncrementTable
}

func (this credentialTable) Insert(ctx context.Context, credential *Credential) error {
	return this.table.Insert(ctx, credential)
}

func (this credentialTable) Update(ctx context.Context, credential *Credential) error {
	return this.table.Update(ctx, credential)
}

func (this credentialTable) Save(ctx context.Context, credential *Credential) error {
	return this.table.Save(ctx, credential)
}

func (this credentialTable) Delete(ctx context.Context, credential *Credential) error {
	return this.table.Delete(ctx, credential)
}

func (this credentialTable) InsertReturningSequence(ctx context.Context, credential *Credential) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, credential)
}

func (this credentialTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this credentialTable) Has(ctx context.Context, sequence uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, sequence)
}

func (this credentialTable) Get(ctx context.Context, sequence uint64) (*Credential, error) {
	var credential Credential
	found, err := this.table.PrimaryKey().Get(ctx, &credential, sequence)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &credential, nil
}

func (this credentialTable) HasByOriginHandle(ctx context.Context, origin string, handle string) (found bool, err error) {
	return this.table.GetIndexByID(2).(ormtable.UniqueIndex).Has(ctx,
		origin,
		handle,
	)
}

func (this credentialTable) GetByOriginHandle(ctx context.Context, origin string, handle string) (*Credential, error) {
	var credential Credential
	found, err := this.table.GetIndexByID(2).(ormtable.UniqueIndex).Get(ctx, &credential,
		origin,
		handle,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &credential, nil
}

func (this credentialTable) HasById(ctx context.Context, id []byte) (found bool, err error) {
	return this.table.GetIndexByID(3).(ormtable.UniqueIndex).Has(ctx,
		id,
	)
}

func (this credentialTable) GetById(ctx context.Context, id []byte) (*Credential, error) {
	var credential Credential
	found, err := this.table.GetIndexByID(3).(ormtable.UniqueIndex).Get(ctx, &credential,
		id,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &credential, nil
}

func (this credentialTable) HasByOriginAuthority(ctx context.Context, origin string, authority string) (found bool, err error) {
	return this.table.GetIndexByID(4).(ormtable.UniqueIndex).Has(ctx,
		origin,
		authority,
	)
}

func (this credentialTable) GetByOriginAuthority(ctx context.Context, origin string, authority string) (*Credential, error) {
	var credential Credential
	found, err := this.table.GetIndexByID(4).(ormtable.UniqueIndex).Get(ctx, &credential,
		origin,
		authority,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &credential, nil
}

func (this credentialTable) List(ctx context.Context, prefixKey CredentialIndexKey, opts ...ormlist.Option) (CredentialIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return CredentialIterator{it}, err
}

func (this credentialTable) ListRange(ctx context.Context, from, to CredentialIndexKey, opts ...ormlist.Option) (CredentialIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return CredentialIterator{it}, err
}

func (this credentialTable) DeleteBy(ctx context.Context, prefixKey CredentialIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this credentialTable) DeleteRange(ctx context.Context, from, to CredentialIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this credentialTable) doNotImplement() {}

var _ CredentialTable = credentialTable{}

func NewCredentialTable(db ormtable.Schema) (CredentialTable, error) {
	table := db.GetTable(&Credential{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Credential{}).ProtoReflect().Descriptor().FullName()))
	}
	return credentialTable{table.(ormtable.AutoIncrementTable)}, nil
}

type ProfileTable interface {
	Insert(ctx context.Context, profile *Profile) error
	InsertReturningIndex(ctx context.Context, profile *Profile) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, profile *Profile) error
	Save(ctx context.Context, profile *Profile) error
	Delete(ctx context.Context, profile *Profile) error
	Has(ctx context.Context, index uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, index uint64) (*Profile, error)
	HasByOriginAuthority(ctx context.Context, origin string, authority string) (found bool, err error)
	// GetByOriginAuthority returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOriginAuthority(ctx context.Context, origin string, authority string) (*Profile, error)
	List(ctx context.Context, prefixKey ProfileIndexKey, opts ...ormlist.Option) (ProfileIterator, error)
	ListRange(ctx context.Context, from, to ProfileIndexKey, opts ...ormlist.Option) (ProfileIterator, error)
	DeleteBy(ctx context.Context, prefixKey ProfileIndexKey) error
	DeleteRange(ctx context.Context, from, to ProfileIndexKey) error

	doNotImplement()
}

type ProfileIterator struct {
	ormtable.Iterator
}

func (i ProfileIterator) Value() (*Profile, error) {
	var profile Profile
	err := i.UnmarshalMessage(&profile)
	return &profile, err
}

type ProfileIndexKey interface {
	id() uint32
	values() []interface{}
	profileIndexKey()
}

// primary key starting index..
type ProfilePrimaryKey = ProfileIndexIndexKey

type ProfileIndexIndexKey struct {
	vs []interface{}
}

func (x ProfileIndexIndexKey) id() uint32            { return 0 }
func (x ProfileIndexIndexKey) values() []interface{} { return x.vs }
func (x ProfileIndexIndexKey) profileIndexKey()      {}

func (this ProfileIndexIndexKey) WithIndex(index uint64) ProfileIndexIndexKey {
	this.vs = []interface{}{index}
	return this
}

type ProfileOriginAuthorityIndexKey struct {
	vs []interface{}
}

func (x ProfileOriginAuthorityIndexKey) id() uint32            { return 1 }
func (x ProfileOriginAuthorityIndexKey) values() []interface{} { return x.vs }
func (x ProfileOriginAuthorityIndexKey) profileIndexKey()      {}

func (this ProfileOriginAuthorityIndexKey) WithOrigin(origin string) ProfileOriginAuthorityIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this ProfileOriginAuthorityIndexKey) WithOriginAuthority(origin string, authority string) ProfileOriginAuthorityIndexKey {
	this.vs = []interface{}{origin, authority}
	return this
}

type profileTable struct {
	table ormtable.AutoIncrementTable
}

func (this profileTable) Insert(ctx context.Context, profile *Profile) error {
	return this.table.Insert(ctx, profile)
}

func (this profileTable) Update(ctx context.Context, profile *Profile) error {
	return this.table.Update(ctx, profile)
}

func (this profileTable) Save(ctx context.Context, profile *Profile) error {
	return this.table.Save(ctx, profile)
}

func (this profileTable) Delete(ctx context.Context, profile *Profile) error {
	return this.table.Delete(ctx, profile)
}

func (this profileTable) InsertReturningIndex(ctx context.Context, profile *Profile) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, profile)
}

func (this profileTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this profileTable) Has(ctx context.Context, index uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, index)
}

func (this profileTable) Get(ctx context.Context, index uint64) (*Profile, error) {
	var profile Profile
	found, err := this.table.PrimaryKey().Get(ctx, &profile, index)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &profile, nil
}

func (this profileTable) HasByOriginAuthority(ctx context.Context, origin string, authority string) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		origin,
		authority,
	)
}

func (this profileTable) GetByOriginAuthority(ctx context.Context, origin string, authority string) (*Profile, error) {
	var profile Profile
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &profile,
		origin,
		authority,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &profile, nil
}

func (this profileTable) List(ctx context.Context, prefixKey ProfileIndexKey, opts ...ormlist.Option) (ProfileIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ProfileIterator{it}, err
}

func (this profileTable) ListRange(ctx context.Context, from, to ProfileIndexKey, opts ...ormlist.Option) (ProfileIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ProfileIterator{it}, err
}

func (this profileTable) DeleteBy(ctx context.Context, prefixKey ProfileIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this profileTable) DeleteRange(ctx context.Context, from, to ProfileIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this profileTable) doNotImplement() {}

var _ ProfileTable = profileTable{}

func NewProfileTable(db ormtable.Schema) (ProfileTable, error) {
	table := db.GetTable(&Profile{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Profile{}).ProtoReflect().Descriptor().FullName()))
	}
	return profileTable{table.(ormtable.AutoIncrementTable)}, nil
}

type StateStore interface {
	CredentialTable() CredentialTable
	ProfileTable() ProfileTable

	doNotImplement()
}

type stateStore struct {
	credential CredentialTable
	profile    ProfileTable
}

func (x stateStore) CredentialTable() CredentialTable {
	return x.credential
}

func (x stateStore) ProfileTable() ProfileTable {
	return x.profile
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	credentialTable, err := NewCredentialTable(db)
	if err != nil {
		return nil, err
	}

	profileTable, err := NewProfileTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		credentialTable,
		profileTable,
	}, nil
}
