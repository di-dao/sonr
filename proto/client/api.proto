/// This file has messages for describing a API Request/Responses with RPC.
syntax = "proto3";

package sonr.node;
import "proto/common/core.proto";
option go_package = "github.com/sonr-io/core/internal/node";

// InitializeRequest Message to Establish Sonr Host/API/Room
message InitializeRequest {
  sonr.core.Location location = 1;     // Current Runtime Location
  sonr.core.Profile profile = 2;       // Users Contact Card
  sonr.core.Connection connection = 3; // Internet Connection Type
  HostOptions hostOptions = 4;         // Libp2p Host config
  ServiceOptions serviceOptions = 5;   // Service Config
  DeviceOptions deviceOptions = 6;     // File System Config
  EnvOptions envOptions = 7;           // Environment Config

  // Optional Message to Initialize FileSystem
  message DeviceOptions {
    string documentsDir = 1; // Documents Directory
    string cacheDir = 2;     // Cache Directory
    string supportDir = 3;   // Support Directory
    string id = 4;           // Device ID
  }

  // Optional Message to Initialize Env Variables
  message EnvOptions {
    map<string, string> variables = 1;     // Environment Variables
    sonr.core.Environment environment = 2; // Environment Config
  }

  // Libp2p Host Options
  message HostOptions {
    bool quicTransport = 1;             // Enable QUIC Transport
    bool httpTransport = 2;             // Enable HTTP Transport
    bool ipv4Only = 3;                  // Enable IPv4 Only
    repeated IPAddress listenAddrs = 4; // List of Listen Addresses (optional)
  }

  // Service Configuration
  message ServiceOptions {
    bool textile = 1;    // Enable Textile Client and Threads
    bool mailbox = 2;    // Enable Mailbox
    bool buckets = 3;    // Enable Buckets
    bool autoUpdate = 4; // Enable Auto Update Events
  }

  // IP Address Interface
  message IPAddress {
    string name = 1;   // Name of Interface
    string value = 2;  // IP Address of Interface
    string mac = 3;    // Mac Address of Interface
    bool internal = 4; // Wether it is a Loopback Interface
    Family family = 5; // Address Family

    enum Family {
      IPV4 = 0; // IPv4 Address
      IPV6 = 1; // IPv6 Address
    }
  }
}

// InitializeResponse is Response from Initialize Request
message InitializeResponse {
  bool success = 1; // True if Host is Active
  string error = 2; // Error Message if Host is not Active
}

// SupplyRequest supplies path to files or urls and optionally a Peer
message SupplyRequest {
  repeated string paths = 1;        // Supply Paths
  optional sonr.core.Peer peer = 2; // Supply Peer
}

// SupplyResponse is response to SupplyRequest
message SupplyResponse {
  bool success = 1; // True if Supply is Active
  string error = 2; // Error Message if Supply is not Active
}

// EditRequest is request to edit user profile
message EditRequest {
  sonr.core.Profile profile = 1; // Profile to Edit
}

// EditResponse is response to EditRequest
message EditResponse {
  bool success = 1; // True if Supply is Active
  string error = 2; // Error Message if Supply is not Active
}

// ShareRequest is request to share supplied files/urls with a peer
message ShareRequest {
  sonr.core.Peer peer = 1; // Peer to Share with
}

// ShareResponse is response to ShareRequest
message ShareResponse {
  bool success = 1; // True if Supply is Active
  string error = 2; // Error Message if Supply is not Active
}

// RespondRequest is request to respond to a share request
message RespondRequest {
  bool decision = 1;       // True if Supply is Active
  sonr.core.Peer peer = 2; // Peer to Share with
}

// RespondResponse is response to RespondRequest
message RespondResponse {
  bool success = 1; // True if Supply is Active
  string error = 2; // Error Message if Supply is not Active
}

// FindRequest is Message for Searching for Peer
message FindRequest {
  oneof query {
    string sName = 1;  // SName combined with Device ID and Hashed
    string peerId = 2; // Peer ID
  }
}

// FindResponse is Message for Searching for Peer
message FindResponse {
  bool success = 1;        // Success
  string error = 2;        // Error Message
  sonr.core.Peer peer = 3; // Peer Data
  string peerId = 4;       // Peer ID
  string sName = 5;        // SName
}

// StatRequest is Message for Searching for Peer
message StatRequest {}

// StatResponse is a response to StatRequest that displays Node Stats
message StatResponse {
  string sName = 1;              // SName
  sonr.core.Profile profile = 2; // Profile Data
  Device device = 3;             // Device Data
  Network network = 4;           // Network Data

  // Device Stats
  message Device {
    string id = 1;      // Device ID
    string name = 2;    // Device Name
    string os = 3;      // Operating System
    string arch = 4;    // Architecture
    bool isDesktop = 5; // Desktop Device
    bool isMobile = 6;  // Mobile Device
  }

  // Network Stats
  message Network {
    string publicKey = 1; // Public Key
    string peerID = 2;    // Peer ID
    string multiaddr = 3; // Multi Address
  }
}
