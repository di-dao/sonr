// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/identity/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetDIDDocumentRequest is the request type for the Query/DIDDocument RPC
// method.
type QueryGetDIDDocumentRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryGetDIDDocumentRequest) Reset()         { *m = QueryGetDIDDocumentRequest{} }
func (m *QueryGetDIDDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDIDDocumentRequest) ProtoMessage()    {}
func (*QueryGetDIDDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{2}
}
func (m *QueryGetDIDDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDIDDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDIDDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDIDDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDIDDocumentRequest.Merge(m, src)
}
func (m *QueryGetDIDDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDIDDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDIDDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDIDDocumentRequest proto.InternalMessageInfo

func (m *QueryGetDIDDocumentRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

// QueryGetDIDDocumentResponse is the response type for the Query/DIDDocument
// RPC method.
type QueryGetDIDDocumentResponse struct {
	DIDDocument DIDDocument `protobuf:"bytes,1,opt,name=dIDDocument,proto3" json:"dIDDocument"`
}

func (m *QueryGetDIDDocumentResponse) Reset()         { *m = QueryGetDIDDocumentResponse{} }
func (m *QueryGetDIDDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDIDDocumentResponse) ProtoMessage()    {}
func (*QueryGetDIDDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{3}
}
func (m *QueryGetDIDDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDIDDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDIDDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDIDDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDIDDocumentResponse.Merge(m, src)
}
func (m *QueryGetDIDDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDIDDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDIDDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDIDDocumentResponse proto.InternalMessageInfo

func (m *QueryGetDIDDocumentResponse) GetDIDDocument() DIDDocument {
	if m != nil {
		return m.DIDDocument
	}
	return DIDDocument{}
}

// QueryAllDIDDocumentRequest is the request type for the Query/DIDDocumentAll
// RPC method.
type QueryAllDIDDocumentRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDIDDocumentRequest) Reset()         { *m = QueryAllDIDDocumentRequest{} }
func (m *QueryAllDIDDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDIDDocumentRequest) ProtoMessage()    {}
func (*QueryAllDIDDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{4}
}
func (m *QueryAllDIDDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDIDDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDIDDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDIDDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDIDDocumentRequest.Merge(m, src)
}
func (m *QueryAllDIDDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDIDDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDIDDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDIDDocumentRequest proto.InternalMessageInfo

func (m *QueryAllDIDDocumentRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllDIDDocumentResponse is the response type for the Query/DIDDocumentAll
// RPC method.
type QueryAllDIDDocumentResponse struct {
	DIDDocument []DIDDocument       `protobuf:"bytes,1,rep,name=dIDDocument,proto3" json:"dIDDocument"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDIDDocumentResponse) Reset()         { *m = QueryAllDIDDocumentResponse{} }
func (m *QueryAllDIDDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDIDDocumentResponse) ProtoMessage()    {}
func (*QueryAllDIDDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{5}
}
func (m *QueryAllDIDDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDIDDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDIDDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDIDDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDIDDocumentResponse.Merge(m, src)
}
func (m *QueryAllDIDDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDIDDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDIDDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDIDDocumentResponse proto.InternalMessageInfo

func (m *QueryAllDIDDocumentResponse) GetDIDDocument() []DIDDocument {
	if m != nil {
		return m.DIDDocument
	}
	return nil
}

func (m *QueryAllDIDDocumentResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDidByAlsoKnownAsRequest is the request type for the
// Query/DidByAlsoKnownAs RPC method.
type QueryDidByAlsoKnownAsRequest struct {
	// aka_aliasid is the unique identifier of the DIDDocument - it appears like
	// ("example.snr")
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (m *QueryDidByAlsoKnownAsRequest) Reset()         { *m = QueryDidByAlsoKnownAsRequest{} }
func (m *QueryDidByAlsoKnownAsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDidByAlsoKnownAsRequest) ProtoMessage()    {}
func (*QueryDidByAlsoKnownAsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{6}
}
func (m *QueryDidByAlsoKnownAsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidByAlsoKnownAsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidByAlsoKnownAsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidByAlsoKnownAsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidByAlsoKnownAsRequest.Merge(m, src)
}
func (m *QueryDidByAlsoKnownAsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidByAlsoKnownAsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidByAlsoKnownAsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidByAlsoKnownAsRequest proto.InternalMessageInfo

func (m *QueryDidByAlsoKnownAsRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

// QueryDidByAlsoKnownAsResponse is the response type for the
// Query/DidByAlsoKnownAs RPC method.
type QueryDidByAlsoKnownAsResponse struct {
	// A DIDDocument is a JSON-LD object that contains a set of public keys
	DidDocument DIDDocument `protobuf:"bytes,1,opt,name=didDocument,proto3" json:"didDocument"`
}

func (m *QueryDidByAlsoKnownAsResponse) Reset()         { *m = QueryDidByAlsoKnownAsResponse{} }
func (m *QueryDidByAlsoKnownAsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDidByAlsoKnownAsResponse) ProtoMessage()    {}
func (*QueryDidByAlsoKnownAsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{7}
}
func (m *QueryDidByAlsoKnownAsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidByAlsoKnownAsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidByAlsoKnownAsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidByAlsoKnownAsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidByAlsoKnownAsResponse.Merge(m, src)
}
func (m *QueryDidByAlsoKnownAsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidByAlsoKnownAsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidByAlsoKnownAsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidByAlsoKnownAsResponse proto.InternalMessageInfo

func (m *QueryDidByAlsoKnownAsResponse) GetDidDocument() DIDDocument {
	if m != nil {
		return m.DidDocument
	}
	return DIDDocument{}
}

// QueryAliasAvailableRequest is the request type for the Query/AliasAvailable
// RPC method.
type QueryAliasAvailableRequest struct {
	// alias is the unique identifier of the DIDDocument - it appears like
	// ("example.snr")
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (m *QueryAliasAvailableRequest) Reset()         { *m = QueryAliasAvailableRequest{} }
func (m *QueryAliasAvailableRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAliasAvailableRequest) ProtoMessage()    {}
func (*QueryAliasAvailableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{8}
}
func (m *QueryAliasAvailableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliasAvailableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliasAvailableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliasAvailableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliasAvailableRequest.Merge(m, src)
}
func (m *QueryAliasAvailableRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliasAvailableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliasAvailableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliasAvailableRequest proto.InternalMessageInfo

func (m *QueryAliasAvailableRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

// QueryAliasAvailableResponse is the response type for the Query/AliasAvailable
// RPC method.
type QueryAliasAvailableResponse struct {
	Available        bool         `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	ExistingDocument *DIDDocument `protobuf:"bytes,2,opt,name=existing_document,json=existingDocument,proto3" json:"existing_document,omitempty"`
}

func (m *QueryAliasAvailableResponse) Reset()         { *m = QueryAliasAvailableResponse{} }
func (m *QueryAliasAvailableResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAliasAvailableResponse) ProtoMessage()    {}
func (*QueryAliasAvailableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{9}
}
func (m *QueryAliasAvailableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAliasAvailableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAliasAvailableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAliasAvailableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAliasAvailableResponse.Merge(m, src)
}
func (m *QueryAliasAvailableResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAliasAvailableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAliasAvailableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAliasAvailableResponse proto.InternalMessageInfo

func (m *QueryAliasAvailableResponse) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *QueryAliasAvailableResponse) GetExistingDocument() *DIDDocument {
	if m != nil {
		return m.ExistingDocument
	}
	return nil
}

// QueryDidByOwnerRequest is the request type for the Query/DidByOwner RPC
// method.
type QueryDidByOwnerRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryDidByOwnerRequest) Reset()         { *m = QueryDidByOwnerRequest{} }
func (m *QueryDidByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDidByOwnerRequest) ProtoMessage()    {}
func (*QueryDidByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{10}
}
func (m *QueryDidByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidByOwnerRequest.Merge(m, src)
}
func (m *QueryDidByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidByOwnerRequest proto.InternalMessageInfo

func (m *QueryDidByOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryDidByOwnerResponse is the response type for the Query/DidByOwner RPC
// method.
type QueryDidByOwnerResponse struct {
	DidDocument DIDDocument `protobuf:"bytes,1,opt,name=didDocument,proto3" json:"didDocument"`
}

func (m *QueryDidByOwnerResponse) Reset()         { *m = QueryDidByOwnerResponse{} }
func (m *QueryDidByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDidByOwnerResponse) ProtoMessage()    {}
func (*QueryDidByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{11}
}
func (m *QueryDidByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidByOwnerResponse.Merge(m, src)
}
func (m *QueryDidByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidByOwnerResponse proto.InternalMessageInfo

func (m *QueryDidByOwnerResponse) GetDidDocument() DIDDocument {
	if m != nil {
		return m.DidDocument
	}
	return DIDDocument{}
}

// QueryGetControllerAccountRequest is the request type for the
// Query/ControllerAccount RPC method.
type QueryGetControllerAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetControllerAccountRequest) Reset()         { *m = QueryGetControllerAccountRequest{} }
func (m *QueryGetControllerAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetControllerAccountRequest) ProtoMessage()    {}
func (*QueryGetControllerAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{12}
}
func (m *QueryGetControllerAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetControllerAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetControllerAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetControllerAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetControllerAccountRequest.Merge(m, src)
}
func (m *QueryGetControllerAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetControllerAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetControllerAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetControllerAccountRequest proto.InternalMessageInfo

func (m *QueryGetControllerAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryGetControllerAccountResponse is the response type for the
// Query/ControllerAccount RPC method.
type QueryGetControllerAccountResponse struct {
	ControllerAccount ControllerAccount `protobuf:"bytes,1,opt,name=controllerAccount,proto3" json:"controllerAccount"`
}

func (m *QueryGetControllerAccountResponse) Reset()         { *m = QueryGetControllerAccountResponse{} }
func (m *QueryGetControllerAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetControllerAccountResponse) ProtoMessage()    {}
func (*QueryGetControllerAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{13}
}
func (m *QueryGetControllerAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetControllerAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetControllerAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetControllerAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetControllerAccountResponse.Merge(m, src)
}
func (m *QueryGetControllerAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetControllerAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetControllerAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetControllerAccountResponse proto.InternalMessageInfo

func (m *QueryGetControllerAccountResponse) GetControllerAccount() ControllerAccount {
	if m != nil {
		return m.ControllerAccount
	}
	return ControllerAccount{}
}

// QueryAllControllerAccountRequest is the request type for the
// Query/ControllerAccountAll RPC method.
type QueryAllControllerAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllControllerAccountRequest) Reset()         { *m = QueryAllControllerAccountRequest{} }
func (m *QueryAllControllerAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllControllerAccountRequest) ProtoMessage()    {}
func (*QueryAllControllerAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{14}
}
func (m *QueryAllControllerAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllControllerAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllControllerAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllControllerAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllControllerAccountRequest.Merge(m, src)
}
func (m *QueryAllControllerAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllControllerAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllControllerAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllControllerAccountRequest proto.InternalMessageInfo

func (m *QueryAllControllerAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllControllerAccountResponse is the response type for the
// Query/ControllerAccountAll RPC method.
type QueryAllControllerAccountResponse struct {
	ControllerAccount []ControllerAccount `protobuf:"bytes,1,rep,name=controllerAccount,proto3" json:"controllerAccount"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllControllerAccountResponse) Reset()         { *m = QueryAllControllerAccountResponse{} }
func (m *QueryAllControllerAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllControllerAccountResponse) ProtoMessage()    {}
func (*QueryAllControllerAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55ac06fdf68c11fd, []int{15}
}
func (m *QueryAllControllerAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllControllerAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllControllerAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllControllerAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllControllerAccountResponse.Merge(m, src)
}
func (m *QueryAllControllerAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllControllerAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllControllerAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllControllerAccountResponse proto.InternalMessageInfo

func (m *QueryAllControllerAccountResponse) GetControllerAccount() []ControllerAccount {
	if m != nil {
		return m.ControllerAccount
	}
	return nil
}

func (m *QueryAllControllerAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "core.identity.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "core.identity.QueryParamsResponse")
	proto.RegisterType((*QueryGetDIDDocumentRequest)(nil), "core.identity.QueryGetDIDDocumentRequest")
	proto.RegisterType((*QueryGetDIDDocumentResponse)(nil), "core.identity.QueryGetDIDDocumentResponse")
	proto.RegisterType((*QueryAllDIDDocumentRequest)(nil), "core.identity.QueryAllDIDDocumentRequest")
	proto.RegisterType((*QueryAllDIDDocumentResponse)(nil), "core.identity.QueryAllDIDDocumentResponse")
	proto.RegisterType((*QueryDidByAlsoKnownAsRequest)(nil), "core.identity.QueryDidByAlsoKnownAsRequest")
	proto.RegisterType((*QueryDidByAlsoKnownAsResponse)(nil), "core.identity.QueryDidByAlsoKnownAsResponse")
	proto.RegisterType((*QueryAliasAvailableRequest)(nil), "core.identity.QueryAliasAvailableRequest")
	proto.RegisterType((*QueryAliasAvailableResponse)(nil), "core.identity.QueryAliasAvailableResponse")
	proto.RegisterType((*QueryDidByOwnerRequest)(nil), "core.identity.QueryDidByOwnerRequest")
	proto.RegisterType((*QueryDidByOwnerResponse)(nil), "core.identity.QueryDidByOwnerResponse")
	proto.RegisterType((*QueryGetControllerAccountRequest)(nil), "core.identity.QueryGetControllerAccountRequest")
	proto.RegisterType((*QueryGetControllerAccountResponse)(nil), "core.identity.QueryGetControllerAccountResponse")
	proto.RegisterType((*QueryAllControllerAccountRequest)(nil), "core.identity.QueryAllControllerAccountRequest")
	proto.RegisterType((*QueryAllControllerAccountResponse)(nil), "core.identity.QueryAllControllerAccountResponse")
}

func init() { proto.RegisterFile("core/identity/query.proto", fileDescriptor_55ac06fdf68c11fd) }

var fileDescriptor_55ac06fdf68c11fd = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4d, 0x4f, 0xe3, 0x46,
	0x18, 0xc7, 0x63, 0x28, 0x14, 0x06, 0x15, 0x85, 0x69, 0x08, 0xd4, 0x04, 0x37, 0x8c, 0x5a, 0x68,
	0x69, 0xe5, 0x29, 0xd0, 0x63, 0x2f, 0x4e, 0xa3, 0xa2, 0xb6, 0xaa, 0x4a, 0xa3, 0x9e, 0x2a, 0x55,
	0xd5, 0xc4, 0x1e, 0x99, 0x69, 0x1d, 0x4f, 0xb0, 0x1d, 0x20, 0x4a, 0xb9, 0xec, 0x71, 0xa5, 0x95,
	0x56, 0xda, 0xc3, 0xde, 0xf6, 0x03, 0xec, 0xc7, 0xd8, 0x13, 0x47, 0xa4, 0xbd, 0xec, 0x69, 0xb5,
	0x82, 0xfd, 0x20, 0x2b, 0x8f, 0xc7, 0x71, 0x1c, 0xdb, 0x21, 0xec, 0x72, 0xb2, 0x3d, 0xf3, 0xbc,
	0xfc, 0x9e, 0x79, 0x66, 0xfe, 0x63, 0xf0, 0x99, 0xc9, 0x3d, 0x8a, 0x99, 0x45, 0xdd, 0x80, 0x05,
	0x7d, 0x7c, 0xd2, 0xa3, 0x5e, 0x5f, 0xef, 0x7a, 0x3c, 0xe0, 0xf0, 0x93, 0x70, 0x4a, 0x8f, 0xa7,
	0xd4, 0x8d, 0xb4, 0x25, 0x31, 0x4d, 0xde, 0x73, 0x83, 0xc8, 0x56, 0x5d, 0x4b, 0x4f, 0x5a, 0xcc,
	0x92, 0x13, 0x6a, 0x7a, 0xa2, 0x4b, 0x3c, 0xd2, 0xf1, 0xe5, 0xdc, 0xae, 0xc9, 0xfd, 0x0e, 0xf7,
	0x71, 0x9b, 0xf8, 0x34, 0xca, 0x8c, 0x4f, 0xf7, 0xda, 0x34, 0x20, 0x7b, 0xb8, 0x4b, 0x6c, 0xe6,
	0x92, 0x80, 0x71, 0x57, 0xda, 0x56, 0x6c, 0x6e, 0x73, 0xf1, 0x8a, 0xc3, 0x37, 0x39, 0x5a, 0xb3,
	0x39, 0xb7, 0x1d, 0x8a, 0x49, 0x97, 0x61, 0xe2, 0xba, 0x3c, 0x10, 0x2e, 0x32, 0x3e, 0xaa, 0x00,
	0xf8, 0x47, 0x18, 0xf5, 0x48, 0x24, 0x6d, 0xd1, 0x93, 0x1e, 0xf5, 0x03, 0xf4, 0x0b, 0xf8, 0x34,
	0x35, 0xea, 0x77, 0xb9, 0xeb, 0x53, 0x78, 0x00, 0xe6, 0x23, 0xb8, 0x75, 0xa5, 0xae, 0x7c, 0xb5,
	0xb4, 0xbf, 0xaa, 0xa7, 0xca, 0xd7, 0x23, 0xf3, 0xc6, 0x47, 0x97, 0xaf, 0x3f, 0x2f, 0xb5, 0xa4,
	0x29, 0xd2, 0x81, 0x2a, 0x62, 0x1d, 0xd2, 0xa0, 0xf9, 0x73, 0xb3, 0xc9, 0xcd, 0x5e, 0x87, 0xba,
	0x81, 0xcc, 0x04, 0xcb, 0x60, 0xd6, 0x62, 0x96, 0x88, 0xb7, 0xd8, 0x0a, 0x5f, 0x11, 0x01, 0x1b,
	0xb9, 0xf6, 0x92, 0xa1, 0x01, 0x96, 0xac, 0x64, 0x58, 0x82, 0xa8, 0x63, 0x20, 0x23, 0x8e, 0x92,
	0x66, 0xd4, 0x09, 0x59, 0x12, 0xc9, 0x70, 0x9c, 0x1c, 0xa4, 0x9f, 0x00, 0x48, 0x96, 0x56, 0x26,
	0xd8, 0xd6, 0xa3, 0x3e, 0xe8, 0x61, 0x1f, 0xf4, 0x68, 0x07, 0xc8, 0x3e, 0xe8, 0x47, 0xc4, 0xa6,
	0xd2, 0xb7, 0x35, 0xe2, 0x89, 0x9e, 0x2b, 0xb2, 0x92, 0xf1, 0x34, 0x45, 0x95, 0xcc, 0xde, 0xb9,
	0x12, 0x78, 0x98, 0x62, 0x9d, 0x11, 0xac, 0x3b, 0xb7, 0xb2, 0x46, 0x00, 0x29, 0xd8, 0xef, 0x41,
	0x4d, 0xb0, 0x36, 0x99, 0xd5, 0xe8, 0x1b, 0x8e, 0xcf, 0x7f, 0x75, 0xf9, 0x99, 0x6b, 0xc4, 0x3b,
	0x02, 0x56, 0xc0, 0x1c, 0x71, 0x18, 0xf1, 0x65, 0xa7, 0xa2, 0x0f, 0x64, 0x82, 0xcd, 0x02, 0xaf,
	0x91, 0x1a, 0x99, 0xf5, 0x1e, 0xdd, 0x4a, 0x9c, 0xd0, 0xfe, 0xb0, 0x5b, 0x8c, 0xf8, 0xc6, 0x29,
	0x61, 0x0e, 0x69, 0x3b, 0x74, 0x32, 0xd8, 0xc3, 0x64, 0xed, 0xd3, 0x4e, 0x92, 0xab, 0x06, 0x16,
	0x49, 0x3c, 0x28, 0x3c, 0x17, 0x5a, 0xc9, 0x00, 0xfc, 0x0d, 0xac, 0xd0, 0x73, 0xe6, 0x07, 0xcc,
	0xb5, 0xff, 0xb1, 0x62, 0xf6, 0x99, 0xa9, 0xd8, 0x95, 0x56, 0x39, 0x76, 0x1d, 0x16, 0xa0, 0x83,
	0x6a, 0xb2, 0x4a, 0xbf, 0x9f, 0xb9, 0xd4, 0x1b, 0x81, 0xe7, 0xe1, 0x77, 0x0c, 0x2f, 0x3e, 0xd0,
	0xdf, 0x60, 0x2d, 0x63, 0x7f, 0x8f, 0xeb, 0xf9, 0x03, 0xa8, 0xc7, 0x07, 0xec, 0x47, 0xee, 0x06,
	0x1e, 0x77, 0x1c, 0xea, 0x19, 0x91, 0x54, 0xc5, 0x60, 0xeb, 0xe0, 0x63, 0x62, 0x59, 0x1e, 0xf5,
	0xe3, 0x75, 0x8d, 0x3f, 0x51, 0x1f, 0x6c, 0x4d, 0xf0, 0x96, 0x98, 0x7f, 0x82, 0x15, 0x73, 0x7c,
	0x52, 0xc2, 0xd6, 0xc7, 0x60, 0x33, 0x41, 0x24, 0x72, 0x36, 0x00, 0xfa, 0x57, 0x82, 0x1b, 0x8e,
	0x53, 0x08, 0x7e, 0x5f, 0x87, 0xf7, 0x85, 0x22, 0xeb, 0xcc, 0x4f, 0x36, 0xb9, 0xce, 0xd9, 0x0f,
	0xaa, 0xf3, 0xde, 0x0e, 0xf5, 0xfe, 0xe5, 0x02, 0x98, 0x13, 0x45, 0x40, 0x17, 0xcc, 0x47, 0xe2,
	0x0c, 0xb7, 0xc6, 0xb8, 0xb2, 0xea, 0xaf, 0xa2, 0x49, 0x26, 0x51, 0x1a, 0xb4, 0xf9, 0xe0, 0xe5,
	0xdb, 0x27, 0x33, 0x6b, 0x70, 0x15, 0x8b, 0xcb, 0x2b, 0xd2, 0xfa, 0xe1, 0x1d, 0x06, 0xff, 0x07,
	0x4b, 0x23, 0xbb, 0x10, 0x7e, 0x9d, 0x17, 0x31, 0xf7, 0x42, 0x50, 0x77, 0xa7, 0x31, 0x95, 0x10,
	0x55, 0x01, 0x51, 0x86, 0xcb, 0x58, 0xde, 0xa0, 0x78, 0x60, 0x31, 0xeb, 0x02, 0xf6, 0xc1, 0xf2,
	0x88, 0xb9, 0xe1, 0x38, 0xf9, 0x00, 0xb9, 0xf2, 0x9f, 0x0f, 0x90, 0x2f, 0xe1, 0xa8, 0x2c, 0x00,
	0x00, 0x5c, 0x88, 0x01, 0xe0, 0x00, 0x80, 0xe4, 0xd8, 0xc2, 0x2f, 0xf3, 0x62, 0x65, 0x64, 0x40,
	0xdd, 0xbe, 0xcd, 0x4c, 0xa6, 0xd3, 0x44, 0xba, 0x75, 0x58, 0x1d, 0xd6, 0x2b, 0x04, 0x03, 0x0f,
	0xc4, 0xe3, 0x02, 0x3e, 0x52, 0x40, 0x79, 0x5c, 0x8a, 0xe1, 0x37, 0x85, 0xc1, 0xb3, 0x32, 0xaf,
	0x7e, 0x3b, 0x9d, 0x71, 0x21, 0x8f, 0x50, 0x5f, 0x3c, 0x10, 0x0f, 0xc1, 0xb3, 0x9c, 0x16, 0xe0,
	0xa2, 0x46, 0xe4, 0x28, 0x7b, 0x51, 0x23, 0xf2, 0xf4, 0x1c, 0x7d, 0x21, 0x48, 0x34, 0x58, 0xcb,
	0x27, 0xc1, 0xe6, 0x31, 0x35, 0xff, 0x83, 0xcf, 0x14, 0xb0, 0x92, 0x39, 0x87, 0x10, 0x17, 0xec,
	0xb8, 0x22, 0x8d, 0x51, 0xbf, 0x9b, 0xde, 0x41, 0xe2, 0x6d, 0x0b, 0xbc, 0x3a, 0xd4, 0x86, 0x78,
	0xc9, 0xa9, 0x0f, 0x21, 0x23, 0x6d, 0xbd, 0x80, 0x4f, 0x15, 0x50, 0xc9, 0x44, 0x09, 0xf7, 0x2f,
	0x2e, 0xd8, 0x94, 0x77, 0x63, 0x9c, 0xa4, 0x65, 0xa8, 0x26, 0x18, 0xab, 0xb0, 0x92, 0xc7, 0xd8,
	0x30, 0x2e, 0xaf, 0x35, 0xe5, 0xea, 0x5a, 0x53, 0xde, 0x5c, 0x6b, 0xca, 0xe3, 0x1b, 0xad, 0x74,
	0x75, 0xa3, 0x95, 0x5e, 0xdd, 0x68, 0xa5, 0xbf, 0x76, 0x6c, 0x16, 0x1c, 0xf7, 0xda, 0xba, 0xc9,
	0x3b, 0xd8, 0xe7, 0xae, 0x77, 0x7c, 0x22, 0x1e, 0xf8, 0x3c, 0xf9, 0xa3, 0x0d, 0xfa, 0x5d, 0xea,
	0xb7, 0xe7, 0xc5, 0x1f, 0xe7, 0xc1, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x2d, 0xf5, 0x1d,
	0x4f, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DIDDocument queries a list of DIDDocument items.
	DIDDocument(ctx context.Context, in *QueryGetDIDDocumentRequest, opts ...grpc.CallOption) (*QueryGetDIDDocumentResponse, error)
	// DIDDocumentAll queries all DIDDocument items.
	DIDDocumentAll(ctx context.Context, in *QueryAllDIDDocumentRequest, opts ...grpc.CallOption) (*QueryAllDIDDocumentResponse, error)
	// DidByOwner returns DIDDocument based on an owner.
	DidByOwner(ctx context.Context, in *QueryDidByOwnerRequest, opts ...grpc.CallOption) (*QueryDidByOwnerResponse, error)
	// DidByAlsoKnownAs returns DIDDocument based on an alias *only Sonr
	// Identities.
	DidByAlsoKnownAs(ctx context.Context, in *QueryDidByAlsoKnownAsRequest, opts ...grpc.CallOption) (*QueryDidByAlsoKnownAsResponse, error)
	// AliasAvailable checks if a given alias is available to register *only Sonr
	// Identities.
	AliasAvailable(ctx context.Context, in *QueryAliasAvailableRequest, opts ...grpc.CallOption) (*QueryAliasAvailableResponse, error)
	// ControllerAccount queries a list of ControllerAccount items.
	ControllerAccount(ctx context.Context, in *QueryGetControllerAccountRequest, opts ...grpc.CallOption) (*QueryGetControllerAccountResponse, error)
	// ControllerAccountAll queries all ControllerAccount items.
	ControllerAccountAll(ctx context.Context, in *QueryAllControllerAccountRequest, opts ...grpc.CallOption) (*QueryAllControllerAccountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/core.identity.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DIDDocument(ctx context.Context, in *QueryGetDIDDocumentRequest, opts ...grpc.CallOption) (*QueryGetDIDDocumentResponse, error) {
	out := new(QueryGetDIDDocumentResponse)
	err := c.cc.Invoke(ctx, "/core.identity.Query/DIDDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DIDDocumentAll(ctx context.Context, in *QueryAllDIDDocumentRequest, opts ...grpc.CallOption) (*QueryAllDIDDocumentResponse, error) {
	out := new(QueryAllDIDDocumentResponse)
	err := c.cc.Invoke(ctx, "/core.identity.Query/DIDDocumentAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidByOwner(ctx context.Context, in *QueryDidByOwnerRequest, opts ...grpc.CallOption) (*QueryDidByOwnerResponse, error) {
	out := new(QueryDidByOwnerResponse)
	err := c.cc.Invoke(ctx, "/core.identity.Query/DidByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidByAlsoKnownAs(ctx context.Context, in *QueryDidByAlsoKnownAsRequest, opts ...grpc.CallOption) (*QueryDidByAlsoKnownAsResponse, error) {
	out := new(QueryDidByAlsoKnownAsResponse)
	err := c.cc.Invoke(ctx, "/core.identity.Query/DidByAlsoKnownAs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AliasAvailable(ctx context.Context, in *QueryAliasAvailableRequest, opts ...grpc.CallOption) (*QueryAliasAvailableResponse, error) {
	out := new(QueryAliasAvailableResponse)
	err := c.cc.Invoke(ctx, "/core.identity.Query/AliasAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ControllerAccount(ctx context.Context, in *QueryGetControllerAccountRequest, opts ...grpc.CallOption) (*QueryGetControllerAccountResponse, error) {
	out := new(QueryGetControllerAccountResponse)
	err := c.cc.Invoke(ctx, "/core.identity.Query/ControllerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ControllerAccountAll(ctx context.Context, in *QueryAllControllerAccountRequest, opts ...grpc.CallOption) (*QueryAllControllerAccountResponse, error) {
	out := new(QueryAllControllerAccountResponse)
	err := c.cc.Invoke(ctx, "/core.identity.Query/ControllerAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DIDDocument queries a list of DIDDocument items.
	DIDDocument(context.Context, *QueryGetDIDDocumentRequest) (*QueryGetDIDDocumentResponse, error)
	// DIDDocumentAll queries all DIDDocument items.
	DIDDocumentAll(context.Context, *QueryAllDIDDocumentRequest) (*QueryAllDIDDocumentResponse, error)
	// DidByOwner returns DIDDocument based on an owner.
	DidByOwner(context.Context, *QueryDidByOwnerRequest) (*QueryDidByOwnerResponse, error)
	// DidByAlsoKnownAs returns DIDDocument based on an alias *only Sonr
	// Identities.
	DidByAlsoKnownAs(context.Context, *QueryDidByAlsoKnownAsRequest) (*QueryDidByAlsoKnownAsResponse, error)
	// AliasAvailable checks if a given alias is available to register *only Sonr
	// Identities.
	AliasAvailable(context.Context, *QueryAliasAvailableRequest) (*QueryAliasAvailableResponse, error)
	// ControllerAccount queries a list of ControllerAccount items.
	ControllerAccount(context.Context, *QueryGetControllerAccountRequest) (*QueryGetControllerAccountResponse, error)
	// ControllerAccountAll queries all ControllerAccount items.
	ControllerAccountAll(context.Context, *QueryAllControllerAccountRequest) (*QueryAllControllerAccountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DIDDocument(ctx context.Context, req *QueryGetDIDDocumentRequest) (*QueryGetDIDDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DIDDocument not implemented")
}
func (*UnimplementedQueryServer) DIDDocumentAll(ctx context.Context, req *QueryAllDIDDocumentRequest) (*QueryAllDIDDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DIDDocumentAll not implemented")
}
func (*UnimplementedQueryServer) DidByOwner(ctx context.Context, req *QueryDidByOwnerRequest) (*QueryDidByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidByOwner not implemented")
}
func (*UnimplementedQueryServer) DidByAlsoKnownAs(ctx context.Context, req *QueryDidByAlsoKnownAsRequest) (*QueryDidByAlsoKnownAsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidByAlsoKnownAs not implemented")
}
func (*UnimplementedQueryServer) AliasAvailable(ctx context.Context, req *QueryAliasAvailableRequest) (*QueryAliasAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AliasAvailable not implemented")
}
func (*UnimplementedQueryServer) ControllerAccount(ctx context.Context, req *QueryGetControllerAccountRequest) (*QueryGetControllerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControllerAccount not implemented")
}
func (*UnimplementedQueryServer) ControllerAccountAll(ctx context.Context, req *QueryAllControllerAccountRequest) (*QueryAllControllerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControllerAccountAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.identity.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DIDDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDIDDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DIDDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.identity.Query/DIDDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DIDDocument(ctx, req.(*QueryGetDIDDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DIDDocumentAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDIDDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DIDDocumentAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.identity.Query/DIDDocumentAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DIDDocumentAll(ctx, req.(*QueryAllDIDDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.identity.Query/DidByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidByOwner(ctx, req.(*QueryDidByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidByAlsoKnownAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidByAlsoKnownAsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidByAlsoKnownAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.identity.Query/DidByAlsoKnownAs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidByAlsoKnownAs(ctx, req.(*QueryDidByAlsoKnownAsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AliasAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAliasAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AliasAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.identity.Query/AliasAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AliasAvailable(ctx, req.(*QueryAliasAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ControllerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetControllerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ControllerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.identity.Query/ControllerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ControllerAccount(ctx, req.(*QueryGetControllerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ControllerAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllControllerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ControllerAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.identity.Query/ControllerAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ControllerAccountAll(ctx, req.(*QueryAllControllerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.identity.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DIDDocument",
			Handler:    _Query_DIDDocument_Handler,
		},
		{
			MethodName: "DIDDocumentAll",
			Handler:    _Query_DIDDocumentAll_Handler,
		},
		{
			MethodName: "DidByOwner",
			Handler:    _Query_DidByOwner_Handler,
		},
		{
			MethodName: "DidByAlsoKnownAs",
			Handler:    _Query_DidByAlsoKnownAs_Handler,
		},
		{
			MethodName: "AliasAvailable",
			Handler:    _Query_AliasAvailable_Handler,
		},
		{
			MethodName: "ControllerAccount",
			Handler:    _Query_ControllerAccount_Handler,
		},
		{
			MethodName: "ControllerAccountAll",
			Handler:    _Query_ControllerAccountAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/identity/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDIDDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDIDDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDIDDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDIDDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDIDDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDIDDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DIDDocument.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDIDDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDIDDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDIDDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDIDDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDIDDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDIDDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DIDDocument) > 0 {
		for iNdEx := len(m.DIDDocument) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DIDDocument[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidByAlsoKnownAsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidByAlsoKnownAsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidByAlsoKnownAsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidByAlsoKnownAsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidByAlsoKnownAsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidByAlsoKnownAsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAliasAvailableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliasAvailableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliasAvailableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAliasAvailableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAliasAvailableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAliasAvailableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExistingDocument != nil {
		{
			size, err := m.ExistingDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Available {
		i--
		if m.Available {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetControllerAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetControllerAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetControllerAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetControllerAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetControllerAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetControllerAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ControllerAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllControllerAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllControllerAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllControllerAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllControllerAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllControllerAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllControllerAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ControllerAccount) > 0 {
		for iNdEx := len(m.ControllerAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ControllerAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDIDDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDIDDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DIDDocument.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDIDDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDIDDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DIDDocument) > 0 {
		for _, e := range m.DIDDocument {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidByAlsoKnownAsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidByAlsoKnownAsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DidDocument.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAliasAvailableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAliasAvailableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Available {
		n += 2
	}
	if m.ExistingDocument != nil {
		l = m.ExistingDocument.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DidDocument.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetControllerAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetControllerAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ControllerAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllControllerAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllControllerAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ControllerAccount) > 0 {
		for _, e := range m.ControllerAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDIDDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDIDDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDIDDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDIDDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDIDDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDIDDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DIDDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DIDDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDIDDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDIDDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDIDDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDIDDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDIDDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDIDDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DIDDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DIDDocument = append(m.DIDDocument, DIDDocument{})
			if err := m.DIDDocument[len(m.DIDDocument)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidByAlsoKnownAsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidByAlsoKnownAsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidByAlsoKnownAsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidByAlsoKnownAsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidByAlsoKnownAsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidByAlsoKnownAsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliasAvailableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliasAvailableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliasAvailableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAliasAvailableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAliasAvailableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAliasAvailableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExistingDocument == nil {
				m.ExistingDocument = &DIDDocument{}
			}
			if err := m.ExistingDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetControllerAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetControllerAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetControllerAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetControllerAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetControllerAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetControllerAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ControllerAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllControllerAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllControllerAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllControllerAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllControllerAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllControllerAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllControllerAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerAccount = append(m.ControllerAccount, ControllerAccount{})
			if err := m.ControllerAccount[len(m.ControllerAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
