syntax = "proto3";

package sonr.protocols.transfer;
import "proto/common/core.proto";
import "proto/common/data.proto";
option go_package = "github.com/sonr-io/core/pkg/transfer";

// For Transfer Chunk Transmission
message Chunk {
  int32 offset = 1;      // Bytes from the beginning of the reader to chunk
  int32 length = 2;      // Length is number of bytes in the chunk
  bytes data = 3;        // Data is the actual chunk
  int64 fingerprint = 4; // Fingerprint is the hash of the chunk
}

// Invitation Message sent on RPC
message InviteRequest {
  sonr.core.Payload payload = 1;   // Attached Data
  sonr.core.Peer from = 3;         // Users Peer Data
  sonr.core.Peer to = 4;           // Receivers Peer Data
  sonr.core.Metadata metadata = 5; // Metadata
}

// Reply Message sent on RPC
message InviteResponse {
  bool decision = 1;               // Success
  sonr.core.Peer from = 3;         // Users Peer Data
  sonr.core.Peer to = 4;           // Receivers Peer Data
  sonr.core.Metadata metadata = 5; // Metadata
}
