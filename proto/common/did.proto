syntax = "proto3";

// Package common defines commonly used types agnostic to the node role on the Sonr network.
package common;
option go_package = "github.com/sonr-io/core/common";

// Did represents a string that has been parsed and validated as a DID. The parts are stored
// in the individual fields.
message Did {
    // Method is the method used to create the DID. For the Sonr network it is "sonr".
    string method = 1;

    // Network is the network the DID is on. For testnet it is "testnet". i.e "did:sonr:testnet:".
    string network = 2;

    // id is the trailing identifier after the network. i.e. "did:sonr:testnet:abc123"
    string id = 3;

    // Paths is a list of paths that the DID is valid for. This is used to identify the Service.
    repeated string paths = 4;

    // Query is the query string that was used to create the DID. This is followed by a '?'.
    string query = 5;

    // Fragment is the fragment string that was used to create the DID. This is followed by a '#'.
    string fragment = 6;
}

// DidDocument is the document that describes a DID. This document is stored on the blockchain.
message DidDocument {
  // Context is the context of the DID document. This is used to identify the Service.
  repeated string context = 1; // optional

  // Id is the DID of the document.
  string id = 2;

  // Controller is the DID of the controller of the document. This will be the individual user devices and mailboxes.
  repeated string controller = 3; //optional

  // VerificationMethod is the list of verification methods for the user.
  repeated VerificationMethod verification_method = 4; // optional

  // Authentication is the list of authentication methods for the user.
  repeated string authentication = 5; // optional

  // AssertionMethod is the list of assertion methods for the user.
  repeated string assertion_method = 6; // optional

  // CapabilityInvocation is the list of capability invocation methods for the user.
  repeated string capability_invocation = 7; // optional

  // CapabilityDelegation is the list of capability delegation methods for the user.
  repeated string capability_delegation = 8; // optional

  // KeyAgreement is the list of key agreement methods for the user.
  repeated string key_agreement = 9; // optional

  // Service is the list of services or DApps that the user has access to.
  repeated Service service = 10; // optional

  // AlsoKnownAs is the list of ".snr" aliases for the user.
  repeated string also_known_as = 11; // optional
}

// Service is a Application that runs on the Sonr network.
message Service {
  // ID is the DID of the service.
  string id = 1;

  // Type is the type of the service.
  string type = 2;

  // ServiceEndpoint is the endpoint of the service.
  string service_endpoint = 3;
}

// VerificationMethod is a method that can be used to verify the DID.
message VerificationMethod {
  // ID is the DID of the verification method.
  string id = 1;

  // Type is the type of the verification method.
  string type = 2;

  // Controller is the DID of the controller of the verification method.
  string controller = 3;

  // PublicKeyHex is the public key of the verification method in hexidecimal.
  string public_key_hex = 4; // optional

  // PublicKeyBase58 is the public key of the verification method in base58.
  string public_key_base58 = 5; // optional

  // BlockchainAccountId is the blockchain account id of the verification method.
  string blockchain_account_id = 6; // optional
}

