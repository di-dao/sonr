// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel/v1/channel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_channel_2fv1_2fchannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_channel_2fv1_2fchannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_channel_2fv1_2fchannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_channel_2fv1_2fchannel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_channel_2fv1_2fchannel_2eproto;
namespace channel {
namespace v1 {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Store;
struct StoreDefaultTypeInternal;
extern StoreDefaultTypeInternal _Store_default_instance_;
class StoreEntry;
struct StoreEntryDefaultTypeInternal;
extern StoreEntryDefaultTypeInternal _StoreEntry_default_instance_;
class Store_DataEntry_DoNotUse;
struct Store_DataEntry_DoNotUseDefaultTypeInternal;
extern Store_DataEntry_DoNotUseDefaultTypeInternal _Store_DataEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace channel
PROTOBUF_NAMESPACE_OPEN
template<> ::channel::v1::Event* Arena::CreateMaybeMessage<::channel::v1::Event>(Arena*);
template<> ::channel::v1::Store* Arena::CreateMaybeMessage<::channel::v1::Store>(Arena*);
template<> ::channel::v1::StoreEntry* Arena::CreateMaybeMessage<::channel::v1::StoreEntry>(Arena*);
template<> ::channel::v1::Store_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::channel::v1::Store_DataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace channel {
namespace v1 {

enum EventType : int {
  EVENT_TYPE_UNSPECIFIED = 0,
  EVENT_TYPE_GET = 1,
  EVENT_TYPE_SET = 2,
  EVENT_TYPE_DELETE = 3,
  EVENT_TYPE_PUT = 4,
  EVENT_TYPE_SYNC = 5,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = EVENT_TYPE_UNSPECIFIED;
constexpr EventType EventType_MAX = EVENT_TYPE_SYNC;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channel.v1.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit constexpr Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channel.v1.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 1,
    kEntryFieldNumber = 3,
    kStoreFieldNumber = 4,
    kTypeFieldNumber = 2,
  };
  // string peer = 1 [json_name = "peer"];
  void clear_peer();
  const std::string& peer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peer();
  PROTOBUF_NODISCARD std::string* release_peer();
  void set_allocated_peer(std::string* peer);
  private:
  const std::string& _internal_peer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer(const std::string& value);
  std::string* _internal_mutable_peer();
  public:

  // .channel.v1.StoreEntry entry = 3 [json_name = "entry"];
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::channel::v1::StoreEntry& entry() const;
  PROTOBUF_NODISCARD ::channel::v1::StoreEntry* release_entry();
  ::channel::v1::StoreEntry* mutable_entry();
  void set_allocated_entry(::channel::v1::StoreEntry* entry);
  private:
  const ::channel::v1::StoreEntry& _internal_entry() const;
  ::channel::v1::StoreEntry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::channel::v1::StoreEntry* entry);
  ::channel::v1::StoreEntry* unsafe_arena_release_entry();

  // .channel.v1.Store store = 4 [json_name = "store"];
  bool has_store() const;
  private:
  bool _internal_has_store() const;
  public:
  void clear_store();
  const ::channel::v1::Store& store() const;
  PROTOBUF_NODISCARD ::channel::v1::Store* release_store();
  ::channel::v1::Store* mutable_store();
  void set_allocated_store(::channel::v1::Store* store);
  private:
  const ::channel::v1::Store& _internal_store() const;
  ::channel::v1::Store* _internal_mutable_store();
  public:
  void unsafe_arena_set_allocated_store(
      ::channel::v1::Store* store);
  ::channel::v1::Store* unsafe_arena_release_store();

  // .channel.v1.EventType type = 2 [json_name = "type"];
  void clear_type();
  ::channel::v1::EventType type() const;
  void set_type(::channel::v1::EventType value);
  private:
  ::channel::v1::EventType _internal_type() const;
  void _internal_set_type(::channel::v1::EventType value);
  public:

  // @@protoc_insertion_point(class_scope:channel.v1.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_;
  ::channel::v1::StoreEntry* entry_;
  ::channel::v1::Store* store_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_2fv1_2fchannel_2eproto;
};
// -------------------------------------------------------------------

class Store_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Store_DataEntry_DoNotUse, 
    std::string, ::channel::v1::StoreEntry,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Store_DataEntry_DoNotUse, 
    std::string, ::channel::v1::StoreEntry,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Store_DataEntry_DoNotUse();
  explicit constexpr Store_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Store_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Store_DataEntry_DoNotUse& other);
  static const Store_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Store_DataEntry_DoNotUse*>(&_Store_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "channel.v1.Store.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Store final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channel.v1.Store) */ {
 public:
  inline Store() : Store(nullptr) {}
  ~Store() override;
  explicit constexpr Store(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Store(const Store& from);
  Store(Store&& from) noexcept
    : Store() {
    *this = ::std::move(from);
  }

  inline Store& operator=(const Store& from) {
    CopyFrom(from);
    return *this;
  }
  inline Store& operator=(Store&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Store& default_instance() {
    return *internal_default_instance();
  }
  static inline const Store* internal_default_instance() {
    return reinterpret_cast<const Store*>(
               &_Store_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Store& a, Store& b) {
    a.Swap(&b);
  }
  inline void Swap(Store* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Store* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Store* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Store>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Store& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Store& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Store* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channel.v1.Store";
  }
  protected:
  explicit Store(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kModifiedFieldNumber = 3,
    kTtlFieldNumber = 4,
    kCapacityFieldNumber = 2,
  };
  // map<string, .channel.v1.StoreEntry> data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::channel::v1::StoreEntry >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::channel::v1::StoreEntry >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::channel::v1::StoreEntry >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::channel::v1::StoreEntry >*
      mutable_data();

  // int64 modified = 3 [json_name = "modified"];
  void clear_modified();
  int64_t modified() const;
  void set_modified(int64_t value);
  private:
  int64_t _internal_modified() const;
  void _internal_set_modified(int64_t value);
  public:

  // int64 ttl = 4 [json_name = "ttl"];
  void clear_ttl();
  int64_t ttl() const;
  void set_ttl(int64_t value);
  private:
  int64_t _internal_ttl() const;
  void _internal_set_ttl(int64_t value);
  public:

  // int32 capacity = 2 [json_name = "capacity"];
  void clear_capacity();
  int32_t capacity() const;
  void set_capacity(int32_t value);
  private:
  int32_t _internal_capacity() const;
  void _internal_set_capacity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channel.v1.Store)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Store_DataEntry_DoNotUse,
      std::string, ::channel::v1::StoreEntry,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> data_;
  int64_t modified_;
  int64_t ttl_;
  int32_t capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_2fv1_2fchannel_2eproto;
};
// -------------------------------------------------------------------

class StoreEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channel.v1.StoreEntry) */ {
 public:
  inline StoreEntry() : StoreEntry(nullptr) {}
  ~StoreEntry() override;
  explicit constexpr StoreEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreEntry(const StoreEntry& from);
  StoreEntry(StoreEntry&& from) noexcept
    : StoreEntry() {
    *this = ::std::move(from);
  }

  inline StoreEntry& operator=(const StoreEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreEntry& operator=(StoreEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreEntry* internal_default_instance() {
    return reinterpret_cast<const StoreEntry*>(
               &_StoreEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StoreEntry& a, StoreEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoreEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoreEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StoreEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channel.v1.StoreEntry";
  }
  protected:
  explicit StoreEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kExpirationFieldNumber = 4,
    kCreatedFieldNumber = 5,
    kModifiedFieldNumber = 6,
  };
  // string peer = 1 [json_name = "peer"];
  void clear_peer();
  const std::string& peer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peer();
  PROTOBUF_NODISCARD std::string* release_peer();
  void set_allocated_peer(std::string* peer);
  private:
  const std::string& _internal_peer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer(const std::string& value);
  std::string* _internal_mutable_peer();
  public:

  // string key = 2 [json_name = "key"];
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 expiration = 4 [json_name = "expiration"];
  void clear_expiration();
  int64_t expiration() const;
  void set_expiration(int64_t value);
  private:
  int64_t _internal_expiration() const;
  void _internal_set_expiration(int64_t value);
  public:

  // int64 created = 5 [json_name = "created"];
  void clear_created();
  int64_t created() const;
  void set_created(int64_t value);
  private:
  int64_t _internal_created() const;
  void _internal_set_created(int64_t value);
  public:

  // int64 modified = 6 [json_name = "modified"];
  void clear_modified();
  int64_t modified() const;
  void set_modified(int64_t value);
  private:
  int64_t _internal_modified() const;
  void _internal_set_modified(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:channel.v1.StoreEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int64_t expiration_;
  int64_t created_;
  int64_t modified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_2fv1_2fchannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// string peer = 1 [json_name = "peer"];
inline void Event::clear_peer() {
  peer_.ClearToEmpty();
}
inline const std::string& Event::peer() const {
  // @@protoc_insertion_point(field_get:channel.v1.Event.peer)
  return _internal_peer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_peer(ArgT0&& arg0, ArgT... args) {
 
 peer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channel.v1.Event.peer)
}
inline std::string* Event::mutable_peer() {
  std::string* _s = _internal_mutable_peer();
  // @@protoc_insertion_point(field_mutable:channel.v1.Event.peer)
  return _s;
}
inline const std::string& Event::_internal_peer() const {
  return peer_.Get();
}
inline void Event::_internal_set_peer(const std::string& value) {
  
  peer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_peer() {
  
  return peer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Event::release_peer() {
  // @@protoc_insertion_point(field_release:channel.v1.Event.peer)
  return peer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Event::set_allocated_peer(std::string* peer) {
  if (peer != nullptr) {
    
  } else {
    
  }
  peer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (peer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    peer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channel.v1.Event.peer)
}

// .channel.v1.EventType type = 2 [json_name = "type"];
inline void Event::clear_type() {
  type_ = 0;
}
inline ::channel::v1::EventType Event::_internal_type() const {
  return static_cast< ::channel::v1::EventType >(type_);
}
inline ::channel::v1::EventType Event::type() const {
  // @@protoc_insertion_point(field_get:channel.v1.Event.type)
  return _internal_type();
}
inline void Event::_internal_set_type(::channel::v1::EventType value) {
  
  type_ = value;
}
inline void Event::set_type(::channel::v1::EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:channel.v1.Event.type)
}

// .channel.v1.StoreEntry entry = 3 [json_name = "entry"];
inline bool Event::_internal_has_entry() const {
  return this != internal_default_instance() && entry_ != nullptr;
}
inline bool Event::has_entry() const {
  return _internal_has_entry();
}
inline void Event::clear_entry() {
  if (GetArenaForAllocation() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
}
inline const ::channel::v1::StoreEntry& Event::_internal_entry() const {
  const ::channel::v1::StoreEntry* p = entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::channel::v1::StoreEntry&>(
      ::channel::v1::_StoreEntry_default_instance_);
}
inline const ::channel::v1::StoreEntry& Event::entry() const {
  // @@protoc_insertion_point(field_get:channel.v1.Event.entry)
  return _internal_entry();
}
inline void Event::unsafe_arena_set_allocated_entry(
    ::channel::v1::StoreEntry* entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channel.v1.Event.entry)
}
inline ::channel::v1::StoreEntry* Event::release_entry() {
  
  ::channel::v1::StoreEntry* temp = entry_;
  entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channel::v1::StoreEntry* Event::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:channel.v1.Event.entry)
  
  ::channel::v1::StoreEntry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::channel::v1::StoreEntry* Event::_internal_mutable_entry() {
  
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::channel::v1::StoreEntry>(GetArenaForAllocation());
    entry_ = p;
  }
  return entry_;
}
inline ::channel::v1::StoreEntry* Event::mutable_entry() {
  ::channel::v1::StoreEntry* _msg = _internal_mutable_entry();
  // @@protoc_insertion_point(field_mutable:channel.v1.Event.entry)
  return _msg;
}
inline void Event::set_allocated_entry(::channel::v1::StoreEntry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::channel::v1::StoreEntry>::GetOwningArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    
  } else {
    
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:channel.v1.Event.entry)
}

// .channel.v1.Store store = 4 [json_name = "store"];
inline bool Event::_internal_has_store() const {
  return this != internal_default_instance() && store_ != nullptr;
}
inline bool Event::has_store() const {
  return _internal_has_store();
}
inline void Event::clear_store() {
  if (GetArenaForAllocation() == nullptr && store_ != nullptr) {
    delete store_;
  }
  store_ = nullptr;
}
inline const ::channel::v1::Store& Event::_internal_store() const {
  const ::channel::v1::Store* p = store_;
  return p != nullptr ? *p : reinterpret_cast<const ::channel::v1::Store&>(
      ::channel::v1::_Store_default_instance_);
}
inline const ::channel::v1::Store& Event::store() const {
  // @@protoc_insertion_point(field_get:channel.v1.Event.store)
  return _internal_store();
}
inline void Event::unsafe_arena_set_allocated_store(
    ::channel::v1::Store* store) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_);
  }
  store_ = store;
  if (store) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channel.v1.Event.store)
}
inline ::channel::v1::Store* Event::release_store() {
  
  ::channel::v1::Store* temp = store_;
  store_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channel::v1::Store* Event::unsafe_arena_release_store() {
  // @@protoc_insertion_point(field_release:channel.v1.Event.store)
  
  ::channel::v1::Store* temp = store_;
  store_ = nullptr;
  return temp;
}
inline ::channel::v1::Store* Event::_internal_mutable_store() {
  
  if (store_ == nullptr) {
    auto* p = CreateMaybeMessage<::channel::v1::Store>(GetArenaForAllocation());
    store_ = p;
  }
  return store_;
}
inline ::channel::v1::Store* Event::mutable_store() {
  ::channel::v1::Store* _msg = _internal_mutable_store();
  // @@protoc_insertion_point(field_mutable:channel.v1.Event.store)
  return _msg;
}
inline void Event::set_allocated_store(::channel::v1::Store* store) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete store_;
  }
  if (store) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::channel::v1::Store>::GetOwningArena(store);
    if (message_arena != submessage_arena) {
      store = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, store, submessage_arena);
    }
    
  } else {
    
  }
  store_ = store;
  // @@protoc_insertion_point(field_set_allocated:channel.v1.Event.store)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Store

// map<string, .channel.v1.StoreEntry> data = 1 [json_name = "data"];
inline int Store::_internal_data_size() const {
  return data_.size();
}
inline int Store::data_size() const {
  return _internal_data_size();
}
inline void Store::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::channel::v1::StoreEntry >&
Store::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::channel::v1::StoreEntry >&
Store::data() const {
  // @@protoc_insertion_point(field_map:channel.v1.Store.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::channel::v1::StoreEntry >*
Store::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::channel::v1::StoreEntry >*
Store::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:channel.v1.Store.data)
  return _internal_mutable_data();
}

// int32 capacity = 2 [json_name = "capacity"];
inline void Store::clear_capacity() {
  capacity_ = 0;
}
inline int32_t Store::_internal_capacity() const {
  return capacity_;
}
inline int32_t Store::capacity() const {
  // @@protoc_insertion_point(field_get:channel.v1.Store.capacity)
  return _internal_capacity();
}
inline void Store::_internal_set_capacity(int32_t value) {
  
  capacity_ = value;
}
inline void Store::set_capacity(int32_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:channel.v1.Store.capacity)
}

// int64 modified = 3 [json_name = "modified"];
inline void Store::clear_modified() {
  modified_ = int64_t{0};
}
inline int64_t Store::_internal_modified() const {
  return modified_;
}
inline int64_t Store::modified() const {
  // @@protoc_insertion_point(field_get:channel.v1.Store.modified)
  return _internal_modified();
}
inline void Store::_internal_set_modified(int64_t value) {
  
  modified_ = value;
}
inline void Store::set_modified(int64_t value) {
  _internal_set_modified(value);
  // @@protoc_insertion_point(field_set:channel.v1.Store.modified)
}

// int64 ttl = 4 [json_name = "ttl"];
inline void Store::clear_ttl() {
  ttl_ = int64_t{0};
}
inline int64_t Store::_internal_ttl() const {
  return ttl_;
}
inline int64_t Store::ttl() const {
  // @@protoc_insertion_point(field_get:channel.v1.Store.ttl)
  return _internal_ttl();
}
inline void Store::_internal_set_ttl(int64_t value) {
  
  ttl_ = value;
}
inline void Store::set_ttl(int64_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:channel.v1.Store.ttl)
}

// -------------------------------------------------------------------

// StoreEntry

// string peer = 1 [json_name = "peer"];
inline void StoreEntry::clear_peer() {
  peer_.ClearToEmpty();
}
inline const std::string& StoreEntry::peer() const {
  // @@protoc_insertion_point(field_get:channel.v1.StoreEntry.peer)
  return _internal_peer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreEntry::set_peer(ArgT0&& arg0, ArgT... args) {
 
 peer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channel.v1.StoreEntry.peer)
}
inline std::string* StoreEntry::mutable_peer() {
  std::string* _s = _internal_mutable_peer();
  // @@protoc_insertion_point(field_mutable:channel.v1.StoreEntry.peer)
  return _s;
}
inline const std::string& StoreEntry::_internal_peer() const {
  return peer_.Get();
}
inline void StoreEntry::_internal_set_peer(const std::string& value) {
  
  peer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StoreEntry::_internal_mutable_peer() {
  
  return peer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StoreEntry::release_peer() {
  // @@protoc_insertion_point(field_release:channel.v1.StoreEntry.peer)
  return peer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StoreEntry::set_allocated_peer(std::string* peer) {
  if (peer != nullptr) {
    
  } else {
    
  }
  peer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (peer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    peer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channel.v1.StoreEntry.peer)
}

// string key = 2 [json_name = "key"];
inline void StoreEntry::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& StoreEntry::key() const {
  // @@protoc_insertion_point(field_get:channel.v1.StoreEntry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreEntry::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channel.v1.StoreEntry.key)
}
inline std::string* StoreEntry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:channel.v1.StoreEntry.key)
  return _s;
}
inline const std::string& StoreEntry::_internal_key() const {
  return key_.Get();
}
inline void StoreEntry::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StoreEntry::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StoreEntry::release_key() {
  // @@protoc_insertion_point(field_release:channel.v1.StoreEntry.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StoreEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channel.v1.StoreEntry.key)
}

// bytes value = 3 [json_name = "value"];
inline void StoreEntry::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& StoreEntry::value() const {
  // @@protoc_insertion_point(field_get:channel.v1.StoreEntry.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreEntry::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channel.v1.StoreEntry.value)
}
inline std::string* StoreEntry::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:channel.v1.StoreEntry.value)
  return _s;
}
inline const std::string& StoreEntry::_internal_value() const {
  return value_.Get();
}
inline void StoreEntry::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StoreEntry::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StoreEntry::release_value() {
  // @@protoc_insertion_point(field_release:channel.v1.StoreEntry.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StoreEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channel.v1.StoreEntry.value)
}

// int64 expiration = 4 [json_name = "expiration"];
inline void StoreEntry::clear_expiration() {
  expiration_ = int64_t{0};
}
inline int64_t StoreEntry::_internal_expiration() const {
  return expiration_;
}
inline int64_t StoreEntry::expiration() const {
  // @@protoc_insertion_point(field_get:channel.v1.StoreEntry.expiration)
  return _internal_expiration();
}
inline void StoreEntry::_internal_set_expiration(int64_t value) {
  
  expiration_ = value;
}
inline void StoreEntry::set_expiration(int64_t value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:channel.v1.StoreEntry.expiration)
}

// int64 created = 5 [json_name = "created"];
inline void StoreEntry::clear_created() {
  created_ = int64_t{0};
}
inline int64_t StoreEntry::_internal_created() const {
  return created_;
}
inline int64_t StoreEntry::created() const {
  // @@protoc_insertion_point(field_get:channel.v1.StoreEntry.created)
  return _internal_created();
}
inline void StoreEntry::_internal_set_created(int64_t value) {
  
  created_ = value;
}
inline void StoreEntry::set_created(int64_t value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:channel.v1.StoreEntry.created)
}

// int64 modified = 6 [json_name = "modified"];
inline void StoreEntry::clear_modified() {
  modified_ = int64_t{0};
}
inline int64_t StoreEntry::_internal_modified() const {
  return modified_;
}
inline int64_t StoreEntry::modified() const {
  // @@protoc_insertion_point(field_get:channel.v1.StoreEntry.modified)
  return _internal_modified();
}
inline void StoreEntry::_internal_set_modified(int64_t value) {
  
  modified_ = value;
}
inline void StoreEntry::set_modified(int64_t value) {
  _internal_set_modified(value);
  // @@protoc_insertion_point(field_set:channel.v1.StoreEntry.modified)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace channel

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::channel::v1::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channel::v1::EventType>() {
  return ::channel::v1::EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_channel_2fv1_2fchannel_2eproto
