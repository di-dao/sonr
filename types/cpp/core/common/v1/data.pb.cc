// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/common/v1/data.proto

#include "core/common/v1/data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace core {
namespace common {
namespace v1 {
constexpr FileItem::FileItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mime_(nullptr)
  , thumbnail_(nullptr)
  , size_(int64_t{0})
  , last_modified_(int64_t{0}){}
struct FileItemDefaultTypeInternal {
  constexpr FileItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileItemDefaultTypeInternal() {}
  union {
    FileItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileItemDefaultTypeInternal _FileItem_default_instance_;
constexpr MessageItem::MessageItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachments_()
  , subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mime_(nullptr)
  , created_at_(int64_t{0}){}
struct MessageItemDefaultTypeInternal {
  constexpr MessageItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageItemDefaultTypeInternal() {}
  union {
    MessageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageItemDefaultTypeInternal _MessageItem_default_instance_;
constexpr UrlItem::UrlItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , site_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , site_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mime_(nullptr)
  , open_graph_(nullptr){}
struct UrlItemDefaultTypeInternal {
  constexpr UrlItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UrlItemDefaultTypeInternal() {}
  union {
    UrlItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UrlItemDefaultTypeInternal _UrlItem_default_instance_;
constexpr OpenGraph_Primary::OpenGraph_Primary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , _oneof_case_{}{}
struct OpenGraph_PrimaryDefaultTypeInternal {
  constexpr OpenGraph_PrimaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenGraph_PrimaryDefaultTypeInternal() {}
  union {
    OpenGraph_Primary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenGraph_PrimaryDefaultTypeInternal _OpenGraph_Primary_default_instance_;
constexpr OpenGraph_Image::OpenGraph_Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secure_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0)
  , height_(0){}
struct OpenGraph_ImageDefaultTypeInternal {
  constexpr OpenGraph_ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenGraph_ImageDefaultTypeInternal() {}
  union {
    OpenGraph_Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenGraph_ImageDefaultTypeInternal _OpenGraph_Image_default_instance_;
constexpr OpenGraph_Video::OpenGraph_Video(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secure_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0)
  , height_(0){}
struct OpenGraph_VideoDefaultTypeInternal {
  constexpr OpenGraph_VideoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenGraph_VideoDefaultTypeInternal() {}
  union {
    OpenGraph_Video _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenGraph_VideoDefaultTypeInternal _OpenGraph_Video_default_instance_;
constexpr OpenGraph_Audio::OpenGraph_Audio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secure_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OpenGraph_AudioDefaultTypeInternal {
  constexpr OpenGraph_AudioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenGraph_AudioDefaultTypeInternal() {}
  union {
    OpenGraph_Audio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenGraph_AudioDefaultTypeInternal _OpenGraph_Audio_default_instance_;
constexpr OpenGraph_Twitter_Player::OpenGraph_Twitter_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0)
  , height_(0){}
struct OpenGraph_Twitter_PlayerDefaultTypeInternal {
  constexpr OpenGraph_Twitter_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenGraph_Twitter_PlayerDefaultTypeInternal() {}
  union {
    OpenGraph_Twitter_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenGraph_Twitter_PlayerDefaultTypeInternal _OpenGraph_Twitter_Player_default_instance_;
constexpr OpenGraph_Twitter_IPhone::OpenGraph_Twitter_IPhone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OpenGraph_Twitter_IPhoneDefaultTypeInternal {
  constexpr OpenGraph_Twitter_IPhoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenGraph_Twitter_IPhoneDefaultTypeInternal() {}
  union {
    OpenGraph_Twitter_IPhone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenGraph_Twitter_IPhoneDefaultTypeInternal _OpenGraph_Twitter_IPhone_default_instance_;
constexpr OpenGraph_Twitter_IPad::OpenGraph_Twitter_IPad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OpenGraph_Twitter_IPadDefaultTypeInternal {
  constexpr OpenGraph_Twitter_IPadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenGraph_Twitter_IPadDefaultTypeInternal() {}
  union {
    OpenGraph_Twitter_IPad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenGraph_Twitter_IPadDefaultTypeInternal _OpenGraph_Twitter_IPad_default_instance_;
constexpr OpenGraph_Twitter_GooglePlay::OpenGraph_Twitter_GooglePlay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OpenGraph_Twitter_GooglePlayDefaultTypeInternal {
  constexpr OpenGraph_Twitter_GooglePlayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenGraph_Twitter_GooglePlayDefaultTypeInternal() {}
  union {
    OpenGraph_Twitter_GooglePlay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenGraph_Twitter_GooglePlayDefaultTypeInternal _OpenGraph_Twitter_GooglePlay_default_instance_;
constexpr OpenGraph_Twitter::OpenGraph_Twitter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : card_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , site_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , site_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_alt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_(nullptr)
  , iphone_(nullptr)
  , ipad_(nullptr)
  , google_play_(nullptr){}
struct OpenGraph_TwitterDefaultTypeInternal {
  constexpr OpenGraph_TwitterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenGraph_TwitterDefaultTypeInternal() {}
  union {
    OpenGraph_Twitter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenGraph_TwitterDefaultTypeInternal _OpenGraph_Twitter_default_instance_;
constexpr OpenGraph::OpenGraph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : images_()
  , videos_()
  , audios_()
  , primary_(nullptr)
  , twitter_(nullptr){}
struct OpenGraphDefaultTypeInternal {
  constexpr OpenGraphDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenGraphDefaultTypeInternal() {}
  union {
    OpenGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenGraphDefaultTypeInternal _OpenGraph_default_instance_;
constexpr Thumbnail::Thumbnail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mime_(nullptr){}
struct ThumbnailDefaultTypeInternal {
  constexpr ThumbnailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThumbnailDefaultTypeInternal() {}
  union {
    Thumbnail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThumbnailDefaultTypeInternal _Thumbnail_default_instance_;
constexpr Payload_Item::Payload_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mime_(nullptr)
  , size_(int64_t{0})
  , _oneof_case_{}{}
struct Payload_ItemDefaultTypeInternal {
  constexpr Payload_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Payload_ItemDefaultTypeInternal() {}
  union {
    Payload_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Payload_ItemDefaultTypeInternal _Payload_Item_default_instance_;
constexpr Payload::Payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , owner_(nullptr)
  , size_(int64_t{0})
  , created_at_(int64_t{0}){}
struct PayloadDefaultTypeInternal {
  constexpr PayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PayloadDefaultTypeInternal() {}
  union {
    Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PayloadDefaultTypeInternal _Payload_default_instance_;
constexpr PayloadList::PayloadList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payloads_()
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_modified_(int64_t{0}){}
struct PayloadListDefaultTypeInternal {
  constexpr PayloadListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PayloadListDefaultTypeInternal() {}
  union {
    PayloadList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PayloadListDefaultTypeInternal _PayloadList_default_instance_;
constexpr SupplyItem::SupplyItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SupplyItemDefaultTypeInternal {
  constexpr SupplyItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SupplyItemDefaultTypeInternal() {}
  union {
    SupplyItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SupplyItemDefaultTypeInternal _SupplyItem_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace core
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_core_2fcommon_2fv1_2fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcommon_2fv1_2fdata_2eproto = nullptr;

const uint32_t TableStruct_core_2fcommon_2fv1_2fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::FileItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::FileItem, mime_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::FileItem, name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::FileItem, path_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::FileItem, size_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::FileItem, thumbnail_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::FileItem, last_modified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::MessageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::MessageItem, mime_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::MessageItem, subject_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::MessageItem, body_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::MessageItem, created_at_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::MessageItem, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::UrlItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::UrlItem, mime_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::UrlItem, link_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::UrlItem, title_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::UrlItem, site_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::UrlItem, site_name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::UrlItem, description_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::UrlItem, open_graph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Primary, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Primary, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Primary, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Primary, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Image, url_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Image, secure_url_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Image, width_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Image, height_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Image, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Video, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Video, url_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Video, secure_url_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Video, width_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Video, height_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Video, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Audio, url_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Audio, secure_url_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Audio, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_Player, url_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_Player, width_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_Player, height_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_Player, stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_IPhone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_IPhone, name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_IPhone, id_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_IPhone, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_IPad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_IPad, name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_IPad, id_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_IPad, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_GooglePlay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_GooglePlay, name_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_GooglePlay, id_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter_GooglePlay, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, card_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, site_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, site_id_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, creator_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, creator_id_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, description_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, title_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, image_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, image_alt_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, url_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, player_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, iphone_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, ipad_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph_Twitter, google_play_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph, primary_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph, images_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph, videos_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph, audios_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::OpenGraph, twitter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Thumbnail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Thumbnail, buffer_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Thumbnail, mime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload_Item, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload_Item, mime_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload_Item, size_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload_Item, data_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload_Item, preview_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload, items_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload, owner_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload, size_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::Payload, created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::PayloadList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::PayloadList, payloads_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::PayloadList, key_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::PayloadList, last_modified_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::SupplyItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::SupplyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::common::v1::SupplyItem, path_),
  PROTOBUF_FIELD_OFFSET(::core::common::v1::SupplyItem, thumbnail_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::core::common::v1::FileItem)},
  { 12, -1, -1, sizeof(::core::common::v1::MessageItem)},
  { 23, -1, -1, sizeof(::core::common::v1::UrlItem)},
  { 36, -1, -1, sizeof(::core::common::v1::OpenGraph_Primary)},
  { 48, -1, -1, sizeof(::core::common::v1::OpenGraph_Image)},
  { 59, -1, -1, sizeof(::core::common::v1::OpenGraph_Video)},
  { 70, -1, -1, sizeof(::core::common::v1::OpenGraph_Audio)},
  { 79, -1, -1, sizeof(::core::common::v1::OpenGraph_Twitter_Player)},
  { 89, -1, -1, sizeof(::core::common::v1::OpenGraph_Twitter_IPhone)},
  { 98, -1, -1, sizeof(::core::common::v1::OpenGraph_Twitter_IPad)},
  { 107, -1, -1, sizeof(::core::common::v1::OpenGraph_Twitter_GooglePlay)},
  { 116, -1, -1, sizeof(::core::common::v1::OpenGraph_Twitter)},
  { 136, -1, -1, sizeof(::core::common::v1::OpenGraph)},
  { 147, -1, -1, sizeof(::core::common::v1::Thumbnail)},
  { 155, -1, -1, sizeof(::core::common::v1::Payload_Item)},
  { 170, -1, -1, sizeof(::core::common::v1::Payload)},
  { 180, -1, -1, sizeof(::core::common::v1::PayloadList)},
  { 189, 197, -1, sizeof(::core::common::v1::SupplyItem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_FileItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_MessageItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_UrlItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_OpenGraph_Primary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_OpenGraph_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_OpenGraph_Video_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_OpenGraph_Audio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_OpenGraph_Twitter_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_OpenGraph_Twitter_IPhone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_OpenGraph_Twitter_IPad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_OpenGraph_Twitter_GooglePlay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_OpenGraph_Twitter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_OpenGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_Thumbnail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_Payload_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_PayloadList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::core::common::v1::_SupplyItem_default_instance_),
};

const char descriptor_table_protodef_core_2fcommon_2fv1_2fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031core/common/v1/data.proto\022\016core.common"
  ".v1\032\031core/common/v1/core.proto\"\316\001\n\010FileI"
  "tem\022(\n\004mime\030\001 \001(\0132\024.core.common.v1.MIMER"
  "\004mime\022\022\n\004name\030\002 \001(\tR\004name\022\022\n\004path\030\003 \001(\tR"
  "\004path\022\022\n\004size\030\004 \001(\003R\004size\0227\n\tthumbnail\030\005"
  " \001(\0132\031.core.common.v1.ThumbnailR\tthumbna"
  "il\022#\n\rlast_modified\030\006 \001(\003R\014lastModified\""
  "\300\001\n\013MessageItem\022(\n\004mime\030\001 \001(\0132\024.core.com"
  "mon.v1.MIMER\004mime\022\030\n\007subject\030\002 \001(\tR\007subj"
  "ect\022\022\n\004body\030\003 \001(\tR\004body\022\035\n\ncreated_at\030\004 "
  "\001(\003R\tcreatedAt\022:\n\013attachments\030\005 \003(\0132\030.co"
  "re.common.v1.FileItemR\013attachments\"\352\001\n\007U"
  "rlItem\022(\n\004mime\030\001 \001(\0132\024.core.common.v1.MI"
  "MER\004mime\022\022\n\004link\030\002 \001(\tR\004link\022\024\n\005title\030\003 "
  "\001(\tR\005title\022\022\n\004site\030\004 \001(\tR\004site\022\033\n\tsite_n"
  "ame\030\005 \001(\tR\010siteName\022 \n\013description\030\006 \001(\t"
  "R\013description\0228\n\nopen_graph\030\007 \001(\0132\031.core"
  ".common.v1.OpenGraphR\topenGraph\"\315\016\n\tOpen"
  "Graph\022;\n\007primary\030\001 \001(\0132!.core.common.v1."
  "OpenGraph.PrimaryR\007primary\0227\n\006images\030\002 \003"
  "(\0132\037.core.common.v1.OpenGraph.ImageR\006ima"
  "ges\0227\n\006videos\030\003 \003(\0132\037.core.common.v1.Ope"
  "nGraph.VideoR\006videos\0227\n\006audios\030\004 \003(\0132\037.c"
  "ore.common.v1.OpenGraph.AudioR\006audios\022;\n"
  "\007twitter\030\005 \001(\0132!.core.common.v1.OpenGrap"
  "h.TwitterR\007twitter\032\257\002\n\007Primary\0222\n\004type\030\001"
  " \001(\0162\036.core.common.v1.OpenGraph.TypeR\004ty"
  "pe\0227\n\005image\030\002 \001(\0132\037.core.common.v1.OpenG"
  "raph.ImageH\000R\005image\0227\n\005video\030\003 \001(\0132\037.cor"
  "e.common.v1.OpenGraph.VideoH\000R\005video\0227\n\005"
  "audio\030\004 \001(\0132\037.core.common.v1.OpenGraph.A"
  "udioH\000R\005audio\022=\n\007twitter\030\005 \001(\0132!.core.co"
  "mmon.v1.OpenGraph.TwitterH\000R\007twitterB\006\n\004"
  "data\032z\n\005Image\022\020\n\003url\030\001 \001(\tR\003url\022\035\n\nsecur"
  "e_url\030\002 \001(\tR\tsecureUrl\022\024\n\005width\030\003 \001(\005R\005w"
  "idth\022\026\n\006height\030\004 \001(\005R\006height\022\022\n\004type\030\005 \001"
  "(\tR\004type\032z\n\005Video\022\020\n\003url\030\001 \001(\tR\003url\022\035\n\ns"
  "ecure_url\030\002 \001(\tR\tsecureUrl\022\024\n\005width\030\003 \001("
  "\005R\005width\022\026\n\006height\030\004 \001(\005R\006height\022\022\n\004type"
  "\030\005 \001(\tR\004type\032L\n\005Audio\022\020\n\003url\030\001 \001(\tR\003url\022"
  "\035\n\nsecure_url\030\002 \001(\tR\tsecureUrl\022\022\n\004type\030\003"
  " \001(\tR\004type\032\263\006\n\007Twitter\022\022\n\004card\030\001 \001(\tR\004ca"
  "rd\022\022\n\004site\030\002 \001(\tR\004site\022\027\n\007site_id\030\003 \001(\tR"
  "\006siteId\022\030\n\007creator\030\004 \001(\tR\007creator\022\035\n\ncre"
  "ator_id\030\005 \001(\tR\tcreatorId\022 \n\013description\030"
  "\006 \001(\tR\013description\022\024\n\005title\030\007 \001(\tR\005title"
  "\022\024\n\005image\030\010 \001(\tR\005image\022\033\n\timage_alt\030\t \001("
  "\tR\010imageAlt\022\020\n\003url\030\n \001(\tR\003url\022@\n\006player\030"
  "\013 \001(\0132(.core.common.v1.OpenGraph.Twitter"
  ".PlayerR\006player\022@\n\006iphone\030\014 \001(\0132(.core.c"
  "ommon.v1.OpenGraph.Twitter.IPhoneR\006iphon"
  "e\022:\n\004ipad\030\r \001(\0132&.core.common.v1.OpenGra"
  "ph.Twitter.IPadR\004ipad\022M\n\013google_play\030\016 \001"
  "(\0132,.core.common.v1.OpenGraph.Twitter.Go"
  "oglePlayR\ngooglePlay\032`\n\006Player\022\020\n\003url\030\001 "
  "\001(\tR\003url\022\024\n\005width\030\002 \001(\005R\005width\022\026\n\006height"
  "\030\003 \001(\005R\006height\022\026\n\006stream\030\004 \001(\tR\006stream\032>"
  "\n\006IPhone\022\022\n\004name\030\001 \001(\tR\004name\022\016\n\002id\030\002 \001(\t"
  "R\002id\022\020\n\003url\030\003 \001(\tR\003url\032<\n\004IPad\022\022\n\004name\030\001"
  " \001(\tR\004name\022\016\n\002id\030\002 \001(\tR\002id\022\020\n\003url\030\003 \001(\tR"
  "\003url\032B\n\nGooglePlay\022\022\n\004name\030\001 \001(\tR\004name\022\016"
  "\n\002id\030\002 \001(\tR\002id\022\020\n\003url\030\003 \001(\tR\003url\"m\n\004Type"
  "\022\024\n\020TYPE_UNSPECIFIED\020\000\022\016\n\nTYPE_IMAGE\020\001\022\016"
  "\n\nTYPE_VIDEO\020\002\022\020\n\014TYPE_TWITTER\020\003\022\016\n\nTYPE"
  "_AUDIO\020\004\022\r\n\tTYPE_NONE\020\005\"M\n\tThumbnail\022\026\n\006"
  "buffer\030\001 \001(\014R\006buffer\022(\n\004mime\030\002 \001(\0132\024.cor"
  "e.common.v1.MIMER\004mime\"\216\004\n\007Payload\0222\n\005it"
  "ems\030\001 \003(\0132\034.core.common.v1.Payload.ItemR"
  "\005items\022-\n\005owner\030\002 \001(\0132\027.core.common.v1.P"
  "rofileR\005owner\022\022\n\004size\030\003 \001(\003R\004size\022\035\n\ncre"
  "ated_at\030\004 \001(\003R\tcreatedAt\032\354\002\n\004Item\022(\n\004mim"
  "e\030\001 \001(\0132\024.core.common.v1.MIMER\004mime\022\022\n\004s"
  "ize\030\002 \001(\003R\004size\022.\n\004file\030\003 \001(\0132\030.core.com"
  "mon.v1.FileItemH\000R\004file\022+\n\003url\030\004 \001(\0132\027.c"
  "ore.common.v1.UrlItemH\000R\003url\0227\n\007message\030"
  "\005 \001(\0132\033.core.common.v1.MessageItemH\000R\007me"
  "ssage\0229\n\tthumbnail\030\006 \001(\0132\031.core.common.v"
  "1.ThumbnailH\001R\tthumbnail\022B\n\nopen_graph\030\007"
  " \001(\0132!.core.common.v1.OpenGraph.PrimaryH"
  "\001R\topenGraphB\006\n\004dataB\t\n\007preview\"y\n\013Paylo"
  "adList\0223\n\010payloads\030\001 \003(\0132\027.core.common.v"
  "1.PayloadR\010payloads\022\020\n\003key\030\002 \001(\tR\003key\022#\n"
  "\rlast_modified\030\003 \001(\003R\014lastModified\"Q\n\nSu"
  "pplyItem\022\022\n\004path\030\001 \001(\tR\004path\022!\n\tthumbnai"
  "l\030\002 \001(\014H\000R\tthumbnail\210\001\001B\014\n\n_thumbnail*V\n"
  "\tDirection\022\031\n\025DIRECTION_UNSPECIFIED\020\000\022\026\n"
  "\022DIRECTION_INCOMING\020\001\022\026\n\022DIRECTION_OUTGO"
  "ING\020\002B Z\036github.com/sonr-io/core/commonb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_deps[1] = {
  &::descriptor_table_core_2fcommon_2fv1_2fcore_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcommon_2fv1_2fdata_2eproto = {
  false, false, 3527, descriptor_table_protodef_core_2fcommon_2fv1_2fdata_2eproto, "core/common/v1/data.proto", 
  &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once, descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_deps, 1, 18,
  schemas, file_default_instances, TableStruct_core_2fcommon_2fv1_2fdata_2eproto::offsets,
  file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto, file_level_enum_descriptors_core_2fcommon_2fv1_2fdata_2eproto, file_level_service_descriptors_core_2fcommon_2fv1_2fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter() {
  return &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2fcommon_2fv1_2fdata_2eproto(&descriptor_table_core_2fcommon_2fv1_2fdata_2eproto);
namespace core {
namespace common {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenGraph_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fcommon_2fv1_2fdata_2eproto);
  return file_level_enum_descriptors_core_2fcommon_2fv1_2fdata_2eproto[0];
}
bool OpenGraph_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OpenGraph_Type OpenGraph::TYPE_UNSPECIFIED;
constexpr OpenGraph_Type OpenGraph::TYPE_IMAGE;
constexpr OpenGraph_Type OpenGraph::TYPE_VIDEO;
constexpr OpenGraph_Type OpenGraph::TYPE_TWITTER;
constexpr OpenGraph_Type OpenGraph::TYPE_AUDIO;
constexpr OpenGraph_Type OpenGraph::TYPE_NONE;
constexpr OpenGraph_Type OpenGraph::Type_MIN;
constexpr OpenGraph_Type OpenGraph::Type_MAX;
constexpr int OpenGraph::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fcommon_2fv1_2fdata_2eproto);
  return file_level_enum_descriptors_core_2fcommon_2fv1_2fdata_2eproto[1];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FileItem::_Internal {
 public:
  static const ::core::common::v1::MIME& mime(const FileItem* msg);
  static const ::core::common::v1::Thumbnail& thumbnail(const FileItem* msg);
};

const ::core::common::v1::MIME&
FileItem::_Internal::mime(const FileItem* msg) {
  return *msg->mime_;
}
const ::core::common::v1::Thumbnail&
FileItem::_Internal::thumbnail(const FileItem* msg) {
  return *msg->thumbnail_;
}
void FileItem::clear_mime() {
  if (GetArenaForAllocation() == nullptr && mime_ != nullptr) {
    delete mime_;
  }
  mime_ = nullptr;
}
FileItem::FileItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.FileItem)
}
FileItem::FileItem(const FileItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mime()) {
    mime_ = new ::core::common::v1::MIME(*from.mime_);
  } else {
    mime_ = nullptr;
  }
  if (from._internal_has_thumbnail()) {
    thumbnail_ = new ::core::common::v1::Thumbnail(*from.thumbnail_);
  } else {
    thumbnail_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_modified_) -
    reinterpret_cast<char*>(&size_)) + sizeof(last_modified_));
  // @@protoc_insertion_point(copy_constructor:core.common.v1.FileItem)
}

inline void FileItem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_modified_) -
    reinterpret_cast<char*>(&mime_)) + sizeof(last_modified_));
}

FileItem::~FileItem() {
  // @@protoc_insertion_point(destructor:core.common.v1.FileItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FileItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mime_;
  if (this != internal_default_instance()) delete thumbnail_;
}

void FileItem::ArenaDtor(void* object) {
  FileItem* _this = reinterpret_cast< FileItem* >(object);
  (void)_this;
}
void FileItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileItem::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.FileItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mime_ != nullptr) {
    delete mime_;
  }
  mime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && thumbnail_ != nullptr) {
    delete thumbnail_;
  }
  thumbnail_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_modified_) -
      reinterpret_cast<char*>(&size_)) + sizeof(last_modified_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .core.common.v1.MIME mime = 1 [json_name = "mime"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.FileItem.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 3 [json_name = "path"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.FileItem.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 4 [json_name = "size"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.Thumbnail thumbnail = 5 [json_name = "thumbnail"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_modified = 6 [json_name = "lastModified"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.FileItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.common.v1.MIME mime = 1 [json_name = "mime"];
  if (this->_internal_has_mime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mime(this), target, stream);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.FileItem.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string path = 3 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.FileItem.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // int64 size = 4 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_size(), target);
  }

  // .core.common.v1.Thumbnail thumbnail = 5 [json_name = "thumbnail"];
  if (this->_internal_has_thumbnail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::thumbnail(this), target, stream);
  }

  // int64 last_modified = 6 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_last_modified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.FileItem)
  return target;
}

size_t FileItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.FileItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 3 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .core.common.v1.MIME mime = 1 [json_name = "mime"];
  if (this->_internal_has_mime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mime_);
  }

  // .core.common.v1.Thumbnail thumbnail = 5 [json_name = "thumbnail"];
  if (this->_internal_has_thumbnail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thumbnail_);
  }

  // int64 size = 4 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 last_modified = 6 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_modified());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FileItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileItem::GetClassData() const { return &_class_data_; }

void FileItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FileItem *>(to)->MergeFrom(
      static_cast<const FileItem &>(from));
}


void FileItem::MergeFrom(const FileItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.FileItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_has_mime()) {
    _internal_mutable_mime()->::core::common::v1::MIME::MergeFrom(from._internal_mime());
  }
  if (from._internal_has_thumbnail()) {
    _internal_mutable_thumbnail()->::core::common::v1::Thumbnail::MergeFrom(from._internal_thumbnail());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_last_modified() != 0) {
    _internal_set_last_modified(from._internal_last_modified());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileItem::CopyFrom(const FileItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.FileItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileItem::IsInitialized() const {
  return true;
}

void FileItem::InternalSwap(FileItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileItem, last_modified_)
      + sizeof(FileItem::last_modified_)
      - PROTOBUF_FIELD_OFFSET(FileItem, mime_)>(
          reinterpret_cast<char*>(&mime_),
          reinterpret_cast<char*>(&other->mime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[0]);
}

// ===================================================================

class MessageItem::_Internal {
 public:
  static const ::core::common::v1::MIME& mime(const MessageItem* msg);
};

const ::core::common::v1::MIME&
MessageItem::_Internal::mime(const MessageItem* msg) {
  return *msg->mime_;
}
void MessageItem::clear_mime() {
  if (GetArenaForAllocation() == nullptr && mime_ != nullptr) {
    delete mime_;
  }
  mime_ = nullptr;
}
MessageItem::MessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  attachments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.MessageItem)
}
MessageItem::MessageItem(const MessageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mime()) {
    mime_ = new ::core::common::v1::MIME(*from.mime_);
  } else {
    mime_ = nullptr;
  }
  created_at_ = from.created_at_;
  // @@protoc_insertion_point(copy_constructor:core.common.v1.MessageItem)
}

inline void MessageItem::SharedCtor() {
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&mime_)) + sizeof(created_at_));
}

MessageItem::~MessageItem() {
  // @@protoc_insertion_point(destructor:core.common.v1.MessageItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mime_;
}

void MessageItem::ArenaDtor(void* object) {
  MessageItem* _this = reinterpret_cast< MessageItem* >(object);
  (void)_this;
}
void MessageItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.MessageItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachments_.Clear();
  subject_.ClearToEmpty();
  body_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mime_ != nullptr) {
    delete mime_;
  }
  mime_ = nullptr;
  created_at_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .core.common.v1.MIME mime = 1 [json_name = "mime"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subject = 2 [json_name = "subject"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.MessageItem.subject"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string body = 3 [json_name = "body"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.MessageItem.body"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 4 [json_name = "createdAt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .core.common.v1.FileItem attachments = 5 [json_name = "attachments"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.MessageItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.common.v1.MIME mime = 1 [json_name = "mime"];
  if (this->_internal_has_mime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mime(this), target, stream);
  }

  // string subject = 2 [json_name = "subject"];
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.MessageItem.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // string body = 3 [json_name = "body"];
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.MessageItem.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  // int64 created_at = 4 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_created_at(), target);
  }

  // repeated .core.common.v1.FileItem attachments = 5 [json_name = "attachments"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.MessageItem)
  return target;
}

size_t MessageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.MessageItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .core.common.v1.FileItem attachments = 5 [json_name = "attachments"];
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string subject = 2 [json_name = "subject"];
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string body = 3 [json_name = "body"];
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .core.common.v1.MIME mime = 1 [json_name = "mime"];
  if (this->_internal_has_mime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mime_);
  }

  // int64 created_at = 4 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageItem::GetClassData() const { return &_class_data_; }

void MessageItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageItem *>(to)->MergeFrom(
      static_cast<const MessageItem &>(from));
}


void MessageItem::MergeFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.MessageItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  attachments_.MergeFrom(from.attachments_);
  if (!from._internal_subject().empty()) {
    _internal_set_subject(from._internal_subject());
  }
  if (!from._internal_body().empty()) {
    _internal_set_body(from._internal_body());
  }
  if (from._internal_has_mime()) {
    _internal_mutable_mime()->::core::common::v1::MIME::MergeFrom(from._internal_mime());
  }
  if (from._internal_created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageItem::CopyFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.MessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageItem::IsInitialized() const {
  return true;
}

void MessageItem::InternalSwap(MessageItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  attachments_.InternalSwap(&other->attachments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subject_, lhs_arena,
      &other->subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageItem, created_at_)
      + sizeof(MessageItem::created_at_)
      - PROTOBUF_FIELD_OFFSET(MessageItem, mime_)>(
          reinterpret_cast<char*>(&mime_),
          reinterpret_cast<char*>(&other->mime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[1]);
}

// ===================================================================

class UrlItem::_Internal {
 public:
  static const ::core::common::v1::MIME& mime(const UrlItem* msg);
  static const ::core::common::v1::OpenGraph& open_graph(const UrlItem* msg);
};

const ::core::common::v1::MIME&
UrlItem::_Internal::mime(const UrlItem* msg) {
  return *msg->mime_;
}
const ::core::common::v1::OpenGraph&
UrlItem::_Internal::open_graph(const UrlItem* msg) {
  return *msg->open_graph_;
}
void UrlItem::clear_mime() {
  if (GetArenaForAllocation() == nullptr && mime_ != nullptr) {
    delete mime_;
  }
  mime_ = nullptr;
}
UrlItem::UrlItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.UrlItem)
}
UrlItem::UrlItem(const UrlItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link().empty()) {
    link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  site_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    site_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_site().empty()) {
    site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_site(), 
      GetArenaForAllocation());
  }
  site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_site_name().empty()) {
    site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_site_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mime()) {
    mime_ = new ::core::common::v1::MIME(*from.mime_);
  } else {
    mime_ = nullptr;
  }
  if (from._internal_has_open_graph()) {
    open_graph_ = new ::core::common::v1::OpenGraph(*from.open_graph_);
  } else {
    open_graph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.UrlItem)
}

inline void UrlItem::SharedCtor() {
link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
site_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  site_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&open_graph_) -
    reinterpret_cast<char*>(&mime_)) + sizeof(open_graph_));
}

UrlItem::~UrlItem() {
  // @@protoc_insertion_point(destructor:core.common.v1.UrlItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UrlItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mime_;
  if (this != internal_default_instance()) delete open_graph_;
}

void UrlItem::ArenaDtor(void* object) {
  UrlItem* _this = reinterpret_cast< UrlItem* >(object);
  (void)_this;
}
void UrlItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UrlItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UrlItem::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.UrlItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_.ClearToEmpty();
  title_.ClearToEmpty();
  site_.ClearToEmpty();
  site_name_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mime_ != nullptr) {
    delete mime_;
  }
  mime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && open_graph_ != nullptr) {
    delete open_graph_;
  }
  open_graph_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UrlItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .core.common.v1.MIME mime = 1 [json_name = "mime"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string link = 2 [json_name = "link"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.UrlItem.link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 3 [json_name = "title"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.UrlItem.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string site = 4 [json_name = "site"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_site();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.UrlItem.site"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string site_name = 5 [json_name = "siteName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_site_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.UrlItem.site_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 6 [json_name = "description"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.UrlItem.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph open_graph = 7 [json_name = "openGraph"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UrlItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.UrlItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.common.v1.MIME mime = 1 [json_name = "mime"];
  if (this->_internal_has_mime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mime(this), target, stream);
  }

  // string link = 2 [json_name = "link"];
  if (!this->_internal_link().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link().data(), static_cast<int>(this->_internal_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.UrlItem.link");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_link(), target);
  }

  // string title = 3 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.UrlItem.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string site = 4 [json_name = "site"];
  if (!this->_internal_site().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site().data(), static_cast<int>(this->_internal_site().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.UrlItem.site");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_site(), target);
  }

  // string site_name = 5 [json_name = "siteName"];
  if (!this->_internal_site_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_name().data(), static_cast<int>(this->_internal_site_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.UrlItem.site_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_site_name(), target);
  }

  // string description = 6 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.UrlItem.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // .core.common.v1.OpenGraph open_graph = 7 [json_name = "openGraph"];
  if (this->_internal_has_open_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::open_graph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.UrlItem)
  return target;
}

size_t UrlItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.UrlItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string link = 2 [json_name = "link"];
  if (!this->_internal_link().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link());
  }

  // string title = 3 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string site = 4 [json_name = "site"];
  if (!this->_internal_site().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site());
  }

  // string site_name = 5 [json_name = "siteName"];
  if (!this->_internal_site_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_name());
  }

  // string description = 6 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .core.common.v1.MIME mime = 1 [json_name = "mime"];
  if (this->_internal_has_mime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mime_);
  }

  // .core.common.v1.OpenGraph open_graph = 7 [json_name = "openGraph"];
  if (this->_internal_has_open_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_graph_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UrlItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UrlItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UrlItem::GetClassData() const { return &_class_data_; }

void UrlItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UrlItem *>(to)->MergeFrom(
      static_cast<const UrlItem &>(from));
}


void UrlItem::MergeFrom(const UrlItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.UrlItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_link().empty()) {
    _internal_set_link(from._internal_link());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_site().empty()) {
    _internal_set_site(from._internal_site());
  }
  if (!from._internal_site_name().empty()) {
    _internal_set_site_name(from._internal_site_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_mime()) {
    _internal_mutable_mime()->::core::common::v1::MIME::MergeFrom(from._internal_mime());
  }
  if (from._internal_has_open_graph()) {
    _internal_mutable_open_graph()->::core::common::v1::OpenGraph::MergeFrom(from._internal_open_graph());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UrlItem::CopyFrom(const UrlItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.UrlItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlItem::IsInitialized() const {
  return true;
}

void UrlItem::InternalSwap(UrlItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &link_, lhs_arena,
      &other->link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &site_, lhs_arena,
      &other->site_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &site_name_, lhs_arena,
      &other->site_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UrlItem, open_graph_)
      + sizeof(UrlItem::open_graph_)
      - PROTOBUF_FIELD_OFFSET(UrlItem, mime_)>(
          reinterpret_cast<char*>(&mime_),
          reinterpret_cast<char*>(&other->mime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UrlItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[2]);
}

// ===================================================================

class OpenGraph_Primary::_Internal {
 public:
  static const ::core::common::v1::OpenGraph_Image& image(const OpenGraph_Primary* msg);
  static const ::core::common::v1::OpenGraph_Video& video(const OpenGraph_Primary* msg);
  static const ::core::common::v1::OpenGraph_Audio& audio(const OpenGraph_Primary* msg);
  static const ::core::common::v1::OpenGraph_Twitter& twitter(const OpenGraph_Primary* msg);
};

const ::core::common::v1::OpenGraph_Image&
OpenGraph_Primary::_Internal::image(const OpenGraph_Primary* msg) {
  return *msg->data_.image_;
}
const ::core::common::v1::OpenGraph_Video&
OpenGraph_Primary::_Internal::video(const OpenGraph_Primary* msg) {
  return *msg->data_.video_;
}
const ::core::common::v1::OpenGraph_Audio&
OpenGraph_Primary::_Internal::audio(const OpenGraph_Primary* msg) {
  return *msg->data_.audio_;
}
const ::core::common::v1::OpenGraph_Twitter&
OpenGraph_Primary::_Internal::twitter(const OpenGraph_Primary* msg) {
  return *msg->data_.twitter_;
}
void OpenGraph_Primary::set_allocated_image(::core::common::v1::OpenGraph_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::core::common::v1::OpenGraph_Image>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    data_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:core.common.v1.OpenGraph.Primary.image)
}
void OpenGraph_Primary::set_allocated_video(::core::common::v1::OpenGraph_Video* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::core::common::v1::OpenGraph_Video>::GetOwningArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    set_has_video();
    data_.video_ = video;
  }
  // @@protoc_insertion_point(field_set_allocated:core.common.v1.OpenGraph.Primary.video)
}
void OpenGraph_Primary::set_allocated_audio(::core::common::v1::OpenGraph_Audio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::core::common::v1::OpenGraph_Audio>::GetOwningArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    set_has_audio();
    data_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_set_allocated:core.common.v1.OpenGraph.Primary.audio)
}
void OpenGraph_Primary::set_allocated_twitter(::core::common::v1::OpenGraph_Twitter* twitter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (twitter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::core::common::v1::OpenGraph_Twitter>::GetOwningArena(twitter);
    if (message_arena != submessage_arena) {
      twitter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twitter, submessage_arena);
    }
    set_has_twitter();
    data_.twitter_ = twitter;
  }
  // @@protoc_insertion_point(field_set_allocated:core.common.v1.OpenGraph.Primary.twitter)
}
OpenGraph_Primary::OpenGraph_Primary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.OpenGraph.Primary)
}
OpenGraph_Primary::OpenGraph_Primary(const OpenGraph_Primary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_data();
  switch (from.data_case()) {
    case kImage: {
      _internal_mutable_image()->::core::common::v1::OpenGraph_Image::MergeFrom(from._internal_image());
      break;
    }
    case kVideo: {
      _internal_mutable_video()->::core::common::v1::OpenGraph_Video::MergeFrom(from._internal_video());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::core::common::v1::OpenGraph_Audio::MergeFrom(from._internal_audio());
      break;
    }
    case kTwitter: {
      _internal_mutable_twitter()->::core::common::v1::OpenGraph_Twitter::MergeFrom(from._internal_twitter());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.OpenGraph.Primary)
}

inline void OpenGraph_Primary::SharedCtor() {
type_ = 0;
clear_has_data();
}

OpenGraph_Primary::~OpenGraph_Primary() {
  // @@protoc_insertion_point(destructor:core.common.v1.OpenGraph.Primary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenGraph_Primary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void OpenGraph_Primary::ArenaDtor(void* object) {
  OpenGraph_Primary* _this = reinterpret_cast< OpenGraph_Primary* >(object);
  (void)_this;
}
void OpenGraph_Primary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenGraph_Primary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenGraph_Primary::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:core.common.v1.OpenGraph.Primary)
  switch (data_case()) {
    case kImage: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.image_;
      }
      break;
    }
    case kVideo: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.video_;
      }
      break;
    }
    case kAudio: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.audio_;
      }
      break;
    }
    case kTwitter: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.twitter_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void OpenGraph_Primary::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.OpenGraph.Primary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenGraph_Primary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .core.common.v1.OpenGraph.Type type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::core::common::v1::OpenGraph_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph.Image image = 2 [json_name = "image"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph.Video video = 3 [json_name = "video"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph.Audio audio = 4 [json_name = "audio"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph.Twitter twitter = 5 [json_name = "twitter"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_twitter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenGraph_Primary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.OpenGraph.Primary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.common.v1.OpenGraph.Type type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .core.common.v1.OpenGraph.Image image = 2 [json_name = "image"];
  if (_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image(this), target, stream);
  }

  // .core.common.v1.OpenGraph.Video video = 3 [json_name = "video"];
  if (_internal_has_video()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::video(this), target, stream);
  }

  // .core.common.v1.OpenGraph.Audio audio = 4 [json_name = "audio"];
  if (_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::audio(this), target, stream);
  }

  // .core.common.v1.OpenGraph.Twitter twitter = 5 [json_name = "twitter"];
  if (_internal_has_twitter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::twitter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.OpenGraph.Primary)
  return target;
}

size_t OpenGraph_Primary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.OpenGraph.Primary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .core.common.v1.OpenGraph.Type type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (data_case()) {
    // .core.common.v1.OpenGraph.Image image = 2 [json_name = "image"];
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.image_);
      break;
    }
    // .core.common.v1.OpenGraph.Video video = 3 [json_name = "video"];
    case kVideo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.video_);
      break;
    }
    // .core.common.v1.OpenGraph.Audio audio = 4 [json_name = "audio"];
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.audio_);
      break;
    }
    // .core.common.v1.OpenGraph.Twitter twitter = 5 [json_name = "twitter"];
    case kTwitter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.twitter_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenGraph_Primary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenGraph_Primary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenGraph_Primary::GetClassData() const { return &_class_data_; }

void OpenGraph_Primary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenGraph_Primary *>(to)->MergeFrom(
      static_cast<const OpenGraph_Primary &>(from));
}


void OpenGraph_Primary::MergeFrom(const OpenGraph_Primary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.OpenGraph.Primary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.data_case()) {
    case kImage: {
      _internal_mutable_image()->::core::common::v1::OpenGraph_Image::MergeFrom(from._internal_image());
      break;
    }
    case kVideo: {
      _internal_mutable_video()->::core::common::v1::OpenGraph_Video::MergeFrom(from._internal_video());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::core::common::v1::OpenGraph_Audio::MergeFrom(from._internal_audio());
      break;
    }
    case kTwitter: {
      _internal_mutable_twitter()->::core::common::v1::OpenGraph_Twitter::MergeFrom(from._internal_twitter());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenGraph_Primary::CopyFrom(const OpenGraph_Primary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.OpenGraph.Primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGraph_Primary::IsInitialized() const {
  return true;
}

void OpenGraph_Primary::InternalSwap(OpenGraph_Primary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenGraph_Primary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[3]);
}

// ===================================================================

class OpenGraph_Image::_Internal {
 public:
};

OpenGraph_Image::OpenGraph_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.OpenGraph.Image)
}
OpenGraph_Image::OpenGraph_Image(const OpenGraph_Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  secure_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secure_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secure_url().empty()) {
    secure_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secure_url(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:core.common.v1.OpenGraph.Image)
}

inline void OpenGraph_Image::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secure_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secure_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

OpenGraph_Image::~OpenGraph_Image() {
  // @@protoc_insertion_point(destructor:core.common.v1.OpenGraph.Image)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenGraph_Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secure_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenGraph_Image::ArenaDtor(void* object) {
  OpenGraph_Image* _this = reinterpret_cast< OpenGraph_Image* >(object);
  (void)_this;
}
void OpenGraph_Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenGraph_Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenGraph_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.OpenGraph.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  secure_url_.ClearToEmpty();
  type_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenGraph_Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1 [json_name = "url"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Image.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secure_url = 2 [json_name = "secureUrl"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secure_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Image.secure_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 3 [json_name = "width"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4 [json_name = "height"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 5 [json_name = "type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Image.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenGraph_Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.OpenGraph.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Image.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string secure_url = 2 [json_name = "secureUrl"];
  if (!this->_internal_secure_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secure_url().data(), static_cast<int>(this->_internal_secure_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Image.secure_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secure_url(), target);
  }

  // int32 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // string type = 5 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Image.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.OpenGraph.Image)
  return target;
}

size_t OpenGraph_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.OpenGraph.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string secure_url = 2 [json_name = "secureUrl"];
  if (!this->_internal_secure_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secure_url());
  }

  // string type = 5 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenGraph_Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenGraph_Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenGraph_Image::GetClassData() const { return &_class_data_; }

void OpenGraph_Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenGraph_Image *>(to)->MergeFrom(
      static_cast<const OpenGraph_Image &>(from));
}


void OpenGraph_Image::MergeFrom(const OpenGraph_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.OpenGraph.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_secure_url().empty()) {
    _internal_set_secure_url(from._internal_secure_url());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenGraph_Image::CopyFrom(const OpenGraph_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.OpenGraph.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGraph_Image::IsInitialized() const {
  return true;
}

void OpenGraph_Image::InternalSwap(OpenGraph_Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secure_url_, lhs_arena,
      &other->secure_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenGraph_Image, height_)
      + sizeof(OpenGraph_Image::height_)
      - PROTOBUF_FIELD_OFFSET(OpenGraph_Image, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenGraph_Image::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[4]);
}

// ===================================================================

class OpenGraph_Video::_Internal {
 public:
};

OpenGraph_Video::OpenGraph_Video(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.OpenGraph.Video)
}
OpenGraph_Video::OpenGraph_Video(const OpenGraph_Video& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  secure_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secure_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secure_url().empty()) {
    secure_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secure_url(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:core.common.v1.OpenGraph.Video)
}

inline void OpenGraph_Video::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secure_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secure_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

OpenGraph_Video::~OpenGraph_Video() {
  // @@protoc_insertion_point(destructor:core.common.v1.OpenGraph.Video)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenGraph_Video::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secure_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenGraph_Video::ArenaDtor(void* object) {
  OpenGraph_Video* _this = reinterpret_cast< OpenGraph_Video* >(object);
  (void)_this;
}
void OpenGraph_Video::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenGraph_Video::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenGraph_Video::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.OpenGraph.Video)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  secure_url_.ClearToEmpty();
  type_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenGraph_Video::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1 [json_name = "url"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Video.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secure_url = 2 [json_name = "secureUrl"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secure_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Video.secure_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 3 [json_name = "width"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4 [json_name = "height"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 5 [json_name = "type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Video.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenGraph_Video::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.OpenGraph.Video)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Video.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string secure_url = 2 [json_name = "secureUrl"];
  if (!this->_internal_secure_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secure_url().data(), static_cast<int>(this->_internal_secure_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Video.secure_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secure_url(), target);
  }

  // int32 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // string type = 5 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Video.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.OpenGraph.Video)
  return target;
}

size_t OpenGraph_Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.OpenGraph.Video)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string secure_url = 2 [json_name = "secureUrl"];
  if (!this->_internal_secure_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secure_url());
  }

  // string type = 5 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenGraph_Video::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenGraph_Video::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenGraph_Video::GetClassData() const { return &_class_data_; }

void OpenGraph_Video::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenGraph_Video *>(to)->MergeFrom(
      static_cast<const OpenGraph_Video &>(from));
}


void OpenGraph_Video::MergeFrom(const OpenGraph_Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.OpenGraph.Video)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_secure_url().empty()) {
    _internal_set_secure_url(from._internal_secure_url());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenGraph_Video::CopyFrom(const OpenGraph_Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.OpenGraph.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGraph_Video::IsInitialized() const {
  return true;
}

void OpenGraph_Video::InternalSwap(OpenGraph_Video* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secure_url_, lhs_arena,
      &other->secure_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenGraph_Video, height_)
      + sizeof(OpenGraph_Video::height_)
      - PROTOBUF_FIELD_OFFSET(OpenGraph_Video, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenGraph_Video::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[5]);
}

// ===================================================================

class OpenGraph_Audio::_Internal {
 public:
};

OpenGraph_Audio::OpenGraph_Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.OpenGraph.Audio)
}
OpenGraph_Audio::OpenGraph_Audio(const OpenGraph_Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  secure_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secure_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secure_url().empty()) {
    secure_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secure_url(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.OpenGraph.Audio)
}

inline void OpenGraph_Audio::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secure_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secure_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpenGraph_Audio::~OpenGraph_Audio() {
  // @@protoc_insertion_point(destructor:core.common.v1.OpenGraph.Audio)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenGraph_Audio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secure_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenGraph_Audio::ArenaDtor(void* object) {
  OpenGraph_Audio* _this = reinterpret_cast< OpenGraph_Audio* >(object);
  (void)_this;
}
void OpenGraph_Audio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenGraph_Audio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenGraph_Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.OpenGraph.Audio)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  secure_url_.ClearToEmpty();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenGraph_Audio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1 [json_name = "url"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Audio.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secure_url = 2 [json_name = "secureUrl"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secure_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Audio.secure_url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Audio.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenGraph_Audio::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.OpenGraph.Audio)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Audio.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string secure_url = 2 [json_name = "secureUrl"];
  if (!this->_internal_secure_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secure_url().data(), static_cast<int>(this->_internal_secure_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Audio.secure_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secure_url(), target);
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Audio.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.OpenGraph.Audio)
  return target;
}

size_t OpenGraph_Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.OpenGraph.Audio)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string secure_url = 2 [json_name = "secureUrl"];
  if (!this->_internal_secure_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secure_url());
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenGraph_Audio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenGraph_Audio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenGraph_Audio::GetClassData() const { return &_class_data_; }

void OpenGraph_Audio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenGraph_Audio *>(to)->MergeFrom(
      static_cast<const OpenGraph_Audio &>(from));
}


void OpenGraph_Audio::MergeFrom(const OpenGraph_Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.OpenGraph.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_secure_url().empty()) {
    _internal_set_secure_url(from._internal_secure_url());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenGraph_Audio::CopyFrom(const OpenGraph_Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.OpenGraph.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGraph_Audio::IsInitialized() const {
  return true;
}

void OpenGraph_Audio::InternalSwap(OpenGraph_Audio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secure_url_, lhs_arena,
      &other->secure_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenGraph_Audio::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[6]);
}

// ===================================================================

class OpenGraph_Twitter_Player::_Internal {
 public:
};

OpenGraph_Twitter_Player::OpenGraph_Twitter_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.OpenGraph.Twitter.Player)
}
OpenGraph_Twitter_Player::OpenGraph_Twitter_Player(const OpenGraph_Twitter_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream().empty()) {
    stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:core.common.v1.OpenGraph.Twitter.Player)
}

inline void OpenGraph_Twitter_Player::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

OpenGraph_Twitter_Player::~OpenGraph_Twitter_Player() {
  // @@protoc_insertion_point(destructor:core.common.v1.OpenGraph.Twitter.Player)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenGraph_Twitter_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenGraph_Twitter_Player::ArenaDtor(void* object) {
  OpenGraph_Twitter_Player* _this = reinterpret_cast< OpenGraph_Twitter_Player* >(object);
  (void)_this;
}
void OpenGraph_Twitter_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenGraph_Twitter_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenGraph_Twitter_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.OpenGraph.Twitter.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  stream_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenGraph_Twitter_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1 [json_name = "url"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.Player.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 2 [json_name = "width"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 3 [json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stream = 4 [json_name = "stream"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.Player.stream"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenGraph_Twitter_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.OpenGraph.Twitter.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.Player.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // int32 width = 2 [json_name = "width"];
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // string stream = 4 [json_name = "stream"];
  if (!this->_internal_stream().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream().data(), static_cast<int>(this->_internal_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.Player.stream");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.OpenGraph.Twitter.Player)
  return target;
}

size_t OpenGraph_Twitter_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.OpenGraph.Twitter.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string stream = 4 [json_name = "stream"];
  if (!this->_internal_stream().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream());
  }

  // int32 width = 2 [json_name = "width"];
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenGraph_Twitter_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenGraph_Twitter_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenGraph_Twitter_Player::GetClassData() const { return &_class_data_; }

void OpenGraph_Twitter_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenGraph_Twitter_Player *>(to)->MergeFrom(
      static_cast<const OpenGraph_Twitter_Player &>(from));
}


void OpenGraph_Twitter_Player::MergeFrom(const OpenGraph_Twitter_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.OpenGraph.Twitter.Player)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_stream().empty()) {
    _internal_set_stream(from._internal_stream());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenGraph_Twitter_Player::CopyFrom(const OpenGraph_Twitter_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.OpenGraph.Twitter.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGraph_Twitter_Player::IsInitialized() const {
  return true;
}

void OpenGraph_Twitter_Player::InternalSwap(OpenGraph_Twitter_Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stream_, lhs_arena,
      &other->stream_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenGraph_Twitter_Player, height_)
      + sizeof(OpenGraph_Twitter_Player::height_)
      - PROTOBUF_FIELD_OFFSET(OpenGraph_Twitter_Player, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenGraph_Twitter_Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[7]);
}

// ===================================================================

class OpenGraph_Twitter_IPhone::_Internal {
 public:
};

OpenGraph_Twitter_IPhone::OpenGraph_Twitter_IPhone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.OpenGraph.Twitter.IPhone)
}
OpenGraph_Twitter_IPhone::OpenGraph_Twitter_IPhone(const OpenGraph_Twitter_IPhone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.OpenGraph.Twitter.IPhone)
}

inline void OpenGraph_Twitter_IPhone::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpenGraph_Twitter_IPhone::~OpenGraph_Twitter_IPhone() {
  // @@protoc_insertion_point(destructor:core.common.v1.OpenGraph.Twitter.IPhone)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenGraph_Twitter_IPhone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenGraph_Twitter_IPhone::ArenaDtor(void* object) {
  OpenGraph_Twitter_IPhone* _this = reinterpret_cast< OpenGraph_Twitter_IPhone* >(object);
  (void)_this;
}
void OpenGraph_Twitter_IPhone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenGraph_Twitter_IPhone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenGraph_Twitter_IPhone::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.OpenGraph.Twitter.IPhone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  id_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenGraph_Twitter_IPhone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.IPhone.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.IPhone.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 3 [json_name = "url"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.IPhone.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenGraph_Twitter_IPhone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.OpenGraph.Twitter.IPhone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.IPhone.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.IPhone.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.IPhone.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.OpenGraph.Twitter.IPhone)
  return target;
}

size_t OpenGraph_Twitter_IPhone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.OpenGraph.Twitter.IPhone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenGraph_Twitter_IPhone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenGraph_Twitter_IPhone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenGraph_Twitter_IPhone::GetClassData() const { return &_class_data_; }

void OpenGraph_Twitter_IPhone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenGraph_Twitter_IPhone *>(to)->MergeFrom(
      static_cast<const OpenGraph_Twitter_IPhone &>(from));
}


void OpenGraph_Twitter_IPhone::MergeFrom(const OpenGraph_Twitter_IPhone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.OpenGraph.Twitter.IPhone)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenGraph_Twitter_IPhone::CopyFrom(const OpenGraph_Twitter_IPhone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.OpenGraph.Twitter.IPhone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGraph_Twitter_IPhone::IsInitialized() const {
  return true;
}

void OpenGraph_Twitter_IPhone::InternalSwap(OpenGraph_Twitter_IPhone* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenGraph_Twitter_IPhone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[8]);
}

// ===================================================================

class OpenGraph_Twitter_IPad::_Internal {
 public:
};

OpenGraph_Twitter_IPad::OpenGraph_Twitter_IPad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.OpenGraph.Twitter.IPad)
}
OpenGraph_Twitter_IPad::OpenGraph_Twitter_IPad(const OpenGraph_Twitter_IPad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.OpenGraph.Twitter.IPad)
}

inline void OpenGraph_Twitter_IPad::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpenGraph_Twitter_IPad::~OpenGraph_Twitter_IPad() {
  // @@protoc_insertion_point(destructor:core.common.v1.OpenGraph.Twitter.IPad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenGraph_Twitter_IPad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenGraph_Twitter_IPad::ArenaDtor(void* object) {
  OpenGraph_Twitter_IPad* _this = reinterpret_cast< OpenGraph_Twitter_IPad* >(object);
  (void)_this;
}
void OpenGraph_Twitter_IPad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenGraph_Twitter_IPad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenGraph_Twitter_IPad::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.OpenGraph.Twitter.IPad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  id_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenGraph_Twitter_IPad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.IPad.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.IPad.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 3 [json_name = "url"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.IPad.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenGraph_Twitter_IPad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.OpenGraph.Twitter.IPad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.IPad.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.IPad.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.IPad.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.OpenGraph.Twitter.IPad)
  return target;
}

size_t OpenGraph_Twitter_IPad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.OpenGraph.Twitter.IPad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenGraph_Twitter_IPad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenGraph_Twitter_IPad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenGraph_Twitter_IPad::GetClassData() const { return &_class_data_; }

void OpenGraph_Twitter_IPad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenGraph_Twitter_IPad *>(to)->MergeFrom(
      static_cast<const OpenGraph_Twitter_IPad &>(from));
}


void OpenGraph_Twitter_IPad::MergeFrom(const OpenGraph_Twitter_IPad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.OpenGraph.Twitter.IPad)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenGraph_Twitter_IPad::CopyFrom(const OpenGraph_Twitter_IPad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.OpenGraph.Twitter.IPad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGraph_Twitter_IPad::IsInitialized() const {
  return true;
}

void OpenGraph_Twitter_IPad::InternalSwap(OpenGraph_Twitter_IPad* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenGraph_Twitter_IPad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[9]);
}

// ===================================================================

class OpenGraph_Twitter_GooglePlay::_Internal {
 public:
};

OpenGraph_Twitter_GooglePlay::OpenGraph_Twitter_GooglePlay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.OpenGraph.Twitter.GooglePlay)
}
OpenGraph_Twitter_GooglePlay::OpenGraph_Twitter_GooglePlay(const OpenGraph_Twitter_GooglePlay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.OpenGraph.Twitter.GooglePlay)
}

inline void OpenGraph_Twitter_GooglePlay::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpenGraph_Twitter_GooglePlay::~OpenGraph_Twitter_GooglePlay() {
  // @@protoc_insertion_point(destructor:core.common.v1.OpenGraph.Twitter.GooglePlay)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenGraph_Twitter_GooglePlay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenGraph_Twitter_GooglePlay::ArenaDtor(void* object) {
  OpenGraph_Twitter_GooglePlay* _this = reinterpret_cast< OpenGraph_Twitter_GooglePlay* >(object);
  (void)_this;
}
void OpenGraph_Twitter_GooglePlay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenGraph_Twitter_GooglePlay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenGraph_Twitter_GooglePlay::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.OpenGraph.Twitter.GooglePlay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  id_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenGraph_Twitter_GooglePlay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.GooglePlay.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.GooglePlay.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 3 [json_name = "url"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.GooglePlay.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenGraph_Twitter_GooglePlay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.OpenGraph.Twitter.GooglePlay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.GooglePlay.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.GooglePlay.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.GooglePlay.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.OpenGraph.Twitter.GooglePlay)
  return target;
}

size_t OpenGraph_Twitter_GooglePlay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.OpenGraph.Twitter.GooglePlay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenGraph_Twitter_GooglePlay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenGraph_Twitter_GooglePlay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenGraph_Twitter_GooglePlay::GetClassData() const { return &_class_data_; }

void OpenGraph_Twitter_GooglePlay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenGraph_Twitter_GooglePlay *>(to)->MergeFrom(
      static_cast<const OpenGraph_Twitter_GooglePlay &>(from));
}


void OpenGraph_Twitter_GooglePlay::MergeFrom(const OpenGraph_Twitter_GooglePlay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.OpenGraph.Twitter.GooglePlay)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenGraph_Twitter_GooglePlay::CopyFrom(const OpenGraph_Twitter_GooglePlay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.OpenGraph.Twitter.GooglePlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGraph_Twitter_GooglePlay::IsInitialized() const {
  return true;
}

void OpenGraph_Twitter_GooglePlay::InternalSwap(OpenGraph_Twitter_GooglePlay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenGraph_Twitter_GooglePlay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[10]);
}

// ===================================================================

class OpenGraph_Twitter::_Internal {
 public:
  static const ::core::common::v1::OpenGraph_Twitter_Player& player(const OpenGraph_Twitter* msg);
  static const ::core::common::v1::OpenGraph_Twitter_IPhone& iphone(const OpenGraph_Twitter* msg);
  static const ::core::common::v1::OpenGraph_Twitter_IPad& ipad(const OpenGraph_Twitter* msg);
  static const ::core::common::v1::OpenGraph_Twitter_GooglePlay& google_play(const OpenGraph_Twitter* msg);
};

const ::core::common::v1::OpenGraph_Twitter_Player&
OpenGraph_Twitter::_Internal::player(const OpenGraph_Twitter* msg) {
  return *msg->player_;
}
const ::core::common::v1::OpenGraph_Twitter_IPhone&
OpenGraph_Twitter::_Internal::iphone(const OpenGraph_Twitter* msg) {
  return *msg->iphone_;
}
const ::core::common::v1::OpenGraph_Twitter_IPad&
OpenGraph_Twitter::_Internal::ipad(const OpenGraph_Twitter* msg) {
  return *msg->ipad_;
}
const ::core::common::v1::OpenGraph_Twitter_GooglePlay&
OpenGraph_Twitter::_Internal::google_play(const OpenGraph_Twitter* msg) {
  return *msg->google_play_;
}
OpenGraph_Twitter::OpenGraph_Twitter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.OpenGraph.Twitter)
}
OpenGraph_Twitter::OpenGraph_Twitter(const OpenGraph_Twitter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_card().empty()) {
    card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_card(), 
      GetArenaForAllocation());
  }
  site_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    site_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_site().empty()) {
    site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_site(), 
      GetArenaForAllocation());
  }
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_site_id().empty()) {
    site_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_site_id(), 
      GetArenaForAllocation());
  }
  creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator(), 
      GetArenaForAllocation());
  }
  creator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    creator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator_id().empty()) {
    creator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  image_alt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_alt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_alt().empty()) {
    image_alt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_alt(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    player_ = new ::core::common::v1::OpenGraph_Twitter_Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  if (from._internal_has_iphone()) {
    iphone_ = new ::core::common::v1::OpenGraph_Twitter_IPhone(*from.iphone_);
  } else {
    iphone_ = nullptr;
  }
  if (from._internal_has_ipad()) {
    ipad_ = new ::core::common::v1::OpenGraph_Twitter_IPad(*from.ipad_);
  } else {
    ipad_ = nullptr;
  }
  if (from._internal_has_google_play()) {
    google_play_ = new ::core::common::v1::OpenGraph_Twitter_GooglePlay(*from.google_play_);
  } else {
    google_play_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.OpenGraph.Twitter)
}

inline void OpenGraph_Twitter::SharedCtor() {
card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
site_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  site_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
creator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  creator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_alt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_alt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&google_play_) -
    reinterpret_cast<char*>(&player_)) + sizeof(google_play_));
}

OpenGraph_Twitter::~OpenGraph_Twitter() {
  // @@protoc_insertion_point(destructor:core.common.v1.OpenGraph.Twitter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenGraph_Twitter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  card_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_alt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete iphone_;
  if (this != internal_default_instance()) delete ipad_;
  if (this != internal_default_instance()) delete google_play_;
}

void OpenGraph_Twitter::ArenaDtor(void* object) {
  OpenGraph_Twitter* _this = reinterpret_cast< OpenGraph_Twitter* >(object);
  (void)_this;
}
void OpenGraph_Twitter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenGraph_Twitter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenGraph_Twitter::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.OpenGraph.Twitter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_.ClearToEmpty();
  site_.ClearToEmpty();
  site_id_.ClearToEmpty();
  creator_.ClearToEmpty();
  creator_id_.ClearToEmpty();
  description_.ClearToEmpty();
  title_.ClearToEmpty();
  image_.ClearToEmpty();
  image_alt_.ClearToEmpty();
  url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && iphone_ != nullptr) {
    delete iphone_;
  }
  iphone_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ipad_ != nullptr) {
    delete ipad_;
  }
  ipad_ = nullptr;
  if (GetArenaForAllocation() == nullptr && google_play_ != nullptr) {
    delete google_play_;
  }
  google_play_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenGraph_Twitter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string card = 1 [json_name = "card"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_card();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.card"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string site = 2 [json_name = "site"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_site();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.site"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string site_id = 3 [json_name = "siteId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_site_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.site_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creator = 4 [json_name = "creator"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_creator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.creator"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creator_id = 5 [json_name = "creatorId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_creator_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.creator_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 6 [json_name = "description"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 7 [json_name = "title"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string image = 8 [json_name = "image"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.image"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string image_alt = 9 [json_name = "imageAlt"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_image_alt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.image_alt"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 10 [json_name = "url"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.OpenGraph.Twitter.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph.Twitter.Player player = 11 [json_name = "player"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph.Twitter.IPhone iphone = 12 [json_name = "iphone"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_iphone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph.Twitter.IPad ipad = 13 [json_name = "ipad"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipad(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph.Twitter.GooglePlay google_play = 14 [json_name = "googlePlay"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_google_play(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenGraph_Twitter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.OpenGraph.Twitter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string card = 1 [json_name = "card"];
  if (!this->_internal_card().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_card().data(), static_cast<int>(this->_internal_card().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.card");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_card(), target);
  }

  // string site = 2 [json_name = "site"];
  if (!this->_internal_site().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site().data(), static_cast<int>(this->_internal_site().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.site");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_site(), target);
  }

  // string site_id = 3 [json_name = "siteId"];
  if (!this->_internal_site_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_id().data(), static_cast<int>(this->_internal_site_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.site_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_site_id(), target);
  }

  // string creator = 4 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.creator");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_creator(), target);
  }

  // string creator_id = 5 [json_name = "creatorId"];
  if (!this->_internal_creator_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_id().data(), static_cast<int>(this->_internal_creator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.creator_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_creator_id(), target);
  }

  // string description = 6 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // string title = 7 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // string image = 8 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.image");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_image(), target);
  }

  // string image_alt = 9 [json_name = "imageAlt"];
  if (!this->_internal_image_alt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_alt().data(), static_cast<int>(this->_internal_image_alt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.image_alt");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_image_alt(), target);
  }

  // string url = 10 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.OpenGraph.Twitter.url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_url(), target);
  }

  // .core.common.v1.OpenGraph.Twitter.Player player = 11 [json_name = "player"];
  if (this->_internal_has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::player(this), target, stream);
  }

  // .core.common.v1.OpenGraph.Twitter.IPhone iphone = 12 [json_name = "iphone"];
  if (this->_internal_has_iphone()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::iphone(this), target, stream);
  }

  // .core.common.v1.OpenGraph.Twitter.IPad ipad = 13 [json_name = "ipad"];
  if (this->_internal_has_ipad()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::ipad(this), target, stream);
  }

  // .core.common.v1.OpenGraph.Twitter.GooglePlay google_play = 14 [json_name = "googlePlay"];
  if (this->_internal_has_google_play()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::google_play(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.OpenGraph.Twitter)
  return target;
}

size_t OpenGraph_Twitter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.OpenGraph.Twitter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string card = 1 [json_name = "card"];
  if (!this->_internal_card().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_card());
  }

  // string site = 2 [json_name = "site"];
  if (!this->_internal_site().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site());
  }

  // string site_id = 3 [json_name = "siteId"];
  if (!this->_internal_site_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_id());
  }

  // string creator = 4 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  // string creator_id = 5 [json_name = "creatorId"];
  if (!this->_internal_creator_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_id());
  }

  // string description = 6 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string title = 7 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string image = 8 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string image_alt = 9 [json_name = "imageAlt"];
  if (!this->_internal_image_alt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_alt());
  }

  // string url = 10 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .core.common.v1.OpenGraph.Twitter.Player player = 11 [json_name = "player"];
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .core.common.v1.OpenGraph.Twitter.IPhone iphone = 12 [json_name = "iphone"];
  if (this->_internal_has_iphone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iphone_);
  }

  // .core.common.v1.OpenGraph.Twitter.IPad ipad = 13 [json_name = "ipad"];
  if (this->_internal_has_ipad()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ipad_);
  }

  // .core.common.v1.OpenGraph.Twitter.GooglePlay google_play = 14 [json_name = "googlePlay"];
  if (this->_internal_has_google_play()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *google_play_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenGraph_Twitter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenGraph_Twitter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenGraph_Twitter::GetClassData() const { return &_class_data_; }

void OpenGraph_Twitter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenGraph_Twitter *>(to)->MergeFrom(
      static_cast<const OpenGraph_Twitter &>(from));
}


void OpenGraph_Twitter::MergeFrom(const OpenGraph_Twitter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.OpenGraph.Twitter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_card().empty()) {
    _internal_set_card(from._internal_card());
  }
  if (!from._internal_site().empty()) {
    _internal_set_site(from._internal_site());
  }
  if (!from._internal_site_id().empty()) {
    _internal_set_site_id(from._internal_site_id());
  }
  if (!from._internal_creator().empty()) {
    _internal_set_creator(from._internal_creator());
  }
  if (!from._internal_creator_id().empty()) {
    _internal_set_creator_id(from._internal_creator_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_image_alt().empty()) {
    _internal_set_image_alt(from._internal_image_alt());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (from._internal_has_player()) {
    _internal_mutable_player()->::core::common::v1::OpenGraph_Twitter_Player::MergeFrom(from._internal_player());
  }
  if (from._internal_has_iphone()) {
    _internal_mutable_iphone()->::core::common::v1::OpenGraph_Twitter_IPhone::MergeFrom(from._internal_iphone());
  }
  if (from._internal_has_ipad()) {
    _internal_mutable_ipad()->::core::common::v1::OpenGraph_Twitter_IPad::MergeFrom(from._internal_ipad());
  }
  if (from._internal_has_google_play()) {
    _internal_mutable_google_play()->::core::common::v1::OpenGraph_Twitter_GooglePlay::MergeFrom(from._internal_google_play());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenGraph_Twitter::CopyFrom(const OpenGraph_Twitter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.OpenGraph.Twitter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGraph_Twitter::IsInitialized() const {
  return true;
}

void OpenGraph_Twitter::InternalSwap(OpenGraph_Twitter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &card_, lhs_arena,
      &other->card_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &site_, lhs_arena,
      &other->site_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &site_id_, lhs_arena,
      &other->site_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_, lhs_arena,
      &other->creator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_id_, lhs_arena,
      &other->creator_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_alt_, lhs_arena,
      &other->image_alt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenGraph_Twitter, google_play_)
      + sizeof(OpenGraph_Twitter::google_play_)
      - PROTOBUF_FIELD_OFFSET(OpenGraph_Twitter, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenGraph_Twitter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[11]);
}

// ===================================================================

class OpenGraph::_Internal {
 public:
  static const ::core::common::v1::OpenGraph_Primary& primary(const OpenGraph* msg);
  static const ::core::common::v1::OpenGraph_Twitter& twitter(const OpenGraph* msg);
};

const ::core::common::v1::OpenGraph_Primary&
OpenGraph::_Internal::primary(const OpenGraph* msg) {
  return *msg->primary_;
}
const ::core::common::v1::OpenGraph_Twitter&
OpenGraph::_Internal::twitter(const OpenGraph* msg) {
  return *msg->twitter_;
}
OpenGraph::OpenGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  images_(arena),
  videos_(arena),
  audios_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.OpenGraph)
}
OpenGraph::OpenGraph(const OpenGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      images_(from.images_),
      videos_(from.videos_),
      audios_(from.audios_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_primary()) {
    primary_ = new ::core::common::v1::OpenGraph_Primary(*from.primary_);
  } else {
    primary_ = nullptr;
  }
  if (from._internal_has_twitter()) {
    twitter_ = new ::core::common::v1::OpenGraph_Twitter(*from.twitter_);
  } else {
    twitter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.OpenGraph)
}

inline void OpenGraph::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&primary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&twitter_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(twitter_));
}

OpenGraph::~OpenGraph() {
  // @@protoc_insertion_point(destructor:core.common.v1.OpenGraph)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete primary_;
  if (this != internal_default_instance()) delete twitter_;
}

void OpenGraph::ArenaDtor(void* object) {
  OpenGraph* _this = reinterpret_cast< OpenGraph* >(object);
  (void)_this;
}
void OpenGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.OpenGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  videos_.Clear();
  audios_.Clear();
  if (GetArenaForAllocation() == nullptr && primary_ != nullptr) {
    delete primary_;
  }
  primary_ = nullptr;
  if (GetArenaForAllocation() == nullptr && twitter_ != nullptr) {
    delete twitter_;
  }
  twitter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .core.common.v1.OpenGraph.Primary primary = 1 [json_name = "primary"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .core.common.v1.OpenGraph.Image images = 2 [json_name = "images"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .core.common.v1.OpenGraph.Video videos = 3 [json_name = "videos"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_videos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .core.common.v1.OpenGraph.Audio audios = 4 [json_name = "audios"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_audios(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph.Twitter twitter = 5 [json_name = "twitter"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_twitter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.OpenGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.common.v1.OpenGraph.Primary primary = 1 [json_name = "primary"];
  if (this->_internal_has_primary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::primary(this), target, stream);
  }

  // repeated .core.common.v1.OpenGraph.Image images = 2 [json_name = "images"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_images_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_images(i), target, stream);
  }

  // repeated .core.common.v1.OpenGraph.Video videos = 3 [json_name = "videos"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_videos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_videos(i), target, stream);
  }

  // repeated .core.common.v1.OpenGraph.Audio audios = 4 [json_name = "audios"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_audios_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_audios(i), target, stream);
  }

  // .core.common.v1.OpenGraph.Twitter twitter = 5 [json_name = "twitter"];
  if (this->_internal_has_twitter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::twitter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.OpenGraph)
  return target;
}

size_t OpenGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.OpenGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .core.common.v1.OpenGraph.Image images = 2 [json_name = "images"];
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .core.common.v1.OpenGraph.Video videos = 3 [json_name = "videos"];
  total_size += 1UL * this->_internal_videos_size();
  for (const auto& msg : this->videos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .core.common.v1.OpenGraph.Audio audios = 4 [json_name = "audios"];
  total_size += 1UL * this->_internal_audios_size();
  for (const auto& msg : this->audios_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .core.common.v1.OpenGraph.Primary primary = 1 [json_name = "primary"];
  if (this->_internal_has_primary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *primary_);
  }

  // .core.common.v1.OpenGraph.Twitter twitter = 5 [json_name = "twitter"];
  if (this->_internal_has_twitter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *twitter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenGraph::GetClassData() const { return &_class_data_; }

void OpenGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenGraph *>(to)->MergeFrom(
      static_cast<const OpenGraph &>(from));
}


void OpenGraph::MergeFrom(const OpenGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.OpenGraph)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  videos_.MergeFrom(from.videos_);
  audios_.MergeFrom(from.audios_);
  if (from._internal_has_primary()) {
    _internal_mutable_primary()->::core::common::v1::OpenGraph_Primary::MergeFrom(from._internal_primary());
  }
  if (from._internal_has_twitter()) {
    _internal_mutable_twitter()->::core::common::v1::OpenGraph_Twitter::MergeFrom(from._internal_twitter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenGraph::CopyFrom(const OpenGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.OpenGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGraph::IsInitialized() const {
  return true;
}

void OpenGraph::InternalSwap(OpenGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  images_.InternalSwap(&other->images_);
  videos_.InternalSwap(&other->videos_);
  audios_.InternalSwap(&other->audios_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenGraph, twitter_)
      + sizeof(OpenGraph::twitter_)
      - PROTOBUF_FIELD_OFFSET(OpenGraph, primary_)>(
          reinterpret_cast<char*>(&primary_),
          reinterpret_cast<char*>(&other->primary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenGraph::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[12]);
}

// ===================================================================

class Thumbnail::_Internal {
 public:
  static const ::core::common::v1::MIME& mime(const Thumbnail* msg);
};

const ::core::common::v1::MIME&
Thumbnail::_Internal::mime(const Thumbnail* msg) {
  return *msg->mime_;
}
void Thumbnail::clear_mime() {
  if (GetArenaForAllocation() == nullptr && mime_ != nullptr) {
    delete mime_;
  }
  mime_ = nullptr;
}
Thumbnail::Thumbnail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.Thumbnail)
}
Thumbnail::Thumbnail(const Thumbnail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mime()) {
    mime_ = new ::core::common::v1::MIME(*from.mime_);
  } else {
    mime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.Thumbnail)
}

inline void Thumbnail::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_ = nullptr;
}

Thumbnail::~Thumbnail() {
  // @@protoc_insertion_point(destructor:core.common.v1.Thumbnail)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Thumbnail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mime_;
}

void Thumbnail::ArenaDtor(void* object) {
  Thumbnail* _this = reinterpret_cast< Thumbnail* >(object);
  (void)_this;
}
void Thumbnail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Thumbnail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Thumbnail::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.Thumbnail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mime_ != nullptr) {
    delete mime_;
  }
  mime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Thumbnail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buffer = 1 [json_name = "buffer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.MIME mime = 2 [json_name = "mime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Thumbnail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.Thumbnail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buffer = 1 [json_name = "buffer"];
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buffer(), target);
  }

  // .core.common.v1.MIME mime = 2 [json_name = "mime"];
  if (this->_internal_has_mime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.Thumbnail)
  return target;
}

size_t Thumbnail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.Thumbnail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 1 [json_name = "buffer"];
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // .core.common.v1.MIME mime = 2 [json_name = "mime"];
  if (this->_internal_has_mime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mime_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Thumbnail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Thumbnail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Thumbnail::GetClassData() const { return &_class_data_; }

void Thumbnail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Thumbnail *>(to)->MergeFrom(
      static_cast<const Thumbnail &>(from));
}


void Thumbnail::MergeFrom(const Thumbnail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.Thumbnail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_has_mime()) {
    _internal_mutable_mime()->::core::common::v1::MIME::MergeFrom(from._internal_mime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Thumbnail::CopyFrom(const Thumbnail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.Thumbnail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thumbnail::IsInitialized() const {
  return true;
}

void Thumbnail::InternalSwap(Thumbnail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  swap(mime_, other->mime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Thumbnail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[13]);
}

// ===================================================================

class Payload_Item::_Internal {
 public:
  static const ::core::common::v1::MIME& mime(const Payload_Item* msg);
  static const ::core::common::v1::FileItem& file(const Payload_Item* msg);
  static const ::core::common::v1::UrlItem& url(const Payload_Item* msg);
  static const ::core::common::v1::MessageItem& message(const Payload_Item* msg);
  static const ::core::common::v1::Thumbnail& thumbnail(const Payload_Item* msg);
  static const ::core::common::v1::OpenGraph_Primary& open_graph(const Payload_Item* msg);
};

const ::core::common::v1::MIME&
Payload_Item::_Internal::mime(const Payload_Item* msg) {
  return *msg->mime_;
}
const ::core::common::v1::FileItem&
Payload_Item::_Internal::file(const Payload_Item* msg) {
  return *msg->data_.file_;
}
const ::core::common::v1::UrlItem&
Payload_Item::_Internal::url(const Payload_Item* msg) {
  return *msg->data_.url_;
}
const ::core::common::v1::MessageItem&
Payload_Item::_Internal::message(const Payload_Item* msg) {
  return *msg->data_.message_;
}
const ::core::common::v1::Thumbnail&
Payload_Item::_Internal::thumbnail(const Payload_Item* msg) {
  return *msg->preview_.thumbnail_;
}
const ::core::common::v1::OpenGraph_Primary&
Payload_Item::_Internal::open_graph(const Payload_Item* msg) {
  return *msg->preview_.open_graph_;
}
void Payload_Item::clear_mime() {
  if (GetArenaForAllocation() == nullptr && mime_ != nullptr) {
    delete mime_;
  }
  mime_ = nullptr;
}
void Payload_Item::set_allocated_file(::core::common::v1::FileItem* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::core::common::v1::FileItem>::GetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    data_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:core.common.v1.Payload.Item.file)
}
void Payload_Item::set_allocated_url(::core::common::v1::UrlItem* url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::core::common::v1::UrlItem>::GetOwningArena(url);
    if (message_arena != submessage_arena) {
      url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, url, submessage_arena);
    }
    set_has_url();
    data_.url_ = url;
  }
  // @@protoc_insertion_point(field_set_allocated:core.common.v1.Payload.Item.url)
}
void Payload_Item::set_allocated_message(::core::common::v1::MessageItem* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::core::common::v1::MessageItem>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
    data_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:core.common.v1.Payload.Item.message)
}
void Payload_Item::set_allocated_thumbnail(::core::common::v1::Thumbnail* thumbnail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_preview();
  if (thumbnail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::core::common::v1::Thumbnail>::GetOwningArena(thumbnail);
    if (message_arena != submessage_arena) {
      thumbnail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnail, submessage_arena);
    }
    set_has_thumbnail();
    preview_.thumbnail_ = thumbnail;
  }
  // @@protoc_insertion_point(field_set_allocated:core.common.v1.Payload.Item.thumbnail)
}
void Payload_Item::set_allocated_open_graph(::core::common::v1::OpenGraph_Primary* open_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_preview();
  if (open_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::core::common::v1::OpenGraph_Primary>::GetOwningArena(open_graph);
    if (message_arena != submessage_arena) {
      open_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_graph, submessage_arena);
    }
    set_has_open_graph();
    preview_.open_graph_ = open_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:core.common.v1.Payload.Item.open_graph)
}
Payload_Item::Payload_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.Payload.Item)
}
Payload_Item::Payload_Item(const Payload_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mime()) {
    mime_ = new ::core::common::v1::MIME(*from.mime_);
  } else {
    mime_ = nullptr;
  }
  size_ = from.size_;
  clear_has_data();
  switch (from.data_case()) {
    case kFile: {
      _internal_mutable_file()->::core::common::v1::FileItem::MergeFrom(from._internal_file());
      break;
    }
    case kUrl: {
      _internal_mutable_url()->::core::common::v1::UrlItem::MergeFrom(from._internal_url());
      break;
    }
    case kMessage: {
      _internal_mutable_message()->::core::common::v1::MessageItem::MergeFrom(from._internal_message());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  clear_has_preview();
  switch (from.preview_case()) {
    case kThumbnail: {
      _internal_mutable_thumbnail()->::core::common::v1::Thumbnail::MergeFrom(from._internal_thumbnail());
      break;
    }
    case kOpenGraph: {
      _internal_mutable_open_graph()->::core::common::v1::OpenGraph_Primary::MergeFrom(from._internal_open_graph());
      break;
    }
    case PREVIEW_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.Payload.Item)
}

inline void Payload_Item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&mime_)) + sizeof(size_));
clear_has_data();
clear_has_preview();
}

Payload_Item::~Payload_Item() {
  // @@protoc_insertion_point(destructor:core.common.v1.Payload.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mime_;
  if (has_data()) {
    clear_data();
  }
  if (has_preview()) {
    clear_preview();
  }
}

void Payload_Item::ArenaDtor(void* object) {
  Payload_Item* _this = reinterpret_cast< Payload_Item* >(object);
  (void)_this;
}
void Payload_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload_Item::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:core.common.v1.Payload.Item)
  switch (data_case()) {
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.file_;
      }
      break;
    }
    case kUrl: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.url_;
      }
      break;
    }
    case kMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.message_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}

void Payload_Item::clear_preview() {
// @@protoc_insertion_point(one_of_clear_start:core.common.v1.Payload.Item)
  switch (preview_case()) {
    case kThumbnail: {
      if (GetArenaForAllocation() == nullptr) {
        delete preview_.thumbnail_;
      }
      break;
    }
    case kOpenGraph: {
      if (GetArenaForAllocation() == nullptr) {
        delete preview_.open_graph_;
      }
      break;
    }
    case PREVIEW_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = PREVIEW_NOT_SET;
}


void Payload_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.Payload.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mime_ != nullptr) {
    delete mime_;
  }
  mime_ = nullptr;
  size_ = int64_t{0};
  clear_data();
  clear_preview();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .core.common.v1.MIME mime = 1 [json_name = "mime"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2 [json_name = "size"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.FileItem file = 3 [json_name = "file"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.UrlItem url = 4 [json_name = "url"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_url(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.MessageItem message = 5 [json_name = "message"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.Thumbnail thumbnail = 6 [json_name = "thumbnail"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.OpenGraph.Primary open_graph = 7 [json_name = "openGraph"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Payload_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.Payload.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.common.v1.MIME mime = 1 [json_name = "mime"];
  if (this->_internal_has_mime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mime(this), target, stream);
  }

  // int64 size = 2 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // .core.common.v1.FileItem file = 3 [json_name = "file"];
  if (_internal_has_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::file(this), target, stream);
  }

  // .core.common.v1.UrlItem url = 4 [json_name = "url"];
  if (_internal_has_url()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::url(this), target, stream);
  }

  // .core.common.v1.MessageItem message = 5 [json_name = "message"];
  if (_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::message(this), target, stream);
  }

  // .core.common.v1.Thumbnail thumbnail = 6 [json_name = "thumbnail"];
  if (_internal_has_thumbnail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::thumbnail(this), target, stream);
  }

  // .core.common.v1.OpenGraph.Primary open_graph = 7 [json_name = "openGraph"];
  if (_internal_has_open_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::open_graph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.Payload.Item)
  return target;
}

size_t Payload_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.Payload.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .core.common.v1.MIME mime = 1 [json_name = "mime"];
  if (this->_internal_has_mime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mime_);
  }

  // int64 size = 2 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  switch (data_case()) {
    // .core.common.v1.FileItem file = 3 [json_name = "file"];
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.file_);
      break;
    }
    // .core.common.v1.UrlItem url = 4 [json_name = "url"];
    case kUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.url_);
      break;
    }
    // .core.common.v1.MessageItem message = 5 [json_name = "message"];
    case kMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.message_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  switch (preview_case()) {
    // .core.common.v1.Thumbnail thumbnail = 6 [json_name = "thumbnail"];
    case kThumbnail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_.thumbnail_);
      break;
    }
    // .core.common.v1.OpenGraph.Primary open_graph = 7 [json_name = "openGraph"];
    case kOpenGraph: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_.open_graph_);
      break;
    }
    case PREVIEW_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload_Item::GetClassData() const { return &_class_data_; }

void Payload_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Payload_Item *>(to)->MergeFrom(
      static_cast<const Payload_Item &>(from));
}


void Payload_Item::MergeFrom(const Payload_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.Payload.Item)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mime()) {
    _internal_mutable_mime()->::core::common::v1::MIME::MergeFrom(from._internal_mime());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  switch (from.data_case()) {
    case kFile: {
      _internal_mutable_file()->::core::common::v1::FileItem::MergeFrom(from._internal_file());
      break;
    }
    case kUrl: {
      _internal_mutable_url()->::core::common::v1::UrlItem::MergeFrom(from._internal_url());
      break;
    }
    case kMessage: {
      _internal_mutable_message()->::core::common::v1::MessageItem::MergeFrom(from._internal_message());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  switch (from.preview_case()) {
    case kThumbnail: {
      _internal_mutable_thumbnail()->::core::common::v1::Thumbnail::MergeFrom(from._internal_thumbnail());
      break;
    }
    case kOpenGraph: {
      _internal_mutable_open_graph()->::core::common::v1::OpenGraph_Primary::MergeFrom(from._internal_open_graph());
      break;
    }
    case PREVIEW_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload_Item::CopyFrom(const Payload_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.Payload.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload_Item::IsInitialized() const {
  return true;
}

void Payload_Item::InternalSwap(Payload_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Payload_Item, size_)
      + sizeof(Payload_Item::size_)
      - PROTOBUF_FIELD_OFFSET(Payload_Item, mime_)>(
          reinterpret_cast<char*>(&mime_),
          reinterpret_cast<char*>(&other->mime_));
  swap(data_, other->data_);
  swap(preview_, other->preview_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[14]);
}

// ===================================================================

class Payload::_Internal {
 public:
  static const ::core::common::v1::Profile& owner(const Payload* msg);
};

const ::core::common::v1::Profile&
Payload::_Internal::owner(const Payload* msg) {
  return *msg->owner_;
}
void Payload::clear_owner() {
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
Payload::Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.Payload)
}
Payload::Payload(const Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner()) {
    owner_ = new ::core::common::v1::Profile(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&size_)) + sizeof(created_at_));
  // @@protoc_insertion_point(copy_constructor:core.common.v1.Payload)
}

inline void Payload::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(created_at_));
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:core.common.v1.Payload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete owner_;
}

void Payload::ArenaDtor(void* object) {
  Payload* _this = reinterpret_cast< Payload* >(object);
  (void)_this;
}
void Payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.Payload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&size_)) + sizeof(created_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .core.common.v1.Payload.Item items = 1 [json_name = "items"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .core.common.v1.Profile owner = 2 [json_name = "owner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 3 [json_name = "size"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 created_at = 4 [json_name = "createdAt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Payload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.Payload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .core.common.v1.Payload.Item items = 1 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  // .core.common.v1.Profile owner = 2 [json_name = "owner"];
  if (this->_internal_has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner(this), target, stream);
  }

  // int64 size = 3 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // int64 created_at = 4 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_created_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.Payload)
  return target;
}

size_t Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.Payload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .core.common.v1.Payload.Item items = 1 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .core.common.v1.Profile owner = 2 [json_name = "owner"];
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // int64 size = 3 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 created_at = 4 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_created_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Payload::GetClassData() const { return &_class_data_; }

void Payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Payload *>(to)->MergeFrom(
      static_cast<const Payload &>(from));
}


void Payload::MergeFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_owner()) {
    _internal_mutable_owner()->::core::common::v1::Profile::MergeFrom(from._internal_owner());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Payload::CopyFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  return true;
}

void Payload::InternalSwap(Payload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Payload, created_at_)
      + sizeof(Payload::created_at_)
      - PROTOBUF_FIELD_OFFSET(Payload, owner_)>(
          reinterpret_cast<char*>(&owner_),
          reinterpret_cast<char*>(&other->owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[15]);
}

// ===================================================================

class PayloadList::_Internal {
 public:
};

PayloadList::PayloadList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  payloads_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.PayloadList)
}
PayloadList::PayloadList(const PayloadList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      payloads_(from.payloads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  last_modified_ = from.last_modified_;
  // @@protoc_insertion_point(copy_constructor:core.common.v1.PayloadList)
}

inline void PayloadList::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_modified_ = int64_t{0};
}

PayloadList::~PayloadList() {
  // @@protoc_insertion_point(destructor:core.common.v1.PayloadList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PayloadList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PayloadList::ArenaDtor(void* object) {
  PayloadList* _this = reinterpret_cast< PayloadList* >(object);
  (void)_this;
}
void PayloadList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PayloadList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PayloadList::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.PayloadList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payloads_.Clear();
  key_.ClearToEmpty();
  last_modified_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayloadList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .core.common.v1.Payload payloads = 1 [json_name = "payloads"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payloads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string key = 2 [json_name = "key"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.PayloadList.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_modified = 3 [json_name = "lastModified"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PayloadList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.PayloadList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .core.common.v1.Payload payloads = 1 [json_name = "payloads"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payloads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_payloads(i), target, stream);
  }

  // string key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.PayloadList.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // int64 last_modified = 3 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_modified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.PayloadList)
  return target;
}

size_t PayloadList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.PayloadList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .core.common.v1.Payload payloads = 1 [json_name = "payloads"];
  total_size += 1UL * this->_internal_payloads_size();
  for (const auto& msg : this->payloads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int64 last_modified = 3 [json_name = "lastModified"];
  if (this->_internal_last_modified() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_modified());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PayloadList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PayloadList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PayloadList::GetClassData() const { return &_class_data_; }

void PayloadList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PayloadList *>(to)->MergeFrom(
      static_cast<const PayloadList &>(from));
}


void PayloadList::MergeFrom(const PayloadList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.PayloadList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  payloads_.MergeFrom(from.payloads_);
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_last_modified() != 0) {
    _internal_set_last_modified(from._internal_last_modified());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PayloadList::CopyFrom(const PayloadList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.PayloadList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadList::IsInitialized() const {
  return true;
}

void PayloadList::InternalSwap(PayloadList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  payloads_.InternalSwap(&other->payloads_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(last_modified_, other->last_modified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PayloadList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[16]);
}

// ===================================================================

class SupplyItem::_Internal {
 public:
  using HasBits = decltype(std::declval<SupplyItem>()._has_bits_);
  static void set_has_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SupplyItem::SupplyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:core.common.v1.SupplyItem)
}
SupplyItem::SupplyItem(const SupplyItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  thumbnail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail()) {
    thumbnail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:core.common.v1.SupplyItem)
}

inline void SupplyItem::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thumbnail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SupplyItem::~SupplyItem() {
  // @@protoc_insertion_point(destructor:core.common.v1.SupplyItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SupplyItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SupplyItem::ArenaDtor(void* object) {
  SupplyItem* _this = reinterpret_cast< SupplyItem* >(object);
  (void)_this;
}
void SupplyItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SupplyItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SupplyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:core.common.v1.SupplyItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thumbnail_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupplyItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "core.common.v1.SupplyItem.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnail = 2 [json_name = "thumbnail"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_thumbnail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SupplyItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.common.v1.SupplyItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.common.v1.SupplyItem.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // optional bytes thumbnail = 2 [json_name = "thumbnail"];
  if (_internal_has_thumbnail()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_thumbnail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.common.v1.SupplyItem)
  return target;
}

size_t SupplyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.common.v1.SupplyItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // optional bytes thumbnail = 2 [json_name = "thumbnail"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_thumbnail());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SupplyItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SupplyItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SupplyItem::GetClassData() const { return &_class_data_; }

void SupplyItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SupplyItem *>(to)->MergeFrom(
      static_cast<const SupplyItem &>(from));
}


void SupplyItem::MergeFrom(const SupplyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:core.common.v1.SupplyItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_has_thumbnail()) {
    _internal_set_thumbnail(from._internal_thumbnail());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SupplyItem::CopyFrom(const SupplyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.common.v1.SupplyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplyItem::IsInitialized() const {
  return true;
}

void SupplyItem::InternalSwap(SupplyItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnail_, lhs_arena,
      &other->thumbnail_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SupplyItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_getter, &descriptor_table_core_2fcommon_2fv1_2fdata_2eproto_once,
      file_level_metadata_core_2fcommon_2fv1_2fdata_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::core::common::v1::FileItem* Arena::CreateMaybeMessage< ::core::common::v1::FileItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::FileItem >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::MessageItem* Arena::CreateMaybeMessage< ::core::common::v1::MessageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::MessageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::UrlItem* Arena::CreateMaybeMessage< ::core::common::v1::UrlItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::UrlItem >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::OpenGraph_Primary* Arena::CreateMaybeMessage< ::core::common::v1::OpenGraph_Primary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::OpenGraph_Primary >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::OpenGraph_Image* Arena::CreateMaybeMessage< ::core::common::v1::OpenGraph_Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::OpenGraph_Image >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::OpenGraph_Video* Arena::CreateMaybeMessage< ::core::common::v1::OpenGraph_Video >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::OpenGraph_Video >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::OpenGraph_Audio* Arena::CreateMaybeMessage< ::core::common::v1::OpenGraph_Audio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::OpenGraph_Audio >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::OpenGraph_Twitter_Player* Arena::CreateMaybeMessage< ::core::common::v1::OpenGraph_Twitter_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::OpenGraph_Twitter_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::OpenGraph_Twitter_IPhone* Arena::CreateMaybeMessage< ::core::common::v1::OpenGraph_Twitter_IPhone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::OpenGraph_Twitter_IPhone >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::OpenGraph_Twitter_IPad* Arena::CreateMaybeMessage< ::core::common::v1::OpenGraph_Twitter_IPad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::OpenGraph_Twitter_IPad >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::OpenGraph_Twitter_GooglePlay* Arena::CreateMaybeMessage< ::core::common::v1::OpenGraph_Twitter_GooglePlay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::OpenGraph_Twitter_GooglePlay >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::OpenGraph_Twitter* Arena::CreateMaybeMessage< ::core::common::v1::OpenGraph_Twitter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::OpenGraph_Twitter >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::OpenGraph* Arena::CreateMaybeMessage< ::core::common::v1::OpenGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::OpenGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::Thumbnail* Arena::CreateMaybeMessage< ::core::common::v1::Thumbnail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::Thumbnail >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::Payload_Item* Arena::CreateMaybeMessage< ::core::common::v1::Payload_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::Payload_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::Payload* Arena::CreateMaybeMessage< ::core::common::v1::Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::PayloadList* Arena::CreateMaybeMessage< ::core::common::v1::PayloadList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::PayloadList >(arena);
}
template<> PROTOBUF_NOINLINE ::core::common::v1::SupplyItem* Arena::CreateMaybeMessage< ::core::common::v1::SupplyItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::common::v1::SupplyItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
