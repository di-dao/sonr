// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/v1/data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/core.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fv1_2fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fv1_2fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fv1_2fdata_2eproto;
namespace common {
namespace v1 {
class FileItem;
struct FileItemDefaultTypeInternal;
extern FileItemDefaultTypeInternal _FileItem_default_instance_;
class MessageItem;
struct MessageItemDefaultTypeInternal;
extern MessageItemDefaultTypeInternal _MessageItem_default_instance_;
class OpenGraph;
struct OpenGraphDefaultTypeInternal;
extern OpenGraphDefaultTypeInternal _OpenGraph_default_instance_;
class OpenGraph_Audio;
struct OpenGraph_AudioDefaultTypeInternal;
extern OpenGraph_AudioDefaultTypeInternal _OpenGraph_Audio_default_instance_;
class OpenGraph_Image;
struct OpenGraph_ImageDefaultTypeInternal;
extern OpenGraph_ImageDefaultTypeInternal _OpenGraph_Image_default_instance_;
class OpenGraph_Primary;
struct OpenGraph_PrimaryDefaultTypeInternal;
extern OpenGraph_PrimaryDefaultTypeInternal _OpenGraph_Primary_default_instance_;
class OpenGraph_Twitter;
struct OpenGraph_TwitterDefaultTypeInternal;
extern OpenGraph_TwitterDefaultTypeInternal _OpenGraph_Twitter_default_instance_;
class OpenGraph_Twitter_GooglePlay;
struct OpenGraph_Twitter_GooglePlayDefaultTypeInternal;
extern OpenGraph_Twitter_GooglePlayDefaultTypeInternal _OpenGraph_Twitter_GooglePlay_default_instance_;
class OpenGraph_Twitter_IPad;
struct OpenGraph_Twitter_IPadDefaultTypeInternal;
extern OpenGraph_Twitter_IPadDefaultTypeInternal _OpenGraph_Twitter_IPad_default_instance_;
class OpenGraph_Twitter_IPhone;
struct OpenGraph_Twitter_IPhoneDefaultTypeInternal;
extern OpenGraph_Twitter_IPhoneDefaultTypeInternal _OpenGraph_Twitter_IPhone_default_instance_;
class OpenGraph_Twitter_Player;
struct OpenGraph_Twitter_PlayerDefaultTypeInternal;
extern OpenGraph_Twitter_PlayerDefaultTypeInternal _OpenGraph_Twitter_Player_default_instance_;
class OpenGraph_Video;
struct OpenGraph_VideoDefaultTypeInternal;
extern OpenGraph_VideoDefaultTypeInternal _OpenGraph_Video_default_instance_;
class Payload;
struct PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
class PayloadList;
struct PayloadListDefaultTypeInternal;
extern PayloadListDefaultTypeInternal _PayloadList_default_instance_;
class Payload_Item;
struct Payload_ItemDefaultTypeInternal;
extern Payload_ItemDefaultTypeInternal _Payload_Item_default_instance_;
class SupplyItem;
struct SupplyItemDefaultTypeInternal;
extern SupplyItemDefaultTypeInternal _SupplyItem_default_instance_;
class Thumbnail;
struct ThumbnailDefaultTypeInternal;
extern ThumbnailDefaultTypeInternal _Thumbnail_default_instance_;
class UrlItem;
struct UrlItemDefaultTypeInternal;
extern UrlItemDefaultTypeInternal _UrlItem_default_instance_;
}  // namespace v1
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::v1::FileItem* Arena::CreateMaybeMessage<::common::v1::FileItem>(Arena*);
template<> ::common::v1::MessageItem* Arena::CreateMaybeMessage<::common::v1::MessageItem>(Arena*);
template<> ::common::v1::OpenGraph* Arena::CreateMaybeMessage<::common::v1::OpenGraph>(Arena*);
template<> ::common::v1::OpenGraph_Audio* Arena::CreateMaybeMessage<::common::v1::OpenGraph_Audio>(Arena*);
template<> ::common::v1::OpenGraph_Image* Arena::CreateMaybeMessage<::common::v1::OpenGraph_Image>(Arena*);
template<> ::common::v1::OpenGraph_Primary* Arena::CreateMaybeMessage<::common::v1::OpenGraph_Primary>(Arena*);
template<> ::common::v1::OpenGraph_Twitter* Arena::CreateMaybeMessage<::common::v1::OpenGraph_Twitter>(Arena*);
template<> ::common::v1::OpenGraph_Twitter_GooglePlay* Arena::CreateMaybeMessage<::common::v1::OpenGraph_Twitter_GooglePlay>(Arena*);
template<> ::common::v1::OpenGraph_Twitter_IPad* Arena::CreateMaybeMessage<::common::v1::OpenGraph_Twitter_IPad>(Arena*);
template<> ::common::v1::OpenGraph_Twitter_IPhone* Arena::CreateMaybeMessage<::common::v1::OpenGraph_Twitter_IPhone>(Arena*);
template<> ::common::v1::OpenGraph_Twitter_Player* Arena::CreateMaybeMessage<::common::v1::OpenGraph_Twitter_Player>(Arena*);
template<> ::common::v1::OpenGraph_Video* Arena::CreateMaybeMessage<::common::v1::OpenGraph_Video>(Arena*);
template<> ::common::v1::Payload* Arena::CreateMaybeMessage<::common::v1::Payload>(Arena*);
template<> ::common::v1::PayloadList* Arena::CreateMaybeMessage<::common::v1::PayloadList>(Arena*);
template<> ::common::v1::Payload_Item* Arena::CreateMaybeMessage<::common::v1::Payload_Item>(Arena*);
template<> ::common::v1::SupplyItem* Arena::CreateMaybeMessage<::common::v1::SupplyItem>(Arena*);
template<> ::common::v1::Thumbnail* Arena::CreateMaybeMessage<::common::v1::Thumbnail>(Arena*);
template<> ::common::v1::UrlItem* Arena::CreateMaybeMessage<::common::v1::UrlItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {
namespace v1 {

enum OpenGraph_Type : int {
  OpenGraph_Type_TYPE_UNSPECIFIED = 0,
  OpenGraph_Type_TYPE_IMAGE = 1,
  OpenGraph_Type_TYPE_VIDEO = 2,
  OpenGraph_Type_TYPE_TWITTER = 3,
  OpenGraph_Type_TYPE_AUDIO = 4,
  OpenGraph_Type_TYPE_NONE = 5,
  OpenGraph_Type_OpenGraph_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OpenGraph_Type_OpenGraph_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OpenGraph_Type_IsValid(int value);
constexpr OpenGraph_Type OpenGraph_Type_Type_MIN = OpenGraph_Type_TYPE_UNSPECIFIED;
constexpr OpenGraph_Type OpenGraph_Type_Type_MAX = OpenGraph_Type_TYPE_NONE;
constexpr int OpenGraph_Type_Type_ARRAYSIZE = OpenGraph_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenGraph_Type_descriptor();
template<typename T>
inline const std::string& OpenGraph_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpenGraph_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpenGraph_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpenGraph_Type_descriptor(), enum_t_value);
}
inline bool OpenGraph_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OpenGraph_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpenGraph_Type>(
    OpenGraph_Type_descriptor(), name, value);
}
enum Direction : int {
  DIRECTION_UNSPECIFIED = 0,
  DIRECTION_INCOMING = 1,
  DIRECTION_OUTGOING = 2,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Direction_IsValid(int value);
constexpr Direction Direction_MIN = DIRECTION_UNSPECIFIED;
constexpr Direction Direction_MAX = DIRECTION_OUTGOING;
constexpr int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor();
template<typename T>
inline const std::string& Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Direction_descriptor(), enum_t_value);
}
inline bool Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
// ===================================================================

class FileItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.FileItem) */ {
 public:
  inline FileItem() : FileItem(nullptr) {}
  ~FileItem() override;
  explicit constexpr FileItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileItem(const FileItem& from);
  FileItem(FileItem&& from) noexcept
    : FileItem() {
    *this = ::std::move(from);
  }

  inline FileItem& operator=(const FileItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileItem& operator=(FileItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileItem* internal_default_instance() {
    return reinterpret_cast<const FileItem*>(
               &_FileItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileItem& a, FileItem& b) {
    a.Swap(&b);
  }
  inline void Swap(FileItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.FileItem";
  }
  protected:
  explicit FileItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPathFieldNumber = 3,
    kMimeFieldNumber = 1,
    kThumbnailFieldNumber = 5,
    kSizeFieldNumber = 4,
    kLastModifiedFieldNumber = 6,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string path = 3 [json_name = "path"];
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .common.v1.MIME mime = 1 [json_name = "mime"];
  bool has_mime() const;
  private:
  bool _internal_has_mime() const;
  public:
  void clear_mime();
  const ::common::v1::MIME& mime() const;
  PROTOBUF_NODISCARD ::common::v1::MIME* release_mime();
  ::common::v1::MIME* mutable_mime();
  void set_allocated_mime(::common::v1::MIME* mime);
  private:
  const ::common::v1::MIME& _internal_mime() const;
  ::common::v1::MIME* _internal_mutable_mime();
  public:
  void unsafe_arena_set_allocated_mime(
      ::common::v1::MIME* mime);
  ::common::v1::MIME* unsafe_arena_release_mime();

  // .common.v1.Thumbnail thumbnail = 5 [json_name = "thumbnail"];
  bool has_thumbnail() const;
  private:
  bool _internal_has_thumbnail() const;
  public:
  void clear_thumbnail();
  const ::common::v1::Thumbnail& thumbnail() const;
  PROTOBUF_NODISCARD ::common::v1::Thumbnail* release_thumbnail();
  ::common::v1::Thumbnail* mutable_thumbnail();
  void set_allocated_thumbnail(::common::v1::Thumbnail* thumbnail);
  private:
  const ::common::v1::Thumbnail& _internal_thumbnail() const;
  ::common::v1::Thumbnail* _internal_mutable_thumbnail();
  public:
  void unsafe_arena_set_allocated_thumbnail(
      ::common::v1::Thumbnail* thumbnail);
  ::common::v1::Thumbnail* unsafe_arena_release_thumbnail();

  // int64 size = 4 [json_name = "size"];
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 last_modified = 6 [json_name = "lastModified"];
  void clear_last_modified();
  int64_t last_modified() const;
  void set_last_modified(int64_t value);
  private:
  int64_t _internal_last_modified() const;
  void _internal_set_last_modified(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.v1.FileItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::common::v1::MIME* mime_;
  ::common::v1::Thumbnail* thumbnail_;
  int64_t size_;
  int64_t last_modified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class MessageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.MessageItem) */ {
 public:
  inline MessageItem() : MessageItem(nullptr) {}
  ~MessageItem() override;
  explicit constexpr MessageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageItem(const MessageItem& from);
  MessageItem(MessageItem&& from) noexcept
    : MessageItem() {
    *this = ::std::move(from);
  }

  inline MessageItem& operator=(const MessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageItem& operator=(MessageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageItem* internal_default_instance() {
    return reinterpret_cast<const MessageItem*>(
               &_MessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageItem& a, MessageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.MessageItem";
  }
  protected:
  explicit MessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsFieldNumber = 5,
    kSubjectFieldNumber = 2,
    kBodyFieldNumber = 3,
    kMimeFieldNumber = 1,
    kCreatedAtFieldNumber = 4,
  };
  // repeated .common.v1.FileItem attachments = 5 [json_name = "attachments"];
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  ::common::v1::FileItem* mutable_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::FileItem >*
      mutable_attachments();
  private:
  const ::common::v1::FileItem& _internal_attachments(int index) const;
  ::common::v1::FileItem* _internal_add_attachments();
  public:
  const ::common::v1::FileItem& attachments(int index) const;
  ::common::v1::FileItem* add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::FileItem >&
      attachments() const;

  // string subject = 2 [json_name = "subject"];
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string body = 3 [json_name = "body"];
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .common.v1.MIME mime = 1 [json_name = "mime"];
  bool has_mime() const;
  private:
  bool _internal_has_mime() const;
  public:
  void clear_mime();
  const ::common::v1::MIME& mime() const;
  PROTOBUF_NODISCARD ::common::v1::MIME* release_mime();
  ::common::v1::MIME* mutable_mime();
  void set_allocated_mime(::common::v1::MIME* mime);
  private:
  const ::common::v1::MIME& _internal_mime() const;
  ::common::v1::MIME* _internal_mutable_mime();
  public:
  void unsafe_arena_set_allocated_mime(
      ::common::v1::MIME* mime);
  ::common::v1::MIME* unsafe_arena_release_mime();

  // int64 created_at = 4 [json_name = "createdAt"];
  void clear_created_at();
  int64_t created_at() const;
  void set_created_at(int64_t value);
  private:
  int64_t _internal_created_at() const;
  void _internal_set_created_at(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.v1.MessageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::FileItem > attachments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::common::v1::MIME* mime_;
  int64_t created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class UrlItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.UrlItem) */ {
 public:
  inline UrlItem() : UrlItem(nullptr) {}
  ~UrlItem() override;
  explicit constexpr UrlItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UrlItem(const UrlItem& from);
  UrlItem(UrlItem&& from) noexcept
    : UrlItem() {
    *this = ::std::move(from);
  }

  inline UrlItem& operator=(const UrlItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrlItem& operator=(UrlItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UrlItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UrlItem* internal_default_instance() {
    return reinterpret_cast<const UrlItem*>(
               &_UrlItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UrlItem& a, UrlItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UrlItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UrlItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UrlItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UrlItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UrlItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UrlItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UrlItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.UrlItem";
  }
  protected:
  explicit UrlItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkFieldNumber = 2,
    kTitleFieldNumber = 3,
    kSiteFieldNumber = 4,
    kSiteNameFieldNumber = 5,
    kDescriptionFieldNumber = 6,
    kMimeFieldNumber = 1,
    kOpenGraphFieldNumber = 7,
  };
  // string link = 2 [json_name = "link"];
  void clear_link();
  const std::string& link() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_link(ArgT0&& arg0, ArgT... args);
  std::string* mutable_link();
  PROTOBUF_NODISCARD std::string* release_link();
  void set_allocated_link(std::string* link);
  private:
  const std::string& _internal_link() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_link(const std::string& value);
  std::string* _internal_mutable_link();
  public:

  // string title = 3 [json_name = "title"];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string site = 4 [json_name = "site"];
  void clear_site();
  const std::string& site() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_site(ArgT0&& arg0, ArgT... args);
  std::string* mutable_site();
  PROTOBUF_NODISCARD std::string* release_site();
  void set_allocated_site(std::string* site);
  private:
  const std::string& _internal_site() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site(const std::string& value);
  std::string* _internal_mutable_site();
  public:

  // string site_name = 5 [json_name = "siteName"];
  void clear_site_name();
  const std::string& site_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_site_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_site_name();
  PROTOBUF_NODISCARD std::string* release_site_name();
  void set_allocated_site_name(std::string* site_name);
  private:
  const std::string& _internal_site_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site_name(const std::string& value);
  std::string* _internal_mutable_site_name();
  public:

  // string description = 6 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .common.v1.MIME mime = 1 [json_name = "mime"];
  bool has_mime() const;
  private:
  bool _internal_has_mime() const;
  public:
  void clear_mime();
  const ::common::v1::MIME& mime() const;
  PROTOBUF_NODISCARD ::common::v1::MIME* release_mime();
  ::common::v1::MIME* mutable_mime();
  void set_allocated_mime(::common::v1::MIME* mime);
  private:
  const ::common::v1::MIME& _internal_mime() const;
  ::common::v1::MIME* _internal_mutable_mime();
  public:
  void unsafe_arena_set_allocated_mime(
      ::common::v1::MIME* mime);
  ::common::v1::MIME* unsafe_arena_release_mime();

  // .common.v1.OpenGraph open_graph = 7 [json_name = "openGraph"];
  bool has_open_graph() const;
  private:
  bool _internal_has_open_graph() const;
  public:
  void clear_open_graph();
  const ::common::v1::OpenGraph& open_graph() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph* release_open_graph();
  ::common::v1::OpenGraph* mutable_open_graph();
  void set_allocated_open_graph(::common::v1::OpenGraph* open_graph);
  private:
  const ::common::v1::OpenGraph& _internal_open_graph() const;
  ::common::v1::OpenGraph* _internal_mutable_open_graph();
  public:
  void unsafe_arena_set_allocated_open_graph(
      ::common::v1::OpenGraph* open_graph);
  ::common::v1::OpenGraph* unsafe_arena_release_open_graph();

  // @@protoc_insertion_point(class_scope:common.v1.UrlItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::common::v1::MIME* mime_;
  ::common::v1::OpenGraph* open_graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OpenGraph_Primary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.OpenGraph.Primary) */ {
 public:
  inline OpenGraph_Primary() : OpenGraph_Primary(nullptr) {}
  ~OpenGraph_Primary() override;
  explicit constexpr OpenGraph_Primary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenGraph_Primary(const OpenGraph_Primary& from);
  OpenGraph_Primary(OpenGraph_Primary&& from) noexcept
    : OpenGraph_Primary() {
    *this = ::std::move(from);
  }

  inline OpenGraph_Primary& operator=(const OpenGraph_Primary& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenGraph_Primary& operator=(OpenGraph_Primary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenGraph_Primary& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kImage = 2,
    kVideo = 3,
    kAudio = 4,
    kTwitter = 5,
    DATA_NOT_SET = 0,
  };

  static inline const OpenGraph_Primary* internal_default_instance() {
    return reinterpret_cast<const OpenGraph_Primary*>(
               &_OpenGraph_Primary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpenGraph_Primary& a, OpenGraph_Primary& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenGraph_Primary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenGraph_Primary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenGraph_Primary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenGraph_Primary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenGraph_Primary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenGraph_Primary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGraph_Primary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.OpenGraph.Primary";
  }
  protected:
  explicit OpenGraph_Primary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kImageFieldNumber = 2,
    kVideoFieldNumber = 3,
    kAudioFieldNumber = 4,
    kTwitterFieldNumber = 5,
  };
  // .common.v1.OpenGraph.Type type = 1 [json_name = "type"];
  void clear_type();
  ::common::v1::OpenGraph_Type type() const;
  void set_type(::common::v1::OpenGraph_Type value);
  private:
  ::common::v1::OpenGraph_Type _internal_type() const;
  void _internal_set_type(::common::v1::OpenGraph_Type value);
  public:

  // .common.v1.OpenGraph.Image image = 2 [json_name = "image"];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::common::v1::OpenGraph_Image& image() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Image* release_image();
  ::common::v1::OpenGraph_Image* mutable_image();
  void set_allocated_image(::common::v1::OpenGraph_Image* image);
  private:
  const ::common::v1::OpenGraph_Image& _internal_image() const;
  ::common::v1::OpenGraph_Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::common::v1::OpenGraph_Image* image);
  ::common::v1::OpenGraph_Image* unsafe_arena_release_image();

  // .common.v1.OpenGraph.Video video = 3 [json_name = "video"];
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::common::v1::OpenGraph_Video& video() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Video* release_video();
  ::common::v1::OpenGraph_Video* mutable_video();
  void set_allocated_video(::common::v1::OpenGraph_Video* video);
  private:
  const ::common::v1::OpenGraph_Video& _internal_video() const;
  ::common::v1::OpenGraph_Video* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::common::v1::OpenGraph_Video* video);
  ::common::v1::OpenGraph_Video* unsafe_arena_release_video();

  // .common.v1.OpenGraph.Audio audio = 4 [json_name = "audio"];
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::common::v1::OpenGraph_Audio& audio() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Audio* release_audio();
  ::common::v1::OpenGraph_Audio* mutable_audio();
  void set_allocated_audio(::common::v1::OpenGraph_Audio* audio);
  private:
  const ::common::v1::OpenGraph_Audio& _internal_audio() const;
  ::common::v1::OpenGraph_Audio* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::common::v1::OpenGraph_Audio* audio);
  ::common::v1::OpenGraph_Audio* unsafe_arena_release_audio();

  // .common.v1.OpenGraph.Twitter twitter = 5 [json_name = "twitter"];
  bool has_twitter() const;
  private:
  bool _internal_has_twitter() const;
  public:
  void clear_twitter();
  const ::common::v1::OpenGraph_Twitter& twitter() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Twitter* release_twitter();
  ::common::v1::OpenGraph_Twitter* mutable_twitter();
  void set_allocated_twitter(::common::v1::OpenGraph_Twitter* twitter);
  private:
  const ::common::v1::OpenGraph_Twitter& _internal_twitter() const;
  ::common::v1::OpenGraph_Twitter* _internal_mutable_twitter();
  public:
  void unsafe_arena_set_allocated_twitter(
      ::common::v1::OpenGraph_Twitter* twitter);
  ::common::v1::OpenGraph_Twitter* unsafe_arena_release_twitter();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:common.v1.OpenGraph.Primary)
 private:
  class _Internal;
  void set_has_image();
  void set_has_video();
  void set_has_audio();
  void set_has_twitter();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::common::v1::OpenGraph_Image* image_;
    ::common::v1::OpenGraph_Video* video_;
    ::common::v1::OpenGraph_Audio* audio_;
    ::common::v1::OpenGraph_Twitter* twitter_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OpenGraph_Image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.OpenGraph.Image) */ {
 public:
  inline OpenGraph_Image() : OpenGraph_Image(nullptr) {}
  ~OpenGraph_Image() override;
  explicit constexpr OpenGraph_Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenGraph_Image(const OpenGraph_Image& from);
  OpenGraph_Image(OpenGraph_Image&& from) noexcept
    : OpenGraph_Image() {
    *this = ::std::move(from);
  }

  inline OpenGraph_Image& operator=(const OpenGraph_Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenGraph_Image& operator=(OpenGraph_Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenGraph_Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenGraph_Image* internal_default_instance() {
    return reinterpret_cast<const OpenGraph_Image*>(
               &_OpenGraph_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OpenGraph_Image& a, OpenGraph_Image& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenGraph_Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenGraph_Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenGraph_Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenGraph_Image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenGraph_Image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenGraph_Image& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGraph_Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.OpenGraph.Image";
  }
  protected:
  explicit OpenGraph_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kSecureUrlFieldNumber = 2,
    kTypeFieldNumber = 5,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // string url = 1 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string secure_url = 2 [json_name = "secureUrl"];
  void clear_secure_url();
  const std::string& secure_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secure_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secure_url();
  PROTOBUF_NODISCARD std::string* release_secure_url();
  void set_allocated_secure_url(std::string* secure_url);
  private:
  const std::string& _internal_secure_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secure_url(const std::string& value);
  std::string* _internal_mutable_secure_url();
  public:

  // string type = 5 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 width = 3 [json_name = "width"];
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 4 [json_name = "height"];
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.v1.OpenGraph.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secure_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  int32_t width_;
  int32_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OpenGraph_Video final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.OpenGraph.Video) */ {
 public:
  inline OpenGraph_Video() : OpenGraph_Video(nullptr) {}
  ~OpenGraph_Video() override;
  explicit constexpr OpenGraph_Video(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenGraph_Video(const OpenGraph_Video& from);
  OpenGraph_Video(OpenGraph_Video&& from) noexcept
    : OpenGraph_Video() {
    *this = ::std::move(from);
  }

  inline OpenGraph_Video& operator=(const OpenGraph_Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenGraph_Video& operator=(OpenGraph_Video&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenGraph_Video& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenGraph_Video* internal_default_instance() {
    return reinterpret_cast<const OpenGraph_Video*>(
               &_OpenGraph_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OpenGraph_Video& a, OpenGraph_Video& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenGraph_Video* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenGraph_Video* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenGraph_Video* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenGraph_Video>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenGraph_Video& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenGraph_Video& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGraph_Video* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.OpenGraph.Video";
  }
  protected:
  explicit OpenGraph_Video(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kSecureUrlFieldNumber = 2,
    kTypeFieldNumber = 5,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // string url = 1 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string secure_url = 2 [json_name = "secureUrl"];
  void clear_secure_url();
  const std::string& secure_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secure_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secure_url();
  PROTOBUF_NODISCARD std::string* release_secure_url();
  void set_allocated_secure_url(std::string* secure_url);
  private:
  const std::string& _internal_secure_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secure_url(const std::string& value);
  std::string* _internal_mutable_secure_url();
  public:

  // string type = 5 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 width = 3 [json_name = "width"];
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 4 [json_name = "height"];
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.v1.OpenGraph.Video)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secure_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  int32_t width_;
  int32_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OpenGraph_Audio final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.OpenGraph.Audio) */ {
 public:
  inline OpenGraph_Audio() : OpenGraph_Audio(nullptr) {}
  ~OpenGraph_Audio() override;
  explicit constexpr OpenGraph_Audio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenGraph_Audio(const OpenGraph_Audio& from);
  OpenGraph_Audio(OpenGraph_Audio&& from) noexcept
    : OpenGraph_Audio() {
    *this = ::std::move(from);
  }

  inline OpenGraph_Audio& operator=(const OpenGraph_Audio& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenGraph_Audio& operator=(OpenGraph_Audio&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenGraph_Audio& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenGraph_Audio* internal_default_instance() {
    return reinterpret_cast<const OpenGraph_Audio*>(
               &_OpenGraph_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OpenGraph_Audio& a, OpenGraph_Audio& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenGraph_Audio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenGraph_Audio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenGraph_Audio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenGraph_Audio>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenGraph_Audio& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenGraph_Audio& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGraph_Audio* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.OpenGraph.Audio";
  }
  protected:
  explicit OpenGraph_Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kSecureUrlFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string url = 1 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string secure_url = 2 [json_name = "secureUrl"];
  void clear_secure_url();
  const std::string& secure_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secure_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secure_url();
  PROTOBUF_NODISCARD std::string* release_secure_url();
  void set_allocated_secure_url(std::string* secure_url);
  private:
  const std::string& _internal_secure_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secure_url(const std::string& value);
  std::string* _internal_mutable_secure_url();
  public:

  // string type = 3 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:common.v1.OpenGraph.Audio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secure_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OpenGraph_Twitter_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.OpenGraph.Twitter.Player) */ {
 public:
  inline OpenGraph_Twitter_Player() : OpenGraph_Twitter_Player(nullptr) {}
  ~OpenGraph_Twitter_Player() override;
  explicit constexpr OpenGraph_Twitter_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenGraph_Twitter_Player(const OpenGraph_Twitter_Player& from);
  OpenGraph_Twitter_Player(OpenGraph_Twitter_Player&& from) noexcept
    : OpenGraph_Twitter_Player() {
    *this = ::std::move(from);
  }

  inline OpenGraph_Twitter_Player& operator=(const OpenGraph_Twitter_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenGraph_Twitter_Player& operator=(OpenGraph_Twitter_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenGraph_Twitter_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenGraph_Twitter_Player* internal_default_instance() {
    return reinterpret_cast<const OpenGraph_Twitter_Player*>(
               &_OpenGraph_Twitter_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OpenGraph_Twitter_Player& a, OpenGraph_Twitter_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenGraph_Twitter_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenGraph_Twitter_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenGraph_Twitter_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenGraph_Twitter_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenGraph_Twitter_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenGraph_Twitter_Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGraph_Twitter_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.OpenGraph.Twitter.Player";
  }
  protected:
  explicit OpenGraph_Twitter_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kStreamFieldNumber = 4,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // string url = 1 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string stream = 4 [json_name = "stream"];
  void clear_stream();
  const std::string& stream() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stream(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stream();
  PROTOBUF_NODISCARD std::string* release_stream();
  void set_allocated_stream(std::string* stream);
  private:
  const std::string& _internal_stream() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream(const std::string& value);
  std::string* _internal_mutable_stream();
  public:

  // int32 width = 2 [json_name = "width"];
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 3 [json_name = "height"];
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.v1.OpenGraph.Twitter.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_;
  int32_t width_;
  int32_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OpenGraph_Twitter_IPhone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.OpenGraph.Twitter.IPhone) */ {
 public:
  inline OpenGraph_Twitter_IPhone() : OpenGraph_Twitter_IPhone(nullptr) {}
  ~OpenGraph_Twitter_IPhone() override;
  explicit constexpr OpenGraph_Twitter_IPhone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenGraph_Twitter_IPhone(const OpenGraph_Twitter_IPhone& from);
  OpenGraph_Twitter_IPhone(OpenGraph_Twitter_IPhone&& from) noexcept
    : OpenGraph_Twitter_IPhone() {
    *this = ::std::move(from);
  }

  inline OpenGraph_Twitter_IPhone& operator=(const OpenGraph_Twitter_IPhone& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenGraph_Twitter_IPhone& operator=(OpenGraph_Twitter_IPhone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenGraph_Twitter_IPhone& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenGraph_Twitter_IPhone* internal_default_instance() {
    return reinterpret_cast<const OpenGraph_Twitter_IPhone*>(
               &_OpenGraph_Twitter_IPhone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OpenGraph_Twitter_IPhone& a, OpenGraph_Twitter_IPhone& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenGraph_Twitter_IPhone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenGraph_Twitter_IPhone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenGraph_Twitter_IPhone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenGraph_Twitter_IPhone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenGraph_Twitter_IPhone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenGraph_Twitter_IPhone& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGraph_Twitter_IPhone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.OpenGraph.Twitter.IPhone";
  }
  protected:
  explicit OpenGraph_Twitter_IPhone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string id = 2 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string url = 3 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:common.v1.OpenGraph.Twitter.IPhone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OpenGraph_Twitter_IPad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.OpenGraph.Twitter.IPad) */ {
 public:
  inline OpenGraph_Twitter_IPad() : OpenGraph_Twitter_IPad(nullptr) {}
  ~OpenGraph_Twitter_IPad() override;
  explicit constexpr OpenGraph_Twitter_IPad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenGraph_Twitter_IPad(const OpenGraph_Twitter_IPad& from);
  OpenGraph_Twitter_IPad(OpenGraph_Twitter_IPad&& from) noexcept
    : OpenGraph_Twitter_IPad() {
    *this = ::std::move(from);
  }

  inline OpenGraph_Twitter_IPad& operator=(const OpenGraph_Twitter_IPad& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenGraph_Twitter_IPad& operator=(OpenGraph_Twitter_IPad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenGraph_Twitter_IPad& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenGraph_Twitter_IPad* internal_default_instance() {
    return reinterpret_cast<const OpenGraph_Twitter_IPad*>(
               &_OpenGraph_Twitter_IPad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OpenGraph_Twitter_IPad& a, OpenGraph_Twitter_IPad& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenGraph_Twitter_IPad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenGraph_Twitter_IPad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenGraph_Twitter_IPad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenGraph_Twitter_IPad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenGraph_Twitter_IPad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenGraph_Twitter_IPad& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGraph_Twitter_IPad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.OpenGraph.Twitter.IPad";
  }
  protected:
  explicit OpenGraph_Twitter_IPad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string id = 2 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string url = 3 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:common.v1.OpenGraph.Twitter.IPad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OpenGraph_Twitter_GooglePlay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.OpenGraph.Twitter.GooglePlay) */ {
 public:
  inline OpenGraph_Twitter_GooglePlay() : OpenGraph_Twitter_GooglePlay(nullptr) {}
  ~OpenGraph_Twitter_GooglePlay() override;
  explicit constexpr OpenGraph_Twitter_GooglePlay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenGraph_Twitter_GooglePlay(const OpenGraph_Twitter_GooglePlay& from);
  OpenGraph_Twitter_GooglePlay(OpenGraph_Twitter_GooglePlay&& from) noexcept
    : OpenGraph_Twitter_GooglePlay() {
    *this = ::std::move(from);
  }

  inline OpenGraph_Twitter_GooglePlay& operator=(const OpenGraph_Twitter_GooglePlay& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenGraph_Twitter_GooglePlay& operator=(OpenGraph_Twitter_GooglePlay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenGraph_Twitter_GooglePlay& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenGraph_Twitter_GooglePlay* internal_default_instance() {
    return reinterpret_cast<const OpenGraph_Twitter_GooglePlay*>(
               &_OpenGraph_Twitter_GooglePlay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OpenGraph_Twitter_GooglePlay& a, OpenGraph_Twitter_GooglePlay& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenGraph_Twitter_GooglePlay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenGraph_Twitter_GooglePlay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenGraph_Twitter_GooglePlay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenGraph_Twitter_GooglePlay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenGraph_Twitter_GooglePlay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenGraph_Twitter_GooglePlay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGraph_Twitter_GooglePlay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.OpenGraph.Twitter.GooglePlay";
  }
  protected:
  explicit OpenGraph_Twitter_GooglePlay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string id = 2 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string url = 3 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:common.v1.OpenGraph.Twitter.GooglePlay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OpenGraph_Twitter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.OpenGraph.Twitter) */ {
 public:
  inline OpenGraph_Twitter() : OpenGraph_Twitter(nullptr) {}
  ~OpenGraph_Twitter() override;
  explicit constexpr OpenGraph_Twitter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenGraph_Twitter(const OpenGraph_Twitter& from);
  OpenGraph_Twitter(OpenGraph_Twitter&& from) noexcept
    : OpenGraph_Twitter() {
    *this = ::std::move(from);
  }

  inline OpenGraph_Twitter& operator=(const OpenGraph_Twitter& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenGraph_Twitter& operator=(OpenGraph_Twitter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenGraph_Twitter& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenGraph_Twitter* internal_default_instance() {
    return reinterpret_cast<const OpenGraph_Twitter*>(
               &_OpenGraph_Twitter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OpenGraph_Twitter& a, OpenGraph_Twitter& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenGraph_Twitter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenGraph_Twitter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenGraph_Twitter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenGraph_Twitter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenGraph_Twitter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenGraph_Twitter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGraph_Twitter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.OpenGraph.Twitter";
  }
  protected:
  explicit OpenGraph_Twitter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OpenGraph_Twitter_Player Player;
  typedef OpenGraph_Twitter_IPhone IPhone;
  typedef OpenGraph_Twitter_IPad IPad;
  typedef OpenGraph_Twitter_GooglePlay GooglePlay;

  // accessors -------------------------------------------------------

  enum : int {
    kCardFieldNumber = 1,
    kSiteFieldNumber = 2,
    kSiteIdFieldNumber = 3,
    kCreatorFieldNumber = 4,
    kCreatorIdFieldNumber = 5,
    kDescriptionFieldNumber = 6,
    kTitleFieldNumber = 7,
    kImageFieldNumber = 8,
    kImageAltFieldNumber = 9,
    kUrlFieldNumber = 10,
    kPlayerFieldNumber = 11,
    kIphoneFieldNumber = 12,
    kIpadFieldNumber = 13,
    kGooglePlayFieldNumber = 14,
  };
  // string card = 1 [json_name = "card"];
  void clear_card();
  const std::string& card() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card();
  PROTOBUF_NODISCARD std::string* release_card();
  void set_allocated_card(std::string* card);
  private:
  const std::string& _internal_card() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card(const std::string& value);
  std::string* _internal_mutable_card();
  public:

  // string site = 2 [json_name = "site"];
  void clear_site();
  const std::string& site() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_site(ArgT0&& arg0, ArgT... args);
  std::string* mutable_site();
  PROTOBUF_NODISCARD std::string* release_site();
  void set_allocated_site(std::string* site);
  private:
  const std::string& _internal_site() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site(const std::string& value);
  std::string* _internal_mutable_site();
  public:

  // string site_id = 3 [json_name = "siteId"];
  void clear_site_id();
  const std::string& site_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_site_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_site_id();
  PROTOBUF_NODISCARD std::string* release_site_id();
  void set_allocated_site_id(std::string* site_id);
  private:
  const std::string& _internal_site_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site_id(const std::string& value);
  std::string* _internal_mutable_site_id();
  public:

  // string creator = 4 [json_name = "creator"];
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string creator_id = 5 [json_name = "creatorId"];
  void clear_creator_id();
  const std::string& creator_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_id();
  PROTOBUF_NODISCARD std::string* release_creator_id();
  void set_allocated_creator_id(std::string* creator_id);
  private:
  const std::string& _internal_creator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_id(const std::string& value);
  std::string* _internal_mutable_creator_id();
  public:

  // string description = 6 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string title = 7 [json_name = "title"];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string image = 8 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string image_alt = 9 [json_name = "imageAlt"];
  void clear_image_alt();
  const std::string& image_alt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_alt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_alt();
  PROTOBUF_NODISCARD std::string* release_image_alt();
  void set_allocated_image_alt(std::string* image_alt);
  private:
  const std::string& _internal_image_alt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_alt(const std::string& value);
  std::string* _internal_mutable_image_alt();
  public:

  // string url = 10 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .common.v1.OpenGraph.Twitter.Player player = 11 [json_name = "player"];
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::common::v1::OpenGraph_Twitter_Player& player() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Twitter_Player* release_player();
  ::common::v1::OpenGraph_Twitter_Player* mutable_player();
  void set_allocated_player(::common::v1::OpenGraph_Twitter_Player* player);
  private:
  const ::common::v1::OpenGraph_Twitter_Player& _internal_player() const;
  ::common::v1::OpenGraph_Twitter_Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::common::v1::OpenGraph_Twitter_Player* player);
  ::common::v1::OpenGraph_Twitter_Player* unsafe_arena_release_player();

  // .common.v1.OpenGraph.Twitter.IPhone iphone = 12 [json_name = "iphone"];
  bool has_iphone() const;
  private:
  bool _internal_has_iphone() const;
  public:
  void clear_iphone();
  const ::common::v1::OpenGraph_Twitter_IPhone& iphone() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Twitter_IPhone* release_iphone();
  ::common::v1::OpenGraph_Twitter_IPhone* mutable_iphone();
  void set_allocated_iphone(::common::v1::OpenGraph_Twitter_IPhone* iphone);
  private:
  const ::common::v1::OpenGraph_Twitter_IPhone& _internal_iphone() const;
  ::common::v1::OpenGraph_Twitter_IPhone* _internal_mutable_iphone();
  public:
  void unsafe_arena_set_allocated_iphone(
      ::common::v1::OpenGraph_Twitter_IPhone* iphone);
  ::common::v1::OpenGraph_Twitter_IPhone* unsafe_arena_release_iphone();

  // .common.v1.OpenGraph.Twitter.IPad ipad = 13 [json_name = "ipad"];
  bool has_ipad() const;
  private:
  bool _internal_has_ipad() const;
  public:
  void clear_ipad();
  const ::common::v1::OpenGraph_Twitter_IPad& ipad() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Twitter_IPad* release_ipad();
  ::common::v1::OpenGraph_Twitter_IPad* mutable_ipad();
  void set_allocated_ipad(::common::v1::OpenGraph_Twitter_IPad* ipad);
  private:
  const ::common::v1::OpenGraph_Twitter_IPad& _internal_ipad() const;
  ::common::v1::OpenGraph_Twitter_IPad* _internal_mutable_ipad();
  public:
  void unsafe_arena_set_allocated_ipad(
      ::common::v1::OpenGraph_Twitter_IPad* ipad);
  ::common::v1::OpenGraph_Twitter_IPad* unsafe_arena_release_ipad();

  // .common.v1.OpenGraph.Twitter.GooglePlay google_play = 14 [json_name = "googlePlay"];
  bool has_google_play() const;
  private:
  bool _internal_has_google_play() const;
  public:
  void clear_google_play();
  const ::common::v1::OpenGraph_Twitter_GooglePlay& google_play() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Twitter_GooglePlay* release_google_play();
  ::common::v1::OpenGraph_Twitter_GooglePlay* mutable_google_play();
  void set_allocated_google_play(::common::v1::OpenGraph_Twitter_GooglePlay* google_play);
  private:
  const ::common::v1::OpenGraph_Twitter_GooglePlay& _internal_google_play() const;
  ::common::v1::OpenGraph_Twitter_GooglePlay* _internal_mutable_google_play();
  public:
  void unsafe_arena_set_allocated_google_play(
      ::common::v1::OpenGraph_Twitter_GooglePlay* google_play);
  ::common::v1::OpenGraph_Twitter_GooglePlay* unsafe_arena_release_google_play();

  // @@protoc_insertion_point(class_scope:common.v1.OpenGraph.Twitter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_alt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::common::v1::OpenGraph_Twitter_Player* player_;
  ::common::v1::OpenGraph_Twitter_IPhone* iphone_;
  ::common::v1::OpenGraph_Twitter_IPad* ipad_;
  ::common::v1::OpenGraph_Twitter_GooglePlay* google_play_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OpenGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.OpenGraph) */ {
 public:
  inline OpenGraph() : OpenGraph(nullptr) {}
  ~OpenGraph() override;
  explicit constexpr OpenGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenGraph(const OpenGraph& from);
  OpenGraph(OpenGraph&& from) noexcept
    : OpenGraph() {
    *this = ::std::move(from);
  }

  inline OpenGraph& operator=(const OpenGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenGraph& operator=(OpenGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenGraph* internal_default_instance() {
    return reinterpret_cast<const OpenGraph*>(
               &_OpenGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OpenGraph& a, OpenGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenGraph& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.OpenGraph";
  }
  protected:
  explicit OpenGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OpenGraph_Primary Primary;
  typedef OpenGraph_Image Image;
  typedef OpenGraph_Video Video;
  typedef OpenGraph_Audio Audio;
  typedef OpenGraph_Twitter Twitter;

  typedef OpenGraph_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    OpenGraph_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_IMAGE =
    OpenGraph_Type_TYPE_IMAGE;
  static constexpr Type TYPE_VIDEO =
    OpenGraph_Type_TYPE_VIDEO;
  static constexpr Type TYPE_TWITTER =
    OpenGraph_Type_TYPE_TWITTER;
  static constexpr Type TYPE_AUDIO =
    OpenGraph_Type_TYPE_AUDIO;
  static constexpr Type TYPE_NONE =
    OpenGraph_Type_TYPE_NONE;
  static inline bool Type_IsValid(int value) {
    return OpenGraph_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    OpenGraph_Type_Type_MIN;
  static constexpr Type Type_MAX =
    OpenGraph_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    OpenGraph_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return OpenGraph_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return OpenGraph_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return OpenGraph_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kVideosFieldNumber = 3,
    kAudiosFieldNumber = 4,
    kPrimaryFieldNumber = 1,
    kTwitterFieldNumber = 5,
  };
  // repeated .common.v1.OpenGraph.Image images = 2 [json_name = "images"];
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::common::v1::OpenGraph_Image* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Image >*
      mutable_images();
  private:
  const ::common::v1::OpenGraph_Image& _internal_images(int index) const;
  ::common::v1::OpenGraph_Image* _internal_add_images();
  public:
  const ::common::v1::OpenGraph_Image& images(int index) const;
  ::common::v1::OpenGraph_Image* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Image >&
      images() const;

  // repeated .common.v1.OpenGraph.Video videos = 3 [json_name = "videos"];
  int videos_size() const;
  private:
  int _internal_videos_size() const;
  public:
  void clear_videos();
  ::common::v1::OpenGraph_Video* mutable_videos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Video >*
      mutable_videos();
  private:
  const ::common::v1::OpenGraph_Video& _internal_videos(int index) const;
  ::common::v1::OpenGraph_Video* _internal_add_videos();
  public:
  const ::common::v1::OpenGraph_Video& videos(int index) const;
  ::common::v1::OpenGraph_Video* add_videos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Video >&
      videos() const;

  // repeated .common.v1.OpenGraph.Audio audios = 4 [json_name = "audios"];
  int audios_size() const;
  private:
  int _internal_audios_size() const;
  public:
  void clear_audios();
  ::common::v1::OpenGraph_Audio* mutable_audios(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Audio >*
      mutable_audios();
  private:
  const ::common::v1::OpenGraph_Audio& _internal_audios(int index) const;
  ::common::v1::OpenGraph_Audio* _internal_add_audios();
  public:
  const ::common::v1::OpenGraph_Audio& audios(int index) const;
  ::common::v1::OpenGraph_Audio* add_audios();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Audio >&
      audios() const;

  // .common.v1.OpenGraph.Primary primary = 1 [json_name = "primary"];
  bool has_primary() const;
  private:
  bool _internal_has_primary() const;
  public:
  void clear_primary();
  const ::common::v1::OpenGraph_Primary& primary() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Primary* release_primary();
  ::common::v1::OpenGraph_Primary* mutable_primary();
  void set_allocated_primary(::common::v1::OpenGraph_Primary* primary);
  private:
  const ::common::v1::OpenGraph_Primary& _internal_primary() const;
  ::common::v1::OpenGraph_Primary* _internal_mutable_primary();
  public:
  void unsafe_arena_set_allocated_primary(
      ::common::v1::OpenGraph_Primary* primary);
  ::common::v1::OpenGraph_Primary* unsafe_arena_release_primary();

  // .common.v1.OpenGraph.Twitter twitter = 5 [json_name = "twitter"];
  bool has_twitter() const;
  private:
  bool _internal_has_twitter() const;
  public:
  void clear_twitter();
  const ::common::v1::OpenGraph_Twitter& twitter() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Twitter* release_twitter();
  ::common::v1::OpenGraph_Twitter* mutable_twitter();
  void set_allocated_twitter(::common::v1::OpenGraph_Twitter* twitter);
  private:
  const ::common::v1::OpenGraph_Twitter& _internal_twitter() const;
  ::common::v1::OpenGraph_Twitter* _internal_mutable_twitter();
  public:
  void unsafe_arena_set_allocated_twitter(
      ::common::v1::OpenGraph_Twitter* twitter);
  ::common::v1::OpenGraph_Twitter* unsafe_arena_release_twitter();

  // @@protoc_insertion_point(class_scope:common.v1.OpenGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Image > images_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Video > videos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Audio > audios_;
  ::common::v1::OpenGraph_Primary* primary_;
  ::common::v1::OpenGraph_Twitter* twitter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Thumbnail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.Thumbnail) */ {
 public:
  inline Thumbnail() : Thumbnail(nullptr) {}
  ~Thumbnail() override;
  explicit constexpr Thumbnail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Thumbnail(const Thumbnail& from);
  Thumbnail(Thumbnail&& from) noexcept
    : Thumbnail() {
    *this = ::std::move(from);
  }

  inline Thumbnail& operator=(const Thumbnail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Thumbnail& operator=(Thumbnail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Thumbnail& default_instance() {
    return *internal_default_instance();
  }
  static inline const Thumbnail* internal_default_instance() {
    return reinterpret_cast<const Thumbnail*>(
               &_Thumbnail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Thumbnail& a, Thumbnail& b) {
    a.Swap(&b);
  }
  inline void Swap(Thumbnail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Thumbnail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Thumbnail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Thumbnail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Thumbnail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Thumbnail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Thumbnail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.Thumbnail";
  }
  protected:
  explicit Thumbnail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 1,
    kMimeFieldNumber = 2,
  };
  // bytes buffer = 1 [json_name = "buffer"];
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_NODISCARD std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // .common.v1.MIME mime = 2 [json_name = "mime"];
  bool has_mime() const;
  private:
  bool _internal_has_mime() const;
  public:
  void clear_mime();
  const ::common::v1::MIME& mime() const;
  PROTOBUF_NODISCARD ::common::v1::MIME* release_mime();
  ::common::v1::MIME* mutable_mime();
  void set_allocated_mime(::common::v1::MIME* mime);
  private:
  const ::common::v1::MIME& _internal_mime() const;
  ::common::v1::MIME* _internal_mutable_mime();
  public:
  void unsafe_arena_set_allocated_mime(
      ::common::v1::MIME* mime);
  ::common::v1::MIME* unsafe_arena_release_mime();

  // @@protoc_insertion_point(class_scope:common.v1.Thumbnail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::common::v1::MIME* mime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Payload_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.Payload.Item) */ {
 public:
  inline Payload_Item() : Payload_Item(nullptr) {}
  ~Payload_Item() override;
  explicit constexpr Payload_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload_Item(const Payload_Item& from);
  Payload_Item(Payload_Item&& from) noexcept
    : Payload_Item() {
    *this = ::std::move(from);
  }

  inline Payload_Item& operator=(const Payload_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload_Item& operator=(Payload_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload_Item& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kFile = 3,
    kUrl = 4,
    kMessage = 5,
    DATA_NOT_SET = 0,
  };

  enum PreviewCase {
    kThumbnail = 6,
    kOpenGraph = 7,
    PREVIEW_NOT_SET = 0,
  };

  static inline const Payload_Item* internal_default_instance() {
    return reinterpret_cast<const Payload_Item*>(
               &_Payload_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Payload_Item& a, Payload_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Payload_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Payload_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload_Item& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.Payload.Item";
  }
  protected:
  explicit Payload_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeFieldNumber = 1,
    kSizeFieldNumber = 2,
    kFileFieldNumber = 3,
    kUrlFieldNumber = 4,
    kMessageFieldNumber = 5,
    kThumbnailFieldNumber = 6,
    kOpenGraphFieldNumber = 7,
  };
  // .common.v1.MIME mime = 1 [json_name = "mime"];
  bool has_mime() const;
  private:
  bool _internal_has_mime() const;
  public:
  void clear_mime();
  const ::common::v1::MIME& mime() const;
  PROTOBUF_NODISCARD ::common::v1::MIME* release_mime();
  ::common::v1::MIME* mutable_mime();
  void set_allocated_mime(::common::v1::MIME* mime);
  private:
  const ::common::v1::MIME& _internal_mime() const;
  ::common::v1::MIME* _internal_mutable_mime();
  public:
  void unsafe_arena_set_allocated_mime(
      ::common::v1::MIME* mime);
  ::common::v1::MIME* unsafe_arena_release_mime();

  // int64 size = 2 [json_name = "size"];
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // .common.v1.FileItem file = 3 [json_name = "file"];
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::common::v1::FileItem& file() const;
  PROTOBUF_NODISCARD ::common::v1::FileItem* release_file();
  ::common::v1::FileItem* mutable_file();
  void set_allocated_file(::common::v1::FileItem* file);
  private:
  const ::common::v1::FileItem& _internal_file() const;
  ::common::v1::FileItem* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::common::v1::FileItem* file);
  ::common::v1::FileItem* unsafe_arena_release_file();

  // .common.v1.UrlItem url = 4 [json_name = "url"];
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const ::common::v1::UrlItem& url() const;
  PROTOBUF_NODISCARD ::common::v1::UrlItem* release_url();
  ::common::v1::UrlItem* mutable_url();
  void set_allocated_url(::common::v1::UrlItem* url);
  private:
  const ::common::v1::UrlItem& _internal_url() const;
  ::common::v1::UrlItem* _internal_mutable_url();
  public:
  void unsafe_arena_set_allocated_url(
      ::common::v1::UrlItem* url);
  ::common::v1::UrlItem* unsafe_arena_release_url();

  // .common.v1.MessageItem message = 5 [json_name = "message"];
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::common::v1::MessageItem& message() const;
  PROTOBUF_NODISCARD ::common::v1::MessageItem* release_message();
  ::common::v1::MessageItem* mutable_message();
  void set_allocated_message(::common::v1::MessageItem* message);
  private:
  const ::common::v1::MessageItem& _internal_message() const;
  ::common::v1::MessageItem* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::common::v1::MessageItem* message);
  ::common::v1::MessageItem* unsafe_arena_release_message();

  // .common.v1.Thumbnail thumbnail = 6 [json_name = "thumbnail"];
  bool has_thumbnail() const;
  private:
  bool _internal_has_thumbnail() const;
  public:
  void clear_thumbnail();
  const ::common::v1::Thumbnail& thumbnail() const;
  PROTOBUF_NODISCARD ::common::v1::Thumbnail* release_thumbnail();
  ::common::v1::Thumbnail* mutable_thumbnail();
  void set_allocated_thumbnail(::common::v1::Thumbnail* thumbnail);
  private:
  const ::common::v1::Thumbnail& _internal_thumbnail() const;
  ::common::v1::Thumbnail* _internal_mutable_thumbnail();
  public:
  void unsafe_arena_set_allocated_thumbnail(
      ::common::v1::Thumbnail* thumbnail);
  ::common::v1::Thumbnail* unsafe_arena_release_thumbnail();

  // .common.v1.OpenGraph.Primary open_graph = 7 [json_name = "openGraph"];
  bool has_open_graph() const;
  private:
  bool _internal_has_open_graph() const;
  public:
  void clear_open_graph();
  const ::common::v1::OpenGraph_Primary& open_graph() const;
  PROTOBUF_NODISCARD ::common::v1::OpenGraph_Primary* release_open_graph();
  ::common::v1::OpenGraph_Primary* mutable_open_graph();
  void set_allocated_open_graph(::common::v1::OpenGraph_Primary* open_graph);
  private:
  const ::common::v1::OpenGraph_Primary& _internal_open_graph() const;
  ::common::v1::OpenGraph_Primary* _internal_mutable_open_graph();
  public:
  void unsafe_arena_set_allocated_open_graph(
      ::common::v1::OpenGraph_Primary* open_graph);
  ::common::v1::OpenGraph_Primary* unsafe_arena_release_open_graph();

  void clear_data();
  DataCase data_case() const;
  void clear_preview();
  PreviewCase preview_case() const;
  // @@protoc_insertion_point(class_scope:common.v1.Payload.Item)
 private:
  class _Internal;
  void set_has_file();
  void set_has_url();
  void set_has_message();
  void set_has_thumbnail();
  void set_has_open_graph();

  inline bool has_data() const;
  inline void clear_has_data();

  inline bool has_preview() const;
  inline void clear_has_preview();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::v1::MIME* mime_;
  int64_t size_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::common::v1::FileItem* file_;
    ::common::v1::UrlItem* url_;
    ::common::v1::MessageItem* message_;
  } data_;
  union PreviewUnion {
    constexpr PreviewUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::common::v1::Thumbnail* thumbnail_;
    ::common::v1::OpenGraph_Primary* open_graph_;
  } preview_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.Payload) */ {
 public:
  inline Payload() : Payload(nullptr) {}
  ~Payload() override;
  explicit constexpr Payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload(const Payload& from);
  Payload(Payload&& from) noexcept
    : Payload() {
    *this = ::std::move(from);
  }

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload& operator=(Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
               &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Payload& a, Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Payload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.Payload";
  }
  protected:
  explicit Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Payload_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kSizeFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
  };
  // repeated .common.v1.Payload.Item items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::common::v1::Payload_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Payload_Item >*
      mutable_items();
  private:
  const ::common::v1::Payload_Item& _internal_items(int index) const;
  ::common::v1::Payload_Item* _internal_add_items();
  public:
  const ::common::v1::Payload_Item& items(int index) const;
  ::common::v1::Payload_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Payload_Item >&
      items() const;

  // .common.v1.Profile owner = 2 [json_name = "owner"];
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::common::v1::Profile& owner() const;
  PROTOBUF_NODISCARD ::common::v1::Profile* release_owner();
  ::common::v1::Profile* mutable_owner();
  void set_allocated_owner(::common::v1::Profile* owner);
  private:
  const ::common::v1::Profile& _internal_owner() const;
  ::common::v1::Profile* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::common::v1::Profile* owner);
  ::common::v1::Profile* unsafe_arena_release_owner();

  // int64 size = 3 [json_name = "size"];
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 created_at = 4 [json_name = "createdAt"];
  void clear_created_at();
  int64_t created_at() const;
  void set_created_at(int64_t value);
  private:
  int64_t _internal_created_at() const;
  void _internal_set_created_at(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.v1.Payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Payload_Item > items_;
  ::common::v1::Profile* owner_;
  int64_t size_;
  int64_t created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class PayloadList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.PayloadList) */ {
 public:
  inline PayloadList() : PayloadList(nullptr) {}
  ~PayloadList() override;
  explicit constexpr PayloadList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PayloadList(const PayloadList& from);
  PayloadList(PayloadList&& from) noexcept
    : PayloadList() {
    *this = ::std::move(from);
  }

  inline PayloadList& operator=(const PayloadList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayloadList& operator=(PayloadList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayloadList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayloadList* internal_default_instance() {
    return reinterpret_cast<const PayloadList*>(
               &_PayloadList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PayloadList& a, PayloadList& b) {
    a.Swap(&b);
  }
  inline void Swap(PayloadList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayloadList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PayloadList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PayloadList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PayloadList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PayloadList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayloadList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.PayloadList";
  }
  protected:
  explicit PayloadList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadsFieldNumber = 1,
    kKeyFieldNumber = 2,
    kLastModifiedFieldNumber = 3,
  };
  // repeated .common.v1.Payload payloads = 1 [json_name = "payloads"];
  int payloads_size() const;
  private:
  int _internal_payloads_size() const;
  public:
  void clear_payloads();
  ::common::v1::Payload* mutable_payloads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Payload >*
      mutable_payloads();
  private:
  const ::common::v1::Payload& _internal_payloads(int index) const;
  ::common::v1::Payload* _internal_add_payloads();
  public:
  const ::common::v1::Payload& payloads(int index) const;
  ::common::v1::Payload* add_payloads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Payload >&
      payloads() const;

  // string key = 2 [json_name = "key"];
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int64 last_modified = 3 [json_name = "lastModified"];
  void clear_last_modified();
  int64_t last_modified() const;
  void set_last_modified(int64_t value);
  private:
  int64_t _internal_last_modified() const;
  void _internal_set_last_modified(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:common.v1.PayloadList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Payload > payloads_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int64_t last_modified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class SupplyItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.v1.SupplyItem) */ {
 public:
  inline SupplyItem() : SupplyItem(nullptr) {}
  ~SupplyItem() override;
  explicit constexpr SupplyItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SupplyItem(const SupplyItem& from);
  SupplyItem(SupplyItem&& from) noexcept
    : SupplyItem() {
    *this = ::std::move(from);
  }

  inline SupplyItem& operator=(const SupplyItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupplyItem& operator=(SupplyItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SupplyItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SupplyItem* internal_default_instance() {
    return reinterpret_cast<const SupplyItem*>(
               &_SupplyItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SupplyItem& a, SupplyItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SupplyItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupplyItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SupplyItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SupplyItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SupplyItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SupplyItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupplyItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.v1.SupplyItem";
  }
  protected:
  explicit SupplyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kThumbnailFieldNumber = 2,
  };
  // string path = 1 [json_name = "path"];
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional bytes thumbnail = 2 [json_name = "thumbnail"];
  bool has_thumbnail() const;
  private:
  bool _internal_has_thumbnail() const;
  public:
  void clear_thumbnail();
  const std::string& thumbnail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail();
  PROTOBUF_NODISCARD std::string* release_thumbnail();
  void set_allocated_thumbnail(std::string* thumbnail);
  private:
  const std::string& _internal_thumbnail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail(const std::string& value);
  std::string* _internal_mutable_thumbnail();
  public:

  // @@protoc_insertion_point(class_scope:common.v1.SupplyItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_;
  friend struct ::TableStruct_common_2fv1_2fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileItem

// .common.v1.MIME mime = 1 [json_name = "mime"];
inline bool FileItem::_internal_has_mime() const {
  return this != internal_default_instance() && mime_ != nullptr;
}
inline bool FileItem::has_mime() const {
  return _internal_has_mime();
}
inline const ::common::v1::MIME& FileItem::_internal_mime() const {
  const ::common::v1::MIME* p = mime_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::MIME&>(
      ::common::v1::_MIME_default_instance_);
}
inline const ::common::v1::MIME& FileItem::mime() const {
  // @@protoc_insertion_point(field_get:common.v1.FileItem.mime)
  return _internal_mime();
}
inline void FileItem::unsafe_arena_set_allocated_mime(
    ::common::v1::MIME* mime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime_);
  }
  mime_ = mime;
  if (mime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.FileItem.mime)
}
inline ::common::v1::MIME* FileItem::release_mime() {
  
  ::common::v1::MIME* temp = mime_;
  mime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::MIME* FileItem::unsafe_arena_release_mime() {
  // @@protoc_insertion_point(field_release:common.v1.FileItem.mime)
  
  ::common::v1::MIME* temp = mime_;
  mime_ = nullptr;
  return temp;
}
inline ::common::v1::MIME* FileItem::_internal_mutable_mime() {
  
  if (mime_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::MIME>(GetArenaForAllocation());
    mime_ = p;
  }
  return mime_;
}
inline ::common::v1::MIME* FileItem::mutable_mime() {
  ::common::v1::MIME* _msg = _internal_mutable_mime();
  // @@protoc_insertion_point(field_mutable:common.v1.FileItem.mime)
  return _msg;
}
inline void FileItem::set_allocated_mime(::common::v1::MIME* mime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime_);
  }
  if (mime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime));
    if (message_arena != submessage_arena) {
      mime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mime, submessage_arena);
    }
    
  } else {
    
  }
  mime_ = mime;
  // @@protoc_insertion_point(field_set_allocated:common.v1.FileItem.mime)
}

// string name = 2 [json_name = "name"];
inline void FileItem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileItem::name() const {
  // @@protoc_insertion_point(field_get:common.v1.FileItem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileItem::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.FileItem.name)
}
inline std::string* FileItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:common.v1.FileItem.name)
  return _s;
}
inline const std::string& FileItem::_internal_name() const {
  return name_.Get();
}
inline void FileItem::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileItem::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileItem::release_name() {
  // @@protoc_insertion_point(field_release:common.v1.FileItem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.FileItem.name)
}

// string path = 3 [json_name = "path"];
inline void FileItem::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& FileItem::path() const {
  // @@protoc_insertion_point(field_get:common.v1.FileItem.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileItem::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.FileItem.path)
}
inline std::string* FileItem::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:common.v1.FileItem.path)
  return _s;
}
inline const std::string& FileItem::_internal_path() const {
  return path_.Get();
}
inline void FileItem::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileItem::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileItem::release_path() {
  // @@protoc_insertion_point(field_release:common.v1.FileItem.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileItem::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.FileItem.path)
}

// int64 size = 4 [json_name = "size"];
inline void FileItem::clear_size() {
  size_ = int64_t{0};
}
inline int64_t FileItem::_internal_size() const {
  return size_;
}
inline int64_t FileItem::size() const {
  // @@protoc_insertion_point(field_get:common.v1.FileItem.size)
  return _internal_size();
}
inline void FileItem::_internal_set_size(int64_t value) {
  
  size_ = value;
}
inline void FileItem::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:common.v1.FileItem.size)
}

// .common.v1.Thumbnail thumbnail = 5 [json_name = "thumbnail"];
inline bool FileItem::_internal_has_thumbnail() const {
  return this != internal_default_instance() && thumbnail_ != nullptr;
}
inline bool FileItem::has_thumbnail() const {
  return _internal_has_thumbnail();
}
inline void FileItem::clear_thumbnail() {
  if (GetArenaForAllocation() == nullptr && thumbnail_ != nullptr) {
    delete thumbnail_;
  }
  thumbnail_ = nullptr;
}
inline const ::common::v1::Thumbnail& FileItem::_internal_thumbnail() const {
  const ::common::v1::Thumbnail* p = thumbnail_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Thumbnail&>(
      ::common::v1::_Thumbnail_default_instance_);
}
inline const ::common::v1::Thumbnail& FileItem::thumbnail() const {
  // @@protoc_insertion_point(field_get:common.v1.FileItem.thumbnail)
  return _internal_thumbnail();
}
inline void FileItem::unsafe_arena_set_allocated_thumbnail(
    ::common::v1::Thumbnail* thumbnail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_);
  }
  thumbnail_ = thumbnail;
  if (thumbnail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.FileItem.thumbnail)
}
inline ::common::v1::Thumbnail* FileItem::release_thumbnail() {
  
  ::common::v1::Thumbnail* temp = thumbnail_;
  thumbnail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Thumbnail* FileItem::unsafe_arena_release_thumbnail() {
  // @@protoc_insertion_point(field_release:common.v1.FileItem.thumbnail)
  
  ::common::v1::Thumbnail* temp = thumbnail_;
  thumbnail_ = nullptr;
  return temp;
}
inline ::common::v1::Thumbnail* FileItem::_internal_mutable_thumbnail() {
  
  if (thumbnail_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Thumbnail>(GetArenaForAllocation());
    thumbnail_ = p;
  }
  return thumbnail_;
}
inline ::common::v1::Thumbnail* FileItem::mutable_thumbnail() {
  ::common::v1::Thumbnail* _msg = _internal_mutable_thumbnail();
  // @@protoc_insertion_point(field_mutable:common.v1.FileItem.thumbnail)
  return _msg;
}
inline void FileItem::set_allocated_thumbnail(::common::v1::Thumbnail* thumbnail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete thumbnail_;
  }
  if (thumbnail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::Thumbnail>::GetOwningArena(thumbnail);
    if (message_arena != submessage_arena) {
      thumbnail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnail, submessage_arena);
    }
    
  } else {
    
  }
  thumbnail_ = thumbnail;
  // @@protoc_insertion_point(field_set_allocated:common.v1.FileItem.thumbnail)
}

// int64 last_modified = 6 [json_name = "lastModified"];
inline void FileItem::clear_last_modified() {
  last_modified_ = int64_t{0};
}
inline int64_t FileItem::_internal_last_modified() const {
  return last_modified_;
}
inline int64_t FileItem::last_modified() const {
  // @@protoc_insertion_point(field_get:common.v1.FileItem.last_modified)
  return _internal_last_modified();
}
inline void FileItem::_internal_set_last_modified(int64_t value) {
  
  last_modified_ = value;
}
inline void FileItem::set_last_modified(int64_t value) {
  _internal_set_last_modified(value);
  // @@protoc_insertion_point(field_set:common.v1.FileItem.last_modified)
}

// -------------------------------------------------------------------

// MessageItem

// .common.v1.MIME mime = 1 [json_name = "mime"];
inline bool MessageItem::_internal_has_mime() const {
  return this != internal_default_instance() && mime_ != nullptr;
}
inline bool MessageItem::has_mime() const {
  return _internal_has_mime();
}
inline const ::common::v1::MIME& MessageItem::_internal_mime() const {
  const ::common::v1::MIME* p = mime_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::MIME&>(
      ::common::v1::_MIME_default_instance_);
}
inline const ::common::v1::MIME& MessageItem::mime() const {
  // @@protoc_insertion_point(field_get:common.v1.MessageItem.mime)
  return _internal_mime();
}
inline void MessageItem::unsafe_arena_set_allocated_mime(
    ::common::v1::MIME* mime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime_);
  }
  mime_ = mime;
  if (mime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.MessageItem.mime)
}
inline ::common::v1::MIME* MessageItem::release_mime() {
  
  ::common::v1::MIME* temp = mime_;
  mime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::MIME* MessageItem::unsafe_arena_release_mime() {
  // @@protoc_insertion_point(field_release:common.v1.MessageItem.mime)
  
  ::common::v1::MIME* temp = mime_;
  mime_ = nullptr;
  return temp;
}
inline ::common::v1::MIME* MessageItem::_internal_mutable_mime() {
  
  if (mime_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::MIME>(GetArenaForAllocation());
    mime_ = p;
  }
  return mime_;
}
inline ::common::v1::MIME* MessageItem::mutable_mime() {
  ::common::v1::MIME* _msg = _internal_mutable_mime();
  // @@protoc_insertion_point(field_mutable:common.v1.MessageItem.mime)
  return _msg;
}
inline void MessageItem::set_allocated_mime(::common::v1::MIME* mime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime_);
  }
  if (mime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime));
    if (message_arena != submessage_arena) {
      mime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mime, submessage_arena);
    }
    
  } else {
    
  }
  mime_ = mime;
  // @@protoc_insertion_point(field_set_allocated:common.v1.MessageItem.mime)
}

// string subject = 2 [json_name = "subject"];
inline void MessageItem::clear_subject() {
  subject_.ClearToEmpty();
}
inline const std::string& MessageItem::subject() const {
  // @@protoc_insertion_point(field_get:common.v1.MessageItem.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageItem::set_subject(ArgT0&& arg0, ArgT... args) {
 
 subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.MessageItem.subject)
}
inline std::string* MessageItem::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:common.v1.MessageItem.subject)
  return _s;
}
inline const std::string& MessageItem::_internal_subject() const {
  return subject_.Get();
}
inline void MessageItem::_internal_set_subject(const std::string& value) {
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageItem::_internal_mutable_subject() {
  
  return subject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageItem::release_subject() {
  // @@protoc_insertion_point(field_release:common.v1.MessageItem.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageItem::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subject_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.MessageItem.subject)
}

// string body = 3 [json_name = "body"];
inline void MessageItem::clear_body() {
  body_.ClearToEmpty();
}
inline const std::string& MessageItem::body() const {
  // @@protoc_insertion_point(field_get:common.v1.MessageItem.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageItem::set_body(ArgT0&& arg0, ArgT... args) {
 
 body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.MessageItem.body)
}
inline std::string* MessageItem::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:common.v1.MessageItem.body)
  return _s;
}
inline const std::string& MessageItem::_internal_body() const {
  return body_.Get();
}
inline void MessageItem::_internal_set_body(const std::string& value) {
  
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageItem::_internal_mutable_body() {
  
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageItem::release_body() {
  // @@protoc_insertion_point(field_release:common.v1.MessageItem.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageItem::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.MessageItem.body)
}

// int64 created_at = 4 [json_name = "createdAt"];
inline void MessageItem::clear_created_at() {
  created_at_ = int64_t{0};
}
inline int64_t MessageItem::_internal_created_at() const {
  return created_at_;
}
inline int64_t MessageItem::created_at() const {
  // @@protoc_insertion_point(field_get:common.v1.MessageItem.created_at)
  return _internal_created_at();
}
inline void MessageItem::_internal_set_created_at(int64_t value) {
  
  created_at_ = value;
}
inline void MessageItem::set_created_at(int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:common.v1.MessageItem.created_at)
}

// repeated .common.v1.FileItem attachments = 5 [json_name = "attachments"];
inline int MessageItem::_internal_attachments_size() const {
  return attachments_.size();
}
inline int MessageItem::attachments_size() const {
  return _internal_attachments_size();
}
inline void MessageItem::clear_attachments() {
  attachments_.Clear();
}
inline ::common::v1::FileItem* MessageItem::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:common.v1.MessageItem.attachments)
  return attachments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::FileItem >*
MessageItem::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:common.v1.MessageItem.attachments)
  return &attachments_;
}
inline const ::common::v1::FileItem& MessageItem::_internal_attachments(int index) const {
  return attachments_.Get(index);
}
inline const ::common::v1::FileItem& MessageItem::attachments(int index) const {
  // @@protoc_insertion_point(field_get:common.v1.MessageItem.attachments)
  return _internal_attachments(index);
}
inline ::common::v1::FileItem* MessageItem::_internal_add_attachments() {
  return attachments_.Add();
}
inline ::common::v1::FileItem* MessageItem::add_attachments() {
  ::common::v1::FileItem* _add = _internal_add_attachments();
  // @@protoc_insertion_point(field_add:common.v1.MessageItem.attachments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::FileItem >&
MessageItem::attachments() const {
  // @@protoc_insertion_point(field_list:common.v1.MessageItem.attachments)
  return attachments_;
}

// -------------------------------------------------------------------

// UrlItem

// .common.v1.MIME mime = 1 [json_name = "mime"];
inline bool UrlItem::_internal_has_mime() const {
  return this != internal_default_instance() && mime_ != nullptr;
}
inline bool UrlItem::has_mime() const {
  return _internal_has_mime();
}
inline const ::common::v1::MIME& UrlItem::_internal_mime() const {
  const ::common::v1::MIME* p = mime_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::MIME&>(
      ::common::v1::_MIME_default_instance_);
}
inline const ::common::v1::MIME& UrlItem::mime() const {
  // @@protoc_insertion_point(field_get:common.v1.UrlItem.mime)
  return _internal_mime();
}
inline void UrlItem::unsafe_arena_set_allocated_mime(
    ::common::v1::MIME* mime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime_);
  }
  mime_ = mime;
  if (mime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.UrlItem.mime)
}
inline ::common::v1::MIME* UrlItem::release_mime() {
  
  ::common::v1::MIME* temp = mime_;
  mime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::MIME* UrlItem::unsafe_arena_release_mime() {
  // @@protoc_insertion_point(field_release:common.v1.UrlItem.mime)
  
  ::common::v1::MIME* temp = mime_;
  mime_ = nullptr;
  return temp;
}
inline ::common::v1::MIME* UrlItem::_internal_mutable_mime() {
  
  if (mime_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::MIME>(GetArenaForAllocation());
    mime_ = p;
  }
  return mime_;
}
inline ::common::v1::MIME* UrlItem::mutable_mime() {
  ::common::v1::MIME* _msg = _internal_mutable_mime();
  // @@protoc_insertion_point(field_mutable:common.v1.UrlItem.mime)
  return _msg;
}
inline void UrlItem::set_allocated_mime(::common::v1::MIME* mime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime_);
  }
  if (mime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime));
    if (message_arena != submessage_arena) {
      mime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mime, submessage_arena);
    }
    
  } else {
    
  }
  mime_ = mime;
  // @@protoc_insertion_point(field_set_allocated:common.v1.UrlItem.mime)
}

// string link = 2 [json_name = "link"];
inline void UrlItem::clear_link() {
  link_.ClearToEmpty();
}
inline const std::string& UrlItem::link() const {
  // @@protoc_insertion_point(field_get:common.v1.UrlItem.link)
  return _internal_link();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UrlItem::set_link(ArgT0&& arg0, ArgT... args) {
 
 link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.UrlItem.link)
}
inline std::string* UrlItem::mutable_link() {
  std::string* _s = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:common.v1.UrlItem.link)
  return _s;
}
inline const std::string& UrlItem::_internal_link() const {
  return link_.Get();
}
inline void UrlItem::_internal_set_link(const std::string& value) {
  
  link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UrlItem::_internal_mutable_link() {
  
  return link_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UrlItem::release_link() {
  // @@protoc_insertion_point(field_release:common.v1.UrlItem.link)
  return link_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UrlItem::set_allocated_link(std::string* link) {
  if (link != nullptr) {
    
  } else {
    
  }
  link_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (link_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.UrlItem.link)
}

// string title = 3 [json_name = "title"];
inline void UrlItem::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& UrlItem::title() const {
  // @@protoc_insertion_point(field_get:common.v1.UrlItem.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UrlItem::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.UrlItem.title)
}
inline std::string* UrlItem::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:common.v1.UrlItem.title)
  return _s;
}
inline const std::string& UrlItem::_internal_title() const {
  return title_.Get();
}
inline void UrlItem::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UrlItem::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UrlItem::release_title() {
  // @@protoc_insertion_point(field_release:common.v1.UrlItem.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UrlItem::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.UrlItem.title)
}

// string site = 4 [json_name = "site"];
inline void UrlItem::clear_site() {
  site_.ClearToEmpty();
}
inline const std::string& UrlItem::site() const {
  // @@protoc_insertion_point(field_get:common.v1.UrlItem.site)
  return _internal_site();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UrlItem::set_site(ArgT0&& arg0, ArgT... args) {
 
 site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.UrlItem.site)
}
inline std::string* UrlItem::mutable_site() {
  std::string* _s = _internal_mutable_site();
  // @@protoc_insertion_point(field_mutable:common.v1.UrlItem.site)
  return _s;
}
inline const std::string& UrlItem::_internal_site() const {
  return site_.Get();
}
inline void UrlItem::_internal_set_site(const std::string& value) {
  
  site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UrlItem::_internal_mutable_site() {
  
  return site_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UrlItem::release_site() {
  // @@protoc_insertion_point(field_release:common.v1.UrlItem.site)
  return site_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UrlItem::set_allocated_site(std::string* site) {
  if (site != nullptr) {
    
  } else {
    
  }
  site_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (site_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    site_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.UrlItem.site)
}

// string site_name = 5 [json_name = "siteName"];
inline void UrlItem::clear_site_name() {
  site_name_.ClearToEmpty();
}
inline const std::string& UrlItem::site_name() const {
  // @@protoc_insertion_point(field_get:common.v1.UrlItem.site_name)
  return _internal_site_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UrlItem::set_site_name(ArgT0&& arg0, ArgT... args) {
 
 site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.UrlItem.site_name)
}
inline std::string* UrlItem::mutable_site_name() {
  std::string* _s = _internal_mutable_site_name();
  // @@protoc_insertion_point(field_mutable:common.v1.UrlItem.site_name)
  return _s;
}
inline const std::string& UrlItem::_internal_site_name() const {
  return site_name_.Get();
}
inline void UrlItem::_internal_set_site_name(const std::string& value) {
  
  site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UrlItem::_internal_mutable_site_name() {
  
  return site_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UrlItem::release_site_name() {
  // @@protoc_insertion_point(field_release:common.v1.UrlItem.site_name)
  return site_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UrlItem::set_allocated_site_name(std::string* site_name) {
  if (site_name != nullptr) {
    
  } else {
    
  }
  site_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (site_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.UrlItem.site_name)
}

// string description = 6 [json_name = "description"];
inline void UrlItem::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& UrlItem::description() const {
  // @@protoc_insertion_point(field_get:common.v1.UrlItem.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UrlItem::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.UrlItem.description)
}
inline std::string* UrlItem::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:common.v1.UrlItem.description)
  return _s;
}
inline const std::string& UrlItem::_internal_description() const {
  return description_.Get();
}
inline void UrlItem::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UrlItem::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UrlItem::release_description() {
  // @@protoc_insertion_point(field_release:common.v1.UrlItem.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UrlItem::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.UrlItem.description)
}

// .common.v1.OpenGraph open_graph = 7 [json_name = "openGraph"];
inline bool UrlItem::_internal_has_open_graph() const {
  return this != internal_default_instance() && open_graph_ != nullptr;
}
inline bool UrlItem::has_open_graph() const {
  return _internal_has_open_graph();
}
inline void UrlItem::clear_open_graph() {
  if (GetArenaForAllocation() == nullptr && open_graph_ != nullptr) {
    delete open_graph_;
  }
  open_graph_ = nullptr;
}
inline const ::common::v1::OpenGraph& UrlItem::_internal_open_graph() const {
  const ::common::v1::OpenGraph* p = open_graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::OpenGraph&>(
      ::common::v1::_OpenGraph_default_instance_);
}
inline const ::common::v1::OpenGraph& UrlItem::open_graph() const {
  // @@protoc_insertion_point(field_get:common.v1.UrlItem.open_graph)
  return _internal_open_graph();
}
inline void UrlItem::unsafe_arena_set_allocated_open_graph(
    ::common::v1::OpenGraph* open_graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_graph_);
  }
  open_graph_ = open_graph;
  if (open_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.UrlItem.open_graph)
}
inline ::common::v1::OpenGraph* UrlItem::release_open_graph() {
  
  ::common::v1::OpenGraph* temp = open_graph_;
  open_graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::OpenGraph* UrlItem::unsafe_arena_release_open_graph() {
  // @@protoc_insertion_point(field_release:common.v1.UrlItem.open_graph)
  
  ::common::v1::OpenGraph* temp = open_graph_;
  open_graph_ = nullptr;
  return temp;
}
inline ::common::v1::OpenGraph* UrlItem::_internal_mutable_open_graph() {
  
  if (open_graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::OpenGraph>(GetArenaForAllocation());
    open_graph_ = p;
  }
  return open_graph_;
}
inline ::common::v1::OpenGraph* UrlItem::mutable_open_graph() {
  ::common::v1::OpenGraph* _msg = _internal_mutable_open_graph();
  // @@protoc_insertion_point(field_mutable:common.v1.UrlItem.open_graph)
  return _msg;
}
inline void UrlItem::set_allocated_open_graph(::common::v1::OpenGraph* open_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete open_graph_;
  }
  if (open_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::OpenGraph>::GetOwningArena(open_graph);
    if (message_arena != submessage_arena) {
      open_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_graph, submessage_arena);
    }
    
  } else {
    
  }
  open_graph_ = open_graph;
  // @@protoc_insertion_point(field_set_allocated:common.v1.UrlItem.open_graph)
}

// -------------------------------------------------------------------

// OpenGraph_Primary

// .common.v1.OpenGraph.Type type = 1 [json_name = "type"];
inline void OpenGraph_Primary::clear_type() {
  type_ = 0;
}
inline ::common::v1::OpenGraph_Type OpenGraph_Primary::_internal_type() const {
  return static_cast< ::common::v1::OpenGraph_Type >(type_);
}
inline ::common::v1::OpenGraph_Type OpenGraph_Primary::type() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Primary.type)
  return _internal_type();
}
inline void OpenGraph_Primary::_internal_set_type(::common::v1::OpenGraph_Type value) {
  
  type_ = value;
}
inline void OpenGraph_Primary::set_type(::common::v1::OpenGraph_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Primary.type)
}

// .common.v1.OpenGraph.Image image = 2 [json_name = "image"];
inline bool OpenGraph_Primary::_internal_has_image() const {
  return data_case() == kImage;
}
inline bool OpenGraph_Primary::has_image() const {
  return _internal_has_image();
}
inline void OpenGraph_Primary::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline void OpenGraph_Primary::clear_image() {
  if (_internal_has_image()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.image_;
    }
    clear_has_data();
  }
}
inline ::common::v1::OpenGraph_Image* OpenGraph_Primary::release_image() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Primary.image)
  if (_internal_has_image()) {
    clear_has_data();
      ::common::v1::OpenGraph_Image* temp = data_.image_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::OpenGraph_Image& OpenGraph_Primary::_internal_image() const {
  return _internal_has_image()
      ? *data_.image_
      : reinterpret_cast< ::common::v1::OpenGraph_Image&>(::common::v1::_OpenGraph_Image_default_instance_);
}
inline const ::common::v1::OpenGraph_Image& OpenGraph_Primary::image() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Primary.image)
  return _internal_image();
}
inline ::common::v1::OpenGraph_Image* OpenGraph_Primary::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.OpenGraph.Primary.image)
  if (_internal_has_image()) {
    clear_has_data();
    ::common::v1::OpenGraph_Image* temp = data_.image_;
    data_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpenGraph_Primary::unsafe_arena_set_allocated_image(::common::v1::OpenGraph_Image* image) {
  clear_data();
  if (image) {
    set_has_image();
    data_.image_ = image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.OpenGraph.Primary.image)
}
inline ::common::v1::OpenGraph_Image* OpenGraph_Primary::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_data();
    set_has_image();
    data_.image_ = CreateMaybeMessage< ::common::v1::OpenGraph_Image >(GetArenaForAllocation());
  }
  return data_.image_;
}
inline ::common::v1::OpenGraph_Image* OpenGraph_Primary::mutable_image() {
  ::common::v1::OpenGraph_Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Primary.image)
  return _msg;
}

// .common.v1.OpenGraph.Video video = 3 [json_name = "video"];
inline bool OpenGraph_Primary::_internal_has_video() const {
  return data_case() == kVideo;
}
inline bool OpenGraph_Primary::has_video() const {
  return _internal_has_video();
}
inline void OpenGraph_Primary::set_has_video() {
  _oneof_case_[0] = kVideo;
}
inline void OpenGraph_Primary::clear_video() {
  if (_internal_has_video()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.video_;
    }
    clear_has_data();
  }
}
inline ::common::v1::OpenGraph_Video* OpenGraph_Primary::release_video() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Primary.video)
  if (_internal_has_video()) {
    clear_has_data();
      ::common::v1::OpenGraph_Video* temp = data_.video_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.video_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::OpenGraph_Video& OpenGraph_Primary::_internal_video() const {
  return _internal_has_video()
      ? *data_.video_
      : reinterpret_cast< ::common::v1::OpenGraph_Video&>(::common::v1::_OpenGraph_Video_default_instance_);
}
inline const ::common::v1::OpenGraph_Video& OpenGraph_Primary::video() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Primary.video)
  return _internal_video();
}
inline ::common::v1::OpenGraph_Video* OpenGraph_Primary::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.OpenGraph.Primary.video)
  if (_internal_has_video()) {
    clear_has_data();
    ::common::v1::OpenGraph_Video* temp = data_.video_;
    data_.video_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpenGraph_Primary::unsafe_arena_set_allocated_video(::common::v1::OpenGraph_Video* video) {
  clear_data();
  if (video) {
    set_has_video();
    data_.video_ = video;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.OpenGraph.Primary.video)
}
inline ::common::v1::OpenGraph_Video* OpenGraph_Primary::_internal_mutable_video() {
  if (!_internal_has_video()) {
    clear_data();
    set_has_video();
    data_.video_ = CreateMaybeMessage< ::common::v1::OpenGraph_Video >(GetArenaForAllocation());
  }
  return data_.video_;
}
inline ::common::v1::OpenGraph_Video* OpenGraph_Primary::mutable_video() {
  ::common::v1::OpenGraph_Video* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Primary.video)
  return _msg;
}

// .common.v1.OpenGraph.Audio audio = 4 [json_name = "audio"];
inline bool OpenGraph_Primary::_internal_has_audio() const {
  return data_case() == kAudio;
}
inline bool OpenGraph_Primary::has_audio() const {
  return _internal_has_audio();
}
inline void OpenGraph_Primary::set_has_audio() {
  _oneof_case_[0] = kAudio;
}
inline void OpenGraph_Primary::clear_audio() {
  if (_internal_has_audio()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.audio_;
    }
    clear_has_data();
  }
}
inline ::common::v1::OpenGraph_Audio* OpenGraph_Primary::release_audio() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Primary.audio)
  if (_internal_has_audio()) {
    clear_has_data();
      ::common::v1::OpenGraph_Audio* temp = data_.audio_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.audio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::OpenGraph_Audio& OpenGraph_Primary::_internal_audio() const {
  return _internal_has_audio()
      ? *data_.audio_
      : reinterpret_cast< ::common::v1::OpenGraph_Audio&>(::common::v1::_OpenGraph_Audio_default_instance_);
}
inline const ::common::v1::OpenGraph_Audio& OpenGraph_Primary::audio() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Primary.audio)
  return _internal_audio();
}
inline ::common::v1::OpenGraph_Audio* OpenGraph_Primary::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.OpenGraph.Primary.audio)
  if (_internal_has_audio()) {
    clear_has_data();
    ::common::v1::OpenGraph_Audio* temp = data_.audio_;
    data_.audio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpenGraph_Primary::unsafe_arena_set_allocated_audio(::common::v1::OpenGraph_Audio* audio) {
  clear_data();
  if (audio) {
    set_has_audio();
    data_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.OpenGraph.Primary.audio)
}
inline ::common::v1::OpenGraph_Audio* OpenGraph_Primary::_internal_mutable_audio() {
  if (!_internal_has_audio()) {
    clear_data();
    set_has_audio();
    data_.audio_ = CreateMaybeMessage< ::common::v1::OpenGraph_Audio >(GetArenaForAllocation());
  }
  return data_.audio_;
}
inline ::common::v1::OpenGraph_Audio* OpenGraph_Primary::mutable_audio() {
  ::common::v1::OpenGraph_Audio* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Primary.audio)
  return _msg;
}

// .common.v1.OpenGraph.Twitter twitter = 5 [json_name = "twitter"];
inline bool OpenGraph_Primary::_internal_has_twitter() const {
  return data_case() == kTwitter;
}
inline bool OpenGraph_Primary::has_twitter() const {
  return _internal_has_twitter();
}
inline void OpenGraph_Primary::set_has_twitter() {
  _oneof_case_[0] = kTwitter;
}
inline void OpenGraph_Primary::clear_twitter() {
  if (_internal_has_twitter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.twitter_;
    }
    clear_has_data();
  }
}
inline ::common::v1::OpenGraph_Twitter* OpenGraph_Primary::release_twitter() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Primary.twitter)
  if (_internal_has_twitter()) {
    clear_has_data();
      ::common::v1::OpenGraph_Twitter* temp = data_.twitter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.twitter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::OpenGraph_Twitter& OpenGraph_Primary::_internal_twitter() const {
  return _internal_has_twitter()
      ? *data_.twitter_
      : reinterpret_cast< ::common::v1::OpenGraph_Twitter&>(::common::v1::_OpenGraph_Twitter_default_instance_);
}
inline const ::common::v1::OpenGraph_Twitter& OpenGraph_Primary::twitter() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Primary.twitter)
  return _internal_twitter();
}
inline ::common::v1::OpenGraph_Twitter* OpenGraph_Primary::unsafe_arena_release_twitter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.OpenGraph.Primary.twitter)
  if (_internal_has_twitter()) {
    clear_has_data();
    ::common::v1::OpenGraph_Twitter* temp = data_.twitter_;
    data_.twitter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpenGraph_Primary::unsafe_arena_set_allocated_twitter(::common::v1::OpenGraph_Twitter* twitter) {
  clear_data();
  if (twitter) {
    set_has_twitter();
    data_.twitter_ = twitter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.OpenGraph.Primary.twitter)
}
inline ::common::v1::OpenGraph_Twitter* OpenGraph_Primary::_internal_mutable_twitter() {
  if (!_internal_has_twitter()) {
    clear_data();
    set_has_twitter();
    data_.twitter_ = CreateMaybeMessage< ::common::v1::OpenGraph_Twitter >(GetArenaForAllocation());
  }
  return data_.twitter_;
}
inline ::common::v1::OpenGraph_Twitter* OpenGraph_Primary::mutable_twitter() {
  ::common::v1::OpenGraph_Twitter* _msg = _internal_mutable_twitter();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Primary.twitter)
  return _msg;
}

inline bool OpenGraph_Primary::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void OpenGraph_Primary::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline OpenGraph_Primary::DataCase OpenGraph_Primary::data_case() const {
  return OpenGraph_Primary::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OpenGraph_Image

// string url = 1 [json_name = "url"];
inline void OpenGraph_Image::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Image::url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Image.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Image::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Image.url)
}
inline std::string* OpenGraph_Image::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Image.url)
  return _s;
}
inline const std::string& OpenGraph_Image::_internal_url() const {
  return url_.Get();
}
inline void OpenGraph_Image::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Image::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Image::release_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Image.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Image::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Image.url)
}

// string secure_url = 2 [json_name = "secureUrl"];
inline void OpenGraph_Image::clear_secure_url() {
  secure_url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Image::secure_url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Image.secure_url)
  return _internal_secure_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Image::set_secure_url(ArgT0&& arg0, ArgT... args) {
 
 secure_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Image.secure_url)
}
inline std::string* OpenGraph_Image::mutable_secure_url() {
  std::string* _s = _internal_mutable_secure_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Image.secure_url)
  return _s;
}
inline const std::string& OpenGraph_Image::_internal_secure_url() const {
  return secure_url_.Get();
}
inline void OpenGraph_Image::_internal_set_secure_url(const std::string& value) {
  
  secure_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Image::_internal_mutable_secure_url() {
  
  return secure_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Image::release_secure_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Image.secure_url)
  return secure_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Image::set_allocated_secure_url(std::string* secure_url) {
  if (secure_url != nullptr) {
    
  } else {
    
  }
  secure_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secure_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secure_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secure_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Image.secure_url)
}

// int32 width = 3 [json_name = "width"];
inline void OpenGraph_Image::clear_width() {
  width_ = 0;
}
inline int32_t OpenGraph_Image::_internal_width() const {
  return width_;
}
inline int32_t OpenGraph_Image::width() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Image.width)
  return _internal_width();
}
inline void OpenGraph_Image::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void OpenGraph_Image::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Image.width)
}

// int32 height = 4 [json_name = "height"];
inline void OpenGraph_Image::clear_height() {
  height_ = 0;
}
inline int32_t OpenGraph_Image::_internal_height() const {
  return height_;
}
inline int32_t OpenGraph_Image::height() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Image.height)
  return _internal_height();
}
inline void OpenGraph_Image::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void OpenGraph_Image::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Image.height)
}

// string type = 5 [json_name = "type"];
inline void OpenGraph_Image::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& OpenGraph_Image::type() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Image.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Image::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Image.type)
}
inline std::string* OpenGraph_Image::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Image.type)
  return _s;
}
inline const std::string& OpenGraph_Image::_internal_type() const {
  return type_.Get();
}
inline void OpenGraph_Image::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Image::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Image::release_type() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Image.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Image::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Image.type)
}

// -------------------------------------------------------------------

// OpenGraph_Video

// string url = 1 [json_name = "url"];
inline void OpenGraph_Video::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Video::url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Video.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Video::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Video.url)
}
inline std::string* OpenGraph_Video::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Video.url)
  return _s;
}
inline const std::string& OpenGraph_Video::_internal_url() const {
  return url_.Get();
}
inline void OpenGraph_Video::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Video::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Video::release_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Video.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Video::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Video.url)
}

// string secure_url = 2 [json_name = "secureUrl"];
inline void OpenGraph_Video::clear_secure_url() {
  secure_url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Video::secure_url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Video.secure_url)
  return _internal_secure_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Video::set_secure_url(ArgT0&& arg0, ArgT... args) {
 
 secure_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Video.secure_url)
}
inline std::string* OpenGraph_Video::mutable_secure_url() {
  std::string* _s = _internal_mutable_secure_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Video.secure_url)
  return _s;
}
inline const std::string& OpenGraph_Video::_internal_secure_url() const {
  return secure_url_.Get();
}
inline void OpenGraph_Video::_internal_set_secure_url(const std::string& value) {
  
  secure_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Video::_internal_mutable_secure_url() {
  
  return secure_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Video::release_secure_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Video.secure_url)
  return secure_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Video::set_allocated_secure_url(std::string* secure_url) {
  if (secure_url != nullptr) {
    
  } else {
    
  }
  secure_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secure_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secure_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secure_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Video.secure_url)
}

// int32 width = 3 [json_name = "width"];
inline void OpenGraph_Video::clear_width() {
  width_ = 0;
}
inline int32_t OpenGraph_Video::_internal_width() const {
  return width_;
}
inline int32_t OpenGraph_Video::width() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Video.width)
  return _internal_width();
}
inline void OpenGraph_Video::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void OpenGraph_Video::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Video.width)
}

// int32 height = 4 [json_name = "height"];
inline void OpenGraph_Video::clear_height() {
  height_ = 0;
}
inline int32_t OpenGraph_Video::_internal_height() const {
  return height_;
}
inline int32_t OpenGraph_Video::height() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Video.height)
  return _internal_height();
}
inline void OpenGraph_Video::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void OpenGraph_Video::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Video.height)
}

// string type = 5 [json_name = "type"];
inline void OpenGraph_Video::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& OpenGraph_Video::type() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Video.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Video::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Video.type)
}
inline std::string* OpenGraph_Video::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Video.type)
  return _s;
}
inline const std::string& OpenGraph_Video::_internal_type() const {
  return type_.Get();
}
inline void OpenGraph_Video::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Video::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Video::release_type() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Video.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Video::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Video.type)
}

// -------------------------------------------------------------------

// OpenGraph_Audio

// string url = 1 [json_name = "url"];
inline void OpenGraph_Audio::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Audio::url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Audio.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Audio::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Audio.url)
}
inline std::string* OpenGraph_Audio::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Audio.url)
  return _s;
}
inline const std::string& OpenGraph_Audio::_internal_url() const {
  return url_.Get();
}
inline void OpenGraph_Audio::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Audio::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Audio::release_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Audio.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Audio::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Audio.url)
}

// string secure_url = 2 [json_name = "secureUrl"];
inline void OpenGraph_Audio::clear_secure_url() {
  secure_url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Audio::secure_url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Audio.secure_url)
  return _internal_secure_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Audio::set_secure_url(ArgT0&& arg0, ArgT... args) {
 
 secure_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Audio.secure_url)
}
inline std::string* OpenGraph_Audio::mutable_secure_url() {
  std::string* _s = _internal_mutable_secure_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Audio.secure_url)
  return _s;
}
inline const std::string& OpenGraph_Audio::_internal_secure_url() const {
  return secure_url_.Get();
}
inline void OpenGraph_Audio::_internal_set_secure_url(const std::string& value) {
  
  secure_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Audio::_internal_mutable_secure_url() {
  
  return secure_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Audio::release_secure_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Audio.secure_url)
  return secure_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Audio::set_allocated_secure_url(std::string* secure_url) {
  if (secure_url != nullptr) {
    
  } else {
    
  }
  secure_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secure_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secure_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secure_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Audio.secure_url)
}

// string type = 3 [json_name = "type"];
inline void OpenGraph_Audio::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& OpenGraph_Audio::type() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Audio.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Audio::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Audio.type)
}
inline std::string* OpenGraph_Audio::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Audio.type)
  return _s;
}
inline const std::string& OpenGraph_Audio::_internal_type() const {
  return type_.Get();
}
inline void OpenGraph_Audio::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Audio::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Audio::release_type() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Audio.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Audio::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Audio.type)
}

// -------------------------------------------------------------------

// OpenGraph_Twitter_Player

// string url = 1 [json_name = "url"];
inline void OpenGraph_Twitter_Player::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_Player::url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.Player.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_Player::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.Player.url)
}
inline std::string* OpenGraph_Twitter_Player::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.Player.url)
  return _s;
}
inline const std::string& OpenGraph_Twitter_Player::_internal_url() const {
  return url_.Get();
}
inline void OpenGraph_Twitter_Player::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_Player::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_Player::release_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.Player.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_Player::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.Player.url)
}

// int32 width = 2 [json_name = "width"];
inline void OpenGraph_Twitter_Player::clear_width() {
  width_ = 0;
}
inline int32_t OpenGraph_Twitter_Player::_internal_width() const {
  return width_;
}
inline int32_t OpenGraph_Twitter_Player::width() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.Player.width)
  return _internal_width();
}
inline void OpenGraph_Twitter_Player::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void OpenGraph_Twitter_Player::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.Player.width)
}

// int32 height = 3 [json_name = "height"];
inline void OpenGraph_Twitter_Player::clear_height() {
  height_ = 0;
}
inline int32_t OpenGraph_Twitter_Player::_internal_height() const {
  return height_;
}
inline int32_t OpenGraph_Twitter_Player::height() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.Player.height)
  return _internal_height();
}
inline void OpenGraph_Twitter_Player::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void OpenGraph_Twitter_Player::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.Player.height)
}

// string stream = 4 [json_name = "stream"];
inline void OpenGraph_Twitter_Player::clear_stream() {
  stream_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_Player::stream() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.Player.stream)
  return _internal_stream();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_Player::set_stream(ArgT0&& arg0, ArgT... args) {
 
 stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.Player.stream)
}
inline std::string* OpenGraph_Twitter_Player::mutable_stream() {
  std::string* _s = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.Player.stream)
  return _s;
}
inline const std::string& OpenGraph_Twitter_Player::_internal_stream() const {
  return stream_.Get();
}
inline void OpenGraph_Twitter_Player::_internal_set_stream(const std::string& value) {
  
  stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_Player::_internal_mutable_stream() {
  
  return stream_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_Player::release_stream() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.Player.stream)
  return stream_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_Player::set_allocated_stream(std::string* stream) {
  if (stream != nullptr) {
    
  } else {
    
  }
  stream_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stream_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.Player.stream)
}

// -------------------------------------------------------------------

// OpenGraph_Twitter_IPhone

// string name = 1 [json_name = "name"];
inline void OpenGraph_Twitter_IPhone::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_IPhone::name() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.IPhone.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_IPhone::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.IPhone.name)
}
inline std::string* OpenGraph_Twitter_IPhone::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.IPhone.name)
  return _s;
}
inline const std::string& OpenGraph_Twitter_IPhone::_internal_name() const {
  return name_.Get();
}
inline void OpenGraph_Twitter_IPhone::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPhone::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPhone::release_name() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.IPhone.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_IPhone::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.IPhone.name)
}

// string id = 2 [json_name = "id"];
inline void OpenGraph_Twitter_IPhone::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_IPhone::id() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.IPhone.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_IPhone::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.IPhone.id)
}
inline std::string* OpenGraph_Twitter_IPhone::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.IPhone.id)
  return _s;
}
inline const std::string& OpenGraph_Twitter_IPhone::_internal_id() const {
  return id_.Get();
}
inline void OpenGraph_Twitter_IPhone::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPhone::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPhone::release_id() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.IPhone.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_IPhone::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.IPhone.id)
}

// string url = 3 [json_name = "url"];
inline void OpenGraph_Twitter_IPhone::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_IPhone::url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.IPhone.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_IPhone::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.IPhone.url)
}
inline std::string* OpenGraph_Twitter_IPhone::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.IPhone.url)
  return _s;
}
inline const std::string& OpenGraph_Twitter_IPhone::_internal_url() const {
  return url_.Get();
}
inline void OpenGraph_Twitter_IPhone::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPhone::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPhone::release_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.IPhone.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_IPhone::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.IPhone.url)
}

// -------------------------------------------------------------------

// OpenGraph_Twitter_IPad

// string name = 1 [json_name = "name"];
inline void OpenGraph_Twitter_IPad::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_IPad::name() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.IPad.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_IPad::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.IPad.name)
}
inline std::string* OpenGraph_Twitter_IPad::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.IPad.name)
  return _s;
}
inline const std::string& OpenGraph_Twitter_IPad::_internal_name() const {
  return name_.Get();
}
inline void OpenGraph_Twitter_IPad::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPad::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPad::release_name() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.IPad.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_IPad::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.IPad.name)
}

// string id = 2 [json_name = "id"];
inline void OpenGraph_Twitter_IPad::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_IPad::id() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.IPad.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_IPad::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.IPad.id)
}
inline std::string* OpenGraph_Twitter_IPad::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.IPad.id)
  return _s;
}
inline const std::string& OpenGraph_Twitter_IPad::_internal_id() const {
  return id_.Get();
}
inline void OpenGraph_Twitter_IPad::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPad::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPad::release_id() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.IPad.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_IPad::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.IPad.id)
}

// string url = 3 [json_name = "url"];
inline void OpenGraph_Twitter_IPad::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_IPad::url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.IPad.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_IPad::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.IPad.url)
}
inline std::string* OpenGraph_Twitter_IPad::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.IPad.url)
  return _s;
}
inline const std::string& OpenGraph_Twitter_IPad::_internal_url() const {
  return url_.Get();
}
inline void OpenGraph_Twitter_IPad::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPad::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_IPad::release_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.IPad.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_IPad::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.IPad.url)
}

// -------------------------------------------------------------------

// OpenGraph_Twitter_GooglePlay

// string name = 1 [json_name = "name"];
inline void OpenGraph_Twitter_GooglePlay::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_GooglePlay::name() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.GooglePlay.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_GooglePlay::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.GooglePlay.name)
}
inline std::string* OpenGraph_Twitter_GooglePlay::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.GooglePlay.name)
  return _s;
}
inline const std::string& OpenGraph_Twitter_GooglePlay::_internal_name() const {
  return name_.Get();
}
inline void OpenGraph_Twitter_GooglePlay::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_GooglePlay::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_GooglePlay::release_name() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.GooglePlay.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_GooglePlay::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.GooglePlay.name)
}

// string id = 2 [json_name = "id"];
inline void OpenGraph_Twitter_GooglePlay::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_GooglePlay::id() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.GooglePlay.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_GooglePlay::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.GooglePlay.id)
}
inline std::string* OpenGraph_Twitter_GooglePlay::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.GooglePlay.id)
  return _s;
}
inline const std::string& OpenGraph_Twitter_GooglePlay::_internal_id() const {
  return id_.Get();
}
inline void OpenGraph_Twitter_GooglePlay::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_GooglePlay::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_GooglePlay::release_id() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.GooglePlay.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_GooglePlay::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.GooglePlay.id)
}

// string url = 3 [json_name = "url"];
inline void OpenGraph_Twitter_GooglePlay::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter_GooglePlay::url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.GooglePlay.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter_GooglePlay::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.GooglePlay.url)
}
inline std::string* OpenGraph_Twitter_GooglePlay::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.GooglePlay.url)
  return _s;
}
inline const std::string& OpenGraph_Twitter_GooglePlay::_internal_url() const {
  return url_.Get();
}
inline void OpenGraph_Twitter_GooglePlay::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_GooglePlay::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter_GooglePlay::release_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.GooglePlay.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter_GooglePlay::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.GooglePlay.url)
}

// -------------------------------------------------------------------

// OpenGraph_Twitter

// string card = 1 [json_name = "card"];
inline void OpenGraph_Twitter::clear_card() {
  card_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter::card() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.card)
  return _internal_card();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter::set_card(ArgT0&& arg0, ArgT... args) {
 
 card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.card)
}
inline std::string* OpenGraph_Twitter::mutable_card() {
  std::string* _s = _internal_mutable_card();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.card)
  return _s;
}
inline const std::string& OpenGraph_Twitter::_internal_card() const {
  return card_.Get();
}
inline void OpenGraph_Twitter::_internal_set_card(const std::string& value) {
  
  card_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::_internal_mutable_card() {
  
  return card_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::release_card() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.card)
  return card_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter::set_allocated_card(std::string* card) {
  if (card != nullptr) {
    
  } else {
    
  }
  card_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (card_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    card_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.card)
}

// string site = 2 [json_name = "site"];
inline void OpenGraph_Twitter::clear_site() {
  site_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter::site() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.site)
  return _internal_site();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter::set_site(ArgT0&& arg0, ArgT... args) {
 
 site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.site)
}
inline std::string* OpenGraph_Twitter::mutable_site() {
  std::string* _s = _internal_mutable_site();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.site)
  return _s;
}
inline const std::string& OpenGraph_Twitter::_internal_site() const {
  return site_.Get();
}
inline void OpenGraph_Twitter::_internal_set_site(const std::string& value) {
  
  site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::_internal_mutable_site() {
  
  return site_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::release_site() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.site)
  return site_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter::set_allocated_site(std::string* site) {
  if (site != nullptr) {
    
  } else {
    
  }
  site_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (site_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    site_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.site)
}

// string site_id = 3 [json_name = "siteId"];
inline void OpenGraph_Twitter::clear_site_id() {
  site_id_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter::site_id() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.site_id)
  return _internal_site_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter::set_site_id(ArgT0&& arg0, ArgT... args) {
 
 site_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.site_id)
}
inline std::string* OpenGraph_Twitter::mutable_site_id() {
  std::string* _s = _internal_mutable_site_id();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.site_id)
  return _s;
}
inline const std::string& OpenGraph_Twitter::_internal_site_id() const {
  return site_id_.Get();
}
inline void OpenGraph_Twitter::_internal_set_site_id(const std::string& value) {
  
  site_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::_internal_mutable_site_id() {
  
  return site_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::release_site_id() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.site_id)
  return site_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter::set_allocated_site_id(std::string* site_id) {
  if (site_id != nullptr) {
    
  } else {
    
  }
  site_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (site_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.site_id)
}

// string creator = 4 [json_name = "creator"];
inline void OpenGraph_Twitter::clear_creator() {
  creator_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter::creator() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter::set_creator(ArgT0&& arg0, ArgT... args) {
 
 creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.creator)
}
inline std::string* OpenGraph_Twitter::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.creator)
  return _s;
}
inline const std::string& OpenGraph_Twitter::_internal_creator() const {
  return creator_.Get();
}
inline void OpenGraph_Twitter::_internal_set_creator(const std::string& value) {
  
  creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::_internal_mutable_creator() {
  
  return creator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::release_creator() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.creator)
  return creator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  creator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creator_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.creator)
}

// string creator_id = 5 [json_name = "creatorId"];
inline void OpenGraph_Twitter::clear_creator_id() {
  creator_id_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter::creator_id() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.creator_id)
  return _internal_creator_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter::set_creator_id(ArgT0&& arg0, ArgT... args) {
 
 creator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.creator_id)
}
inline std::string* OpenGraph_Twitter::mutable_creator_id() {
  std::string* _s = _internal_mutable_creator_id();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.creator_id)
  return _s;
}
inline const std::string& OpenGraph_Twitter::_internal_creator_id() const {
  return creator_id_.Get();
}
inline void OpenGraph_Twitter::_internal_set_creator_id(const std::string& value) {
  
  creator_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::_internal_mutable_creator_id() {
  
  return creator_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::release_creator_id() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.creator_id)
  return creator_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter::set_allocated_creator_id(std::string* creator_id) {
  if (creator_id != nullptr) {
    
  } else {
    
  }
  creator_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creator_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    creator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.creator_id)
}

// string description = 6 [json_name = "description"];
inline void OpenGraph_Twitter::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter::description() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.description)
}
inline std::string* OpenGraph_Twitter::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.description)
  return _s;
}
inline const std::string& OpenGraph_Twitter::_internal_description() const {
  return description_.Get();
}
inline void OpenGraph_Twitter::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::release_description() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.description)
}

// string title = 7 [json_name = "title"];
inline void OpenGraph_Twitter::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter::title() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.title)
}
inline std::string* OpenGraph_Twitter::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.title)
  return _s;
}
inline const std::string& OpenGraph_Twitter::_internal_title() const {
  return title_.Get();
}
inline void OpenGraph_Twitter::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::release_title() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.title)
}

// string image = 8 [json_name = "image"];
inline void OpenGraph_Twitter::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter::image() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.image)
}
inline std::string* OpenGraph_Twitter::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.image)
  return _s;
}
inline const std::string& OpenGraph_Twitter::_internal_image() const {
  return image_.Get();
}
inline void OpenGraph_Twitter::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::release_image() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.image)
}

// string image_alt = 9 [json_name = "imageAlt"];
inline void OpenGraph_Twitter::clear_image_alt() {
  image_alt_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter::image_alt() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.image_alt)
  return _internal_image_alt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter::set_image_alt(ArgT0&& arg0, ArgT... args) {
 
 image_alt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.image_alt)
}
inline std::string* OpenGraph_Twitter::mutable_image_alt() {
  std::string* _s = _internal_mutable_image_alt();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.image_alt)
  return _s;
}
inline const std::string& OpenGraph_Twitter::_internal_image_alt() const {
  return image_alt_.Get();
}
inline void OpenGraph_Twitter::_internal_set_image_alt(const std::string& value) {
  
  image_alt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::_internal_mutable_image_alt() {
  
  return image_alt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::release_image_alt() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.image_alt)
  return image_alt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter::set_allocated_image_alt(std::string* image_alt) {
  if (image_alt != nullptr) {
    
  } else {
    
  }
  image_alt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_alt,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_alt_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    image_alt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.image_alt)
}

// string url = 10 [json_name = "url"];
inline void OpenGraph_Twitter::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& OpenGraph_Twitter::url() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenGraph_Twitter::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.OpenGraph.Twitter.url)
}
inline std::string* OpenGraph_Twitter::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.url)
  return _s;
}
inline const std::string& OpenGraph_Twitter::_internal_url() const {
  return url_.Get();
}
inline void OpenGraph_Twitter::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenGraph_Twitter::release_url() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenGraph_Twitter::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.url)
}

// .common.v1.OpenGraph.Twitter.Player player = 11 [json_name = "player"];
inline bool OpenGraph_Twitter::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool OpenGraph_Twitter::has_player() const {
  return _internal_has_player();
}
inline void OpenGraph_Twitter::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::common::v1::OpenGraph_Twitter_Player& OpenGraph_Twitter::_internal_player() const {
  const ::common::v1::OpenGraph_Twitter_Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::OpenGraph_Twitter_Player&>(
      ::common::v1::_OpenGraph_Twitter_Player_default_instance_);
}
inline const ::common::v1::OpenGraph_Twitter_Player& OpenGraph_Twitter::player() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.player)
  return _internal_player();
}
inline void OpenGraph_Twitter::unsafe_arena_set_allocated_player(
    ::common::v1::OpenGraph_Twitter_Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.OpenGraph.Twitter.player)
}
inline ::common::v1::OpenGraph_Twitter_Player* OpenGraph_Twitter::release_player() {
  
  ::common::v1::OpenGraph_Twitter_Player* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::OpenGraph_Twitter_Player* OpenGraph_Twitter::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.player)
  
  ::common::v1::OpenGraph_Twitter_Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::common::v1::OpenGraph_Twitter_Player* OpenGraph_Twitter::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::OpenGraph_Twitter_Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::common::v1::OpenGraph_Twitter_Player* OpenGraph_Twitter::mutable_player() {
  ::common::v1::OpenGraph_Twitter_Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.player)
  return _msg;
}
inline void OpenGraph_Twitter::set_allocated_player(::common::v1::OpenGraph_Twitter_Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::OpenGraph_Twitter_Player>::GetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.player)
}

// .common.v1.OpenGraph.Twitter.IPhone iphone = 12 [json_name = "iphone"];
inline bool OpenGraph_Twitter::_internal_has_iphone() const {
  return this != internal_default_instance() && iphone_ != nullptr;
}
inline bool OpenGraph_Twitter::has_iphone() const {
  return _internal_has_iphone();
}
inline void OpenGraph_Twitter::clear_iphone() {
  if (GetArenaForAllocation() == nullptr && iphone_ != nullptr) {
    delete iphone_;
  }
  iphone_ = nullptr;
}
inline const ::common::v1::OpenGraph_Twitter_IPhone& OpenGraph_Twitter::_internal_iphone() const {
  const ::common::v1::OpenGraph_Twitter_IPhone* p = iphone_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::OpenGraph_Twitter_IPhone&>(
      ::common::v1::_OpenGraph_Twitter_IPhone_default_instance_);
}
inline const ::common::v1::OpenGraph_Twitter_IPhone& OpenGraph_Twitter::iphone() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.iphone)
  return _internal_iphone();
}
inline void OpenGraph_Twitter::unsafe_arena_set_allocated_iphone(
    ::common::v1::OpenGraph_Twitter_IPhone* iphone) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iphone_);
  }
  iphone_ = iphone;
  if (iphone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.OpenGraph.Twitter.iphone)
}
inline ::common::v1::OpenGraph_Twitter_IPhone* OpenGraph_Twitter::release_iphone() {
  
  ::common::v1::OpenGraph_Twitter_IPhone* temp = iphone_;
  iphone_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::OpenGraph_Twitter_IPhone* OpenGraph_Twitter::unsafe_arena_release_iphone() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.iphone)
  
  ::common::v1::OpenGraph_Twitter_IPhone* temp = iphone_;
  iphone_ = nullptr;
  return temp;
}
inline ::common::v1::OpenGraph_Twitter_IPhone* OpenGraph_Twitter::_internal_mutable_iphone() {
  
  if (iphone_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::OpenGraph_Twitter_IPhone>(GetArenaForAllocation());
    iphone_ = p;
  }
  return iphone_;
}
inline ::common::v1::OpenGraph_Twitter_IPhone* OpenGraph_Twitter::mutable_iphone() {
  ::common::v1::OpenGraph_Twitter_IPhone* _msg = _internal_mutable_iphone();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.iphone)
  return _msg;
}
inline void OpenGraph_Twitter::set_allocated_iphone(::common::v1::OpenGraph_Twitter_IPhone* iphone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete iphone_;
  }
  if (iphone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::OpenGraph_Twitter_IPhone>::GetOwningArena(iphone);
    if (message_arena != submessage_arena) {
      iphone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iphone, submessage_arena);
    }
    
  } else {
    
  }
  iphone_ = iphone;
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.iphone)
}

// .common.v1.OpenGraph.Twitter.IPad ipad = 13 [json_name = "ipad"];
inline bool OpenGraph_Twitter::_internal_has_ipad() const {
  return this != internal_default_instance() && ipad_ != nullptr;
}
inline bool OpenGraph_Twitter::has_ipad() const {
  return _internal_has_ipad();
}
inline void OpenGraph_Twitter::clear_ipad() {
  if (GetArenaForAllocation() == nullptr && ipad_ != nullptr) {
    delete ipad_;
  }
  ipad_ = nullptr;
}
inline const ::common::v1::OpenGraph_Twitter_IPad& OpenGraph_Twitter::_internal_ipad() const {
  const ::common::v1::OpenGraph_Twitter_IPad* p = ipad_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::OpenGraph_Twitter_IPad&>(
      ::common::v1::_OpenGraph_Twitter_IPad_default_instance_);
}
inline const ::common::v1::OpenGraph_Twitter_IPad& OpenGraph_Twitter::ipad() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.ipad)
  return _internal_ipad();
}
inline void OpenGraph_Twitter::unsafe_arena_set_allocated_ipad(
    ::common::v1::OpenGraph_Twitter_IPad* ipad) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipad_);
  }
  ipad_ = ipad;
  if (ipad) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.OpenGraph.Twitter.ipad)
}
inline ::common::v1::OpenGraph_Twitter_IPad* OpenGraph_Twitter::release_ipad() {
  
  ::common::v1::OpenGraph_Twitter_IPad* temp = ipad_;
  ipad_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::OpenGraph_Twitter_IPad* OpenGraph_Twitter::unsafe_arena_release_ipad() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.ipad)
  
  ::common::v1::OpenGraph_Twitter_IPad* temp = ipad_;
  ipad_ = nullptr;
  return temp;
}
inline ::common::v1::OpenGraph_Twitter_IPad* OpenGraph_Twitter::_internal_mutable_ipad() {
  
  if (ipad_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::OpenGraph_Twitter_IPad>(GetArenaForAllocation());
    ipad_ = p;
  }
  return ipad_;
}
inline ::common::v1::OpenGraph_Twitter_IPad* OpenGraph_Twitter::mutable_ipad() {
  ::common::v1::OpenGraph_Twitter_IPad* _msg = _internal_mutable_ipad();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.ipad)
  return _msg;
}
inline void OpenGraph_Twitter::set_allocated_ipad(::common::v1::OpenGraph_Twitter_IPad* ipad) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ipad_;
  }
  if (ipad) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::OpenGraph_Twitter_IPad>::GetOwningArena(ipad);
    if (message_arena != submessage_arena) {
      ipad = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipad, submessage_arena);
    }
    
  } else {
    
  }
  ipad_ = ipad;
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.ipad)
}

// .common.v1.OpenGraph.Twitter.GooglePlay google_play = 14 [json_name = "googlePlay"];
inline bool OpenGraph_Twitter::_internal_has_google_play() const {
  return this != internal_default_instance() && google_play_ != nullptr;
}
inline bool OpenGraph_Twitter::has_google_play() const {
  return _internal_has_google_play();
}
inline void OpenGraph_Twitter::clear_google_play() {
  if (GetArenaForAllocation() == nullptr && google_play_ != nullptr) {
    delete google_play_;
  }
  google_play_ = nullptr;
}
inline const ::common::v1::OpenGraph_Twitter_GooglePlay& OpenGraph_Twitter::_internal_google_play() const {
  const ::common::v1::OpenGraph_Twitter_GooglePlay* p = google_play_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::OpenGraph_Twitter_GooglePlay&>(
      ::common::v1::_OpenGraph_Twitter_GooglePlay_default_instance_);
}
inline const ::common::v1::OpenGraph_Twitter_GooglePlay& OpenGraph_Twitter::google_play() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.Twitter.google_play)
  return _internal_google_play();
}
inline void OpenGraph_Twitter::unsafe_arena_set_allocated_google_play(
    ::common::v1::OpenGraph_Twitter_GooglePlay* google_play) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(google_play_);
  }
  google_play_ = google_play;
  if (google_play) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.OpenGraph.Twitter.google_play)
}
inline ::common::v1::OpenGraph_Twitter_GooglePlay* OpenGraph_Twitter::release_google_play() {
  
  ::common::v1::OpenGraph_Twitter_GooglePlay* temp = google_play_;
  google_play_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::OpenGraph_Twitter_GooglePlay* OpenGraph_Twitter::unsafe_arena_release_google_play() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.Twitter.google_play)
  
  ::common::v1::OpenGraph_Twitter_GooglePlay* temp = google_play_;
  google_play_ = nullptr;
  return temp;
}
inline ::common::v1::OpenGraph_Twitter_GooglePlay* OpenGraph_Twitter::_internal_mutable_google_play() {
  
  if (google_play_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::OpenGraph_Twitter_GooglePlay>(GetArenaForAllocation());
    google_play_ = p;
  }
  return google_play_;
}
inline ::common::v1::OpenGraph_Twitter_GooglePlay* OpenGraph_Twitter::mutable_google_play() {
  ::common::v1::OpenGraph_Twitter_GooglePlay* _msg = _internal_mutable_google_play();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.Twitter.google_play)
  return _msg;
}
inline void OpenGraph_Twitter::set_allocated_google_play(::common::v1::OpenGraph_Twitter_GooglePlay* google_play) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete google_play_;
  }
  if (google_play) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::OpenGraph_Twitter_GooglePlay>::GetOwningArena(google_play);
    if (message_arena != submessage_arena) {
      google_play = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, google_play, submessage_arena);
    }
    
  } else {
    
  }
  google_play_ = google_play;
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.Twitter.google_play)
}

// -------------------------------------------------------------------

// OpenGraph

// .common.v1.OpenGraph.Primary primary = 1 [json_name = "primary"];
inline bool OpenGraph::_internal_has_primary() const {
  return this != internal_default_instance() && primary_ != nullptr;
}
inline bool OpenGraph::has_primary() const {
  return _internal_has_primary();
}
inline void OpenGraph::clear_primary() {
  if (GetArenaForAllocation() == nullptr && primary_ != nullptr) {
    delete primary_;
  }
  primary_ = nullptr;
}
inline const ::common::v1::OpenGraph_Primary& OpenGraph::_internal_primary() const {
  const ::common::v1::OpenGraph_Primary* p = primary_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::OpenGraph_Primary&>(
      ::common::v1::_OpenGraph_Primary_default_instance_);
}
inline const ::common::v1::OpenGraph_Primary& OpenGraph::primary() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.primary)
  return _internal_primary();
}
inline void OpenGraph::unsafe_arena_set_allocated_primary(
    ::common::v1::OpenGraph_Primary* primary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_);
  }
  primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.OpenGraph.primary)
}
inline ::common::v1::OpenGraph_Primary* OpenGraph::release_primary() {
  
  ::common::v1::OpenGraph_Primary* temp = primary_;
  primary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::OpenGraph_Primary* OpenGraph::unsafe_arena_release_primary() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.primary)
  
  ::common::v1::OpenGraph_Primary* temp = primary_;
  primary_ = nullptr;
  return temp;
}
inline ::common::v1::OpenGraph_Primary* OpenGraph::_internal_mutable_primary() {
  
  if (primary_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::OpenGraph_Primary>(GetArenaForAllocation());
    primary_ = p;
  }
  return primary_;
}
inline ::common::v1::OpenGraph_Primary* OpenGraph::mutable_primary() {
  ::common::v1::OpenGraph_Primary* _msg = _internal_mutable_primary();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.primary)
  return _msg;
}
inline void OpenGraph::set_allocated_primary(::common::v1::OpenGraph_Primary* primary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete primary_;
  }
  if (primary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::OpenGraph_Primary>::GetOwningArena(primary);
    if (message_arena != submessage_arena) {
      primary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary, submessage_arena);
    }
    
  } else {
    
  }
  primary_ = primary;
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.primary)
}

// repeated .common.v1.OpenGraph.Image images = 2 [json_name = "images"];
inline int OpenGraph::_internal_images_size() const {
  return images_.size();
}
inline int OpenGraph::images_size() const {
  return _internal_images_size();
}
inline void OpenGraph::clear_images() {
  images_.Clear();
}
inline ::common::v1::OpenGraph_Image* OpenGraph::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Image >*
OpenGraph::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:common.v1.OpenGraph.images)
  return &images_;
}
inline const ::common::v1::OpenGraph_Image& OpenGraph::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::common::v1::OpenGraph_Image& OpenGraph::images(int index) const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.images)
  return _internal_images(index);
}
inline ::common::v1::OpenGraph_Image* OpenGraph::_internal_add_images() {
  return images_.Add();
}
inline ::common::v1::OpenGraph_Image* OpenGraph::add_images() {
  ::common::v1::OpenGraph_Image* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:common.v1.OpenGraph.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Image >&
OpenGraph::images() const {
  // @@protoc_insertion_point(field_list:common.v1.OpenGraph.images)
  return images_;
}

// repeated .common.v1.OpenGraph.Video videos = 3 [json_name = "videos"];
inline int OpenGraph::_internal_videos_size() const {
  return videos_.size();
}
inline int OpenGraph::videos_size() const {
  return _internal_videos_size();
}
inline void OpenGraph::clear_videos() {
  videos_.Clear();
}
inline ::common::v1::OpenGraph_Video* OpenGraph::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.videos)
  return videos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Video >*
OpenGraph::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:common.v1.OpenGraph.videos)
  return &videos_;
}
inline const ::common::v1::OpenGraph_Video& OpenGraph::_internal_videos(int index) const {
  return videos_.Get(index);
}
inline const ::common::v1::OpenGraph_Video& OpenGraph::videos(int index) const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.videos)
  return _internal_videos(index);
}
inline ::common::v1::OpenGraph_Video* OpenGraph::_internal_add_videos() {
  return videos_.Add();
}
inline ::common::v1::OpenGraph_Video* OpenGraph::add_videos() {
  ::common::v1::OpenGraph_Video* _add = _internal_add_videos();
  // @@protoc_insertion_point(field_add:common.v1.OpenGraph.videos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Video >&
OpenGraph::videos() const {
  // @@protoc_insertion_point(field_list:common.v1.OpenGraph.videos)
  return videos_;
}

// repeated .common.v1.OpenGraph.Audio audios = 4 [json_name = "audios"];
inline int OpenGraph::_internal_audios_size() const {
  return audios_.size();
}
inline int OpenGraph::audios_size() const {
  return _internal_audios_size();
}
inline void OpenGraph::clear_audios() {
  audios_.Clear();
}
inline ::common::v1::OpenGraph_Audio* OpenGraph::mutable_audios(int index) {
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.audios)
  return audios_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Audio >*
OpenGraph::mutable_audios() {
  // @@protoc_insertion_point(field_mutable_list:common.v1.OpenGraph.audios)
  return &audios_;
}
inline const ::common::v1::OpenGraph_Audio& OpenGraph::_internal_audios(int index) const {
  return audios_.Get(index);
}
inline const ::common::v1::OpenGraph_Audio& OpenGraph::audios(int index) const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.audios)
  return _internal_audios(index);
}
inline ::common::v1::OpenGraph_Audio* OpenGraph::_internal_add_audios() {
  return audios_.Add();
}
inline ::common::v1::OpenGraph_Audio* OpenGraph::add_audios() {
  ::common::v1::OpenGraph_Audio* _add = _internal_add_audios();
  // @@protoc_insertion_point(field_add:common.v1.OpenGraph.audios)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::OpenGraph_Audio >&
OpenGraph::audios() const {
  // @@protoc_insertion_point(field_list:common.v1.OpenGraph.audios)
  return audios_;
}

// .common.v1.OpenGraph.Twitter twitter = 5 [json_name = "twitter"];
inline bool OpenGraph::_internal_has_twitter() const {
  return this != internal_default_instance() && twitter_ != nullptr;
}
inline bool OpenGraph::has_twitter() const {
  return _internal_has_twitter();
}
inline void OpenGraph::clear_twitter() {
  if (GetArenaForAllocation() == nullptr && twitter_ != nullptr) {
    delete twitter_;
  }
  twitter_ = nullptr;
}
inline const ::common::v1::OpenGraph_Twitter& OpenGraph::_internal_twitter() const {
  const ::common::v1::OpenGraph_Twitter* p = twitter_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::OpenGraph_Twitter&>(
      ::common::v1::_OpenGraph_Twitter_default_instance_);
}
inline const ::common::v1::OpenGraph_Twitter& OpenGraph::twitter() const {
  // @@protoc_insertion_point(field_get:common.v1.OpenGraph.twitter)
  return _internal_twitter();
}
inline void OpenGraph::unsafe_arena_set_allocated_twitter(
    ::common::v1::OpenGraph_Twitter* twitter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twitter_);
  }
  twitter_ = twitter;
  if (twitter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.OpenGraph.twitter)
}
inline ::common::v1::OpenGraph_Twitter* OpenGraph::release_twitter() {
  
  ::common::v1::OpenGraph_Twitter* temp = twitter_;
  twitter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::OpenGraph_Twitter* OpenGraph::unsafe_arena_release_twitter() {
  // @@protoc_insertion_point(field_release:common.v1.OpenGraph.twitter)
  
  ::common::v1::OpenGraph_Twitter* temp = twitter_;
  twitter_ = nullptr;
  return temp;
}
inline ::common::v1::OpenGraph_Twitter* OpenGraph::_internal_mutable_twitter() {
  
  if (twitter_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::OpenGraph_Twitter>(GetArenaForAllocation());
    twitter_ = p;
  }
  return twitter_;
}
inline ::common::v1::OpenGraph_Twitter* OpenGraph::mutable_twitter() {
  ::common::v1::OpenGraph_Twitter* _msg = _internal_mutable_twitter();
  // @@protoc_insertion_point(field_mutable:common.v1.OpenGraph.twitter)
  return _msg;
}
inline void OpenGraph::set_allocated_twitter(::common::v1::OpenGraph_Twitter* twitter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete twitter_;
  }
  if (twitter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::common::v1::OpenGraph_Twitter>::GetOwningArena(twitter);
    if (message_arena != submessage_arena) {
      twitter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twitter, submessage_arena);
    }
    
  } else {
    
  }
  twitter_ = twitter;
  // @@protoc_insertion_point(field_set_allocated:common.v1.OpenGraph.twitter)
}

// -------------------------------------------------------------------

// Thumbnail

// bytes buffer = 1 [json_name = "buffer"];
inline void Thumbnail::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& Thumbnail::buffer() const {
  // @@protoc_insertion_point(field_get:common.v1.Thumbnail.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Thumbnail::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.Thumbnail.buffer)
}
inline std::string* Thumbnail::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:common.v1.Thumbnail.buffer)
  return _s;
}
inline const std::string& Thumbnail::_internal_buffer() const {
  return buffer_.Get();
}
inline void Thumbnail::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Thumbnail::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Thumbnail::release_buffer() {
  // @@protoc_insertion_point(field_release:common.v1.Thumbnail.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Thumbnail::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buffer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.Thumbnail.buffer)
}

// .common.v1.MIME mime = 2 [json_name = "mime"];
inline bool Thumbnail::_internal_has_mime() const {
  return this != internal_default_instance() && mime_ != nullptr;
}
inline bool Thumbnail::has_mime() const {
  return _internal_has_mime();
}
inline const ::common::v1::MIME& Thumbnail::_internal_mime() const {
  const ::common::v1::MIME* p = mime_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::MIME&>(
      ::common::v1::_MIME_default_instance_);
}
inline const ::common::v1::MIME& Thumbnail::mime() const {
  // @@protoc_insertion_point(field_get:common.v1.Thumbnail.mime)
  return _internal_mime();
}
inline void Thumbnail::unsafe_arena_set_allocated_mime(
    ::common::v1::MIME* mime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime_);
  }
  mime_ = mime;
  if (mime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Thumbnail.mime)
}
inline ::common::v1::MIME* Thumbnail::release_mime() {
  
  ::common::v1::MIME* temp = mime_;
  mime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::MIME* Thumbnail::unsafe_arena_release_mime() {
  // @@protoc_insertion_point(field_release:common.v1.Thumbnail.mime)
  
  ::common::v1::MIME* temp = mime_;
  mime_ = nullptr;
  return temp;
}
inline ::common::v1::MIME* Thumbnail::_internal_mutable_mime() {
  
  if (mime_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::MIME>(GetArenaForAllocation());
    mime_ = p;
  }
  return mime_;
}
inline ::common::v1::MIME* Thumbnail::mutable_mime() {
  ::common::v1::MIME* _msg = _internal_mutable_mime();
  // @@protoc_insertion_point(field_mutable:common.v1.Thumbnail.mime)
  return _msg;
}
inline void Thumbnail::set_allocated_mime(::common::v1::MIME* mime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime_);
  }
  if (mime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime));
    if (message_arena != submessage_arena) {
      mime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mime, submessage_arena);
    }
    
  } else {
    
  }
  mime_ = mime;
  // @@protoc_insertion_point(field_set_allocated:common.v1.Thumbnail.mime)
}

// -------------------------------------------------------------------

// Payload_Item

// .common.v1.MIME mime = 1 [json_name = "mime"];
inline bool Payload_Item::_internal_has_mime() const {
  return this != internal_default_instance() && mime_ != nullptr;
}
inline bool Payload_Item::has_mime() const {
  return _internal_has_mime();
}
inline const ::common::v1::MIME& Payload_Item::_internal_mime() const {
  const ::common::v1::MIME* p = mime_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::MIME&>(
      ::common::v1::_MIME_default_instance_);
}
inline const ::common::v1::MIME& Payload_Item::mime() const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.Item.mime)
  return _internal_mime();
}
inline void Payload_Item::unsafe_arena_set_allocated_mime(
    ::common::v1::MIME* mime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime_);
  }
  mime_ = mime;
  if (mime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Payload.Item.mime)
}
inline ::common::v1::MIME* Payload_Item::release_mime() {
  
  ::common::v1::MIME* temp = mime_;
  mime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::MIME* Payload_Item::unsafe_arena_release_mime() {
  // @@protoc_insertion_point(field_release:common.v1.Payload.Item.mime)
  
  ::common::v1::MIME* temp = mime_;
  mime_ = nullptr;
  return temp;
}
inline ::common::v1::MIME* Payload_Item::_internal_mutable_mime() {
  
  if (mime_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::MIME>(GetArenaForAllocation());
    mime_ = p;
  }
  return mime_;
}
inline ::common::v1::MIME* Payload_Item::mutable_mime() {
  ::common::v1::MIME* _msg = _internal_mutable_mime();
  // @@protoc_insertion_point(field_mutable:common.v1.Payload.Item.mime)
  return _msg;
}
inline void Payload_Item::set_allocated_mime(::common::v1::MIME* mime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime_);
  }
  if (mime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mime));
    if (message_arena != submessage_arena) {
      mime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mime, submessage_arena);
    }
    
  } else {
    
  }
  mime_ = mime;
  // @@protoc_insertion_point(field_set_allocated:common.v1.Payload.Item.mime)
}

// int64 size = 2 [json_name = "size"];
inline void Payload_Item::clear_size() {
  size_ = int64_t{0};
}
inline int64_t Payload_Item::_internal_size() const {
  return size_;
}
inline int64_t Payload_Item::size() const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.Item.size)
  return _internal_size();
}
inline void Payload_Item::_internal_set_size(int64_t value) {
  
  size_ = value;
}
inline void Payload_Item::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:common.v1.Payload.Item.size)
}

// .common.v1.FileItem file = 3 [json_name = "file"];
inline bool Payload_Item::_internal_has_file() const {
  return data_case() == kFile;
}
inline bool Payload_Item::has_file() const {
  return _internal_has_file();
}
inline void Payload_Item::set_has_file() {
  _oneof_case_[0] = kFile;
}
inline void Payload_Item::clear_file() {
  if (_internal_has_file()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.file_;
    }
    clear_has_data();
  }
}
inline ::common::v1::FileItem* Payload_Item::release_file() {
  // @@protoc_insertion_point(field_release:common.v1.Payload.Item.file)
  if (_internal_has_file()) {
    clear_has_data();
      ::common::v1::FileItem* temp = data_.file_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::FileItem& Payload_Item::_internal_file() const {
  return _internal_has_file()
      ? *data_.file_
      : reinterpret_cast< ::common::v1::FileItem&>(::common::v1::_FileItem_default_instance_);
}
inline const ::common::v1::FileItem& Payload_Item::file() const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.Item.file)
  return _internal_file();
}
inline ::common::v1::FileItem* Payload_Item::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.Payload.Item.file)
  if (_internal_has_file()) {
    clear_has_data();
    ::common::v1::FileItem* temp = data_.file_;
    data_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_Item::unsafe_arena_set_allocated_file(::common::v1::FileItem* file) {
  clear_data();
  if (file) {
    set_has_file();
    data_.file_ = file;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Payload.Item.file)
}
inline ::common::v1::FileItem* Payload_Item::_internal_mutable_file() {
  if (!_internal_has_file()) {
    clear_data();
    set_has_file();
    data_.file_ = CreateMaybeMessage< ::common::v1::FileItem >(GetArenaForAllocation());
  }
  return data_.file_;
}
inline ::common::v1::FileItem* Payload_Item::mutable_file() {
  ::common::v1::FileItem* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:common.v1.Payload.Item.file)
  return _msg;
}

// .common.v1.UrlItem url = 4 [json_name = "url"];
inline bool Payload_Item::_internal_has_url() const {
  return data_case() == kUrl;
}
inline bool Payload_Item::has_url() const {
  return _internal_has_url();
}
inline void Payload_Item::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void Payload_Item::clear_url() {
  if (_internal_has_url()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.url_;
    }
    clear_has_data();
  }
}
inline ::common::v1::UrlItem* Payload_Item::release_url() {
  // @@protoc_insertion_point(field_release:common.v1.Payload.Item.url)
  if (_internal_has_url()) {
    clear_has_data();
      ::common::v1::UrlItem* temp = data_.url_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.url_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::UrlItem& Payload_Item::_internal_url() const {
  return _internal_has_url()
      ? *data_.url_
      : reinterpret_cast< ::common::v1::UrlItem&>(::common::v1::_UrlItem_default_instance_);
}
inline const ::common::v1::UrlItem& Payload_Item::url() const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.Item.url)
  return _internal_url();
}
inline ::common::v1::UrlItem* Payload_Item::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.Payload.Item.url)
  if (_internal_has_url()) {
    clear_has_data();
    ::common::v1::UrlItem* temp = data_.url_;
    data_.url_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_Item::unsafe_arena_set_allocated_url(::common::v1::UrlItem* url) {
  clear_data();
  if (url) {
    set_has_url();
    data_.url_ = url;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Payload.Item.url)
}
inline ::common::v1::UrlItem* Payload_Item::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_ = CreateMaybeMessage< ::common::v1::UrlItem >(GetArenaForAllocation());
  }
  return data_.url_;
}
inline ::common::v1::UrlItem* Payload_Item::mutable_url() {
  ::common::v1::UrlItem* _msg = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:common.v1.Payload.Item.url)
  return _msg;
}

// .common.v1.MessageItem message = 5 [json_name = "message"];
inline bool Payload_Item::_internal_has_message() const {
  return data_case() == kMessage;
}
inline bool Payload_Item::has_message() const {
  return _internal_has_message();
}
inline void Payload_Item::set_has_message() {
  _oneof_case_[0] = kMessage;
}
inline void Payload_Item::clear_message() {
  if (_internal_has_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.message_;
    }
    clear_has_data();
  }
}
inline ::common::v1::MessageItem* Payload_Item::release_message() {
  // @@protoc_insertion_point(field_release:common.v1.Payload.Item.message)
  if (_internal_has_message()) {
    clear_has_data();
      ::common::v1::MessageItem* temp = data_.message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::MessageItem& Payload_Item::_internal_message() const {
  return _internal_has_message()
      ? *data_.message_
      : reinterpret_cast< ::common::v1::MessageItem&>(::common::v1::_MessageItem_default_instance_);
}
inline const ::common::v1::MessageItem& Payload_Item::message() const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.Item.message)
  return _internal_message();
}
inline ::common::v1::MessageItem* Payload_Item::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.Payload.Item.message)
  if (_internal_has_message()) {
    clear_has_data();
    ::common::v1::MessageItem* temp = data_.message_;
    data_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_Item::unsafe_arena_set_allocated_message(::common::v1::MessageItem* message) {
  clear_data();
  if (message) {
    set_has_message();
    data_.message_ = message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Payload.Item.message)
}
inline ::common::v1::MessageItem* Payload_Item::_internal_mutable_message() {
  if (!_internal_has_message()) {
    clear_data();
    set_has_message();
    data_.message_ = CreateMaybeMessage< ::common::v1::MessageItem >(GetArenaForAllocation());
  }
  return data_.message_;
}
inline ::common::v1::MessageItem* Payload_Item::mutable_message() {
  ::common::v1::MessageItem* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:common.v1.Payload.Item.message)
  return _msg;
}

// .common.v1.Thumbnail thumbnail = 6 [json_name = "thumbnail"];
inline bool Payload_Item::_internal_has_thumbnail() const {
  return preview_case() == kThumbnail;
}
inline bool Payload_Item::has_thumbnail() const {
  return _internal_has_thumbnail();
}
inline void Payload_Item::set_has_thumbnail() {
  _oneof_case_[1] = kThumbnail;
}
inline void Payload_Item::clear_thumbnail() {
  if (_internal_has_thumbnail()) {
    if (GetArenaForAllocation() == nullptr) {
      delete preview_.thumbnail_;
    }
    clear_has_preview();
  }
}
inline ::common::v1::Thumbnail* Payload_Item::release_thumbnail() {
  // @@protoc_insertion_point(field_release:common.v1.Payload.Item.thumbnail)
  if (_internal_has_thumbnail()) {
    clear_has_preview();
      ::common::v1::Thumbnail* temp = preview_.thumbnail_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    preview_.thumbnail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::Thumbnail& Payload_Item::_internal_thumbnail() const {
  return _internal_has_thumbnail()
      ? *preview_.thumbnail_
      : reinterpret_cast< ::common::v1::Thumbnail&>(::common::v1::_Thumbnail_default_instance_);
}
inline const ::common::v1::Thumbnail& Payload_Item::thumbnail() const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.Item.thumbnail)
  return _internal_thumbnail();
}
inline ::common::v1::Thumbnail* Payload_Item::unsafe_arena_release_thumbnail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.Payload.Item.thumbnail)
  if (_internal_has_thumbnail()) {
    clear_has_preview();
    ::common::v1::Thumbnail* temp = preview_.thumbnail_;
    preview_.thumbnail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_Item::unsafe_arena_set_allocated_thumbnail(::common::v1::Thumbnail* thumbnail) {
  clear_preview();
  if (thumbnail) {
    set_has_thumbnail();
    preview_.thumbnail_ = thumbnail;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Payload.Item.thumbnail)
}
inline ::common::v1::Thumbnail* Payload_Item::_internal_mutable_thumbnail() {
  if (!_internal_has_thumbnail()) {
    clear_preview();
    set_has_thumbnail();
    preview_.thumbnail_ = CreateMaybeMessage< ::common::v1::Thumbnail >(GetArenaForAllocation());
  }
  return preview_.thumbnail_;
}
inline ::common::v1::Thumbnail* Payload_Item::mutable_thumbnail() {
  ::common::v1::Thumbnail* _msg = _internal_mutable_thumbnail();
  // @@protoc_insertion_point(field_mutable:common.v1.Payload.Item.thumbnail)
  return _msg;
}

// .common.v1.OpenGraph.Primary open_graph = 7 [json_name = "openGraph"];
inline bool Payload_Item::_internal_has_open_graph() const {
  return preview_case() == kOpenGraph;
}
inline bool Payload_Item::has_open_graph() const {
  return _internal_has_open_graph();
}
inline void Payload_Item::set_has_open_graph() {
  _oneof_case_[1] = kOpenGraph;
}
inline void Payload_Item::clear_open_graph() {
  if (_internal_has_open_graph()) {
    if (GetArenaForAllocation() == nullptr) {
      delete preview_.open_graph_;
    }
    clear_has_preview();
  }
}
inline ::common::v1::OpenGraph_Primary* Payload_Item::release_open_graph() {
  // @@protoc_insertion_point(field_release:common.v1.Payload.Item.open_graph)
  if (_internal_has_open_graph()) {
    clear_has_preview();
      ::common::v1::OpenGraph_Primary* temp = preview_.open_graph_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    preview_.open_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::v1::OpenGraph_Primary& Payload_Item::_internal_open_graph() const {
  return _internal_has_open_graph()
      ? *preview_.open_graph_
      : reinterpret_cast< ::common::v1::OpenGraph_Primary&>(::common::v1::_OpenGraph_Primary_default_instance_);
}
inline const ::common::v1::OpenGraph_Primary& Payload_Item::open_graph() const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.Item.open_graph)
  return _internal_open_graph();
}
inline ::common::v1::OpenGraph_Primary* Payload_Item::unsafe_arena_release_open_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.v1.Payload.Item.open_graph)
  if (_internal_has_open_graph()) {
    clear_has_preview();
    ::common::v1::OpenGraph_Primary* temp = preview_.open_graph_;
    preview_.open_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Payload_Item::unsafe_arena_set_allocated_open_graph(::common::v1::OpenGraph_Primary* open_graph) {
  clear_preview();
  if (open_graph) {
    set_has_open_graph();
    preview_.open_graph_ = open_graph;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Payload.Item.open_graph)
}
inline ::common::v1::OpenGraph_Primary* Payload_Item::_internal_mutable_open_graph() {
  if (!_internal_has_open_graph()) {
    clear_preview();
    set_has_open_graph();
    preview_.open_graph_ = CreateMaybeMessage< ::common::v1::OpenGraph_Primary >(GetArenaForAllocation());
  }
  return preview_.open_graph_;
}
inline ::common::v1::OpenGraph_Primary* Payload_Item::mutable_open_graph() {
  ::common::v1::OpenGraph_Primary* _msg = _internal_mutable_open_graph();
  // @@protoc_insertion_point(field_mutable:common.v1.Payload.Item.open_graph)
  return _msg;
}

inline bool Payload_Item::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Payload_Item::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline bool Payload_Item::has_preview() const {
  return preview_case() != PREVIEW_NOT_SET;
}
inline void Payload_Item::clear_has_preview() {
  _oneof_case_[1] = PREVIEW_NOT_SET;
}
inline Payload_Item::DataCase Payload_Item::data_case() const {
  return Payload_Item::DataCase(_oneof_case_[0]);
}
inline Payload_Item::PreviewCase Payload_Item::preview_case() const {
  return Payload_Item::PreviewCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Payload

// repeated .common.v1.Payload.Item items = 1 [json_name = "items"];
inline int Payload::_internal_items_size() const {
  return items_.size();
}
inline int Payload::items_size() const {
  return _internal_items_size();
}
inline void Payload::clear_items() {
  items_.Clear();
}
inline ::common::v1::Payload_Item* Payload::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:common.v1.Payload.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Payload_Item >*
Payload::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:common.v1.Payload.items)
  return &items_;
}
inline const ::common::v1::Payload_Item& Payload::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::common::v1::Payload_Item& Payload::items(int index) const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.items)
  return _internal_items(index);
}
inline ::common::v1::Payload_Item* Payload::_internal_add_items() {
  return items_.Add();
}
inline ::common::v1::Payload_Item* Payload::add_items() {
  ::common::v1::Payload_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:common.v1.Payload.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Payload_Item >&
Payload::items() const {
  // @@protoc_insertion_point(field_list:common.v1.Payload.items)
  return items_;
}

// .common.v1.Profile owner = 2 [json_name = "owner"];
inline bool Payload::_internal_has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline bool Payload::has_owner() const {
  return _internal_has_owner();
}
inline const ::common::v1::Profile& Payload::_internal_owner() const {
  const ::common::v1::Profile* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::v1::Profile&>(
      ::common::v1::_Profile_default_instance_);
}
inline const ::common::v1::Profile& Payload::owner() const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.owner)
  return _internal_owner();
}
inline void Payload::unsafe_arena_set_allocated_owner(
    ::common::v1::Profile* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.v1.Payload.owner)
}
inline ::common::v1::Profile* Payload::release_owner() {
  
  ::common::v1::Profile* temp = owner_;
  owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::common::v1::Profile* Payload::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:common.v1.Payload.owner)
  
  ::common::v1::Profile* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::common::v1::Profile* Payload::_internal_mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::v1::Profile>(GetArenaForAllocation());
    owner_ = p;
  }
  return owner_;
}
inline ::common::v1::Profile* Payload::mutable_owner() {
  ::common::v1::Profile* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:common.v1.Payload.owner)
  return _msg;
}
inline void Payload::set_allocated_owner(::common::v1::Profile* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner));
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:common.v1.Payload.owner)
}

// int64 size = 3 [json_name = "size"];
inline void Payload::clear_size() {
  size_ = int64_t{0};
}
inline int64_t Payload::_internal_size() const {
  return size_;
}
inline int64_t Payload::size() const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.size)
  return _internal_size();
}
inline void Payload::_internal_set_size(int64_t value) {
  
  size_ = value;
}
inline void Payload::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:common.v1.Payload.size)
}

// int64 created_at = 4 [json_name = "createdAt"];
inline void Payload::clear_created_at() {
  created_at_ = int64_t{0};
}
inline int64_t Payload::_internal_created_at() const {
  return created_at_;
}
inline int64_t Payload::created_at() const {
  // @@protoc_insertion_point(field_get:common.v1.Payload.created_at)
  return _internal_created_at();
}
inline void Payload::_internal_set_created_at(int64_t value) {
  
  created_at_ = value;
}
inline void Payload::set_created_at(int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:common.v1.Payload.created_at)
}

// -------------------------------------------------------------------

// PayloadList

// repeated .common.v1.Payload payloads = 1 [json_name = "payloads"];
inline int PayloadList::_internal_payloads_size() const {
  return payloads_.size();
}
inline int PayloadList::payloads_size() const {
  return _internal_payloads_size();
}
inline void PayloadList::clear_payloads() {
  payloads_.Clear();
}
inline ::common::v1::Payload* PayloadList::mutable_payloads(int index) {
  // @@protoc_insertion_point(field_mutable:common.v1.PayloadList.payloads)
  return payloads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Payload >*
PayloadList::mutable_payloads() {
  // @@protoc_insertion_point(field_mutable_list:common.v1.PayloadList.payloads)
  return &payloads_;
}
inline const ::common::v1::Payload& PayloadList::_internal_payloads(int index) const {
  return payloads_.Get(index);
}
inline const ::common::v1::Payload& PayloadList::payloads(int index) const {
  // @@protoc_insertion_point(field_get:common.v1.PayloadList.payloads)
  return _internal_payloads(index);
}
inline ::common::v1::Payload* PayloadList::_internal_add_payloads() {
  return payloads_.Add();
}
inline ::common::v1::Payload* PayloadList::add_payloads() {
  ::common::v1::Payload* _add = _internal_add_payloads();
  // @@protoc_insertion_point(field_add:common.v1.PayloadList.payloads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::v1::Payload >&
PayloadList::payloads() const {
  // @@protoc_insertion_point(field_list:common.v1.PayloadList.payloads)
  return payloads_;
}

// string key = 2 [json_name = "key"];
inline void PayloadList::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& PayloadList::key() const {
  // @@protoc_insertion_point(field_get:common.v1.PayloadList.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayloadList::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.PayloadList.key)
}
inline std::string* PayloadList::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:common.v1.PayloadList.key)
  return _s;
}
inline const std::string& PayloadList::_internal_key() const {
  return key_.Get();
}
inline void PayloadList::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayloadList::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayloadList::release_key() {
  // @@protoc_insertion_point(field_release:common.v1.PayloadList.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayloadList::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.PayloadList.key)
}

// int64 last_modified = 3 [json_name = "lastModified"];
inline void PayloadList::clear_last_modified() {
  last_modified_ = int64_t{0};
}
inline int64_t PayloadList::_internal_last_modified() const {
  return last_modified_;
}
inline int64_t PayloadList::last_modified() const {
  // @@protoc_insertion_point(field_get:common.v1.PayloadList.last_modified)
  return _internal_last_modified();
}
inline void PayloadList::_internal_set_last_modified(int64_t value) {
  
  last_modified_ = value;
}
inline void PayloadList::set_last_modified(int64_t value) {
  _internal_set_last_modified(value);
  // @@protoc_insertion_point(field_set:common.v1.PayloadList.last_modified)
}

// -------------------------------------------------------------------

// SupplyItem

// string path = 1 [json_name = "path"];
inline void SupplyItem::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& SupplyItem::path() const {
  // @@protoc_insertion_point(field_get:common.v1.SupplyItem.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SupplyItem::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.SupplyItem.path)
}
inline std::string* SupplyItem::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:common.v1.SupplyItem.path)
  return _s;
}
inline const std::string& SupplyItem::_internal_path() const {
  return path_.Get();
}
inline void SupplyItem::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SupplyItem::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SupplyItem::release_path() {
  // @@protoc_insertion_point(field_release:common.v1.SupplyItem.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SupplyItem::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.SupplyItem.path)
}

// optional bytes thumbnail = 2 [json_name = "thumbnail"];
inline bool SupplyItem::_internal_has_thumbnail() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SupplyItem::has_thumbnail() const {
  return _internal_has_thumbnail();
}
inline void SupplyItem::clear_thumbnail() {
  thumbnail_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SupplyItem::thumbnail() const {
  // @@protoc_insertion_point(field_get:common.v1.SupplyItem.thumbnail)
  return _internal_thumbnail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SupplyItem::set_thumbnail(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 thumbnail_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.v1.SupplyItem.thumbnail)
}
inline std::string* SupplyItem::mutable_thumbnail() {
  std::string* _s = _internal_mutable_thumbnail();
  // @@protoc_insertion_point(field_mutable:common.v1.SupplyItem.thumbnail)
  return _s;
}
inline const std::string& SupplyItem::_internal_thumbnail() const {
  return thumbnail_.Get();
}
inline void SupplyItem::_internal_set_thumbnail(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SupplyItem::_internal_mutable_thumbnail() {
  _has_bits_[0] |= 0x00000001u;
  return thumbnail_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SupplyItem::release_thumbnail() {
  // @@protoc_insertion_point(field_release:common.v1.SupplyItem.thumbnail)
  if (!_internal_has_thumbnail()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = thumbnail_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SupplyItem::set_allocated_thumbnail(std::string* thumbnail) {
  if (thumbnail != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thumbnail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.v1.SupplyItem.thumbnail)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::v1::OpenGraph_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::v1::OpenGraph_Type>() {
  return ::common::v1::OpenGraph_Type_descriptor();
}
template <> struct is_proto_enum< ::common::v1::Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::v1::Direction>() {
  return ::common::v1::Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2fdata_2eproto
