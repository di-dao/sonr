syntax = "proto3";

// Package Highway is used for defining a Highway node and its properties.
package node.highway.v1;
import "node/highway/v1/request.proto";
import "google/api/annotations.proto";
import "node/highway/v1/response.proto";
option go_package = "github.com/sonr-io/core/node/highway";

// HighwayService is a RPC service for interfacing over the Highway node.
service HighwayService {
  // AccessName returns details and publicly available information about the Peer given calling node
  // has permission to access. i.e "prad.snr" -> "firstname online profilePic city"
  rpc AccessName(AccessNameRequest) returns (AccessNameResponse) {
    option (google.api.http) = {
      post: "/v1/name/access"
    };
  }

  // RegisterName registers a new ".snr" name for the calling node. It is only allowed to be called
  // once per node.
  rpc RegisterName(RegisterNameRequest) returns (RegisterNameResponse) {
    option (google.api.http) = {
      post: "/v1/name/register"
    };
  }

  // UpdateName updates the public information of the calling node.
  rpc UpdateName(UpdateNameRequest) returns (UpdateNameResponse) {
    option (google.api.http) = {
      post: "/v1/name/update"
    };
  }

  // AccessService creates a new signing key for the calling node in order to be authorized to
  // access the service. It is only allowed to be called once per node.
  rpc AccessService(AccessServiceRequest) returns (AccessServiceResponse) {
    option (google.api.http) = {
      post: "/v1/service/access"
    };
  }

  // RegisterService registers a new service for the calling node. The calling node must have
  // already been enabled for development.
  rpc RegisterService(RegisterServiceRequest) returns (RegisterServiceResponse) {
    option (google.api.http) = {
      post: "/v1/service/register"
    };
  }

  // UpdateService updates the details and public configuration of the calling node's service.
  rpc UpdateService(UpdateServiceRequest) returns (UpdateServiceResponse) {
    option (google.api.http) = {
      post: "/v1/service/update"
    };
  }

  // CreateChannel creates a new Publish/Subscribe topic channel for the given service.
  // The calling node must have already registered a service for the channel.
  rpc CreateChannel(CreateChannelRequest) returns (CreateChannelResponse) {
    option (google.api.http) = {
      post: "/v1/channel/create"
    };
  }

  // ReadChannel lists all peers subscribed to the given channel, and additional details about
  // the channels configuration.
  rpc ReadChannel(ReadChannelRequest) returns (ReadChannelResponse) {
    option (google.api.http) = {
      post: "/v1/channel/read"
    };
  }

  // UpdateChannel updates the configuration of the given channel.
  rpc UpdateChannel(UpdateChannelRequest) returns (UpdateChannelResponse) {
    option (google.api.http) = {
      post: "/v1/channel/update"
    };
  }

  // DeleteChannel deletes the given channel if the calling node is the owner of the channel.
  rpc DeleteChannel(DeleteChannelRequest) returns (DeleteChannelResponse) {
    option (google.api.http) = {
      post: "/v1/channel/delete"
    };
  }

  // ListenChannel subscribes the calling node to the given channel and returns all publish events
  // as a stream.
  rpc ListenChannel(ListenChannelRequest) returns (stream ListenChannelResponse) {
    option (google.api.http) = {
      post: "/v1/channel/listen"
    };
  }

  // CreateBucket creates a new bucket for the calling nodes service.
  rpc CreateBucket(CreateBucketRequest) returns (CreateBucketResponse) {
    option (google.api.http) = {
      post: "/v1/bucket/create"
    };
  }

  // ReadBucket lists all the blobs in the given bucket. The calling node must have access to the
  // bucket.
  rpc ReadBucket(ReadBucketRequest) returns (ReadBucketResponse) {
    option (google.api.http) = {
      post: "/v1/bucket/read"
    };
  }

  // UpdateBucket updates the configuration of the given bucket. The calling node must have access
  // to the bucket.
  rpc UpdateBucket(UpdateBucketRequest) returns (UpdateBucketResponse) {
    option (google.api.http) = {
      post: "/v1/bucket/update"
    };
  }

  // DeleteBucket deletes the given bucket if the calling node is the owner of the bucket.
  rpc DeleteBucket(DeleteBucketRequest) returns (DeleteBucketResponse) {
    option (google.api.http) = {
      post: "/v1/bucket/delete"
    };
  }

  // ListenBucket subscribes the calling node to the given bucket and returns all publish events
  // as a stream.
  rpc ListenBucket(ListenBucketRequest) returns (stream ListenBucketResponse) {
    option (google.api.http) = {
      post: "/v1/bucket/listen"
    };
  }

  // CreateObject defines a new object to be utilized by the calling node's service. The object will
  // be placed in the Highway Service Graph and can be used in channels and other modules.
  rpc CreateObject(CreateObjectRequest) returns (CreateObjectResponse) {
    option (google.api.http) = {
      post: "/v1/object/create"
    };
  }

  // ReadObject returns the details of the given object provided its DID or Label.
  rpc ReadObject(ReadObjectRequest) returns (ReadObjectResponse) {
    option (google.api.http) = {
      post: "/v1/object/read"
    };
  }

  // UpdateObject modifies the property fields of the given object.
  rpc UpdateObject(UpdateObjectRequest) returns (UpdateObjectResponse) {
    option (google.api.http) = {
      post: "/v1/object/update"
    };
  }

  // DeleteObject deletes the given object if the calling node is the owner of the object.
  rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {
    option (google.api.http) = {
      post: "/v1/object/delete"
    };
  }

  // UploadBlob uploads a file or buffer to the calling node's service IPFS storage.
  rpc UploadBlob(UploadBlobRequest) returns (stream UploadBlobResponse) {
    option (google.api.http) = {
      post: "/v1/blob/upload"
    };
  }

  // DownloadBlob downloads a file or buffer from the calling node's service IPFS storage.
  rpc DownloadBlob(DownloadBlobRequest) returns (stream DownloadBlobResponse) {
    option (google.api.http) = {
      post: "/v1/blob/download"
    };
  }

  // SyncBlob synchronizes a local file from the calling node to the given service's IPFS storage.
  rpc SyncBlob(SyncBlobRequest) returns (stream SyncBlobResponse) {
    option (google.api.http) = {
      post: "/v1/blob/sync"
    };
  }

  // DeleteBlob deletes the given file from the calling node's service IPFS storage.
  rpc DeleteBlob(DeleteBlobRequest) returns (DeleteBlobResponse) {
    option (google.api.http) = {
      post: "/v1/blob/delete"
    };
  }

  // ParseDid parses a potential DID string into a DID object.
  rpc ParseDid(ParseDidRequest) returns (ParseDidResponse) {
    option (google.api.http) = {
      post: "/v1/did/parse"
    };
  }

  // ResolveDid resolves a DID to its DID document if the DID is valid and the calling node has
  // access to the DID Document.
  rpc ResolveDid(ResolveDidRequest) returns (ResolveDidResponse) {
    option (google.api.http) = {
      post: "/v1/did/resolve"
    };
  }
}
