// Code generated by protoc-gen-go-cosmos-orm-proto. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sonrhq/sonr/service/module/v1/state_query.proto

package modulev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StateQueryService_GetServiceRecord_FullMethodName              = "/sonrhq.sonr.service.module.v1.StateQueryService/GetServiceRecord"
	StateQueryService_GetServiceRecordByOrigin_FullMethodName      = "/sonrhq.sonr.service.module.v1.StateQueryService/GetServiceRecordByOrigin"
	StateQueryService_GetServiceRecordByNameOwner_FullMethodName   = "/sonrhq.sonr.service.module.v1.StateQueryService/GetServiceRecordByNameOwner"
	StateQueryService_GetServiceRecordByOriginOwner_FullMethodName = "/sonrhq.sonr.service.module.v1.StateQueryService/GetServiceRecordByOriginOwner"
	StateQueryService_ListServiceRecord_FullMethodName             = "/sonrhq.sonr.service.module.v1.StateQueryService/ListServiceRecord"
	StateQueryService_GetCredential_FullMethodName                 = "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredential"
	StateQueryService_GetCredentialByOriginHandle_FullMethodName   = "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredentialByOriginHandle"
	StateQueryService_GetCredentialByCredentialId_FullMethodName   = "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredentialByCredentialId"
	StateQueryService_GetCredentialByPublicKey_FullMethodName      = "/sonrhq.sonr.service.module.v1.StateQueryService/GetCredentialByPublicKey"
	StateQueryService_ListCredential_FullMethodName                = "/sonrhq.sonr.service.module.v1.StateQueryService/ListCredential"
	StateQueryService_GetBaseParams_FullMethodName                 = "/sonrhq.sonr.service.module.v1.StateQueryService/GetBaseParams"
	StateQueryService_GetReadParams_FullMethodName                 = "/sonrhq.sonr.service.module.v1.StateQueryService/GetReadParams"
	StateQueryService_GetWriteParams_FullMethodName                = "/sonrhq.sonr.service.module.v1.StateQueryService/GetWriteParams"
	StateQueryService_GetOwnParams_FullMethodName                  = "/sonrhq.sonr.service.module.v1.StateQueryService/GetOwnParams"
)

// StateQueryServiceClient is the client API for StateQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateQueryServiceClient interface {
	// Get queries the ServiceRecord table by its primary key.
	GetServiceRecord(ctx context.Context, in *GetServiceRecordRequest, opts ...grpc.CallOption) (*GetServiceRecordResponse, error)
	// GetServiceRecordByOrigin queries the ServiceRecord table by its Origin index
	GetServiceRecordByOrigin(ctx context.Context, in *GetServiceRecordByOriginRequest, opts ...grpc.CallOption) (*GetServiceRecordByOriginResponse, error)
	// GetServiceRecordByNameOwner queries the ServiceRecord table by its NameOwner index
	GetServiceRecordByNameOwner(ctx context.Context, in *GetServiceRecordByNameOwnerRequest, opts ...grpc.CallOption) (*GetServiceRecordByNameOwnerResponse, error)
	// GetServiceRecordByOriginOwner queries the ServiceRecord table by its OriginOwner index
	GetServiceRecordByOriginOwner(ctx context.Context, in *GetServiceRecordByOriginOwnerRequest, opts ...grpc.CallOption) (*GetServiceRecordByOriginOwnerResponse, error)
	// ListServiceRecord queries the ServiceRecord table using prefix and range queries against defined indexes.
	ListServiceRecord(ctx context.Context, in *ListServiceRecordRequest, opts ...grpc.CallOption) (*ListServiceRecordResponse, error)
	// Get queries the Credential table by its primary key.
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	// GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
	GetCredentialByOriginHandle(ctx context.Context, in *GetCredentialByOriginHandleRequest, opts ...grpc.CallOption) (*GetCredentialByOriginHandleResponse, error)
	// GetCredentialByCredentialId queries the Credential table by its CredentialId index
	GetCredentialByCredentialId(ctx context.Context, in *GetCredentialByCredentialIdRequest, opts ...grpc.CallOption) (*GetCredentialByCredentialIdResponse, error)
	// GetCredentialByPublicKey queries the Credential table by its PublicKey index
	GetCredentialByPublicKey(ctx context.Context, in *GetCredentialByPublicKeyRequest, opts ...grpc.CallOption) (*GetCredentialByPublicKeyResponse, error)
	// ListCredential queries the Credential table using prefix and range queries against defined indexes.
	ListCredential(ctx context.Context, in *ListCredentialRequest, opts ...grpc.CallOption) (*ListCredentialResponse, error)
	// GetBaseParams queries the BaseParams singleton.
	GetBaseParams(ctx context.Context, in *GetBaseParamsRequest, opts ...grpc.CallOption) (*GetBaseParamsResponse, error)
	// GetReadParams queries the ReadParams singleton.
	GetReadParams(ctx context.Context, in *GetReadParamsRequest, opts ...grpc.CallOption) (*GetReadParamsResponse, error)
	// GetWriteParams queries the WriteParams singleton.
	GetWriteParams(ctx context.Context, in *GetWriteParamsRequest, opts ...grpc.CallOption) (*GetWriteParamsResponse, error)
	// GetOwnParams queries the OwnParams singleton.
	GetOwnParams(ctx context.Context, in *GetOwnParamsRequest, opts ...grpc.CallOption) (*GetOwnParamsResponse, error)
}

type stateQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateQueryServiceClient(cc grpc.ClientConnInterface) StateQueryServiceClient {
	return &stateQueryServiceClient{cc}
}

func (c *stateQueryServiceClient) GetServiceRecord(ctx context.Context, in *GetServiceRecordRequest, opts ...grpc.CallOption) (*GetServiceRecordResponse, error) {
	out := new(GetServiceRecordResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetServiceRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetServiceRecordByOrigin(ctx context.Context, in *GetServiceRecordByOriginRequest, opts ...grpc.CallOption) (*GetServiceRecordByOriginResponse, error) {
	out := new(GetServiceRecordByOriginResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetServiceRecordByOrigin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetServiceRecordByNameOwner(ctx context.Context, in *GetServiceRecordByNameOwnerRequest, opts ...grpc.CallOption) (*GetServiceRecordByNameOwnerResponse, error) {
	out := new(GetServiceRecordByNameOwnerResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetServiceRecordByNameOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetServiceRecordByOriginOwner(ctx context.Context, in *GetServiceRecordByOriginOwnerRequest, opts ...grpc.CallOption) (*GetServiceRecordByOriginOwnerResponse, error) {
	out := new(GetServiceRecordByOriginOwnerResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetServiceRecordByOriginOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListServiceRecord(ctx context.Context, in *ListServiceRecordRequest, opts ...grpc.CallOption) (*ListServiceRecordResponse, error) {
	out := new(ListServiceRecordResponse)
	err := c.cc.Invoke(ctx, StateQueryService_ListServiceRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialByOriginHandle(ctx context.Context, in *GetCredentialByOriginHandleRequest, opts ...grpc.CallOption) (*GetCredentialByOriginHandleResponse, error) {
	out := new(GetCredentialByOriginHandleResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetCredentialByOriginHandle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialByCredentialId(ctx context.Context, in *GetCredentialByCredentialIdRequest, opts ...grpc.CallOption) (*GetCredentialByCredentialIdResponse, error) {
	out := new(GetCredentialByCredentialIdResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetCredentialByCredentialId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetCredentialByPublicKey(ctx context.Context, in *GetCredentialByPublicKeyRequest, opts ...grpc.CallOption) (*GetCredentialByPublicKeyResponse, error) {
	out := new(GetCredentialByPublicKeyResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetCredentialByPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListCredential(ctx context.Context, in *ListCredentialRequest, opts ...grpc.CallOption) (*ListCredentialResponse, error) {
	out := new(ListCredentialResponse)
	err := c.cc.Invoke(ctx, StateQueryService_ListCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetBaseParams(ctx context.Context, in *GetBaseParamsRequest, opts ...grpc.CallOption) (*GetBaseParamsResponse, error) {
	out := new(GetBaseParamsResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetBaseParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetReadParams(ctx context.Context, in *GetReadParamsRequest, opts ...grpc.CallOption) (*GetReadParamsResponse, error) {
	out := new(GetReadParamsResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetReadParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetWriteParams(ctx context.Context, in *GetWriteParamsRequest, opts ...grpc.CallOption) (*GetWriteParamsResponse, error) {
	out := new(GetWriteParamsResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetWriteParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetOwnParams(ctx context.Context, in *GetOwnParamsRequest, opts ...grpc.CallOption) (*GetOwnParamsResponse, error) {
	out := new(GetOwnParamsResponse)
	err := c.cc.Invoke(ctx, StateQueryService_GetOwnParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateQueryServiceServer is the server API for StateQueryService service.
// All implementations must embed UnimplementedStateQueryServiceServer
// for forward compatibility
type StateQueryServiceServer interface {
	// Get queries the ServiceRecord table by its primary key.
	GetServiceRecord(context.Context, *GetServiceRecordRequest) (*GetServiceRecordResponse, error)
	// GetServiceRecordByOrigin queries the ServiceRecord table by its Origin index
	GetServiceRecordByOrigin(context.Context, *GetServiceRecordByOriginRequest) (*GetServiceRecordByOriginResponse, error)
	// GetServiceRecordByNameOwner queries the ServiceRecord table by its NameOwner index
	GetServiceRecordByNameOwner(context.Context, *GetServiceRecordByNameOwnerRequest) (*GetServiceRecordByNameOwnerResponse, error)
	// GetServiceRecordByOriginOwner queries the ServiceRecord table by its OriginOwner index
	GetServiceRecordByOriginOwner(context.Context, *GetServiceRecordByOriginOwnerRequest) (*GetServiceRecordByOriginOwnerResponse, error)
	// ListServiceRecord queries the ServiceRecord table using prefix and range queries against defined indexes.
	ListServiceRecord(context.Context, *ListServiceRecordRequest) (*ListServiceRecordResponse, error)
	// Get queries the Credential table by its primary key.
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	// GetCredentialByOriginHandle queries the Credential table by its OriginHandle index
	GetCredentialByOriginHandle(context.Context, *GetCredentialByOriginHandleRequest) (*GetCredentialByOriginHandleResponse, error)
	// GetCredentialByCredentialId queries the Credential table by its CredentialId index
	GetCredentialByCredentialId(context.Context, *GetCredentialByCredentialIdRequest) (*GetCredentialByCredentialIdResponse, error)
	// GetCredentialByPublicKey queries the Credential table by its PublicKey index
	GetCredentialByPublicKey(context.Context, *GetCredentialByPublicKeyRequest) (*GetCredentialByPublicKeyResponse, error)
	// ListCredential queries the Credential table using prefix and range queries against defined indexes.
	ListCredential(context.Context, *ListCredentialRequest) (*ListCredentialResponse, error)
	// GetBaseParams queries the BaseParams singleton.
	GetBaseParams(context.Context, *GetBaseParamsRequest) (*GetBaseParamsResponse, error)
	// GetReadParams queries the ReadParams singleton.
	GetReadParams(context.Context, *GetReadParamsRequest) (*GetReadParamsResponse, error)
	// GetWriteParams queries the WriteParams singleton.
	GetWriteParams(context.Context, *GetWriteParamsRequest) (*GetWriteParamsResponse, error)
	// GetOwnParams queries the OwnParams singleton.
	GetOwnParams(context.Context, *GetOwnParamsRequest) (*GetOwnParamsResponse, error)
	mustEmbedUnimplementedStateQueryServiceServer()
}

// UnimplementedStateQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateQueryServiceServer struct {
}

func (UnimplementedStateQueryServiceServer) GetServiceRecord(context.Context, *GetServiceRecordRequest) (*GetServiceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecord not implemented")
}
func (UnimplementedStateQueryServiceServer) GetServiceRecordByOrigin(context.Context, *GetServiceRecordByOriginRequest) (*GetServiceRecordByOriginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecordByOrigin not implemented")
}
func (UnimplementedStateQueryServiceServer) GetServiceRecordByNameOwner(context.Context, *GetServiceRecordByNameOwnerRequest) (*GetServiceRecordByNameOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecordByNameOwner not implemented")
}
func (UnimplementedStateQueryServiceServer) GetServiceRecordByOriginOwner(context.Context, *GetServiceRecordByOriginOwnerRequest) (*GetServiceRecordByOriginOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecordByOriginOwner not implemented")
}
func (UnimplementedStateQueryServiceServer) ListServiceRecord(context.Context, *ListServiceRecordRequest) (*ListServiceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceRecord not implemented")
}
func (UnimplementedStateQueryServiceServer) GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedStateQueryServiceServer) GetCredentialByOriginHandle(context.Context, *GetCredentialByOriginHandleRequest) (*GetCredentialByOriginHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByOriginHandle not implemented")
}
func (UnimplementedStateQueryServiceServer) GetCredentialByCredentialId(context.Context, *GetCredentialByCredentialIdRequest) (*GetCredentialByCredentialIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByCredentialId not implemented")
}
func (UnimplementedStateQueryServiceServer) GetCredentialByPublicKey(context.Context, *GetCredentialByPublicKeyRequest) (*GetCredentialByPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByPublicKey not implemented")
}
func (UnimplementedStateQueryServiceServer) ListCredential(context.Context, *ListCredentialRequest) (*ListCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredential not implemented")
}
func (UnimplementedStateQueryServiceServer) GetBaseParams(context.Context, *GetBaseParamsRequest) (*GetBaseParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseParams not implemented")
}
func (UnimplementedStateQueryServiceServer) GetReadParams(context.Context, *GetReadParamsRequest) (*GetReadParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadParams not implemented")
}
func (UnimplementedStateQueryServiceServer) GetWriteParams(context.Context, *GetWriteParamsRequest) (*GetWriteParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteParams not implemented")
}
func (UnimplementedStateQueryServiceServer) GetOwnParams(context.Context, *GetOwnParamsRequest) (*GetOwnParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnParams not implemented")
}
func (UnimplementedStateQueryServiceServer) mustEmbedUnimplementedStateQueryServiceServer() {}

// UnsafeStateQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateQueryServiceServer will
// result in compilation errors.
type UnsafeStateQueryServiceServer interface {
	mustEmbedUnimplementedStateQueryServiceServer()
}

func RegisterStateQueryServiceServer(s grpc.ServiceRegistrar, srv StateQueryServiceServer) {
	s.RegisterService(&StateQueryService_ServiceDesc, srv)
}

func _StateQueryService_GetServiceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetServiceRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceRecord(ctx, req.(*GetServiceRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetServiceRecordByOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordByOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceRecordByOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetServiceRecordByOrigin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceRecordByOrigin(ctx, req.(*GetServiceRecordByOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetServiceRecordByNameOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordByNameOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceRecordByNameOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetServiceRecordByNameOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceRecordByNameOwner(ctx, req.(*GetServiceRecordByNameOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetServiceRecordByOriginOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordByOriginOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceRecordByOriginOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetServiceRecordByOriginOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceRecordByOriginOwner(ctx, req.(*GetServiceRecordByOriginOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListServiceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListServiceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_ListServiceRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListServiceRecord(ctx, req.(*ListServiceRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialByOriginHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByOriginHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialByOriginHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetCredentialByOriginHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialByOriginHandle(ctx, req.(*GetCredentialByOriginHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialByCredentialId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByCredentialIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialByCredentialId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetCredentialByCredentialId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialByCredentialId(ctx, req.(*GetCredentialByCredentialIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetCredentialByPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetCredentialByPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetCredentialByPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetCredentialByPublicKey(ctx, req.(*GetCredentialByPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_ListCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListCredential(ctx, req.(*ListCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetBaseParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetBaseParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetBaseParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetBaseParams(ctx, req.(*GetBaseParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetReadParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetReadParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetReadParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetReadParams(ctx, req.(*GetReadParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetWriteParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetWriteParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetWriteParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetWriteParams(ctx, req.(*GetWriteParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetOwnParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetOwnParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryService_GetOwnParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetOwnParams(ctx, req.(*GetOwnParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateQueryService_ServiceDesc is the grpc.ServiceDesc for StateQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.sonr.service.module.v1.StateQueryService",
	HandlerType: (*StateQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceRecord",
			Handler:    _StateQueryService_GetServiceRecord_Handler,
		},
		{
			MethodName: "GetServiceRecordByOrigin",
			Handler:    _StateQueryService_GetServiceRecordByOrigin_Handler,
		},
		{
			MethodName: "GetServiceRecordByNameOwner",
			Handler:    _StateQueryService_GetServiceRecordByNameOwner_Handler,
		},
		{
			MethodName: "GetServiceRecordByOriginOwner",
			Handler:    _StateQueryService_GetServiceRecordByOriginOwner_Handler,
		},
		{
			MethodName: "ListServiceRecord",
			Handler:    _StateQueryService_ListServiceRecord_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _StateQueryService_GetCredential_Handler,
		},
		{
			MethodName: "GetCredentialByOriginHandle",
			Handler:    _StateQueryService_GetCredentialByOriginHandle_Handler,
		},
		{
			MethodName: "GetCredentialByCredentialId",
			Handler:    _StateQueryService_GetCredentialByCredentialId_Handler,
		},
		{
			MethodName: "GetCredentialByPublicKey",
			Handler:    _StateQueryService_GetCredentialByPublicKey_Handler,
		},
		{
			MethodName: "ListCredential",
			Handler:    _StateQueryService_ListCredential_Handler,
		},
		{
			MethodName: "GetBaseParams",
			Handler:    _StateQueryService_GetBaseParams_Handler,
		},
		{
			MethodName: "GetReadParams",
			Handler:    _StateQueryService_GetReadParams_Handler,
		},
		{
			MethodName: "GetWriteParams",
			Handler:    _StateQueryService_GetWriteParams_Handler,
		},
		{
			MethodName: "GetOwnParams",
			Handler:    _StateQueryService_GetOwnParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonrhq/sonr/service/module/v1/state_query.proto",
}
