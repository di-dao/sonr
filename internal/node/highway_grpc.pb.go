// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package node

import (
	context "context"
	api "github.com/sonr-io/core/internal/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HighwayServiceClient is the client API for HighwayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HighwayServiceClient interface {
	// Authorize Signing Method Request for Data
	Authenticate(ctx context.Context, in *api.AuthenticateRequest, opts ...grpc.CallOption) (*api.AuthenticateResponse, error)
	// Link Links an Additional Device to User
	Link(ctx context.Context, in *api.LinkRequest, opts ...grpc.CallOption) (*api.LinkResponse, error)
	// Register creates new user in DNS Table
	Register(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error)
}

type highwayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHighwayServiceClient(cc grpc.ClientConnInterface) HighwayServiceClient {
	return &highwayServiceClient{cc}
}

func (c *highwayServiceClient) Authenticate(ctx context.Context, in *api.AuthenticateRequest, opts ...grpc.CallOption) (*api.AuthenticateResponse, error) {
	out := new(api.AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.HighwayService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) Link(ctx context.Context, in *api.LinkRequest, opts ...grpc.CallOption) (*api.LinkResponse, error) {
	out := new(api.LinkResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.HighwayService/Link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highwayServiceClient) Register(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error) {
	out := new(api.RegisterResponse)
	err := c.cc.Invoke(ctx, "/sonr.node.HighwayService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HighwayServiceServer is the server API for HighwayService service.
// All implementations must embed UnimplementedHighwayServiceServer
// for forward compatibility
type HighwayServiceServer interface {
	// Authorize Signing Method Request for Data
	Authenticate(context.Context, *api.AuthenticateRequest) (*api.AuthenticateResponse, error)
	// Link Links an Additional Device to User
	Link(context.Context, *api.LinkRequest) (*api.LinkResponse, error)
	// Register creates new user in DNS Table
	Register(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error)
	mustEmbedUnimplementedHighwayServiceServer()
}

// UnimplementedHighwayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHighwayServiceServer struct {
}

func (UnimplementedHighwayServiceServer) Authenticate(context.Context, *api.AuthenticateRequest) (*api.AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedHighwayServiceServer) Link(context.Context, *api.LinkRequest) (*api.LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedHighwayServiceServer) Register(context.Context, *api.RegisterRequest) (*api.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedHighwayServiceServer) mustEmbedUnimplementedHighwayServiceServer() {}

// UnsafeHighwayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HighwayServiceServer will
// result in compilation errors.
type UnsafeHighwayServiceServer interface {
	mustEmbedUnimplementedHighwayServiceServer()
}

func RegisterHighwayServiceServer(s grpc.ServiceRegistrar, srv HighwayServiceServer) {
	s.RegisterService(&HighwayService_ServiceDesc, srv)
}

func _HighwayService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.HighwayService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).Authenticate(ctx, req.(*api.AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.HighwayService/Link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).Link(ctx, req.(*api.LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighwayService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighwayServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonr.node.HighwayService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighwayServiceServer).Register(ctx, req.(*api.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HighwayService_ServiceDesc is the grpc.ServiceDesc for HighwayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HighwayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonr.node.HighwayService",
	HandlerType: (*HighwayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _HighwayService_Authenticate_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _HighwayService_Link_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _HighwayService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/node/highway.proto",
}
