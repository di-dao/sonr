swagger: "2.0"
info:
  title: core/identity/did.proto
  version: version not set
tags:
  - name: Query
  - name: Msg
  - name: Query
  - name: Msg
  - name: Query
consumes:
  - application/json
produces:
  - application/json
paths:
  /core/id:
    get:
      summary: Get All Sonr DIDDocuments `did:sonr:...`
      operationId: Query_DidAll
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryAllDidResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
            It is less efficient than using key. Only one of offset or key should
            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: |-
            limit is the total number of results to be returned in the result page.
            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.countTotal
          description: |-
            count_total is set to true  to indicate that the result set should include
            a count of the total number of items available for pagination in UIs.
            count_total is only respected when offset is used. It is ignored when key
            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: |-
            reverse is set to true if results are to be returned in the descending order.

            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /core/id/{did}:
    get:
      summary: Returns DIDDocument based on a DID
      operationId: Query_Did
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryGetDidResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: did
          description: did is the unique identifier of the DIDDocument - it appears like (did:sonr:...)
          in: path
          required: true
          type: string
      tags:
        - Query
  /core/id/alias/{alias}:
    get:
      summary: Returns DIDDocument based on an alias *only Sonr Identities
      operationId: Query_DidByAlsoKnownAs
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryDidByAlsoKnownAsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: alias
          description: aka_aliasid is the unique identifier of the DIDDocument - it appears like ("example.snr")
          in: path
          required: true
          type: string
      tags:
        - Query
  /core/id/alias/{alias}/check:
    get:
      summary: Checks if a given alias is available to register *only Sonr Identities
      operationId: Query_AliasAvailable
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryAliasAvailableResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: alias
          description: alias is the unique identifier of the DIDDocument - it appears like ("example.snr")
          in: path
          required: true
          type: string
      tags:
        - Query
  /core/id/btc:
    get:
      summary: Get All Wallet DIDDocuments for Bitcoin `did:btcr:...`
      operationId: Query_DidAllBtc
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryAllDidResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
            It is less efficient than using key. Only one of offset or key should
            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: |-
            limit is the total number of results to be returned in the result page.
            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.countTotal
          description: |-
            count_total is set to true  to indicate that the result set should include
            a count of the total number of items available for pagination in UIs.
            count_total is only respected when offset is used. It is ignored when key
            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: |-
            reverse is set to true if results are to be returned in the descending order.

            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /core/id/eth:
    get:
      summary: Get All Wallet DIDDocuments for Ethereum `did:ethr:...`
      operationId: Query_DidAllEth
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryAllDidResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
            It is less efficient than using key. Only one of offset or key should
            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: |-
            limit is the total number of results to be returned in the result page.
            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.countTotal
          description: |-
            count_total is set to true  to indicate that the result set should include
            a count of the total number of items available for pagination in UIs.
            count_total is only respected when offset is used. It is ignored when key
            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: |-
            reverse is set to true if results are to be returned in the descending order.

            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /core/id/owner/{owner}:
    get:
      summary: Returns DIDDocument based on an owner
      operationId: Query_DidByOwner
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryDidByOwnerResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: owner
          in: path
          required: true
          type: string
      tags:
        - Query
  /core/org:
    get:
      summary: Lists all known ServiceRecord items.
      operationId: Query_ListServiceOrganizations
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/serviceListServiceOrganizationsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
            It is less efficient than using key. Only one of offset or key should
            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: |-
            limit is the total number of results to be returned in the result page.
            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.countTotal
          description: |-
            count_total is set to true  to indicate that the result set should include
            a count of the total number of items available for pagination in UIs.
            count_total is only respected when offset is used. It is ignored when key
            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: |-
            reverse is set to true if results are to be returned in the descending order.

            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /core/params/identity:
    get:
      summary: Returns parameters for the `x/identity` module.
      operationId: Query_Params
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/coreidentityQueryParamsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - Query
  /core/params/service:
    get:
      summary: Returns the `x/service` module parameters.
      operationId: Query_Params
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/coreserviceQueryParamsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - Query
  /core/service:
    get:
      summary: Lists all known ServiceRecord items.
      operationId: Query_ListServiceRecords
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/serviceListServiceRecordsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
            It is less efficient than using key. Only one of offset or key should
            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: |-
            limit is the total number of results to be returned in the result page.
            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.countTotal
          description: |-
            count_total is set to true  to indicate that the result set should include
            a count of the total number of items available for pagination in UIs.
            count_total is only respected when offset is used. It is ignored when key
            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: |-
            reverse is set to true if results are to be returned in the descending order.

            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /core/service/{origin}:
    get:
      summary: Returns the ServiceRecord for the matching origin.
      operationId: Query_ServiceRecord
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/serviceQueryServiceRecordResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: origin
          in: path
          required: true
          type: string
      tags:
        - Query
  /core/service/{origin}/relationships:
    get:
      summary: |-
        Returns a list of ServiceRelationships for a given ServiceRecord matched by
        origin.
      operationId: Query_ServiceRelationship
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/serviceQueryGetServiceRelationshipResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: origin
          in: path
          required: true
          type: string
      tags:
        - Query
  /core/vault/claims:
    get:
      operationId: Query_ClaimableWalletAll
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vaultQueryAllClaimableWalletResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
            It is less efficient than using key. Only one of offset or key should
            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: |-
            limit is the total number of results to be returned in the result page.
            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.countTotal
          description: |-
            count_total is set to true  to indicate that the result set should include
            a count of the total number of items available for pagination in UIs.
            count_total is only respected when offset is used. It is ignored when key
            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: |-
            reverse is set to true if results are to be returned in the descending order.

            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /core/vault/claims/{id}:
    get:
      summary: Queries a list of ClaimableWallet items.
      operationId: Query_ClaimableWallet
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vaultQueryGetClaimableWalletResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /core/vault/params:
    get:
      summary: Returns parameters for the `x/vault` module.
      operationId: Query_Params
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/corevaultQueryParamsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - Query
  /highway/id/{alias}/wallets:
    get:
      summary: ListWallets returns all wallets for a given Identity.
      operationId: Query_ListWallets
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityListWalletsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: alias
          in: path
          required: true
          type: string
      tags:
        - Query
  /highway/id/{alias}/wallets/{address}:
    get:
      summary: GetWallet returns a wallet for a given address.
      operationId: Query_GetWallet
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityGetWalletResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: alias
          in: path
          required: true
          type: string
        - name: address
          in: path
          required: true
          type: string
      tags:
        - Query
  /highway/id/{alias}/wallets/{address}/sign:
    post:
      summary: SignWallet signs a message with a given wallet.
      operationId: Query_SignWallet
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identitySignWalletResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: alias
          in: path
          required: true
          type: string
        - name: address
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              message:
                type: string
                format: byte
            description: SignWalletRequest is the request type for the Gateway/SignWallet RPC method.
      tags:
        - Query
  /highway/id/{alias}/wallets/{address}/verify:
    post:
      summary: VerifyWallet verifies a message with a given wallet.
      operationId: Query_VerifyWallet
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityVerifyWalletResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: alias
          in: path
          required: true
          type: string
        - name: address
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              message:
                type: string
                format: byte
              signature:
                type: string
                format: byte
            description: |-
              VerifyWalletRequest is the request type for the Gateway/VerifyWallet RPC
              method.
      tags:
        - Query
  /highway/id/{alias}/wallets/create/{coinType}/{name}:
    post:
      summary: |-
        CreateWallet creates a new wallet with a specified name and token type for
        a given Identity.
      operationId: Query_CreateWallet
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityCreateWalletResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: alias
          in: path
          required: true
          type: string
        - name: coinType
          in: path
          required: true
          type: string
        - name: name
          in: path
          required: true
          type: string
      tags:
        - Query
  /highway/service/{origin}/login/finish/{alias}:
    post:
      summary: Verifies the `CredentialAssertion` for a user and fetches User entity.
      operationId: Query_AuthenticateUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/serviceAuthenticateUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: origin
          in: path
          required: true
          type: string
        - name: alias
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              assertion:
                type: string
              challenge:
                type: string
            description: QueryParamsRequest is request type for the Query/Params RPC method.
      tags:
        - Query
  /highway/service/{origin}/login/start/{alias}:
    get:
      summary: Gets the `CredentialRequestOptions` for a user to begin Sonr login.
      operationId: Query_ServiceAssertion
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/serviceGetServiceAssertionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: origin
          in: path
          required: true
          type: string
        - name: alias
          in: path
          required: true
          type: string
        - name: isMobile
          description: optional
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /highway/service/{origin}/register/finish/{alias}:
    post:
      summary: Verifies the `CredentialAssertion` for a user and claims a wallet address.
      operationId: Query_RegisterUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/serviceRegisterUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: origin
          in: path
          required: true
          type: string
        - name: alias
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              ucwId:
                type: string
                format: uint64
              attestation:
                type: string
              challenge:
                type: string
            description: QueryParamsRequest is request type for the Query/Params RPC method.
      tags:
        - Query
  /highway/service/{origin}/register/start/{alias}:
    get:
      summary: Gets the `CredentialCreationOptions` for a user to begin Sonr registration.
      operationId: Query_ServiceAttestation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/serviceGetServiceAttestationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: origin
          in: path
          required: true
          type: string
        - name: alias
          in: path
          required: true
          type: string
        - name: isMobile
          description: optional
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /highway/vault/mailbox/{creator}/read:
    post:
      summary: Reads messages for a given wallet address
      operationId: Query_ReadWalletMail
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vaultReadWalletMailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: creator
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
      tags:
        - Query
  /highway/vault/mailbox/{creator}/send/{to}:
    post:
      summary: Sends an encrypted message to a given wallet address
      operationId: Query_SendWalletMail
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vaultSendWalletMailResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: creator
          in: path
          required: true
          type: string
        - name: to
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              mail:
                $ref: '#/definitions/vaultWalletMail'
            title: |-
              !
              ||--------------------------------------------------------------------------------||
              ! ||                              Gateway API Responses || !
              ||--------------------------------------------------------------------------------||
      tags:
        - Query
definitions:
  coreidentityParams:
    type: object
    properties:
      accountDidMethodName:
        type: string
      accountDidMethodContext:
        type: string
      acccountDiscoveryReward:
        type: string
        format: int64
      didBaseContext:
        type: string
      maximumIdentityAliases:
        type: integer
        format: int32
      supportedDidMethods:
        type: array
        items:
          type: string
    description: Params defines the parameters for the module.
  coreidentityQueryParamsResponse:
    type: object
    properties:
      params:
        $ref: '#/definitions/coreidentityParams'
        description: params holds all the parameters of this module.
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  coreserviceParams:
    type: object
    description: Params defines the parameters for the module.
  coreserviceQueryParamsResponse:
    type: object
    properties:
      params:
        $ref: '#/definitions/coreserviceParams'
        description: params holds all the parameters of this module.
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  corevaultParams:
    type: object
    properties:
      keyshareSeedFragment:
        type: string
      inboxSeedFragment:
        type: string
      channelSeedFragment:
        type: string
      inboxOtmDelay:
        type: integer
        format: int32
    description: Params defines the parameters for the module.
  corevaultQueryParamsResponse:
    type: object
    properties:
      params:
        $ref: '#/definitions/corevaultParams'
        description: params holds all the parameters of this module.
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  identityCreateWalletResponse:
    type: object
    properties:
      address:
        type: string
      owner:
        $ref: '#/definitions/identityDIDDocument'
      accountInfo:
        $ref: '#/definitions/vaultAccountInfo'
    description: |-
      CreateWalletResponse is the response type for the Gateway/CreateWallet RPC
      method.
  identityDIDDocument:
    type: object
    properties:
      context:
        type: array
        items:
          type: string
        title: The JSON-LD context(s) used in the document
      id:
        type: string
        title: The identifier for the DID subject
      controller:
        type: array
        items:
          type: string
        title: optional, the entity/entities controlling the DID subject
      authentication:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationRelationship'
        title: optional, the set of authentication methods associated with the DID subject
      assertionMethod:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationRelationship'
        title: optional, the set of assertion methods associated with the DID subject
      capabilityInvocation:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationRelationship'
        title: optional, the set of capability invocation methods associated with the DID subject
      capabilityDelegation:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationRelationship'
        title: optional, the set of capability delegation methods associated with the DID subject
      keyAgreement:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationRelationship'
        title: optional, the set of key agreement methods associated with the DID subject
      alsoKnownAs:
        type: array
        items:
          type: string
        title: optional, the set of identifiers for other personas or identities related to the DID subject
      metadata:
        type: string
        title: optional, additional metadata related to the DID document
    description: DIDDocument represents a Decentralized Identifier (DID) document that contains information about the DID subject, such as public keys, verification methods, and services.
  identityGetWalletResponse:
    type: object
    properties:
      accountInfo:
        $ref: '#/definitions/vaultAccountInfo'
      owner:
        $ref: '#/definitions/identityDIDDocument'
    description: GetWalletResponse is the response type for the Gateway/GetWallet RPC method.
  identityListWalletsResponse:
    type: object
    properties:
      accountInfos:
        type: array
        items:
          type: object
          $ref: '#/definitions/vaultAccountInfo'
      owner:
        $ref: '#/definitions/identityDIDDocument'
    description: |-
      ListWalletsResponse is the response type for the Gateway/ListWallets RPC
      method.
  identityMsgRegisterIdentityResponse:
    type: object
    properties:
      success:
        type: boolean
      didDocument:
        $ref: '#/definitions/identityDIDDocument'
  identityQueryAliasAvailableResponse:
    type: object
    properties:
      available:
        type: boolean
      existingDocument:
        $ref: '#/definitions/identityDIDDocument'
  identityQueryAllDidResponse:
    type: object
    properties:
      didDocument:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityDIDDocument'
      pagination:
        $ref: '#/definitions/v1beta1PageResponse'
  identityQueryDidByAlsoKnownAsResponse:
    type: object
    properties:
      didDocument:
        $ref: '#/definitions/identityDIDDocument'
        title: A DIDDocument is a JSON-LD object that contains a set of public keys
  identityQueryDidByOwnerResponse:
    type: object
    properties:
      didDocument:
        $ref: '#/definitions/identityDIDDocument'
  identityQueryGetDidResponse:
    type: object
    properties:
      didDocument:
        $ref: '#/definitions/identityDIDDocument'
        title: A DIDDocument is a JSON-LD object that contains a set of public keys
  identitySignWalletResponse:
    type: object
    properties:
      signature:
        type: string
        format: byte
      message:
        type: string
        format: byte
      accountInfo:
        $ref: '#/definitions/vaultAccountInfo'
      owner:
        $ref: '#/definitions/identityDIDDocument'
    description: |-
      SignWalletResponse is the response type for the Gateway/SignWallet RPC
      method.
  identityVerificationMethod:
    type: object
    properties:
      id:
        type: string
        title: The identifier for the verification method
      type:
        type: string
        title: The type of the verification method
      controller:
        type: string
        title: The entity controlling the verification method
      publicKeyJwk:
        type: string
        title: optional, the public key in JSON Web Key (JWK) format
      publicKeyMultibase:
        type: string
        title: optional, the public key in multibase-encoded format
      blockchainAccountId:
        type: string
        title: optional, the blockchain account identifier associated with the verification method
      metadata:
        type: string
        title: additional metadata related to the verification method
    description: VerificationMethod represents a verification method that can be used to authenticate the DID subject or perform other cryptographic operations.
  identityVerificationRelationship:
    type: object
    properties:
      verificationMethod:
        $ref: '#/definitions/identityVerificationMethod'
        title: The verification method associated with the relationship
      reference:
        type: string
        title: The reference identifier for the relationship
      type:
        type: string
        title: The type of the verification relationship
      owner:
        type: string
        title: The idx address of the owner of the verification relationship
    description: VerificationRelationship represents a relationship between a verification method and a specific verification purpose (e.g., authentication, assertion, etc.).
  identityVerifyWalletResponse:
    type: object
    properties:
      verified:
        type: boolean
      accountInfo:
        $ref: '#/definitions/vaultAccountInfo'
      owner:
        $ref: '#/definitions/identityDIDDocument'
    description: |-
      VerifyWalletResponse is the response type for the Gateway/VerifyWallet RPC
      method.
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  serviceAuthenticateUserResponse:
    type: object
    properties:
      did:
        type: string
      identity:
        $ref: '#/definitions/identityDIDDocument'
      alias:
        type: string
      webauthnCredential:
        $ref: '#/definitions/serviceWebauthnCredential'
      vaultKeyshare:
        $ref: '#/definitions/vaultVaultKeyshare'
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  serviceGetServiceAssertionResponse:
    type: object
    properties:
      did:
        type: string
      assertionOptions:
        type: string
      origin:
        type: string
      challenge:
        type: string
  serviceGetServiceAttestationResponse:
    type: object
    properties:
      alias:
        type: string
      attestionOptions:
        type: string
      origin:
        type: string
      challenge:
        type: string
      ucwId:
        type: string
        format: uint64
  serviceListServiceOrganizationsResponse:
    type: object
    properties:
      serviceRecord:
        type: array
        items:
          type: object
          $ref: '#/definitions/serviceServiceOrganization'
      pagination:
        $ref: '#/definitions/v1beta1PageResponse'
  serviceListServiceRecordsResponse:
    type: object
    properties:
      serviceRecord:
        type: array
        items:
          type: object
          $ref: '#/definitions/serviceServiceRecord'
      pagination:
        $ref: '#/definitions/v1beta1PageResponse'
  serviceMsgAuthenticateUserEntityResponse:
    type: object
    properties:
      success:
        type: boolean
      did:
        type: string
      identity:
        $ref: '#/definitions/identityDIDDocument'
  serviceMsgBurnServiceRecordResponse:
    type: object
  serviceMsgRegisterServiceRecordResponse:
    type: object
    properties:
      ok:
        type: boolean
      groupAddress:
        type: string
  serviceMsgRegisterUserEntityResponse:
    type: object
    properties:
      success:
        type: boolean
      did:
        type: string
      identity:
        $ref: '#/definitions/identityDIDDocument'
  serviceMsgUpdateServiceRecordResponse:
    type: object
  servicePermissions:
    type: string
    enum:
      - SR_BASE
      - SR_SIGN
      - SR_WRITE
      - SR_CREATE
      - SR_NOTIFY
    default: SR_BASE
    description: |-
      Permissions are a bitfield of permissions that a user has for a given service in order
      to perform certain actions.

       - SR_BASE: Authenticated user with basic public info and read access to public resources
       - SR_SIGN: Authenticated user with service-side access to signing privelages
       - SR_WRITE: Authenticated user with service-side access to writing to ipfs
       - SR_CREATE: Authenticated user with service-side access to updating user DID documents
      and creating new ones
       - SR_NOTIFY: Authenticated user with service-side access to receiving notifications
  serviceQueryGetServiceRelationshipResponse:
    type: object
    properties:
      ServiceRelationships:
        $ref: '#/definitions/serviceServiceRelationship'
  serviceQueryServiceRecordResponse:
    type: object
    properties:
      serviceRecord:
        $ref: '#/definitions/serviceServiceRecord'
  serviceRegisterUserResponse:
    type: object
    properties:
      did:
        type: string
      identity:
        $ref: '#/definitions/identityDIDDocument'
      alias:
        type: string
      webauthnCredential:
        $ref: '#/definitions/serviceWebauthnCredential'
      vaultKeyshare:
        $ref: '#/definitions/vaultVaultKeyshare'
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  serviceServiceOrganization:
    type: object
    properties:
      id:
        type: string
      admin:
        type: string
        title: The entity controlling the service
      serviceRecords:
        type: array
        items:
          type: string
        title: The origins that can access the service
      name:
        type: string
        title: The name of the service
      description:
        type: string
        title: The description of the service
      tlds:
        type: array
        items:
          type: string
        title: The tlds that can access the service
  serviceServiceRecord:
    type: object
    properties:
      id:
        type: string
      controller:
        type: string
        title: The entity controlling the service
      origins:
        type: array
        items:
          type: string
      name:
        type: string
        title: The name of the service
      description:
        type: string
        title: The description of the service
      permissions:
        $ref: '#/definitions/servicePermissions'
  serviceServiceRelationship:
    type: object
    properties:
      reference:
        type: string
        title: Reference is the reference to the service record
      did:
        type: string
        title: Did is the user's DID
      count:
        type: integer
        format: int64
        title: Count is the number of times the user has interacted with the service
    description: |-
      ServiceRelationship is a relationship between a service and a User entity. This relation
      is used to track the number of times a user has interacted with a service, utilizing a
      verifiable random function (VRF) to generate a random number that is used to determine
      whether or not a user has access to a service.
  serviceWebauthnAuthenticator:
    type: object
    properties:
      aaguid:
        type: string
        format: byte
        description: |-
          The AAGUID of the authenticator. An AAGUID is defined as an array containing the globally unique
          identifier of the authenticator model being sought.
      signCount:
        type: integer
        format: int64
        description: |-
          SignCount -Upon a new login operation, the Relying Party compares the stored signature counter value
          with the new signCount value returned in the assertion’s authenticator data. If this new
          signCount value is less than or equal to the stored value, a cloned authenticator may
          exist, or the authenticator may be malfunctioning.
      attachment:
        type: string
        description: |-
          Attachment - This is a signal that the authenticator may be cloned, i.e. at least two copies of the
          credential private key may exist and are being used in parallel. Relying Parties should incorporate
          this information into their risk scoring. Whether the Relying Party updates the stored signature
          counter value in this case, or not, or fails the authentication ceremony or not, is Relying Party-specific.
    title: WebauthnAuthenticator contains certificate information about a WebAuthn authenticator
  serviceWebauthnCredential:
    type: object
    properties:
      id:
        type: string
        format: byte
        description: A probabilistically-unique byte sequence identifying a public key credential source and its authentication assertions.
      publicKey:
        type: string
        format: byte
        description: |-
          The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
          a Relying Party at registration time (see also public key credential). The private key portion of the credential key
          pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
          used as the attestation key pair, see self attestation for details.
      attestationType:
        type: string
        description: The attestation format used (if any) by the authenticator when creating the credential.
      transport:
        type: array
        items:
          type: string
        description: The transports used by the authenticator when creating the credential.
      authenticator:
        $ref: '#/definitions/serviceWebauthnAuthenticator'
        title: The Authenticator information for a given certificate
      controller:
        type: string
        title: The DID Controller of the credential
    title: WebauthnCredential contains all needed information about a WebAuthn credential for storage
  v1beta1PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
      countTotal:
        type: boolean
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
      reverse:
        type: boolean
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  v1beta1PageResponse:
    type: object
    properties:
      nextKey:
        type: string
        format: byte
        description: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently. It will be empty if
          there are no more results.
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
  vaultAccountInfo:
    type: object
    properties:
      address:
        type: string
        description: This field represents the unique account address associated with the user. It is typically a hash or an encoded public key, depending on the underlying blockchain or network.
      name:
        type: string
        description: This field contains the human-readable name associated with the account. It is used for easier identification and management of the account by the user.
      did:
        type: string
        description: This field stores the Decentralized Identifier (DID) of the user, which is a unique, resolvable, and cryptographically verifiable identifier. DIDs are used to enable secure and decentralized identity management.
      coinType:
        type: string
        description: This field specifies the type of the cryptocurrency or token associated with the account. It is used to differentiate between various cryptocurrencies or tokens that the user may hold in their wallet.
      chainId:
        type: string
        description: This field represents the identifier of the blockchain or network that the account is associated with. Chain IDs are used to distinguish between different blockchains or networks, such as Ethereum, Cosmos, or Filecoin.
      publicKey:
        type: string
        description: This field stores the base64 encoded public key of the account, which is used for cryptographic operations such as signing and verifying transactions. The public key is derived from the user's private key and is an essential part of the account's security.
      type:
        type: string
        description: This field stores the type of the public key. It is used to differentiate between various public key types, such as secp256k1, ed25519, and sr25519.
    description: Account represents a user's account on a blockchain or network. It contains the user's address, name, DID, and other information that is used to identify and manage the account.
  vaultClaimableWallet:
    type: object
    properties:
      index:
        type: string
        format: uint64
      creator:
        type: string
      did:
        type: string
  vaultQueryAllClaimableWalletResponse:
    type: object
    properties:
      ClaimableWallet:
        type: array
        items:
          type: object
          $ref: '#/definitions/vaultClaimableWallet'
      pagination:
        $ref: '#/definitions/v1beta1PageResponse'
  vaultQueryGetClaimableWalletResponse:
    type: object
    properties:
      ClaimableWallet:
        $ref: '#/definitions/vaultClaimableWallet'
  vaultReadWalletMailResponse:
    type: object
    properties:
      mailboxes:
        type: object
        additionalProperties:
          $ref: '#/definitions/vaultWalletMailbox'
  vaultSendWalletMailResponse:
    type: object
    properties:
      success:
        type: boolean
      timestamp:
        type: string
        format: int64
      signature:
        type: string
        format: byte
  vaultVaultKeyshare:
    type: object
    properties:
      id:
        type: string
      config:
        type: string
        format: byte
      coinType:
        type: integer
        format: int64
    description: |-
      VaultKeyshare represents the underlying MPC shard that is used to sequence an
      account. The Key for this structure is based off the Authentication Fragment
      used to claim the account.
  vaultWalletMail:
    type: object
    properties:
      id:
        type: string
      from:
        type: string
      to:
        type: string
      subject:
        type: string
      body:
        type: string
      signature:
        type: string
        format: byte
      timestamp:
        type: string
        format: int64
    title: WalletMail is a message that can be sent to a WalletMailbox
  vaultWalletMailbox:
    type: object
    properties:
      owner:
        type: string
      address:
        type: string
      inbox:
        type: array
        items:
          type: object
          $ref: '#/definitions/vaultWalletMail'
    title: |-
      WalletMailbox is a mailbox for an account address that is controlled by a
      Sonr Identity
