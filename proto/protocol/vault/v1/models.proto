syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrhq.protocol.vault.v1;

import "common/v1/data.proto";
import "google/api/annotations.proto";
import "sonr/identity/did.proto";

option go_package = "github.com/sonr-hq/sonr/x/identity/types/vault/v1";

// Account is used for storing all credentials and their locations to be encrypted.
message Account {
  // Address is the associated Sonr address.
  string address = 1;

  // Credentials is a list of all credentials associated with the account.
  map<string, Credential> credentials = 2;
}

message AccountConfig {
  // Name is the name of the account.
  string name = 1;

  // Address is the associated blockchain address.
  string address = 2;

  // PublicKey is the public key of the account.
  bytes public_key = 3;

  // Index is the index of the account.
  uint32 index = 4;

  // Bech32Prefix is the bech32 prefix of the account.
  string bech32_prefix = 5;

  // CreatedAt is the time the account was created.
  int64 created_at = 6;

  // Shares is a list of all shares associated with the account.
  repeated ShareConfig shares = 7;
}

// Credential is used for storing a single credential.
message Credential {
  // Name is the name of the credential.
  string name = 1;

  // Type is the type of the credential. (e.g. "biometric", "webauthn")
  string type = 2;

  // Webauthn is for PassKey data of the credential.
  bytes credential = 3;
}

// ChallengeType is used for defining the type of challenge.
enum ChallengeType {
  // CHALLENGE_TYPE_UNSPECIFIED is the default value.
  CHALLENGE_TYPE_UNSPECIFIED = 0;

  // CHALLENGE_TYPE_ATTESTION is used for attestation challenges.
  CHALLENGE_TYPE_ATTESTION = 1;

  // CHALLENGE_TYPE_ASSERTION is used for assertion challenges.
  CHALLENGE_TYPE_ASSERTION = 2;
}

message ShareConfig {
  // SelfID is the partyID of the share
  string self_id = 1;

  // PublicKey is the public key of the share
  bytes public_key = 2;

  // CreatedAt is the time the share was created.
  int64 created_at = 3;

  // Network is the name of the network the share is on.
  string network = 4;

  // ConfigData is the config data of the share.
  bytes config_data = 5;
}

message WalletConfig {
  // Address is the associated blockchain address.
  string address = 1;

  // PublicKey is the public key of the wallet.
  bytes public_key = 2;

  // Algorithm is the algorithm of the wallet.
  string algorithm = 3;

  // CID is the CID of the wallet.
  string cid = 4;

  // Accounts is the map of accounts associated with the wallet.
  map<string, AccountConfig> accounts = 5;
}
