// Code generated by protoc-gen-go-cosmos-orm-proto. DO NOT EDIT.
syntax = "proto3";
package sonrhq.sonr.identity.module.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "sonrhq/sonr/identity/module/v1/state.proto";

// StateQueryService queries the state of the tables specified by sonrhq/sonr/identity/module/v1/state.proto.
service StateQueryService {
  // Get queries the Account table by its primary key.
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {}
  // GetAccountByAddress queries the Account table by its Address index
  rpc GetAccountByAddress(GetAccountByAddressRequest) returns (GetAccountByAddressResponse) {}
  // GetAccountByPublicKey queries the Account table by its PublicKey index
  rpc GetAccountByPublicKey(GetAccountByPublicKeyRequest) returns (GetAccountByPublicKeyResponse) {}
  // ListAccount queries the Account table using prefix and range queries against defined indexes.
  rpc ListAccount(ListAccountRequest) returns (ListAccountResponse) {}
  // Get queries the Blockchain table by its primary key.
  rpc GetBlockchain(GetBlockchainRequest) returns (GetBlockchainResponse) {}
  // GetBlockchainByChainId queries the Blockchain table by its ChainId index
  rpc GetBlockchainByChainId(GetBlockchainByChainIdRequest) returns (GetBlockchainByChainIdResponse) {}
  // GetBlockchainByName queries the Blockchain table by its Name index
  rpc GetBlockchainByName(GetBlockchainByNameRequest) returns (GetBlockchainByNameResponse) {}
  // ListBlockchain queries the Blockchain table using prefix and range queries against defined indexes.
  rpc ListBlockchain(ListBlockchainRequest) returns (ListBlockchainResponse) {}
  // Get queries the Identifier table by its primary key.
  rpc GetIdentifier(GetIdentifierRequest) returns (GetIdentifierResponse) {}
  // ListIdentifier queries the Identifier table using prefix and range queries against defined indexes.
  rpc ListIdentifier(ListIdentifierRequest) returns (ListIdentifierResponse) {}
}

// GetAccountRequest is the StateQuery/GetAccountRequest request type.
message GetAccountRequest {
  // sequence specifies the value of the sequence field in the primary key.
  uint64 sequence = 1;
}

// GetAccountResponse is the StateQuery/GetAccountResponse response type.
message GetAccountResponse {
  // value is the response value.
  Account value = 1;
}

// GetAccountByAddressRequest is the StateQuery/GetAccountByAddressRequest request type.
message GetAccountByAddressRequest {
  string address = 1;
}

// GetAccountByAddressResponse is the StateQuery/GetAccountByAddressResponse response type.
message GetAccountByAddressResponse {
  Account value = 1;
}

// GetAccountByPublicKeyRequest is the StateQuery/GetAccountByPublicKeyRequest request type.
message GetAccountByPublicKeyRequest {
  bytes public_key = 1;
}

// GetAccountByPublicKeyResponse is the StateQuery/GetAccountByPublicKeyResponse response type.
message GetAccountByPublicKeyResponse {
  Account value = 1;
}

// ListAccountRequest is the StateQuery/ListAccountRequest request type.
message ListAccountRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // sequence specifies the value of the Sequence index key to use in the query.
      Sequence sequence = 1;
      // address specifies the value of the Address index key to use in the query.
      Address address = 2;
      // public_key specifies the value of the PublicKey index key to use in the query.
      PublicKey public_key = 3;
    }
    
    message Sequence {
      // sequence is the value of the sequence field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 sequence = 1;
    }
    
    message Address {
      // address is the value of the address field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string address = 1;
    }
    
    message PublicKey {
      // public_key is the value of the public_key field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional bytes public_key = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListAccountResponse is the StateQuery/ListAccountResponse response type.
message ListAccountResponse {
  // values are the results of the query.
  repeated Account values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetBlockchainRequest is the StateQuery/GetBlockchainRequest request type.
message GetBlockchainRequest {
  // index specifies the value of the index field in the primary key.
  uint64 index = 1;
}

// GetBlockchainResponse is the StateQuery/GetBlockchainResponse response type.
message GetBlockchainResponse {
  // value is the response value.
  Blockchain value = 1;
}

// GetBlockchainByChainIdRequest is the StateQuery/GetBlockchainByChainIdRequest request type.
message GetBlockchainByChainIdRequest {
  string chain_id = 1;
}

// GetBlockchainByChainIdResponse is the StateQuery/GetBlockchainByChainIdResponse response type.
message GetBlockchainByChainIdResponse {
  Blockchain value = 1;
}

// GetBlockchainByNameRequest is the StateQuery/GetBlockchainByNameRequest request type.
message GetBlockchainByNameRequest {
  string name = 1;
}

// GetBlockchainByNameResponse is the StateQuery/GetBlockchainByNameResponse response type.
message GetBlockchainByNameResponse {
  Blockchain value = 1;
}

// ListBlockchainRequest is the StateQuery/ListBlockchainRequest request type.
message ListBlockchainRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // index specifies the value of the Index index key to use in the query.
      Index index = 1;
      // chain_id specifies the value of the ChainId index key to use in the query.
      ChainId chain_id = 2;
      // name specifies the value of the Name index key to use in the query.
      Name name = 3;
    }
    
    message Index {
      // index is the value of the index field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 index = 1;
    }
    
    message ChainId {
      // chain_id is the value of the chain_id field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string chain_id = 1;
    }
    
    message Name {
      // name is the value of the name field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional string name = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListBlockchainResponse is the StateQuery/ListBlockchainResponse response type.
message ListBlockchainResponse {
  // values are the results of the query.
  repeated Blockchain values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GetIdentifierRequest is the StateQuery/GetIdentifierRequest request type.
message GetIdentifierRequest {
  // index specifies the value of the index field in the primary key.
  uint64 index = 1;
}

// GetIdentifierResponse is the StateQuery/GetIdentifierResponse response type.
message GetIdentifierResponse {
  // value is the response value.
  Identifier value = 1;
}

// ListIdentifierRequest is the StateQuery/ListIdentifierRequest request type.
message ListIdentifierRequest {
  // IndexKey specifies the value of an index key to use in prefix and range queries.
  message IndexKey {
    // key specifies the index key value.
    oneof key {
      // index specifies the value of the Index index key to use in the query.
      Index index = 1;
    }
    
    message Index {
      // index is the value of the index field in the index.
      // It can be omitted to query for all valid values of that field in this segment of the index.
      optional uint64 index = 1;
    }
  }
  
  // query specifies the type of query - either a prefix or range query.
  oneof query {
    // prefix_query specifies the index key value to use for the prefix query.
    IndexKey prefix_query = 1;
    // range_query specifies the index key from/to values to use for the range query.
    RangeQuery range_query = 2;
  }
  // pagination specifies optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
  
  // RangeQuery specifies the from/to index keys for a range query.
  message RangeQuery {
    // from is the index key to use for the start of the range query.
    // To query from the start of an index, specify an index key for that index with empty values.
    IndexKey from = 1;
    // to is the index key to use for the end of the range query.
    // The index key type MUST be the same as the index key type used for from.
    // To query from to the end of an index it can be omitted.
    IndexKey to = 2;
  }
}

// ListIdentifierResponse is the StateQuery/ListIdentifierResponse response type.
message ListIdentifierResponse {
  // values are the results of the query.
  repeated Identifier values = 1;
  // pagination is the pagination response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

