// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: highway/v1/vault.proto

// Package Motor is used for defining a Motor node and its properties.

package highwayv1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/sonrhq/core/types/common"
	_ "github.com/sonrhq/core/x/identity/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AddShareRequest is the request to add a new key to the wallet ipfs store.
type AddShareRequest struct {
	// The origin of the request. This is used to query the Blockchain for the Service DID.
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// The user defined label for the device.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// The security threshold for the wallet account.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// The Unique Identifier for the client device. Typically in a cookie.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *AddShareRequest) Reset()         { *m = AddShareRequest{} }
func (m *AddShareRequest) String() string { return proto.CompactTextString(m) }
func (*AddShareRequest) ProtoMessage()    {}
func (*AddShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4761d9884e4d1728, []int{0}
}
func (m *AddShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddShareRequest.Merge(m, src)
}
func (m *AddShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddShareRequest proto.InternalMessageInfo

func (m *AddShareRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *AddShareRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AddShareRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AddShareRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// AddShareResponse is the response to a AddShare request.
type AddShareResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *AddShareResponse) Reset()         { *m = AddShareResponse{} }
func (m *AddShareResponse) String() string { return proto.CompactTextString(m) }
func (*AddShareResponse) ProtoMessage()    {}
func (*AddShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4761d9884e4d1728, []int{1}
}
func (m *AddShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddShareResponse.Merge(m, src)
}
func (m *AddShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddShareResponse proto.InternalMessageInfo

func (m *AddShareResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddShareResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// SyncShareRequest is the request to sync a key to the wallet ipfs store.
type SyncShareRequest struct {
	// The origin of the request. This is used to query the Blockchain for the Service DID.
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// The user defined label for the device.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// The security threshold for the wallet account.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// The signed credential response from the user.
	CredentialResponse string `protobuf:"bytes,4,opt,name=credential_response,json=credentialResponse,proto3" json:"credential_response,omitempty"`
}

func (m *SyncShareRequest) Reset()         { *m = SyncShareRequest{} }
func (m *SyncShareRequest) String() string { return proto.CompactTextString(m) }
func (*SyncShareRequest) ProtoMessage()    {}
func (*SyncShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4761d9884e4d1728, []int{2}
}
func (m *SyncShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncShareRequest.Merge(m, src)
}
func (m *SyncShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncShareRequest proto.InternalMessageInfo

func (m *SyncShareRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *SyncShareRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SyncShareRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SyncShareRequest) GetCredentialResponse() string {
	if m != nil {
		return m.CredentialResponse
	}
	return ""
}

// RegisterFinishResponse is the response to a CreateAccount request.
type SyncShareResponse struct {
	// Success is true if the account exists.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The key for the item.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The value for the item.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SyncShareResponse) Reset()         { *m = SyncShareResponse{} }
func (m *SyncShareResponse) String() string { return proto.CompactTextString(m) }
func (*SyncShareResponse) ProtoMessage()    {}
func (*SyncShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4761d9884e4d1728, []int{3}
}
func (m *SyncShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncShareResponse.Merge(m, src)
}
func (m *SyncShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncShareResponse proto.InternalMessageInfo

func (m *SyncShareResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SyncShareResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SyncShareResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LoginStartRequest is the request to login to an account.
type RefreshShareRequest struct {
	// The origin of the request. This is used to query the Blockchain for the Service DID.
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// The Sonr account address for the user.
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (m *RefreshShareRequest) Reset()         { *m = RefreshShareRequest{} }
func (m *RefreshShareRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshShareRequest) ProtoMessage()    {}
func (*RefreshShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4761d9884e4d1728, []int{4}
}
func (m *RefreshShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshShareRequest.Merge(m, src)
}
func (m *RefreshShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefreshShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshShareRequest proto.InternalMessageInfo

func (m *RefreshShareRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *RefreshShareRequest) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

// LoginStartResponse is the response to a Login request.
type RefreshShareResponse struct {
	// Success is true if the account exists.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The account address for the user.
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// Json encoded WebAuthn credential options for the user to sign with.
	CredentialOptions string `protobuf:"bytes,3,opt,name=credential_options,json=credentialOptions,proto3" json:"credential_options,omitempty"`
	// Relaying party id for the request.
	RpId string `protobuf:"bytes,4,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	// Relaying party name for the request.
	RpName string `protobuf:"bytes,5,opt,name=rp_name,json=rpName,proto3" json:"rp_name,omitempty"`
}

func (m *RefreshShareResponse) Reset()         { *m = RefreshShareResponse{} }
func (m *RefreshShareResponse) String() string { return proto.CompactTextString(m) }
func (*RefreshShareResponse) ProtoMessage()    {}
func (*RefreshShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4761d9884e4d1728, []int{5}
}
func (m *RefreshShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshShareResponse.Merge(m, src)
}
func (m *RefreshShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *RefreshShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshShareResponse proto.InternalMessageInfo

func (m *RefreshShareResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RefreshShareResponse) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *RefreshShareResponse) GetCredentialOptions() string {
	if m != nil {
		return m.CredentialOptions
	}
	return ""
}

func (m *RefreshShareResponse) GetRpId() string {
	if m != nil {
		return m.RpId
	}
	return ""
}

func (m *RefreshShareResponse) GetRpName() string {
	if m != nil {
		return m.RpName
	}
	return ""
}

type ReadMailRequest struct {
	// The origin of the request. This is used to query the Blockchain for the Service DID.
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// The Sonr account address for the user.
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (m *ReadMailRequest) Reset()         { *m = ReadMailRequest{} }
func (m *ReadMailRequest) String() string { return proto.CompactTextString(m) }
func (*ReadMailRequest) ProtoMessage()    {}
func (*ReadMailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4761d9884e4d1728, []int{6}
}
func (m *ReadMailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadMailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadMailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadMailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadMailRequest.Merge(m, src)
}
func (m *ReadMailRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadMailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadMailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadMailRequest proto.InternalMessageInfo

func (m *ReadMailRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *ReadMailRequest) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

type SendMailRequest struct {
	Origin      string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Message     string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SendMailRequest) Reset()         { *m = SendMailRequest{} }
func (m *SendMailRequest) String() string { return proto.CompactTextString(m) }
func (*SendMailRequest) ProtoMessage()    {}
func (*SendMailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4761d9884e4d1728, []int{7}
}
func (m *SendMailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMailRequest.Merge(m, src)
}
func (m *SendMailRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendMailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendMailRequest proto.InternalMessageInfo

func (m *SendMailRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *SendMailRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *SendMailRequest) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *SendMailRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadMailResponse struct {
	Success  bool              `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Messages map[string]string `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ReadMailResponse) Reset()         { *m = ReadMailResponse{} }
func (m *ReadMailResponse) String() string { return proto.CompactTextString(m) }
func (*ReadMailResponse) ProtoMessage()    {}
func (*ReadMailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4761d9884e4d1728, []int{8}
}
func (m *ReadMailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadMailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadMailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadMailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadMailResponse.Merge(m, src)
}
func (m *ReadMailResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReadMailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadMailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadMailResponse proto.InternalMessageInfo

func (m *ReadMailResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ReadMailResponse) GetMessages() map[string]string {
	if m != nil {
		return m.Messages
	}
	return nil
}

type SendMailResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *SendMailResponse) Reset()         { *m = SendMailResponse{} }
func (m *SendMailResponse) String() string { return proto.CompactTextString(m) }
func (*SendMailResponse) ProtoMessage()    {}
func (*SendMailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4761d9884e4d1728, []int{9}
}
func (m *SendMailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMailResponse.Merge(m, src)
}
func (m *SendMailResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendMailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendMailResponse proto.InternalMessageInfo

func (m *SendMailResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*AddShareRequest)(nil), "sonrhq.highway.v1.AddShareRequest")
	proto.RegisterType((*AddShareResponse)(nil), "sonrhq.highway.v1.AddShareResponse")
	proto.RegisterType((*SyncShareRequest)(nil), "sonrhq.highway.v1.SyncShareRequest")
	proto.RegisterType((*SyncShareResponse)(nil), "sonrhq.highway.v1.SyncShareResponse")
	proto.RegisterType((*RefreshShareRequest)(nil), "sonrhq.highway.v1.RefreshShareRequest")
	proto.RegisterType((*RefreshShareResponse)(nil), "sonrhq.highway.v1.RefreshShareResponse")
	proto.RegisterType((*ReadMailRequest)(nil), "sonrhq.highway.v1.ReadMailRequest")
	proto.RegisterType((*SendMailRequest)(nil), "sonrhq.highway.v1.SendMailRequest")
	proto.RegisterType((*ReadMailResponse)(nil), "sonrhq.highway.v1.ReadMailResponse")
	proto.RegisterMapType((map[string]string)(nil), "sonrhq.highway.v1.ReadMailResponse.MessagesEntry")
	proto.RegisterType((*SendMailResponse)(nil), "sonrhq.highway.v1.SendMailResponse")
}

func init() { proto.RegisterFile("highway/v1/vault.proto", fileDescriptor_4761d9884e4d1728) }

var fileDescriptor_4761d9884e4d1728 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0x8e, 0x93, 0xa6, 0x49, 0xa7, 0xbf, 0x1f, 0x49, 0xb7, 0x55, 0x1b, 0x59, 0x22, 0x02, 0x83,
	0x68, 0x0f, 0x60, 0x2b, 0xe5, 0x82, 0xa8, 0x84, 0x54, 0x24, 0x0e, 0x08, 0x15, 0x90, 0xa3, 0xf6,
	0x80, 0x90, 0xa2, 0xad, 0x77, 0x9b, 0x58, 0xc4, 0xbb, 0xee, 0xee, 0x3a, 0x28, 0x0f, 0xc0, 0x81,
	0x1b, 0x4f, 0x83, 0x10, 0x4f, 0xc0, 0xb1, 0x47, 0x8e, 0xa8, 0x7d, 0x11, 0x64, 0x7b, 0x1d, 0xa7,
	0xae, 0xd5, 0x14, 0x09, 0x6e, 0x9e, 0x3f, 0xfe, 0xf6, 0x9b, 0x6f, 0x66, 0x67, 0x61, 0x73, 0xe4,
	0x0f, 0x47, 0x1f, 0xf1, 0xd4, 0x99, 0xf4, 0x9c, 0x09, 0x8e, 0xc6, 0xca, 0x0e, 0x05, 0x57, 0x1c,
	0xad, 0x49, 0xce, 0xc4, 0xe8, 0xd4, 0xd6, 0x61, 0x7b, 0xd2, 0x33, 0xb7, 0x3c, 0x2e, 0xa8, 0xe3,
	0x13, 0xca, 0x94, 0xaf, 0xa6, 0x0e, 0xf1, 0x49, 0x9a, 0x6b, 0x6e, 0xc6, 0xb9, 0x8e, 0xc7, 0x83,
	0x80, 0x33, 0xc7, 0x67, 0x27, 0x3c, 0xf5, 0x5b, 0x01, 0xb4, 0xf6, 0x09, 0xe9, 0x8f, 0xb0, 0xa0,
	0x2e, 0x3d, 0x8d, 0xa8, 0x54, 0x68, 0x13, 0x96, 0xb9, 0xf0, 0x87, 0x3e, 0xeb, 0x18, 0x77, 0x8c,
	0x9d, 0x15, 0x57, 0x5b, 0xc8, 0x84, 0x66, 0x24, 0xa9, 0x60, 0x38, 0xa0, 0x9d, 0x6a, 0x12, 0x99,
	0xd9, 0xa8, 0x0d, 0xb5, 0x0f, 0x74, 0xda, 0xa9, 0x25, 0xee, 0xf8, 0x13, 0x6d, 0x40, 0x7d, 0x82,
	0xc7, 0x11, 0xed, 0x2c, 0x25, 0xbe, 0xd4, 0xb0, 0x9e, 0x41, 0x3b, 0x3f, 0x4e, 0x86, 0x9c, 0x49,
	0x8a, 0x3a, 0xd0, 0x90, 0x91, 0xe7, 0x51, 0x29, 0x93, 0x03, 0x9b, 0x6e, 0x66, 0x66, 0xa8, 0xd5,
	0x19, 0xaa, 0xf5, 0xd9, 0x80, 0x76, 0x7f, 0xca, 0xbc, 0x7f, 0x40, 0xd8, 0x81, 0x75, 0x4f, 0xd0,
	0x44, 0x39, 0x3c, 0x1e, 0x08, 0xcd, 0x4e, 0xd3, 0x47, 0x79, 0x28, 0xe3, 0x6d, 0x1d, 0xc2, 0xda,
	0x1c, 0x95, 0x3f, 0x2f, 0x26, 0x97, 0xa8, 0x36, 0x2f, 0xd1, 0x11, 0xac, 0xbb, 0xf4, 0x44, 0x50,
	0x39, 0xba, 0x51, 0x91, 0xdb, 0xd0, 0xc2, 0x9e, 0xc7, 0x23, 0xa6, 0x06, 0x98, 0x10, 0x11, 0x1f,
	0x9c, 0x1e, 0x71, 0x4b, 0xbb, 0xf7, 0x53, 0xaf, 0xf5, 0xd5, 0x80, 0x8d, 0xcb, 0xc0, 0x0b, 0x29,
	0xdf, 0x14, 0x1b, 0x3d, 0x82, 0x39, 0x81, 0x06, 0x3c, 0x54, 0x3e, 0x67, 0x52, 0x97, 0xb5, 0x96,
	0x47, 0xde, 0xa4, 0x01, 0xb4, 0x0e, 0x75, 0x11, 0x0e, 0x7c, 0xa2, 0xc5, 0x5d, 0x12, 0xe1, 0x4b,
	0x82, 0xb6, 0xa0, 0x21, 0xc2, 0x41, 0xd2, 0xac, 0x7a, 0x5a, 0xa1, 0x08, 0x5f, 0xe3, 0x80, 0x5a,
	0x2e, 0xb4, 0x5c, 0x8a, 0xc9, 0x01, 0xf6, 0xc7, 0x7f, 0x4d, 0x8c, 0x4f, 0x06, 0xb4, 0xfa, 0x94,
	0xdd, 0x08, 0xf4, 0x2e, 0xfc, 0x77, 0x22, 0x78, 0x50, 0x40, 0x5c, 0x8d, 0x7d, 0x59, 0xfd, 0xb7,
	0x01, 0x14, 0x9f, 0x25, 0xa4, 0x75, 0xaf, 0x28, 0x9e, 0x85, 0x3b, 0xd0, 0x08, 0xa8, 0x94, 0x78,
	0x98, 0x8d, 0x53, 0x66, 0x5a, 0xdf, 0x0c, 0x68, 0xe7, 0xc5, 0x2d, 0x6c, 0xc8, 0x01, 0x34, 0xf5,
	0x9f, 0x31, 0x8d, 0xda, 0xce, 0xea, 0x6e, 0xcf, 0xbe, 0xb2, 0x04, 0xec, 0x22, 0xa0, 0x7d, 0xa0,
	0xff, 0x79, 0xc1, 0x94, 0x98, 0xba, 0x33, 0x08, 0x73, 0x0f, 0xfe, 0xbf, 0x14, 0xca, 0x66, 0xd4,
	0x28, 0x99, 0xd1, 0xea, 0xdc, 0x8c, 0x3e, 0xad, 0x3e, 0x31, 0xac, 0x87, 0xd0, 0xce, 0x15, 0x5c,
	0xc4, 0x7c, 0xf7, 0x7b, 0x0d, 0xea, 0x47, 0xf1, 0xee, 0x42, 0x6f, 0xa1, 0xb6, 0x4f, 0x08, 0xb2,
	0x4a, 0x88, 0x17, 0x36, 0x91, 0x79, 0xef, 0xda, 0x1c, 0x7d, 0x0d, 0x2b, 0xa8, 0x0f, 0x4b, 0xf1,
	0x45, 0x44, 0x65, 0xe9, 0xc5, 0x65, 0x61, 0xde, 0xbf, 0x3e, 0x69, 0x06, 0xfa, 0x1e, 0x1a, 0xfa,
	0xb6, 0xa0, 0x07, 0xa5, 0x1a, 0x5f, 0xb9, 0xa2, 0xe6, 0xf6, 0xc2, 0xbc, 0x19, 0xfa, 0x21, 0x34,
	0xb3, 0x2e, 0x95, 0x2a, 0x51, 0x18, 0xf8, 0x52, 0x25, 0x8a, 0x6d, 0x4e, 0x61, 0xb3, 0x9e, 0x94,
	0xc2, 0x16, 0x46, 0xbe, 0x14, 0xb6, 0xd8, 0x54, 0xab, 0xf2, 0xfc, 0xd5, 0x8f, 0xf3, 0xae, 0x71,
	0x76, 0xde, 0x35, 0x7e, 0x9d, 0x77, 0x8d, 0x2f, 0x17, 0xdd, 0xca, 0xd9, 0x45, 0xb7, 0xf2, 0xf3,
	0xa2, 0x5b, 0x79, 0xd7, 0x1b, 0xfa, 0x6a, 0x14, 0x1d, 0xdb, 0x1e, 0x0f, 0x9c, 0x14, 0xca, 0x49,
	0x5e, 0x20, 0x35, 0x0d, 0xa9, 0x74, 0xf2, 0x77, 0x6b, 0x4f, 0x7f, 0x4e, 0x7a, 0xc7, 0xcb, 0xc9,
	0xc3, 0xf3, 0xf8, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xde, 0x3e, 0xf8, 0x68, 0xd6, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VaultClient is the client API for Vault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VaultClient interface {
	Add(ctx context.Context, in *AddShareRequest, opts ...grpc.CallOption) (*AddShareResponse, error)
	Sync(ctx context.Context, in *SyncShareRequest, opts ...grpc.CallOption) (*SyncShareResponse, error)
	Refresh(ctx context.Context, in *RefreshShareRequest, opts ...grpc.CallOption) (*RefreshShareResponse, error)
	ReadMail(ctx context.Context, in *ReadMailRequest, opts ...grpc.CallOption) (*ReadMailResponse, error)
	SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error)
}

type vaultClient struct {
	cc grpc1.ClientConn
}

func NewVaultClient(cc grpc1.ClientConn) VaultClient {
	return &vaultClient{cc}
}

func (c *vaultClient) Add(ctx context.Context, in *AddShareRequest, opts ...grpc.CallOption) (*AddShareResponse, error) {
	out := new(AddShareResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.v1.Vault/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Sync(ctx context.Context, in *SyncShareRequest, opts ...grpc.CallOption) (*SyncShareResponse, error) {
	out := new(SyncShareResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.v1.Vault/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Refresh(ctx context.Context, in *RefreshShareRequest, opts ...grpc.CallOption) (*RefreshShareResponse, error) {
	out := new(RefreshShareResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.v1.Vault/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) ReadMail(ctx context.Context, in *ReadMailRequest, opts ...grpc.CallOption) (*ReadMailResponse, error) {
	out := new(ReadMailResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.v1.Vault/ReadMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error) {
	out := new(SendMailResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.v1.Vault/SendMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServer is the server API for Vault service.
type VaultServer interface {
	Add(context.Context, *AddShareRequest) (*AddShareResponse, error)
	Sync(context.Context, *SyncShareRequest) (*SyncShareResponse, error)
	Refresh(context.Context, *RefreshShareRequest) (*RefreshShareResponse, error)
	ReadMail(context.Context, *ReadMailRequest) (*ReadMailResponse, error)
	SendMail(context.Context, *SendMailRequest) (*SendMailResponse, error)
}

// UnimplementedVaultServer can be embedded to have forward compatible implementations.
type UnimplementedVaultServer struct {
}

func (*UnimplementedVaultServer) Add(ctx context.Context, req *AddShareRequest) (*AddShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedVaultServer) Sync(ctx context.Context, req *SyncShareRequest) (*SyncShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedVaultServer) Refresh(ctx context.Context, req *RefreshShareRequest) (*RefreshShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedVaultServer) ReadMail(ctx context.Context, req *ReadMailRequest) (*ReadMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMail not implemented")
}
func (*UnimplementedVaultServer) SendMail(ctx context.Context, req *SendMailRequest) (*SendMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}

func RegisterVaultServer(s grpc1.Server, srv VaultServer) {
	s.RegisterService(&_Vault_serviceDesc, srv)
}

func _Vault_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.v1.Vault/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Add(ctx, req.(*AddShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.v1.Vault/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Sync(ctx, req.(*SyncShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.v1.Vault/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Refresh(ctx, req.(*RefreshShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_ReadMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).ReadMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.v1.Vault/ReadMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).ReadMail(ctx, req.(*ReadMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.v1.Vault/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).SendMail(ctx, req.(*SendMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vault_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.highway.v1.Vault",
	HandlerType: (*VaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Vault_Add_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Vault_Sync_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Vault_Refresh_Handler,
		},
		{
			MethodName: "ReadMail",
			Handler:    _Vault_ReadMail_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _Vault_SendMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "highway/v1/vault.proto",
}

func (m *AddShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialResponse) > 0 {
		i -= len(m.CredentialResponse)
		copy(dAtA[i:], m.CredentialResponse)
		i = encodeVarintVault(dAtA, i, uint64(len(m.CredentialResponse)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintVault(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RefreshShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RpName) > 0 {
		i -= len(m.RpName)
		copy(dAtA[i:], m.RpName)
		i = encodeVarintVault(dAtA, i, uint64(len(m.RpName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RpId) > 0 {
		i -= len(m.RpId)
		copy(dAtA[i:], m.RpId)
		i = encodeVarintVault(dAtA, i, uint64(len(m.RpId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CredentialOptions) > 0 {
		i -= len(m.CredentialOptions)
		copy(dAtA[i:], m.CredentialOptions)
		i = encodeVarintVault(dAtA, i, uint64(len(m.CredentialOptions)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintVault(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReadMailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadMailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadMailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintVault(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendMailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintVault(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintVault(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadMailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadMailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadMailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for k := range m.Messages {
			v := m.Messages[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintVault(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintVault(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintVault(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendMailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func (m *AddShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func (m *SyncShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.CredentialResponse)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func (m *SyncShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func (m *RefreshShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func (m *RefreshShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.CredentialOptions)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.RpId)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.RpName)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func (m *ReadMailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func (m *SendMailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func (m *ReadMailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if len(m.Messages) > 0 {
		for k, v := range m.Messages {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovVault(uint64(len(k))) + 1 + len(v) + sovVault(uint64(len(v)))
			n += mapEntrySize + 1 + sovVault(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SendMailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func sovVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVault(x uint64) (n int) {
	return sovVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialOptions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadMailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadMailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadMailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadMailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadMailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadMailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Messages == nil {
				m.Messages = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVault
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthVault
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthVault
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthVault
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVault(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthVault
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Messages[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVault = fmt.Errorf("proto: unexpected end of group")
)
