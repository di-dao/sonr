syntax = "proto3";

// Package common defines commonly used types agnostic to the node role on the Sonr network.
package sonrio.motor.core.v1;
option go_package = "github.com/sonr-io/sonr/pkg/types";

// Internet Connection Type
enum Connection {
  CONNECTION_UNSPECIFIED = 0;
  // ConnectionWifi is used for WiFi connections.
  CONNECTION_WIFI = 1;

  // ConnectionEthernet is used for Ethernet connections.
  CONNECTION_ETHERNET = 2;

  // ConnectionMobile is used for mobile connections.
  CONNECTION_MOBILE = 3;

  // CONNECTION_OFFLINE
  CONNECTION_OFFLINE = 4;  // No Internet Connection
}

// Location from GeoIP and OLC information
message Location {
  // Location Latitude
  double latitude = 1;

  // Location Longitude
  double longitude = 2;

  // Location Placemark Information - Generated
  Placemark placemark = 3;

  // Last Updated Time
  int64 last_modified = 4;

  // Contains detailed placemark information.
  message Placemark {
    // The name associated with the placemark.
    string name = 1;

    // The street associated with the placemark.
    string street = 2;

    // The abbreviated country name, according to the two letter (alpha-2) [ISO
    // standard](https://www.iso.org/iso-3166-country-codes.html).
    string iso_country_code = 3;

    // The name of the country associated with the placemark.
    string country = 4;

    // The postal code associated with the placemark.
    string postal_code = 5;

    // The name of the state or province associated with the placemark.
    string administrative_area = 6;

    // Additional administrative area information for the placemark.
    string sub_administrative_area = 7;

    // The name of the city associated with the placemark.
    string locality = 8;

    // Additional city-level information for the placemark.
    string sub_locality = 9;

    // The street address associated with the placemark.
    string thoroughfare = 10;

    // Additional street address information for the placemark.
    string sub_thoroughfare = 11;
  }
}

// Shared Metadata for Messages on all Protocols
message Metadata {
  // Unix timestamp
  int64 timestamp = 1;

  // Node ID
  string node_id = 2;

  // Signature of the message
  bytes signature = 3;

  // Public Key of the message sender
  bytes public_key = 4;
}

// Standard MIME with Additional Extensions
message MIME {
  // Type of File
  Type type = 1;

  // Extension of File
  string subtype = 2;

  // Type/Subtype i.e. (image/jpeg)
  string value = 3;

  // File Content Type
  enum Type {
    // Other File Type - If cannot derive from Subtype
    TYPE_UNSPECIFIED = 0;

    // Sound, Audio Files
    TYPE_AUDIO = 1;

    // Document Files - PDF, Word, Excel, etc.
    TYPE_DOCUMENT = 2;

    // Image Files
    TYPE_IMAGE = 3;

    // Text Based Files
    TYPE_TEXT = 4;

    // Video Files
    TYPE_VIDEO = 5;

    // URL Links
    TYPE_URL = 6;

    // Crypto Files
    TYPE_CRYPTO = 7;
  }
}

// Basic Info Sent to Peers to Establish Connections
message Peer {
  string did = 1;       // User Sonr Domain
  Status status = 2;      // Peer Status
  Device device = 3;      // Peer Device Info
  bytes public_key = 4;    // Public Key of the Peer
  int64 last_modified = 6; // Last Modified Timestamp

  // Peer Info for Device
  message Device {
    string id = 1;       // Peer Device ID
    string host_name = 2; // Peer Host Name
    string os = 3;       // Peer Operating System
    string arch = 4;     // Peer Architecture
    string model = 5;    // Peers Device Model
  }

  // Peers Active Status
  enum Status {
    STATUS_UNSPECIFIED = 0; // Offline - Not Online or Not a Full Node
    STATUS_ONLINE = 1;  // Online - Full Node Available
    STATUS_AWAY = 2;    // Away - Not Online, but has a full node
    STATUS_BUSY = 3;    // Busy - Online, but busy with Transfer
  }
}
