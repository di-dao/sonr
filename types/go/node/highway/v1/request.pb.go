/// This file contains service for the Node RPC Server

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: node/highway/v1/request.proto

package highway

import (
	common "github.com/sonr-io/core/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Method for Linking
type DecideExchangeRequest_Method int32

const (
	DecideExchangeRequest_METHOD_UNSPECIFIED DecideExchangeRequest_Method = 0
	DecideExchangeRequest_METHOD_ADD         DecideExchangeRequest_Method = 1 // Add Device ID to SName on DNS Table
	DecideExchangeRequest_METHOD_REMOVE      DecideExchangeRequest_Method = 2 // Remove Device ID from SName on DNS Table
)

// Enum value maps for DecideExchangeRequest_Method.
var (
	DecideExchangeRequest_Method_name = map[int32]string{
		0: "METHOD_UNSPECIFIED",
		1: "METHOD_ADD",
		2: "METHOD_REMOVE",
	}
	DecideExchangeRequest_Method_value = map[string]int32{
		"METHOD_UNSPECIFIED": 0,
		"METHOD_ADD":         1,
		"METHOD_REMOVE":      2,
	}
)

func (x DecideExchangeRequest_Method) Enum() *DecideExchangeRequest_Method {
	p := new(DecideExchangeRequest_Method)
	*p = x
	return p
}

func (x DecideExchangeRequest_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecideExchangeRequest_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_node_highway_v1_request_proto_enumTypes[0].Descriptor()
}

func (DecideExchangeRequest_Method) Type() protoreflect.EnumType {
	return &file_node_highway_v1_request_proto_enumTypes[0]
}

func (x DecideExchangeRequest_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecideExchangeRequest_Method.Descriptor instead.
func (DecideExchangeRequest_Method) EnumDescriptor() ([]byte, []int) {
	return file_node_highway_v1_request_proto_rawDescGZIP(), []int{1, 0}
}

// -----------------------------------------------------------------------------
// Highway Node API
// -----------------------------------------------------------------------------
// (Highway) AuthenticateRequest is Message for Verifying Request (Hmac Sha256)
type ListPeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName    string `protobuf:"bytes,1,opt,name=s_name,json=sName,proto3" json:"s_name,omitempty"`          // SName combined with Device ID and Hashed
	Mnemonic string `protobuf:"bytes,2,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`                 // Mnemonic Hashed with public key for fingerprint
	DeviceId string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"` // Device ID
}

func (x *ListPeersRequest) Reset() {
	*x = ListPeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_highway_v1_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPeersRequest) ProtoMessage() {}

func (x *ListPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_highway_v1_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPeersRequest.ProtoReflect.Descriptor instead.
func (*ListPeersRequest) Descriptor() ([]byte, []int) {
	return file_node_highway_v1_request_proto_rawDescGZIP(), []int{0}
}

func (x *ListPeersRequest) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *ListPeersRequest) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *ListPeersRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// (Highway) LinkRequest handles Linked Devices on DNS Table
type DecideExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName    string                       `protobuf:"bytes,1,opt,name=s_name,json=sName,proto3" json:"s_name,omitempty"`                                         // SName combined with Device ID and Hashed
	Mnemonic string                       `protobuf:"bytes,2,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`                                                // Mnemonic Hashed with public key for fingerprint
	DeviceId string                       `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                                // Device ID
	Method   DecideExchangeRequest_Method `protobuf:"varint,4,opt,name=method,proto3,enum=node.highway.v1.DecideExchangeRequest_Method" json:"method,omitempty"` // Method for Linking
}

func (x *DecideExchangeRequest) Reset() {
	*x = DecideExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_highway_v1_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecideExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideExchangeRequest) ProtoMessage() {}

func (x *DecideExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_highway_v1_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideExchangeRequest.ProtoReflect.Descriptor instead.
func (*DecideExchangeRequest) Descriptor() ([]byte, []int) {
	return file_node_highway_v1_request_proto_rawDescGZIP(), []int{1}
}

func (x *DecideExchangeRequest) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *DecideExchangeRequest) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *DecideExchangeRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DecideExchangeRequest) GetMethod() DecideExchangeRequest_Method {
	if x != nil {
		return x.Method
	}
	return DecideExchangeRequest_METHOD_UNSPECIFIED
}

// (Client) ShareRequest is request to share supplied files/urls with a peer
type SendExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer    *common.Peer         `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`       // Peer to Share with
	Message *common.MessageItem  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Message to Share
	Items   []*common.SupplyItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`     // Supply Items to share
}

func (x *SendExchangeRequest) Reset() {
	*x = SendExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_highway_v1_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendExchangeRequest) ProtoMessage() {}

func (x *SendExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_highway_v1_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendExchangeRequest.ProtoReflect.Descriptor instead.
func (*SendExchangeRequest) Descriptor() ([]byte, []int) {
	return file_node_highway_v1_request_proto_rawDescGZIP(), []int{2}
}

func (x *SendExchangeRequest) GetPeer() *common.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *SendExchangeRequest) GetMessage() *common.MessageItem {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SendExchangeRequest) GetItems() []*common.SupplyItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// (Highway) RegisterRequest is Message for Signing Request (Hmac Sha256)
type CacheRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName       string `protobuf:"bytes,1,opt,name=s_name,json=sName,proto3" json:"s_name,omitempty"`             // SName combined with Device ID and Hashed
	Prefix      string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`                        // Mnemonic Hashed with private key for fingerprint
	Fingerprint string `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`              // Fingerprint of Public Key
	PublicKey   string `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // Public Key
}

func (x *CacheRecordRequest) Reset() {
	*x = CacheRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_highway_v1_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheRecordRequest) ProtoMessage() {}

func (x *CacheRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_highway_v1_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheRecordRequest.ProtoReflect.Descriptor instead.
func (*CacheRecordRequest) Descriptor() ([]byte, []int) {
	return file_node_highway_v1_request_proto_rawDescGZIP(), []int{3}
}

func (x *CacheRecordRequest) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *CacheRecordRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *CacheRecordRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *CacheRecordRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// (Highway) RegisterRequest is Message for Signing Request (Hmac Sha256)
type GetRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName       string `protobuf:"bytes,1,opt,name=s_name,json=sName,proto3" json:"s_name,omitempty"`             // SName combined with Device ID and Hashed
	Prefix      string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`                        // Mnemonic Hashed with private key for fingerprint
	Fingerprint string `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`              // Fingerprint of Public Key
	PublicKey   string `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // Public Key
}

func (x *GetRecordRequest) Reset() {
	*x = GetRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_highway_v1_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordRequest) ProtoMessage() {}

func (x *GetRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_highway_v1_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordRequest.ProtoReflect.Descriptor instead.
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return file_node_highway_v1_request_proto_rawDescGZIP(), []int{4}
}

func (x *GetRecordRequest) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *GetRecordRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *GetRecordRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *GetRecordRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// (Highway) RegisterRequest is Message for Signing Request (Hmac Sha256)
type StoreRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName       string `protobuf:"bytes,1,opt,name=s_name,json=sName,proto3" json:"s_name,omitempty"`             // SName combined with Device ID and Hashed
	Prefix      string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`                        // Mnemonic Hashed with private key for fingerprint
	Fingerprint string `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`              // Fingerprint of Public Key
	PublicKey   string `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // Public Key
}

func (x *StoreRecordRequest) Reset() {
	*x = StoreRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_highway_v1_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRecordRequest) ProtoMessage() {}

func (x *StoreRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_highway_v1_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRecordRequest.ProtoReflect.Descriptor instead.
func (*StoreRecordRequest) Descriptor() ([]byte, []int) {
	return file_node_highway_v1_request_proto_rawDescGZIP(), []int{5}
}

func (x *StoreRecordRequest) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *StoreRecordRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *StoreRecordRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *StoreRecordRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// (Highway) RegisterRequest is Message for Signing Request (Hmac Sha256)
type RegisterNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName       string `protobuf:"bytes,1,opt,name=s_name,json=sName,proto3" json:"s_name,omitempty"`             // SName combined with Device ID and Hashed
	Prefix      string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`                        // Mnemonic Hashed with private key for fingerprint
	Fingerprint string `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`              // Fingerprint of Public Key
	PublicKey   string `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // Public Key
}

func (x *RegisterNameRequest) Reset() {
	*x = RegisterNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_highway_v1_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNameRequest) ProtoMessage() {}

func (x *RegisterNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_highway_v1_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNameRequest.ProtoReflect.Descriptor instead.
func (*RegisterNameRequest) Descriptor() ([]byte, []int) {
	return file_node_highway_v1_request_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterNameRequest) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *RegisterNameRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *RegisterNameRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *RegisterNameRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// (Highway) RegisterRequest is Message for Signing Request (Hmac Sha256)
type VerifyNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SName       string `protobuf:"bytes,1,opt,name=s_name,json=sName,proto3" json:"s_name,omitempty"`             // SName combined with Device ID and Hashed
	Prefix      string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`                        // Mnemonic Hashed with private key for fingerprint
	Fingerprint string `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`              // Fingerprint of Public Key
	PublicKey   string `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // Public Key
}

func (x *VerifyNameRequest) Reset() {
	*x = VerifyNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_highway_v1_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyNameRequest) ProtoMessage() {}

func (x *VerifyNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_highway_v1_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyNameRequest.ProtoReflect.Descriptor instead.
func (*VerifyNameRequest) Descriptor() ([]byte, []int) {
	return file_node_highway_v1_request_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyNameRequest) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

func (x *VerifyNameRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *VerifyNameRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *VerifyNameRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

var File_node_highway_v1_request_proto protoreflect.FileDescriptor

var file_node_highway_v1_request_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31,
	0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xf3, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x64, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x22, 0x43, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x44,
	0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x84,
	0x01, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x83, 0x01,
	0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_node_highway_v1_request_proto_rawDescOnce sync.Once
	file_node_highway_v1_request_proto_rawDescData = file_node_highway_v1_request_proto_rawDesc
)

func file_node_highway_v1_request_proto_rawDescGZIP() []byte {
	file_node_highway_v1_request_proto_rawDescOnce.Do(func() {
		file_node_highway_v1_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_highway_v1_request_proto_rawDescData)
	})
	return file_node_highway_v1_request_proto_rawDescData
}

var file_node_highway_v1_request_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_node_highway_v1_request_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_node_highway_v1_request_proto_goTypes = []interface{}{
	(DecideExchangeRequest_Method)(0), // 0: node.highway.v1.DecideExchangeRequest.Method
	(*ListPeersRequest)(nil),          // 1: node.highway.v1.ListPeersRequest
	(*DecideExchangeRequest)(nil),     // 2: node.highway.v1.DecideExchangeRequest
	(*SendExchangeRequest)(nil),       // 3: node.highway.v1.SendExchangeRequest
	(*CacheRecordRequest)(nil),        // 4: node.highway.v1.CacheRecordRequest
	(*GetRecordRequest)(nil),          // 5: node.highway.v1.GetRecordRequest
	(*StoreRecordRequest)(nil),        // 6: node.highway.v1.StoreRecordRequest
	(*RegisterNameRequest)(nil),       // 7: node.highway.v1.RegisterNameRequest
	(*VerifyNameRequest)(nil),         // 8: node.highway.v1.VerifyNameRequest
	(*common.Peer)(nil),               // 9: common.v1.Peer
	(*common.MessageItem)(nil),        // 10: common.v1.MessageItem
	(*common.SupplyItem)(nil),         // 11: common.v1.SupplyItem
}
var file_node_highway_v1_request_proto_depIdxs = []int32{
	0,  // 0: node.highway.v1.DecideExchangeRequest.method:type_name -> node.highway.v1.DecideExchangeRequest.Method
	9,  // 1: node.highway.v1.SendExchangeRequest.peer:type_name -> common.v1.Peer
	10, // 2: node.highway.v1.SendExchangeRequest.message:type_name -> common.v1.MessageItem
	11, // 3: node.highway.v1.SendExchangeRequest.items:type_name -> common.v1.SupplyItem
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_node_highway_v1_request_proto_init() }
func file_node_highway_v1_request_proto_init() {
	if File_node_highway_v1_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_node_highway_v1_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_highway_v1_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecideExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_highway_v1_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_highway_v1_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_highway_v1_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_highway_v1_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_highway_v1_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_highway_v1_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_highway_v1_request_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_node_highway_v1_request_proto_goTypes,
		DependencyIndexes: file_node_highway_v1_request_proto_depIdxs,
		EnumInfos:         file_node_highway_v1_request_proto_enumTypes,
		MessageInfos:      file_node_highway_v1_request_proto_msgTypes,
	}.Build()
	File_node_highway_v1_request_proto = out.File
	file_node_highway_v1_request_proto_rawDesc = nil
	file_node_highway_v1_request_proto_goTypes = nil
	file_node_highway_v1_request_proto_depIdxs = nil
}
