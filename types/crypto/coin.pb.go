// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/crypto/coin.proto

package crypto

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CoinType is the BIP-0044 coin type for each supported coin.
type CoinType int32

const (
	// Bitcoins coin type is 0
	CoinType_CoinType_BITCOIN CoinType = 0
	// Testnet coin type is 1
	CoinType_CoinType_TESTNET CoinType = 1
	// Litecoin coin type is 2
	CoinType_CoinType_LITECOIN CoinType = 2
	// Dogecoin coin type is 3
	CoinType_CoinType_DOGE CoinType = 3
	// Ethereum coin type is 60
	CoinType_CoinType_ETHEREUM CoinType = 4
	// Sonr coin type is 703
	CoinType_CoinType_SONR CoinType = 5
	// Cosmos coin type is 118
	CoinType_CoinType_COSMOS CoinType = 6
	// Filecoin coin type is 461
	CoinType_CoinType_FILECOIN CoinType = 7
	// Handshake coin type is 5353
	CoinType_CoinType_HNS CoinType = 8
	// Solana coin type is 501
	CoinType_CoinType_SOLANA CoinType = 9
	// Ripple coin type is 144
	CoinType_CoinType_XRP CoinType = 10
)

var CoinType_name = map[int32]string{
	0:  "CoinType_BITCOIN",
	1:  "CoinType_TESTNET",
	2:  "CoinType_LITECOIN",
	3:  "CoinType_DOGE",
	4:  "CoinType_ETHEREUM",
	5:  "CoinType_SONR",
	6:  "CoinType_COSMOS",
	7:  "CoinType_FILECOIN",
	8:  "CoinType_HNS",
	9:  "CoinType_SOLANA",
	10: "CoinType_XRP",
}

var CoinType_value = map[string]int32{
	"CoinType_BITCOIN":  0,
	"CoinType_TESTNET":  1,
	"CoinType_LITECOIN": 2,
	"CoinType_DOGE":     3,
	"CoinType_ETHEREUM": 4,
	"CoinType_SONR":     5,
	"CoinType_COSMOS":   6,
	"CoinType_FILECOIN": 7,
	"CoinType_HNS":      8,
	"CoinType_SOLANA":   9,
	"CoinType_XRP":      10,
}

func (x CoinType) String() string {
	return proto.EnumName(CoinType_name, int32(x))
}

func (CoinType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13d3edf1068b796d, []int{0}
}

type AccountData struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Algo      string `protobuf:"bytes,2,opt,name=algo,proto3" json:"algo,omitempty"`
	PublicKey []byte `protobuf:"bytes,3,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (m *AccountData) Reset()         { *m = AccountData{} }
func (m *AccountData) String() string { return proto.CompactTextString(m) }
func (*AccountData) ProtoMessage()    {}
func (*AccountData) Descriptor() ([]byte, []int) {
	return fileDescriptor_13d3edf1068b796d, []int{0}
}
func (m *AccountData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountData.Merge(m, src)
}
func (m *AccountData) XXX_Size() int {
	return m.Size()
}
func (m *AccountData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountData.DiscardUnknown(m)
}

var xxx_messageInfo_AccountData proto.InternalMessageInfo

func (m *AccountData) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccountData) GetAlgo() string {
	if m != nil {
		return m.Algo
	}
	return ""
}

func (m *AccountData) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func init() {
	proto.RegisterEnum("core.crypto.CoinType", CoinType_name, CoinType_value)
	proto.RegisterType((*AccountData)(nil), "core.crypto.AccountData")
}

func init() { proto.RegisterFile("core/crypto/coin.proto", fileDescriptor_13d3edf1068b796d) }

var fileDescriptor_13d3edf1068b796d = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd1, 0xcb, 0x4a, 0xf3, 0x40,
	0x1c, 0x05, 0xf0, 0x4c, 0xdb, 0xaf, 0x97, 0x7f, 0xfb, 0xe1, 0x74, 0xbc, 0x90, 0x85, 0x84, 0x22,
	0x2e, 0x8a, 0x60, 0xb3, 0x70, 0x2f, 0xf4, 0x32, 0xda, 0x60, 0x9b, 0x48, 0x32, 0x82, 0xba, 0x91,
	0x74, 0x1a, 0x6a, 0xa0, 0x66, 0x42, 0x92, 0x2e, 0xf2, 0x16, 0x3e, 0x96, 0xcb, 0x2e, 0x5d, 0x4a,
	0xf3, 0x00, 0xbe, 0x82, 0x34, 0xb5, 0x91, 0xd9, 0xfd, 0xe7, 0xc7, 0x39, 0xcc, 0xe2, 0xc0, 0x09,
	0x17, 0x91, 0xa7, 0xf3, 0x28, 0x0d, 0x13, 0xa1, 0x73, 0xe1, 0x07, 0xbd, 0x30, 0x12, 0x89, 0x20,
	0xcd, 0xad, 0xf7, 0x76, 0x7e, 0xf6, 0x04, 0xcd, 0x3e, 0xe7, 0x62, 0x15, 0x24, 0x23, 0x37, 0x71,
	0x89, 0x0a, 0x35, 0x77, 0x3e, 0x8f, 0xbc, 0x38, 0x56, 0x51, 0x07, 0x75, 0x1b, 0xf6, 0xfe, 0x49,
	0x08, 0x54, 0xdc, 0xe5, 0x42, 0xa8, 0xa5, 0x9c, 0xf3, 0x9b, 0x9c, 0x42, 0x23, 0x5c, 0xcd, 0x96,
	0x3e, 0xbf, 0xf3, 0x52, 0xb5, 0xdc, 0x41, 0xdd, 0x96, 0xfd, 0x07, 0x17, 0xdf, 0x08, 0xea, 0x43,
	0xe1, 0x07, 0x2c, 0x0d, 0x3d, 0x72, 0x04, 0x78, 0x7f, 0xbf, 0x0c, 0x0c, 0x36, 0xb4, 0x0c, 0x13,
	0x2b, 0x92, 0x32, 0xea, 0x30, 0x93, 0x32, 0x8c, 0xc8, 0x31, 0xb4, 0x0b, 0x9d, 0x18, 0x8c, 0xe6,
	0xe1, 0x12, 0x69, 0xc3, 0xff, 0x82, 0x47, 0xd6, 0x2d, 0xc5, 0x65, 0x29, 0x49, 0xd9, 0x98, 0xda,
	0xf4, 0x61, 0x8a, 0x2b, 0x52, 0xd2, 0xb1, 0x4c, 0x1b, 0xff, 0x23, 0x87, 0x70, 0x50, 0xd0, 0xd0,
	0x72, 0xa6, 0x96, 0x83, 0xab, 0x52, 0xfd, 0xc6, 0x98, 0xec, 0x3e, 0xaa, 0x11, 0x0c, 0xad, 0x82,
	0xc7, 0xa6, 0x83, 0xeb, 0x52, 0xdb, 0xb1, 0x26, 0x7d, 0xb3, 0x8f, 0x1b, 0x52, 0xec, 0xd1, 0xbe,
	0xc7, 0x30, 0xb8, 0xfe, 0xd8, 0x68, 0x68, 0xbd, 0xd1, 0xd0, 0xd7, 0x46, 0x43, 0xef, 0x99, 0xa6,
	0xac, 0x33, 0x4d, 0xf9, 0xcc, 0x34, 0xe5, 0xf9, 0x7c, 0xe1, 0x27, 0xaf, 0xab, 0x59, 0x8f, 0x8b,
	0x37, 0x3d, 0x16, 0x41, 0x74, 0xe9, 0x6f, 0x27, 0x89, 0x3c, 0x3d, 0x49, 0x43, 0x2f, 0xfe, 0x1d,
	0x69, 0x56, 0xcd, 0x07, 0xba, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0x78, 0x29, 0x1a, 0x89, 0xba,
	0x01, 0x00, 0x00,
}

func (m *AccountData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintCoin(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Algo) > 0 {
		i -= len(m.Algo)
		copy(dAtA[i:], m.Algo)
		i = encodeVarintCoin(dAtA, i, uint64(len(m.Algo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCoin(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCoin(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	l = len(m.Algo)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}

func sovCoin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoin(x uint64) (n int) {
	return sovCoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Algo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoin = fmt.Errorf("proto: unexpected end of group")
)
