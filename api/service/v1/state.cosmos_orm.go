// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package servicev1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type ProfileEntityTable interface {
	Insert(ctx context.Context, profileEntity *ProfileEntity) error
	Update(ctx context.Context, profileEntity *ProfileEntity) error
	Save(ctx context.Context, profileEntity *ProfileEntity) error
	Delete(ctx context.Context, profileEntity *ProfileEntity) error
	Has(ctx context.Context, id string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id string) (*ProfileEntity, error)
	List(ctx context.Context, prefixKey ProfileEntityIndexKey, opts ...ormlist.Option) (ProfileEntityIterator, error)
	ListRange(ctx context.Context, from, to ProfileEntityIndexKey, opts ...ormlist.Option) (ProfileEntityIterator, error)
	DeleteBy(ctx context.Context, prefixKey ProfileEntityIndexKey) error
	DeleteRange(ctx context.Context, from, to ProfileEntityIndexKey) error

	doNotImplement()
}

type ProfileEntityIterator struct {
	ormtable.Iterator
}

func (i ProfileEntityIterator) Value() (*ProfileEntity, error) {
	var profileEntity ProfileEntity
	err := i.UnmarshalMessage(&profileEntity)
	return &profileEntity, err
}

type ProfileEntityIndexKey interface {
	id() uint32
	values() []interface{}
	profileEntityIndexKey()
}

// primary key starting index..
type ProfileEntityPrimaryKey = ProfileEntityIdIndexKey

type ProfileEntityIdIndexKey struct {
	vs []interface{}
}

func (x ProfileEntityIdIndexKey) id() uint32             { return 0 }
func (x ProfileEntityIdIndexKey) values() []interface{}  { return x.vs }
func (x ProfileEntityIdIndexKey) profileEntityIndexKey() {}

func (this ProfileEntityIdIndexKey) WithId(id string) ProfileEntityIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type profileEntityTable struct {
	table ormtable.Table
}

func (this profileEntityTable) Insert(ctx context.Context, profileEntity *ProfileEntity) error {
	return this.table.Insert(ctx, profileEntity)
}

func (this profileEntityTable) Update(ctx context.Context, profileEntity *ProfileEntity) error {
	return this.table.Update(ctx, profileEntity)
}

func (this profileEntityTable) Save(ctx context.Context, profileEntity *ProfileEntity) error {
	return this.table.Save(ctx, profileEntity)
}

func (this profileEntityTable) Delete(ctx context.Context, profileEntity *ProfileEntity) error {
	return this.table.Delete(ctx, profileEntity)
}

func (this profileEntityTable) Has(ctx context.Context, id string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this profileEntityTable) Get(ctx context.Context, id string) (*ProfileEntity, error) {
	var profileEntity ProfileEntity
	found, err := this.table.PrimaryKey().Get(ctx, &profileEntity, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &profileEntity, nil
}

func (this profileEntityTable) List(ctx context.Context, prefixKey ProfileEntityIndexKey, opts ...ormlist.Option) (ProfileEntityIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ProfileEntityIterator{it}, err
}

func (this profileEntityTable) ListRange(ctx context.Context, from, to ProfileEntityIndexKey, opts ...ormlist.Option) (ProfileEntityIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ProfileEntityIterator{it}, err
}

func (this profileEntityTable) DeleteBy(ctx context.Context, prefixKey ProfileEntityIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this profileEntityTable) DeleteRange(ctx context.Context, from, to ProfileEntityIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this profileEntityTable) doNotImplement() {}

var _ ProfileEntityTable = profileEntityTable{}

func NewProfileEntityTable(db ormtable.Schema) (ProfileEntityTable, error) {
	table := db.GetTable(&ProfileEntity{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ProfileEntity{}).ProtoReflect().Descriptor().FullName()))
	}
	return profileEntityTable{table}, nil
}

type ServiceRecordTable interface {
	Insert(ctx context.Context, serviceRecord *ServiceRecord) error
	InsertReturningSequence(ctx context.Context, serviceRecord *ServiceRecord) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, serviceRecord *ServiceRecord) error
	Save(ctx context.Context, serviceRecord *ServiceRecord) error
	Delete(ctx context.Context, serviceRecord *ServiceRecord) error
	Has(ctx context.Context, sequence uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, sequence uint64) (*ServiceRecord, error)
	HasByOrigin(ctx context.Context, origin string) (found bool, err error)
	// GetByOrigin returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOrigin(ctx context.Context, origin string) (*ServiceRecord, error)
	List(ctx context.Context, prefixKey ServiceRecordIndexKey, opts ...ormlist.Option) (ServiceRecordIterator, error)
	ListRange(ctx context.Context, from, to ServiceRecordIndexKey, opts ...ormlist.Option) (ServiceRecordIterator, error)
	DeleteBy(ctx context.Context, prefixKey ServiceRecordIndexKey) error
	DeleteRange(ctx context.Context, from, to ServiceRecordIndexKey) error

	doNotImplement()
}

type ServiceRecordIterator struct {
	ormtable.Iterator
}

func (i ServiceRecordIterator) Value() (*ServiceRecord, error) {
	var serviceRecord ServiceRecord
	err := i.UnmarshalMessage(&serviceRecord)
	return &serviceRecord, err
}

type ServiceRecordIndexKey interface {
	id() uint32
	values() []interface{}
	serviceRecordIndexKey()
}

// primary key starting index..
type ServiceRecordPrimaryKey = ServiceRecordSequenceIndexKey

type ServiceRecordSequenceIndexKey struct {
	vs []interface{}
}

func (x ServiceRecordSequenceIndexKey) id() uint32             { return 0 }
func (x ServiceRecordSequenceIndexKey) values() []interface{}  { return x.vs }
func (x ServiceRecordSequenceIndexKey) serviceRecordIndexKey() {}

func (this ServiceRecordSequenceIndexKey) WithSequence(sequence uint64) ServiceRecordSequenceIndexKey {
	this.vs = []interface{}{sequence}
	return this
}

type ServiceRecordOriginIndexKey struct {
	vs []interface{}
}

func (x ServiceRecordOriginIndexKey) id() uint32             { return 1 }
func (x ServiceRecordOriginIndexKey) values() []interface{}  { return x.vs }
func (x ServiceRecordOriginIndexKey) serviceRecordIndexKey() {}

func (this ServiceRecordOriginIndexKey) WithOrigin(origin string) ServiceRecordOriginIndexKey {
	this.vs = []interface{}{origin}
	return this
}

type serviceRecordTable struct {
	table ormtable.AutoIncrementTable
}

func (this serviceRecordTable) Insert(ctx context.Context, serviceRecord *ServiceRecord) error {
	return this.table.Insert(ctx, serviceRecord)
}

func (this serviceRecordTable) Update(ctx context.Context, serviceRecord *ServiceRecord) error {
	return this.table.Update(ctx, serviceRecord)
}

func (this serviceRecordTable) Save(ctx context.Context, serviceRecord *ServiceRecord) error {
	return this.table.Save(ctx, serviceRecord)
}

func (this serviceRecordTable) Delete(ctx context.Context, serviceRecord *ServiceRecord) error {
	return this.table.Delete(ctx, serviceRecord)
}

func (this serviceRecordTable) InsertReturningSequence(ctx context.Context, serviceRecord *ServiceRecord) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, serviceRecord)
}

func (this serviceRecordTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this serviceRecordTable) Has(ctx context.Context, sequence uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, sequence)
}

func (this serviceRecordTable) Get(ctx context.Context, sequence uint64) (*ServiceRecord, error) {
	var serviceRecord ServiceRecord
	found, err := this.table.PrimaryKey().Get(ctx, &serviceRecord, sequence)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &serviceRecord, nil
}

func (this serviceRecordTable) HasByOrigin(ctx context.Context, origin string) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		origin,
	)
}

func (this serviceRecordTable) GetByOrigin(ctx context.Context, origin string) (*ServiceRecord, error) {
	var serviceRecord ServiceRecord
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &serviceRecord,
		origin,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &serviceRecord, nil
}

func (this serviceRecordTable) List(ctx context.Context, prefixKey ServiceRecordIndexKey, opts ...ormlist.Option) (ServiceRecordIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ServiceRecordIterator{it}, err
}

func (this serviceRecordTable) ListRange(ctx context.Context, from, to ServiceRecordIndexKey, opts ...ormlist.Option) (ServiceRecordIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ServiceRecordIterator{it}, err
}

func (this serviceRecordTable) DeleteBy(ctx context.Context, prefixKey ServiceRecordIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this serviceRecordTable) DeleteRange(ctx context.Context, from, to ServiceRecordIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this serviceRecordTable) doNotImplement() {}

var _ ServiceRecordTable = serviceRecordTable{}

func NewServiceRecordTable(db ormtable.Schema) (ServiceRecordTable, error) {
	table := db.GetTable(&ServiceRecord{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ServiceRecord{}).ProtoReflect().Descriptor().FullName()))
	}
	return serviceRecordTable{table.(ormtable.AutoIncrementTable)}, nil
}

type WebCredentialTable interface {
	Insert(ctx context.Context, webCredential *WebCredential) error
	InsertReturningSequence(ctx context.Context, webCredential *WebCredential) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, webCredential *WebCredential) error
	Save(ctx context.Context, webCredential *WebCredential) error
	Delete(ctx context.Context, webCredential *WebCredential) error
	Has(ctx context.Context, sequence uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, sequence uint64) (*WebCredential, error)
	List(ctx context.Context, prefixKey WebCredentialIndexKey, opts ...ormlist.Option) (WebCredentialIterator, error)
	ListRange(ctx context.Context, from, to WebCredentialIndexKey, opts ...ormlist.Option) (WebCredentialIterator, error)
	DeleteBy(ctx context.Context, prefixKey WebCredentialIndexKey) error
	DeleteRange(ctx context.Context, from, to WebCredentialIndexKey) error

	doNotImplement()
}

type WebCredentialIterator struct {
	ormtable.Iterator
}

func (i WebCredentialIterator) Value() (*WebCredential, error) {
	var webCredential WebCredential
	err := i.UnmarshalMessage(&webCredential)
	return &webCredential, err
}

type WebCredentialIndexKey interface {
	id() uint32
	values() []interface{}
	webCredentialIndexKey()
}

// primary key starting index..
type WebCredentialPrimaryKey = WebCredentialSequenceIndexKey

type WebCredentialSequenceIndexKey struct {
	vs []interface{}
}

func (x WebCredentialSequenceIndexKey) id() uint32             { return 0 }
func (x WebCredentialSequenceIndexKey) values() []interface{}  { return x.vs }
func (x WebCredentialSequenceIndexKey) webCredentialIndexKey() {}

func (this WebCredentialSequenceIndexKey) WithSequence(sequence uint64) WebCredentialSequenceIndexKey {
	this.vs = []interface{}{sequence}
	return this
}

type WebCredentialOriginHandleIndexKey struct {
	vs []interface{}
}

func (x WebCredentialOriginHandleIndexKey) id() uint32             { return 1 }
func (x WebCredentialOriginHandleIndexKey) values() []interface{}  { return x.vs }
func (x WebCredentialOriginHandleIndexKey) webCredentialIndexKey() {}

func (this WebCredentialOriginHandleIndexKey) WithOrigin(origin string) WebCredentialOriginHandleIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this WebCredentialOriginHandleIndexKey) WithOriginHandle(origin string, handle string) WebCredentialOriginHandleIndexKey {
	this.vs = []interface{}{origin, handle}
	return this
}

type webCredentialTable struct {
	table ormtable.AutoIncrementTable
}

func (this webCredentialTable) Insert(ctx context.Context, webCredential *WebCredential) error {
	return this.table.Insert(ctx, webCredential)
}

func (this webCredentialTable) Update(ctx context.Context, webCredential *WebCredential) error {
	return this.table.Update(ctx, webCredential)
}

func (this webCredentialTable) Save(ctx context.Context, webCredential *WebCredential) error {
	return this.table.Save(ctx, webCredential)
}

func (this webCredentialTable) Delete(ctx context.Context, webCredential *WebCredential) error {
	return this.table.Delete(ctx, webCredential)
}

func (this webCredentialTable) InsertReturningSequence(ctx context.Context, webCredential *WebCredential) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, webCredential)
}

func (this webCredentialTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this webCredentialTable) Has(ctx context.Context, sequence uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, sequence)
}

func (this webCredentialTable) Get(ctx context.Context, sequence uint64) (*WebCredential, error) {
	var webCredential WebCredential
	found, err := this.table.PrimaryKey().Get(ctx, &webCredential, sequence)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &webCredential, nil
}

func (this webCredentialTable) List(ctx context.Context, prefixKey WebCredentialIndexKey, opts ...ormlist.Option) (WebCredentialIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return WebCredentialIterator{it}, err
}

func (this webCredentialTable) ListRange(ctx context.Context, from, to WebCredentialIndexKey, opts ...ormlist.Option) (WebCredentialIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return WebCredentialIterator{it}, err
}

func (this webCredentialTable) DeleteBy(ctx context.Context, prefixKey WebCredentialIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this webCredentialTable) DeleteRange(ctx context.Context, from, to WebCredentialIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this webCredentialTable) doNotImplement() {}

var _ WebCredentialTable = webCredentialTable{}

func NewWebCredentialTable(db ormtable.Schema) (WebCredentialTable, error) {
	table := db.GetTable(&WebCredential{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&WebCredential{}).ProtoReflect().Descriptor().FullName()))
	}
	return webCredentialTable{table.(ormtable.AutoIncrementTable)}, nil
}

type StateStore interface {
	ProfileEntityTable() ProfileEntityTable
	ServiceRecordTable() ServiceRecordTable
	WebCredentialTable() WebCredentialTable

	doNotImplement()
}

type stateStore struct {
	profileEntity ProfileEntityTable
	serviceRecord ServiceRecordTable
	webCredential WebCredentialTable
}

func (x stateStore) ProfileEntityTable() ProfileEntityTable {
	return x.profileEntity
}

func (x stateStore) ServiceRecordTable() ServiceRecordTable {
	return x.serviceRecord
}

func (x stateStore) WebCredentialTable() WebCredentialTable {
	return x.webCredential
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	profileEntityTable, err := NewProfileEntityTable(db)
	if err != nil {
		return nil, err
	}

	serviceRecordTable, err := NewServiceRecordTable(db)
	if err != nil {
		return nil, err
	}

	webCredentialTable, err := NewWebCredentialTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		profileEntityTable,
		serviceRecordTable,
		webCredentialTable,
	}, nil
}
